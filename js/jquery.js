/*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!(function (a, b) {
    "object" == typeof module && "object" == typeof module.exports
        ? (module.exports = a.document
              ? b(a, !0)
              : function (a) {
                    if (!a.document) throw new Error("jQuery requires a window with a document");
                    return b(a);
                })
        : b(a);
})("undefined" != typeof window ? window : this, function (a, b) {
    var c = [],
        d = c.slice,
        e = c.concat,
        f = c.push,
        g = c.indexOf,
        h = {},
        i = h.toString,
        j = h.hasOwnProperty,
        k = {},
        l = "1.11.1",
        m = function (a, b) {
            return new m.fn.init(a, b);
        },
        n = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        o = /^-ms-/,
        p = /-([\da-z])/gi,
        q = function (a, b) {
            return b.toUpperCase();
        };
    (m.fn = m.prototype = {
        jquery: l,
        constructor: m,
        selector: "",
        length: 0,
        toArray: function () {
            return d.call(this);
        },
        get: function (a) {
            return null != a ? (0 > a ? this[a + this.length] : this[a]) : d.call(this);
        },
        pushStack: function (a) {
            var b = m.merge(this.constructor(), a);
            return (b.prevObject = this), (b.context = this.context), b;
        },
        each: function (a, b) {
            return m.each(this, a, b);
        },
        map: function (a) {
            return this.pushStack(
                m.map(this, function (b, c) {
                    return a.call(b, c, b);
                })
            );
        },
        slice: function () {
            return this.pushStack(d.apply(this, arguments));
        },
        first: function () {
            return this.eq(0);
        },
        last: function () {
            return this.eq(-1);
        },
        eq: function (a) {
            var b = this.length,
                c = +a + (0 > a ? b : 0);
            return this.pushStack(c >= 0 && b > c ? [this[c]] : []);
        },
        end: function () {
            return this.prevObject || this.constructor(null);
        },
        push: f,
        sort: c.sort,
        splice: c.splice,
    }),
        (m.extend = m.fn.extend = function () {
            var a,
                b,
                c,
                d,
                e,
                f,
                g = arguments[0] || {},
                h = 1,
                i = arguments.length,
                j = !1;
            for ("boolean" == typeof g && ((j = g), (g = arguments[h] || {}), h++), "object" == typeof g || m.isFunction(g) || (g = {}), h === i && ((g = this), h--); i > h; h++)
                if (null != (e = arguments[h]))
                    for (d in e)
                        (a = g[d]),
                            (c = e[d]),
                            g !== c &&
                                (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? ((b = !1), (f = a && m.isArray(a) ? a : [])) : (f = a && m.isPlainObject(a) ? a : {}), (g[d] = m.extend(j, f, c))) : void 0 !== c && (g[d] = c));
            return g;
        }),
        m.extend({
            expando: "jQuery" + (l + Math.random()).replace(/\D/g, ""),
            isReady: !0,
            error: function (a) {
                throw new Error(a);
            },
            noop: function () {},
            isFunction: function (a) {
                return "function" === m.type(a);
            },
            isArray:
                Array.isArray ||
                function (a) {
                    return "array" === m.type(a);
                },
            isWindow: function (a) {
                return null != a && a == a.window;
            },
            isNumeric: function (a) {
                return !m.isArray(a) && a - parseFloat(a) >= 0;
            },
            isEmptyObject: function (a) {
                var b;
                for (b in a) return !1;
                return !0;
            },
            isPlainObject: function (a) {
                var b;
                if (!a || "object" !== m.type(a) || a.nodeType || m.isWindow(a)) return !1;
                try {
                    if (a.constructor && !j.call(a, "constructor") && !j.call(a.constructor.prototype, "isPrototypeOf")) return !1;
                } catch (c) {
                    return !1;
                }
                if (k.ownLast) for (b in a) return j.call(a, b);
                for (b in a);
                return void 0 === b || j.call(a, b);
            },
            type: function (a) {
                return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? h[i.call(a)] || "object" : typeof a;
            },
            globalEval: function (b) {
                b &&
                    m.trim(b) &&
                    (
                        a.execScript ||
                        function (b) {
                            a.eval.call(a, b);
                        }
                    )(b);
            },
            camelCase: function (a) {
                return a.replace(o, "ms-").replace(p, q);
            },
            nodeName: function (a, b) {
                return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
            },
            each: function (a, b, c) {
                var d,
                    e = 0,
                    f = a.length,
                    g = r(a);
                if (c) {
                    if (g) {
                        for (; f > e; e++) if (((d = b.apply(a[e], c)), d === !1)) break;
                    } else for (e in a) if (((d = b.apply(a[e], c)), d === !1)) break;
                } else if (g) {
                    for (; f > e; e++) if (((d = b.call(a[e], e, a[e])), d === !1)) break;
                } else for (e in a) if (((d = b.call(a[e], e, a[e])), d === !1)) break;
                return a;
            },
            trim: function (a) {
                return null == a ? "" : (a + "").replace(n, "");
            },
            makeArray: function (a, b) {
                var c = b || [];
                return null != a && (r(Object(a)) ? m.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c;
            },
            inArray: function (a, b, c) {
                var d;
                if (b) {
                    if (g) return g.call(b, a, c);
                    for (d = b.length, c = c ? (0 > c ? Math.max(0, d + c) : c) : 0; d > c; c++) if (c in b && b[c] === a) return c;
                }
                return -1;
            },
            merge: function (a, b) {
                var c = +b.length,
                    d = 0,
                    e = a.length;
                while (c > d) a[e++] = b[d++];
                if (c !== c) while (void 0 !== b[d]) a[e++] = b[d++];
                return (a.length = e), a;
            },
            grep: function (a, b, c) {
                for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) (d = !b(a[f], f)), d !== h && e.push(a[f]);
                return e;
            },
            map: function (a, b, c) {
                var d,
                    f = 0,
                    g = a.length,
                    h = r(a),
                    i = [];
                if (h) for (; g > f; f++) (d = b(a[f], f, c)), null != d && i.push(d);
                else for (f in a) (d = b(a[f], f, c)), null != d && i.push(d);
                return e.apply([], i);
            },
            guid: 1,
            proxy: function (a, b) {
                var c, e, f;
                return (
                    "string" == typeof b && ((f = a[b]), (b = a), (a = f)),
                    m.isFunction(a)
                        ? ((c = d.call(arguments, 2)),
                          (e = function () {
                              return a.apply(b || this, c.concat(d.call(arguments)));
                          }),
                          (e.guid = a.guid = a.guid || m.guid++),
                          e)
                        : void 0
                );
            },
            now: function () {
                return +new Date();
            },
            support: k,
        }),
        m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (a, b) {
            h["[object " + b + "]"] = b.toLowerCase();
        });
    function r(a) {
        var b = a.length,
            c = m.type(a);
        return "function" === c || m.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || ("number" == typeof b && b > 0 && b - 1 in a);
    }
    var s = (function (a) {
        var b,
            c,
            d,
            e,
            f,
            g,
            h,
            i,
            j,
            k,
            l,
            m,
            n,
            o,
            p,
            q,
            r,
            s,
            t,
            u = "sizzle" + -new Date(),
            v = a.document,
            w = 0,
            x = 0,
            y = gb(),
            z = gb(),
            A = gb(),
            B = function (a, b) {
                return a === b && (l = !0), 0;
            },
            C = "undefined",
            D = 1 << 31,
            E = {}.hasOwnProperty,
            F = [],
            G = F.pop,
            H = F.push,
            I = F.push,
            J = F.slice,
            K =
                F.indexOf ||
                function (a) {
                    for (var b = 0, c = this.length; c > b; b++) if (this[b] === a) return b;
                    return -1;
                },
            L = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
            M = "[\\x20\\t\\r\\n\\f]",
            N = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
            O = N.replace("w", "w#"),
            P = "\\[" + M + "*(" + N + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + O + "))|)" + M + "*\\]",
            Q = ":(" + N + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + P + ")*)|.*)\\)|)",
            R = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"),
            S = new RegExp("^" + M + "*," + M + "*"),
            T = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"),
            U = new RegExp("=" + M + "*([^\\]'\"]*?)" + M + "*\\]", "g"),
            V = new RegExp(Q),
            W = new RegExp("^" + O + "$"),
            X = {
                ID: new RegExp("^#(" + N + ")"),
                CLASS: new RegExp("^\\.(" + N + ")"),
                TAG: new RegExp("^(" + N.replace("w", "w*") + ")"),
                ATTR: new RegExp("^" + P),
                PSEUDO: new RegExp("^" + Q),
                CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"),
                bool: new RegExp("^(?:" + L + ")$", "i"),
                needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i"),
            },
            Y = /^(?:input|select|textarea|button)$/i,
            Z = /^h\d$/i,
            $ = /^[^{]+\{\s*\[native \w/,
            _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
            ab = /[+~]/,
            bb = /'|\\/g,
            cb = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"),
            db = function (a, b, c) {
                var d = "0x" + b - 65536;
                return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode((d >> 10) | 55296, (1023 & d) | 56320);
            };
        try {
            I.apply((F = J.call(v.childNodes)), v.childNodes), F[v.childNodes.length].nodeType;
        } catch (eb) {
            I = {
                apply: F.length
                    ? function (a, b) {
                          H.apply(a, J.call(b));
                      }
                    : function (a, b) {
                          var c = a.length,
                              d = 0;
                          while ((a[c++] = b[d++]));
                          a.length = c - 1;
                      },
            };
        }
        function fb(a, b, d, e) {
            var f, h, j, k, l, o, r, s, w, x;
            if (((b ? b.ownerDocument || b : v) !== n && m(b), (b = b || n), (d = d || []), !a || "string" != typeof a)) return d;
            if (1 !== (k = b.nodeType) && 9 !== k) return [];
            if (p && !e) {
                if ((f = _.exec(a)))
                    if ((j = f[1])) {
                        if (9 === k) {
                            if (((h = b.getElementById(j)), !h || !h.parentNode)) return d;
                            if (h.id === j) return d.push(h), d;
                        } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;
                    } else {
                        if (f[2]) return I.apply(d, b.getElementsByTagName(a)), d;
                        if ((j = f[3]) && c.getElementsByClassName && b.getElementsByClassName) return I.apply(d, b.getElementsByClassName(j)), d;
                    }
                if (c.qsa && (!q || !q.test(a))) {
                    if (((s = r = u), (w = b), (x = 9 === k && a), 1 === k && "object" !== b.nodeName.toLowerCase())) {
                        (o = g(a)), (r = b.getAttribute("id")) ? (s = r.replace(bb, "\\$&")) : b.setAttribute("id", s), (s = "[id='" + s + "'] "), (l = o.length);
                        while (l--) o[l] = s + qb(o[l]);
                        (w = (ab.test(a) && ob(b.parentNode)) || b), (x = o.join(","));
                    }
                    if (x)
                        try {
                            return I.apply(d, w.querySelectorAll(x)), d;
                        } catch (y) {
                        } finally {
                            r || b.removeAttribute("id");
                        }
                }
            }
            return i(a.replace(R, "$1"), b, d, e);
        }
        function gb() {
            var a = [];
            function b(c, e) {
                return a.push(c + " ") > d.cacheLength && delete b[a.shift()], (b[c + " "] = e);
            }
            return b;
        }
        function hb(a) {
            return (a[u] = !0), a;
        }
        function ib(a) {
            var b = n.createElement("div");
            try {
                return !!a(b);
            } catch (c) {
                return !1;
            } finally {
                b.parentNode && b.parentNode.removeChild(b), (b = null);
            }
        }
        function jb(a, b) {
            var c = a.split("|"),
                e = a.length;
            while (e--) d.attrHandle[c[e]] = b;
        }
        function kb(a, b) {
            var c = b && a,
                d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || D) - (~a.sourceIndex || D);
            if (d) return d;
            if (c) while ((c = c.nextSibling)) if (c === b) return -1;
            return a ? 1 : -1;
        }
        function lb(a) {
            return function (b) {
                var c = b.nodeName.toLowerCase();
                return "input" === c && b.type === a;
            };
        }
        function mb(a) {
            return function (b) {
                var c = b.nodeName.toLowerCase();
                return ("input" === c || "button" === c) && b.type === a;
            };
        }
        function nb(a) {
            return hb(function (b) {
                return (
                    (b = +b),
                    hb(function (c, d) {
                        var e,
                            f = a([], c.length, b),
                            g = f.length;
                        while (g--) c[(e = f[g])] && (c[e] = !(d[e] = c[e]));
                    })
                );
            });
        }
        function ob(a) {
            return a && typeof a.getElementsByTagName !== C && a;
        }
        (c = fb.support = {}),
            (f = fb.isXML = function (a) {
                var b = a && (a.ownerDocument || a).documentElement;
                return b ? "HTML" !== b.nodeName : !1;
            }),
            (m = fb.setDocument = function (a) {
                var b,
                    e = a ? a.ownerDocument || a : v,
                    g = e.defaultView;
                return e !== n && 9 === e.nodeType && e.documentElement
                    ? ((n = e),
                      (o = e.documentElement),
                      (p = !f(e)),
                      g &&
                          g !== g.top &&
                          (g.addEventListener
                              ? g.addEventListener(
                                    "unload",
                                    function () {
                                        m();
                                    },
                                    !1
                                )
                              : g.attachEvent &&
                                g.attachEvent("onunload", function () {
                                    m();
                                })),
                      (c.attributes = ib(function (a) {
                          return (a.className = "i"), !a.getAttribute("className");
                      })),
                      (c.getElementsByTagName = ib(function (a) {
                          return a.appendChild(e.createComment("")), !a.getElementsByTagName("*").length;
                      })),
                      (c.getElementsByClassName =
                          $.test(e.getElementsByClassName) &&
                          ib(function (a) {
                              return (a.innerHTML = "<div class='a'></div><div class='a i'></div>"), (a.firstChild.className = "i"), 2 === a.getElementsByClassName("i").length;
                          })),
                      (c.getById = ib(function (a) {
                          return (o.appendChild(a).id = u), !e.getElementsByName || !e.getElementsByName(u).length;
                      })),
                      c.getById
                          ? ((d.find.ID = function (a, b) {
                                if (typeof b.getElementById !== C && p) {
                                    var c = b.getElementById(a);
                                    return c && c.parentNode ? [c] : [];
                                }
                            }),
                            (d.filter.ID = function (a) {
                                var b = a.replace(cb, db);
                                return function (a) {
                                    return a.getAttribute("id") === b;
                                };
                            }))
                          : (delete d.find.ID,
                            (d.filter.ID = function (a) {
                                var b = a.replace(cb, db);
                                return function (a) {
                                    var c = typeof a.getAttributeNode !== C && a.getAttributeNode("id");
                                    return c && c.value === b;
                                };
                            })),
                      (d.find.TAG = c.getElementsByTagName
                          ? function (a, b) {
                                return typeof b.getElementsByTagName !== C ? b.getElementsByTagName(a) : void 0;
                            }
                          : function (a, b) {
                                var c,
                                    d = [],
                                    e = 0,
                                    f = b.getElementsByTagName(a);
                                if ("*" === a) {
                                    while ((c = f[e++])) 1 === c.nodeType && d.push(c);
                                    return d;
                                }
                                return f;
                            }),
                      (d.find.CLASS =
                          c.getElementsByClassName &&
                          function (a, b) {
                              return typeof b.getElementsByClassName !== C && p ? b.getElementsByClassName(a) : void 0;
                          }),
                      (r = []),
                      (q = []),
                      (c.qsa = $.test(e.querySelectorAll)) &&
                          (ib(function (a) {
                              (a.innerHTML = "<select msallowclip=''><option selected=''></option></select>"),
                                  a.querySelectorAll("[msallowclip^='']").length && q.push("[*^$]=" + M + "*(?:''|\"\")"),
                                  a.querySelectorAll("[selected]").length || q.push("\\[" + M + "*(?:value|" + L + ")"),
                                  a.querySelectorAll(":checked").length || q.push(":checked");
                          }),
                          ib(function (a) {
                              var b = e.createElement("input");
                              b.setAttribute("type", "hidden"),
                                  a.appendChild(b).setAttribute("name", "D"),
                                  a.querySelectorAll("[name=d]").length && q.push("name" + M + "*[*^$|!~]?="),
                                  a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"),
                                  a.querySelectorAll("*,:x"),
                                  q.push(",.*:");
                          })),
                      (c.matchesSelector = $.test((s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector))) &&
                          ib(function (a) {
                              (c.disconnectedMatch = s.call(a, "div")), s.call(a, "[s!='']:x"), r.push("!=", Q);
                          }),
                      (q = q.length && new RegExp(q.join("|"))),
                      (r = r.length && new RegExp(r.join("|"))),
                      (b = $.test(o.compareDocumentPosition)),
                      (t =
                          b || $.test(o.contains)
                              ? function (a, b) {
                                    var c = 9 === a.nodeType ? a.documentElement : a,
                                        d = b && b.parentNode;
                                    return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
                                }
                              : function (a, b) {
                                    if (b) while ((b = b.parentNode)) if (b === a) return !0;
                                    return !1;
                                }),
                      (B = b
                          ? function (a, b) {
                                if (a === b) return (l = !0), 0;
                                var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
                                return d
                                    ? d
                                    : ((d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1),
                                      1 & d || (!c.sortDetached && b.compareDocumentPosition(a) === d)
                                          ? a === e || (a.ownerDocument === v && t(v, a))
                                              ? -1
                                              : b === e || (b.ownerDocument === v && t(v, b))
                                              ? 1
                                              : k
                                              ? K.call(k, a) - K.call(k, b)
                                              : 0
                                          : 4 & d
                                          ? -1
                                          : 1);
                            }
                          : function (a, b) {
                                if (a === b) return (l = !0), 0;
                                var c,
                                    d = 0,
                                    f = a.parentNode,
                                    g = b.parentNode,
                                    h = [a],
                                    i = [b];
                                if (!f || !g) return a === e ? -1 : b === e ? 1 : f ? -1 : g ? 1 : k ? K.call(k, a) - K.call(k, b) : 0;
                                if (f === g) return kb(a, b);
                                c = a;
                                while ((c = c.parentNode)) h.unshift(c);
                                c = b;
                                while ((c = c.parentNode)) i.unshift(c);
                                while (h[d] === i[d]) d++;
                                return d ? kb(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;
                            }),
                      e)
                    : n;
            }),
            (fb.matches = function (a, b) {
                return fb(a, null, null, b);
            }),
            (fb.matchesSelector = function (a, b) {
                if (((a.ownerDocument || a) !== n && m(a), (b = b.replace(U, "='$1']")), !(!c.matchesSelector || !p || (r && r.test(b)) || (q && q.test(b)))))
                    try {
                        var d = s.call(a, b);
                        if (d || c.disconnectedMatch || (a.document && 11 !== a.document.nodeType)) return d;
                    } catch (e) {}
                return fb(b, n, null, [a]).length > 0;
            }),
            (fb.contains = function (a, b) {
                return (a.ownerDocument || a) !== n && m(a), t(a, b);
            }),
            (fb.attr = function (a, b) {
                (a.ownerDocument || a) !== n && m(a);
                var e = d.attrHandle[b.toLowerCase()],
                    f = e && E.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;
                return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
            }),
            (fb.error = function (a) {
                throw new Error("Syntax error, unrecognized expression: " + a);
            }),
            (fb.uniqueSort = function (a) {
                var b,
                    d = [],
                    e = 0,
                    f = 0;
                if (((l = !c.detectDuplicates), (k = !c.sortStable && a.slice(0)), a.sort(B), l)) {
                    while ((b = a[f++])) b === a[f] && (e = d.push(f));
                    while (e--) a.splice(d[e], 1);
                }
                return (k = null), a;
            }),
            (e = fb.getText = function (a) {
                var b,
                    c = "",
                    d = 0,
                    f = a.nodeType;
                if (f) {
                    if (1 === f || 9 === f || 11 === f) {
                        if ("string" == typeof a.textContent) return a.textContent;
                        for (a = a.firstChild; a; a = a.nextSibling) c += e(a);
                    } else if (3 === f || 4 === f) return a.nodeValue;
                } else while ((b = a[d++])) c += e(b);
                return c;
            }),
            (d = fb.selectors = {
                cacheLength: 50,
                createPseudo: hb,
                match: X,
                attrHandle: {},
                find: {},
                relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } },
                preFilter: {
                    ATTR: function (a) {
                        return (a[1] = a[1].replace(cb, db)), (a[3] = (a[3] || a[4] || a[5] || "").replace(cb, db)), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
                    },
                    CHILD: function (a) {
                        return (
                            (a[1] = a[1].toLowerCase()),
                            "nth" === a[1].slice(0, 3) ? (a[3] || fb.error(a[0]), (a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3]))), (a[5] = +(a[7] + a[8] || "odd" === a[3]))) : a[3] && fb.error(a[0]),
                            a
                        );
                    },
                    PSEUDO: function (a) {
                        var b,
                            c = !a[6] && a[2];
                        return X.CHILD.test(a[0])
                            ? null
                            : (a[3] ? (a[2] = a[4] || a[5] || "") : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && ((a[0] = a[0].slice(0, b)), (a[2] = c.slice(0, b))), a.slice(0, 3));
                    },
                },
                filter: {
                    TAG: function (a) {
                        var b = a.replace(cb, db).toLowerCase();
                        return "*" === a
                            ? function () {
                                  return !0;
                              }
                            : function (a) {
                                  return a.nodeName && a.nodeName.toLowerCase() === b;
                              };
                    },
                    CLASS: function (a) {
                        var b = y[a + " "];
                        return (
                            b ||
                            ((b = new RegExp("(^|" + M + ")" + a + "(" + M + "|$)")) &&
                                y(a, function (a) {
                                    return b.test(("string" == typeof a.className && a.className) || (typeof a.getAttribute !== C && a.getAttribute("class")) || "");
                                }))
                        );
                    },
                    ATTR: function (a, b, c) {
                        return function (d) {
                            var e = fb.attr(d, a);
                            return null == e
                                ? "!=" === b
                                : b
                                ? ((e += ""),
                                  "=" === b
                                      ? e === c
                                      : "!=" === b
                                      ? e !== c
                                      : "^=" === b
                                      ? c && 0 === e.indexOf(c)
                                      : "*=" === b
                                      ? c && e.indexOf(c) > -1
                                      : "$=" === b
                                      ? c && e.slice(-c.length) === c
                                      : "~=" === b
                                      ? (" " + e + " ").indexOf(c) > -1
                                      : "|=" === b
                                      ? e === c || e.slice(0, c.length + 1) === c + "-"
                                      : !1)
                                : !0;
                        };
                    },
                    CHILD: function (a, b, c, d, e) {
                        var f = "nth" !== a.slice(0, 3),
                            g = "last" !== a.slice(-4),
                            h = "of-type" === b;
                        return 1 === d && 0 === e
                            ? function (a) {
                                  return !!a.parentNode;
                              }
                            : function (b, c, i) {
                                  var j,
                                      k,
                                      l,
                                      m,
                                      n,
                                      o,
                                      p = f !== g ? "nextSibling" : "previousSibling",
                                      q = b.parentNode,
                                      r = h && b.nodeName.toLowerCase(),
                                      s = !i && !h;
                                  if (q) {
                                      if (f) {
                                          while (p) {
                                              l = b;
                                              while ((l = l[p])) if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;
                                              o = p = "only" === a && !o && "nextSibling";
                                          }
                                          return !0;
                                      }
                                      if (((o = [g ? q.firstChild : q.lastChild]), g && s)) {
                                          (k = q[u] || (q[u] = {})), (j = k[a] || []), (n = j[0] === w && j[1]), (m = j[0] === w && j[2]), (l = n && q.childNodes[n]);
                                          while ((l = (++n && l && l[p]) || (m = n = 0) || o.pop()))
                                              if (1 === l.nodeType && ++m && l === b) {
                                                  k[a] = [w, n, m];
                                                  break;
                                              }
                                      } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];
                                      else while ((l = (++n && l && l[p]) || (m = n = 0) || o.pop())) if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;
                                      return (m -= e), m === d || (m % d === 0 && m / d >= 0);
                                  }
                              };
                    },
                    PSEUDO: function (a, b) {
                        var c,
                            e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || fb.error("unsupported pseudo: " + a);
                        return e[u]
                            ? e(b)
                            : e.length > 1
                            ? ((c = [a, a, "", b]),
                              d.setFilters.hasOwnProperty(a.toLowerCase())
                                  ? hb(function (a, c) {
                                        var d,
                                            f = e(a, b),
                                            g = f.length;
                                        while (g--) (d = K.call(a, f[g])), (a[d] = !(c[d] = f[g]));
                                    })
                                  : function (a) {
                                        return e(a, 0, c);
                                    })
                            : e;
                    },
                },
                pseudos: {
                    not: hb(function (a) {
                        var b = [],
                            c = [],
                            d = h(a.replace(R, "$1"));
                        return d[u]
                            ? hb(function (a, b, c, e) {
                                  var f,
                                      g = d(a, null, e, []),
                                      h = a.length;
                                  while (h--) (f = g[h]) && (a[h] = !(b[h] = f));
                              })
                            : function (a, e, f) {
                                  return (b[0] = a), d(b, null, f, c), !c.pop();
                              };
                    }),
                    has: hb(function (a) {
                        return function (b) {
                            return fb(a, b).length > 0;
                        };
                    }),
                    contains: hb(function (a) {
                        return function (b) {
                            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
                        };
                    }),
                    lang: hb(function (a) {
                        return (
                            W.test(a || "") || fb.error("unsupported lang: " + a),
                            (a = a.replace(cb, db).toLowerCase()),
                            function (b) {
                                var c;
                                do if ((c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang"))) return (c = c.toLowerCase()), c === a || 0 === c.indexOf(a + "-");
                                while ((b = b.parentNode) && 1 === b.nodeType);
                                return !1;
                            }
                        );
                    }),
                    target: function (b) {
                        var c = a.location && a.location.hash;
                        return c && c.slice(1) === b.id;
                    },
                    root: function (a) {
                        return a === o;
                    },
                    focus: function (a) {
                        return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
                    },
                    enabled: function (a) {
                        return a.disabled === !1;
                    },
                    disabled: function (a) {
                        return a.disabled === !0;
                    },
                    checked: function (a) {
                        var b = a.nodeName.toLowerCase();
                        return ("input" === b && !!a.checked) || ("option" === b && !!a.selected);
                    },
                    selected: function (a) {
                        return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
                    },
                    empty: function (a) {
                        for (a = a.firstChild; a; a = a.nextSibling) if (a.nodeType < 6) return !1;
                        return !0;
                    },
                    parent: function (a) {
                        return !d.pseudos.empty(a);
                    },
                    header: function (a) {
                        return Z.test(a.nodeName);
                    },
                    input: function (a) {
                        return Y.test(a.nodeName);
                    },
                    button: function (a) {
                        var b = a.nodeName.toLowerCase();
                        return ("input" === b && "button" === a.type) || "button" === b;
                    },
                    text: function (a) {
                        var b;
                        return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
                    },
                    first: nb(function () {
                        return [0];
                    }),
                    last: nb(function (a, b) {
                        return [b - 1];
                    }),
                    eq: nb(function (a, b, c) {
                        return [0 > c ? c + b : c];
                    }),
                    even: nb(function (a, b) {
                        for (var c = 0; b > c; c += 2) a.push(c);
                        return a;
                    }),
                    odd: nb(function (a, b) {
                        for (var c = 1; b > c; c += 2) a.push(c);
                        return a;
                    }),
                    lt: nb(function (a, b, c) {
                        for (var d = 0 > c ? c + b : c; --d >= 0; ) a.push(d);
                        return a;
                    }),
                    gt: nb(function (a, b, c) {
                        for (var d = 0 > c ? c + b : c; ++d < b; ) a.push(d);
                        return a;
                    }),
                },
            }),
            (d.pseudos.nth = d.pseudos.eq);
        for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) d.pseudos[b] = lb(b);
        for (b in { submit: !0, reset: !0 }) d.pseudos[b] = mb(b);
        function pb() {}
        (pb.prototype = d.filters = d.pseudos),
            (d.setFilters = new pb()),
            (g = fb.tokenize = function (a, b) {
                var c,
                    e,
                    f,
                    g,
                    h,
                    i,
                    j,
                    k = z[a + " "];
                if (k) return b ? 0 : k.slice(0);
                (h = a), (i = []), (j = d.preFilter);
                while (h) {
                    (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push((f = []))), (c = !1), (e = T.exec(h)) && ((c = e.shift()), f.push({ value: c, type: e[0].replace(R, " ") }), (h = h.slice(c.length)));
                    for (g in d.filter) !(e = X[g].exec(h)) || (j[g] && !(e = j[g](e))) || ((c = e.shift()), f.push({ value: c, type: g, matches: e }), (h = h.slice(c.length)));
                    if (!c) break;
                }
                return b ? h.length : h ? fb.error(a) : z(a, i).slice(0);
            });
        function qb(a) {
            for (var b = 0, c = a.length, d = ""; c > b; b++) d += a[b].value;
            return d;
        }
        function rb(a, b, c) {
            var d = b.dir,
                e = c && "parentNode" === d,
                f = x++;
            return b.first
                ? function (b, c, f) {
                      while ((b = b[d])) if (1 === b.nodeType || e) return a(b, c, f);
                  }
                : function (b, c, g) {
                      var h,
                          i,
                          j = [w, f];
                      if (g) {
                          while ((b = b[d])) if ((1 === b.nodeType || e) && a(b, c, g)) return !0;
                      } else
                          while ((b = b[d]))
                              if (1 === b.nodeType || e) {
                                  if (((i = b[u] || (b[u] = {})), (h = i[d]) && h[0] === w && h[1] === f)) return (j[2] = h[2]);
                                  if (((i[d] = j), (j[2] = a(b, c, g)))) return !0;
                              }
                  };
        }
        function sb(a) {
            return a.length > 1
                ? function (b, c, d) {
                      var e = a.length;
                      while (e--) if (!a[e](b, c, d)) return !1;
                      return !0;
                  }
                : a[0];
        }
        function tb(a, b, c) {
            for (var d = 0, e = b.length; e > d; d++) fb(a, b[d], c);
            return c;
        }
        function ub(a, b, c, d, e) {
            for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
            return g;
        }
        function vb(a, b, c, d, e, f) {
            return (
                d && !d[u] && (d = vb(d)),
                e && !e[u] && (e = vb(e, f)),
                hb(function (f, g, h, i) {
                    var j,
                        k,
                        l,
                        m = [],
                        n = [],
                        o = g.length,
                        p = f || tb(b || "*", h.nodeType ? [h] : h, []),
                        q = !a || (!f && b) ? p : ub(p, m, a, h, i),
                        r = c ? (e || (f ? a : o || d) ? [] : g) : q;
                    if ((c && c(q, r, h, i), d)) {
                        (j = ub(r, n)), d(j, [], h, i), (k = j.length);
                        while (k--) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
                    }
                    if (f) {
                        if (e || a) {
                            if (e) {
                                (j = []), (k = r.length);
                                while (k--) (l = r[k]) && j.push((q[k] = l));
                                e(null, (r = []), j, i);
                            }
                            k = r.length;
                            while (k--) (l = r[k]) && (j = e ? K.call(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
                        }
                    } else (r = ub(r === g ? r.splice(o, r.length) : r)), e ? e(null, g, r, i) : I.apply(g, r);
                })
            );
        }
        function wb(a) {
            for (
                var b,
                    c,
                    e,
                    f = a.length,
                    g = d.relative[a[0].type],
                    h = g || d.relative[" "],
                    i = g ? 1 : 0,
                    k = rb(
                        function (a) {
                            return a === b;
                        },
                        h,
                        !0
                    ),
                    l = rb(
                        function (a) {
                            return K.call(b, a) > -1;
                        },
                        h,
                        !0
                    ),
                    m = [
                        function (a, c, d) {
                            return (!g && (d || c !== j)) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
                        },
                    ];
                f > i;
                i++
            )
                if ((c = d.relative[a[i].type])) m = [rb(sb(m), c)];
                else {
                    if (((c = d.filter[a[i].type].apply(null, a[i].matches)), c[u])) {
                        for (e = ++i; f > e; e++) if (d.relative[a[e].type]) break;
                        return vb(i > 1 && sb(m), i > 1 && qb(a.slice(0, i - 1).concat({ value: " " === a[i - 2].type ? "*" : "" })).replace(R, "$1"), c, e > i && wb(a.slice(i, e)), f > e && wb((a = a.slice(e))), f > e && qb(a));
                    }
                    m.push(c);
                }
            return sb(m);
        }
        function xb(a, b) {
            var c = b.length > 0,
                e = a.length > 0,
                f = function (f, g, h, i, k) {
                    var l,
                        m,
                        o,
                        p = 0,
                        q = "0",
                        r = f && [],
                        s = [],
                        t = j,
                        u = f || (e && d.find.TAG("*", k)),
                        v = (w += null == t ? 1 : Math.random() || 0.1),
                        x = u.length;
                    for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
                        if (e && l) {
                            m = 0;
                            while ((o = a[m++]))
                                if (o(l, g, h)) {
                                    i.push(l);
                                    break;
                                }
                            k && (w = v);
                        }
                        c && ((l = !o && l) && p--, f && r.push(l));
                    }
                    if (((p += q), c && q !== p)) {
                        m = 0;
                        while ((o = b[m++])) o(r, s, g, h);
                        if (f) {
                            if (p > 0) while (q--) r[q] || s[q] || (s[q] = G.call(i));
                            s = ub(s);
                        }
                        I.apply(i, s), k && !f && s.length > 0 && p + b.length > 1 && fb.uniqueSort(i);
                    }
                    return k && ((w = v), (j = t)), r;
                };
            return c ? hb(f) : f;
        }
        return (
            (h = fb.compile = function (a, b) {
                var c,
                    d = [],
                    e = [],
                    f = A[a + " "];
                if (!f) {
                    b || (b = g(a)), (c = b.length);
                    while (c--) (f = wb(b[c])), f[u] ? d.push(f) : e.push(f);
                    (f = A(a, xb(e, d))), (f.selector = a);
                }
                return f;
            }),
            (i = fb.select = function (a, b, e, f) {
                var i,
                    j,
                    k,
                    l,
                    m,
                    n = "function" == typeof a && a,
                    o = !f && g((a = n.selector || a));
                if (((e = e || []), 1 === o.length)) {
                    if (((j = o[0] = o[0].slice(0)), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type])) {
                        if (((b = (d.find.ID(k.matches[0].replace(cb, db), b) || [])[0]), !b)) return e;
                        n && (b = b.parentNode), (a = a.slice(j.shift().value.length));
                    }
                    i = X.needsContext.test(a) ? 0 : j.length;
                    while (i--) {
                        if (((k = j[i]), d.relative[(l = k.type)])) break;
                        if ((m = d.find[l]) && (f = m(k.matches[0].replace(cb, db), (ab.test(j[0].type) && ob(b.parentNode)) || b))) {
                            if ((j.splice(i, 1), (a = f.length && qb(j)), !a)) return I.apply(e, f), e;
                            break;
                        }
                    }
                }
                return (n || h(a, o))(f, b, !p, e, (ab.test(a) && ob(b.parentNode)) || b), e;
            }),
            (c.sortStable = u.split("").sort(B).join("") === u),
            (c.detectDuplicates = !!l),
            m(),
            (c.sortDetached = ib(function (a) {
                return 1 & a.compareDocumentPosition(n.createElement("div"));
            })),
            ib(function (a) {
                return (a.innerHTML = "<a href='#'></a>"), "#" === a.firstChild.getAttribute("href");
            }) ||
                jb("type|href|height|width", function (a, b, c) {
                    return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
                }),
            (c.attributes &&
                ib(function (a) {
                    return (a.innerHTML = "<input/>"), a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
                })) ||
                jb("value", function (a, b, c) {
                    return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;
                }),
            ib(function (a) {
                return null == a.getAttribute("disabled");
            }) ||
                jb(L, function (a, b, c) {
                    var d;
                    return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
                }),
            fb
        );
    })(a);
    (m.find = s), (m.expr = s.selectors), (m.expr[":"] = m.expr.pseudos), (m.unique = s.uniqueSort), (m.text = s.getText), (m.isXMLDoc = s.isXML), (m.contains = s.contains);
    var t = m.expr.match.needsContext,
        u = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
        v = /^.[^:#\[\.,]*$/;
    function w(a, b, c) {
        if (m.isFunction(b))
            return m.grep(a, function (a, d) {
                return !!b.call(a, d, a) !== c;
            });
        if (b.nodeType)
            return m.grep(a, function (a) {
                return (a === b) !== c;
            });
        if ("string" == typeof b) {
            if (v.test(b)) return m.filter(b, a, c);
            b = m.filter(b, a);
        }
        return m.grep(a, function (a) {
            return m.inArray(a, b) >= 0 !== c;
        });
    }
    (m.filter = function (a, b, c) {
        var d = b[0];
        return (
            c && (a = ":not(" + a + ")"),
            1 === b.length && 1 === d.nodeType
                ? m.find.matchesSelector(d, a)
                    ? [d]
                    : []
                : m.find.matches(
                      a,
                      m.grep(b, function (a) {
                          return 1 === a.nodeType;
                      })
                  )
        );
    }),
        m.fn.extend({
            find: function (a) {
                var b,
                    c = [],
                    d = this,
                    e = d.length;
                if ("string" != typeof a)
                    return this.pushStack(
                        m(a).filter(function () {
                            for (b = 0; e > b; b++) if (m.contains(d[b], this)) return !0;
                        })
                    );
                for (b = 0; e > b; b++) m.find(a, d[b], c);
                return (c = this.pushStack(e > 1 ? m.unique(c) : c)), (c.selector = this.selector ? this.selector + " " + a : a), c;
            },
            filter: function (a) {
                return this.pushStack(w(this, a || [], !1));
            },
            not: function (a) {
                return this.pushStack(w(this, a || [], !0));
            },
            is: function (a) {
                return !!w(this, "string" == typeof a && t.test(a) ? m(a) : a || [], !1).length;
            },
        });
    var x,
        y = a.document,
        z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
        A = (m.fn.init = function (a, b) {
            var c, d;
            if (!a) return this;
            if ("string" == typeof a) {
                if (((c = "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3 ? [null, a, null] : z.exec(a)), !c || (!c[1] && b))) return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);
                if (c[1]) {
                    if (((b = b instanceof m ? b[0] : b), m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), u.test(c[1]) && m.isPlainObject(b)))
                        for (c in b) m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
                    return this;
                }
                if (((d = y.getElementById(c[2])), d && d.parentNode)) {
                    if (d.id !== c[2]) return x.find(a);
                    (this.length = 1), (this[0] = d);
                }
                return (this.context = y), (this.selector = a), this;
            }
            return a.nodeType
                ? ((this.context = this[0] = a), (this.length = 1), this)
                : m.isFunction(a)
                ? "undefined" != typeof x.ready
                    ? x.ready(a)
                    : a(m)
                : (void 0 !== a.selector && ((this.selector = a.selector), (this.context = a.context)), m.makeArray(a, this));
        });
    (A.prototype = m.fn), (x = m(y));
    var B = /^(?:parents|prev(?:Until|All))/,
        C = { children: !0, contents: !0, next: !0, prev: !0 };
    m.extend({
        dir: function (a, b, c) {
            var d = [],
                e = a[b];
            while (e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c))) 1 === e.nodeType && d.push(e), (e = e[b]);
            return d;
        },
        sibling: function (a, b) {
            for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);
            return c;
        },
    }),
        m.fn.extend({
            has: function (a) {
                var b,
                    c = m(a, this),
                    d = c.length;
                return this.filter(function () {
                    for (b = 0; d > b; b++) if (m.contains(this, c[b])) return !0;
                });
            },
            closest: function (a, b) {
                for (var c, d = 0, e = this.length, f = [], g = t.test(a) || "string" != typeof a ? m(a, b || this.context) : 0; e > d; d++)
                    for (c = this[d]; c && c !== b; c = c.parentNode)
                        if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {
                            f.push(c);
                            break;
                        }
                return this.pushStack(f.length > 1 ? m.unique(f) : f);
            },
            index: function (a) {
                return a ? ("string" == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this)) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            },
            add: function (a, b) {
                return this.pushStack(m.unique(m.merge(this.get(), m(a, b))));
            },
            addBack: function (a) {
                return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
            },
        });
    function D(a, b) {
        do a = a[b];
        while (a && 1 !== a.nodeType);
        return a;
    }
    m.each(
        {
            parent: function (a) {
                var b = a.parentNode;
                return b && 11 !== b.nodeType ? b : null;
            },
            parents: function (a) {
                return m.dir(a, "parentNode");
            },
            parentsUntil: function (a, b, c) {
                return m.dir(a, "parentNode", c);
            },
            next: function (a) {
                return D(a, "nextSibling");
            },
            prev: function (a) {
                return D(a, "previousSibling");
            },
            nextAll: function (a) {
                return m.dir(a, "nextSibling");
            },
            prevAll: function (a) {
                return m.dir(a, "previousSibling");
            },
            nextUntil: function (a, b, c) {
                return m.dir(a, "nextSibling", c);
            },
            prevUntil: function (a, b, c) {
                return m.dir(a, "previousSibling", c);
            },
            siblings: function (a) {
                return m.sibling((a.parentNode || {}).firstChild, a);
            },
            children: function (a) {
                return m.sibling(a.firstChild);
            },
            contents: function (a) {
                return m.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes);
            },
        },
        function (a, b) {
            m.fn[a] = function (c, d) {
                var e = m.map(this, b, c);
                return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = m.filter(d, e)), this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), this.pushStack(e);
            };
        }
    );
    var E = /\S+/g,
        F = {};
    function G(a) {
        var b = (F[a] = {});
        return (
            m.each(a.match(E) || [], function (a, c) {
                b[c] = !0;
            }),
            b
        );
    }
    (m.Callbacks = function (a) {
        a = "string" == typeof a ? F[a] || G(a) : m.extend({}, a);
        var b,
            c,
            d,
            e,
            f,
            g,
            h = [],
            i = !a.once && [],
            j = function (l) {
                for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++)
                    if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
                        c = !1;
                        break;
                    }
                (b = !1), h && (i ? i.length && j(i.shift()) : c ? (h = []) : k.disable());
            },
            k = {
                add: function () {
                    if (h) {
                        var d = h.length;
                        !(function f(b) {
                            m.each(b, function (b, c) {
                                var d = m.type(c);
                                "function" === d ? (a.unique && k.has(c)) || h.push(c) : c && c.length && "string" !== d && f(c);
                            });
                        })(arguments),
                            b ? (e = h.length) : c && ((g = d), j(c));
                    }
                    return this;
                },
                remove: function () {
                    return (
                        h &&
                            m.each(arguments, function (a, c) {
                                var d;
                                while ((d = m.inArray(c, h, d)) > -1) h.splice(d, 1), b && (e >= d && e--, f >= d && f--);
                            }),
                        this
                    );
                },
                has: function (a) {
                    return a ? m.inArray(a, h) > -1 : !(!h || !h.length);
                },
                empty: function () {
                    return (h = []), (e = 0), this;
                },
                disable: function () {
                    return (h = i = c = void 0), this;
                },
                disabled: function () {
                    return !h;
                },
                lock: function () {
                    return (i = void 0), c || k.disable(), this;
                },
                locked: function () {
                    return !i;
                },
                fireWith: function (a, c) {
                    return !h || (d && !i) || ((c = c || []), (c = [a, c.slice ? c.slice() : c]), b ? i.push(c) : j(c)), this;
                },
                fire: function () {
                    return k.fireWith(this, arguments), this;
                },
                fired: function () {
                    return !!d;
                },
            };
        return k;
    }),
        m.extend({
            Deferred: function (a) {
                var b = [
                        ["resolve", "done", m.Callbacks("once memory"), "resolved"],
                        ["reject", "fail", m.Callbacks("once memory"), "rejected"],
                        ["notify", "progress", m.Callbacks("memory")],
                    ],
                    c = "pending",
                    d = {
                        state: function () {
                            return c;
                        },
                        always: function () {
                            return e.done(arguments).fail(arguments), this;
                        },
                        then: function () {
                            var a = arguments;
                            return m
                                .Deferred(function (c) {
                                    m.each(b, function (b, f) {
                                        var g = m.isFunction(a[b]) && a[b];
                                        e[f[1]](function () {
                                            var a = g && g.apply(this, arguments);
                                            a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments);
                                        });
                                    }),
                                        (a = null);
                                })
                                .promise();
                        },
                        promise: function (a) {
                            return null != a ? m.extend(a, d) : d;
                        },
                    },
                    e = {};
                return (
                    (d.pipe = d.then),
                    m.each(b, function (a, f) {
                        var g = f[2],
                            h = f[3];
                        (d[f[1]] = g.add),
                            h &&
                                g.add(
                                    function () {
                                        c = h;
                                    },
                                    b[1 ^ a][2].disable,
                                    b[2][2].lock
                                ),
                            (e[f[0]] = function () {
                                return e[f[0] + "With"](this === e ? d : this, arguments), this;
                            }),
                            (e[f[0] + "With"] = g.fireWith);
                    }),
                    d.promise(e),
                    a && a.call(e, e),
                    e
                );
            },
            when: function (a) {
                var b = 0,
                    c = d.call(arguments),
                    e = c.length,
                    f = 1 !== e || (a && m.isFunction(a.promise)) ? e : 0,
                    g = 1 === f ? a : m.Deferred(),
                    h = function (a, b, c) {
                        return function (e) {
                            (b[a] = this), (c[a] = arguments.length > 1 ? d.call(arguments) : e), c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
                        };
                    },
                    i,
                    j,
                    k;
                if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
                return f || g.resolveWith(k, c), g.promise();
            },
        });
    var H;
    (m.fn.ready = function (a) {
        return m.ready.promise().done(a), this;
    }),
        m.extend({
            isReady: !1,
            readyWait: 1,
            holdReady: function (a) {
                a ? m.readyWait++ : m.ready(!0);
            },
            ready: function (a) {
                if (a === !0 ? !--m.readyWait : !m.isReady) {
                    if (!y.body) return setTimeout(m.ready);
                    (m.isReady = !0), (a !== !0 && --m.readyWait > 0) || (H.resolveWith(y, [m]), m.fn.triggerHandler && (m(y).triggerHandler("ready"), m(y).off("ready")));
                }
            },
        });
    function I() {
        y.addEventListener ? (y.removeEventListener("DOMContentLoaded", J, !1), a.removeEventListener("load", J, !1)) : (y.detachEvent("onreadystatechange", J), a.detachEvent("onload", J));
    }
    function J() {
        (y.addEventListener || "load" === event.type || "complete" === y.readyState) && (I(), m.ready());
    }
    m.ready.promise = function (b) {
        if (!H)
            if (((H = m.Deferred()), "complete" === y.readyState)) setTimeout(m.ready);
            else if (y.addEventListener) y.addEventListener("DOMContentLoaded", J, !1), a.addEventListener("load", J, !1);
            else {
                y.attachEvent("onreadystatechange", J), a.attachEvent("onload", J);
                var c = !1;
                try {
                    c = null == a.frameElement && y.documentElement;
                } catch (d) {}
                c &&
                    c.doScroll &&
                    !(function e() {
                        if (!m.isReady) {
                            try {
                                c.doScroll("left");
                            } catch (a) {
                                return setTimeout(e, 50);
                            }
                            I(), m.ready();
                        }
                    })();
            }
        return H.promise(b);
    };
    var K = "undefined",
        L;
    for (L in m(k)) break;
    (k.ownLast = "0" !== L),
        (k.inlineBlockNeedsLayout = !1),
        m(function () {
            var a, b, c, d;
            (c = y.getElementsByTagName("body")[0]),
                c &&
                    c.style &&
                    ((b = y.createElement("div")),
                    (d = y.createElement("div")),
                    (d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"),
                    c.appendChild(d).appendChild(b),
                    typeof b.style.zoom !== K && ((b.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1"), (k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth), a && (c.style.zoom = 1)),
                    c.removeChild(d));
        }),
        (function () {
            var a = y.createElement("div");
            if (null == k.deleteExpando) {
                k.deleteExpando = !0;
                try {
                    delete a.test;
                } catch (b) {
                    k.deleteExpando = !1;
                }
            }
            a = null;
        })(),
        (m.acceptData = function (a) {
            var b = m.noData[(a.nodeName + " ").toLowerCase()],
                c = +a.nodeType || 1;
            return 1 !== c && 9 !== c ? !1 : !b || (b !== !0 && a.getAttribute("classid") === b);
        });
    var M = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        N = /([A-Z])/g;
    function O(a, b, c) {
        if (void 0 === c && 1 === a.nodeType) {
            var d = "data-" + b.replace(N, "-$1").toLowerCase();
            if (((c = a.getAttribute(d)), "string" == typeof c)) {
                try {
                    c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : M.test(c) ? m.parseJSON(c) : c;
                } catch (e) {}
                m.data(a, b, c);
            } else c = void 0;
        }
        return c;
    }
    function P(a) {
        var b;
        for (b in a) if (("data" !== b || !m.isEmptyObject(a[b])) && "toJSON" !== b) return !1;
        return !0;
    }
    function Q(a, b, d, e) {
        if (m.acceptData(a)) {
            var f,
                g,
                h = m.expando,
                i = a.nodeType,
                j = i ? m.cache : a,
                k = i ? a[h] : a[h] && h;
            if ((k && j[k] && (e || j[k].data)) || void 0 !== d || "string" != typeof b)
                return (
                    k || (k = i ? (a[h] = c.pop() || m.guid++) : h),
                    j[k] || (j[k] = i ? {} : { toJSON: m.noop }),
                    ("object" == typeof b || "function" == typeof b) && (e ? (j[k] = m.extend(j[k], b)) : (j[k].data = m.extend(j[k].data, b))),
                    (g = j[k]),
                    e || (g.data || (g.data = {}), (g = g.data)),
                    void 0 !== d && (g[m.camelCase(b)] = d),
                    "string" == typeof b ? ((f = g[b]), null == f && (f = g[m.camelCase(b)])) : (f = g),
                    f
                );
        }
    }
    function R(a, b, c) {
        if (m.acceptData(a)) {
            var d,
                e,
                f = a.nodeType,
                g = f ? m.cache : a,
                h = f ? a[m.expando] : m.expando;
            if (g[h]) {
                if (b && (d = c ? g[h] : g[h].data)) {
                    m.isArray(b) ? (b = b.concat(m.map(b, m.camelCase))) : b in d ? (b = [b]) : ((b = m.camelCase(b)), (b = b in d ? [b] : b.split(" "))), (e = b.length);
                    while (e--) delete d[b[e]];
                    if (c ? !P(d) : !m.isEmptyObject(d)) return;
                }
                (c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([a], !0) : k.deleteExpando || g != g.window ? delete g[h] : (g[h] = null));
            }
        }
    }
    m.extend({
        cache: {},
        noData: { "applet ": !0, "embed ": !0, "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" },
        hasData: function (a) {
            return (a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando]), !!a && !P(a);
        },
        data: function (a, b, c) {
            return Q(a, b, c);
        },
        removeData: function (a, b) {
            return R(a, b);
        },
        _data: function (a, b, c) {
            return Q(a, b, c, !0);
        },
        _removeData: function (a, b) {
            return R(a, b, !0);
        },
    }),
        m.fn.extend({
            data: function (a, b) {
                var c,
                    d,
                    e,
                    f = this[0],
                    g = f && f.attributes;
                if (void 0 === a) {
                    if (this.length && ((e = m.data(f)), 1 === f.nodeType && !m._data(f, "parsedAttrs"))) {
                        c = g.length;
                        while (c--) g[c] && ((d = g[c].name), 0 === d.indexOf("data-") && ((d = m.camelCase(d.slice(5))), O(f, d, e[d])));
                        m._data(f, "parsedAttrs", !0);
                    }
                    return e;
                }
                return "object" == typeof a
                    ? this.each(function () {
                          m.data(this, a);
                      })
                    : arguments.length > 1
                    ? this.each(function () {
                          m.data(this, a, b);
                      })
                    : f
                    ? O(f, a, m.data(f, a))
                    : void 0;
            },
            removeData: function (a) {
                return this.each(function () {
                    m.removeData(this, a);
                });
            },
        }),
        m.extend({
            queue: function (a, b, c) {
                var d;
                return a ? ((b = (b || "fx") + "queue"), (d = m._data(a, b)), c && (!d || m.isArray(c) ? (d = m._data(a, b, m.makeArray(c))) : d.push(c)), d || []) : void 0;
            },
            dequeue: function (a, b) {
                b = b || "fx";
                var c = m.queue(a, b),
                    d = c.length,
                    e = c.shift(),
                    f = m._queueHooks(a, b),
                    g = function () {
                        m.dequeue(a, b);
                    };
                "inprogress" === e && ((e = c.shift()), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
            },
            _queueHooks: function (a, b) {
                var c = b + "queueHooks";
                return (
                    m._data(a, c) ||
                    m._data(a, c, {
                        empty: m.Callbacks("once memory").add(function () {
                            m._removeData(a, b + "queue"), m._removeData(a, c);
                        }),
                    })
                );
            },
        }),
        m.fn.extend({
            queue: function (a, b) {
                var c = 2;
                return (
                    "string" != typeof a && ((b = a), (a = "fx"), c--),
                    arguments.length < c
                        ? m.queue(this[0], a)
                        : void 0 === b
                        ? this
                        : this.each(function () {
                              var c = m.queue(this, a, b);
                              m._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && m.dequeue(this, a);
                          })
                );
            },
            dequeue: function (a) {
                return this.each(function () {
                    m.dequeue(this, a);
                });
            },
            clearQueue: function (a) {
                return this.queue(a || "fx", []);
            },
            promise: function (a, b) {
                var c,
                    d = 1,
                    e = m.Deferred(),
                    f = this,
                    g = this.length,
                    h = function () {
                        --d || e.resolveWith(f, [f]);
                    };
                "string" != typeof a && ((b = a), (a = void 0)), (a = a || "fx");
                while (g--) (c = m._data(f[g], a + "queueHooks")), c && c.empty && (d++, c.empty.add(h));
                return h(), e.promise(b);
            },
        });
    var S = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        T = ["Top", "Right", "Bottom", "Left"],
        U = function (a, b) {
            return (a = b || a), "none" === m.css(a, "display") || !m.contains(a.ownerDocument, a);
        },
        V = (m.access = function (a, b, c, d, e, f, g) {
            var h = 0,
                i = a.length,
                j = null == c;
            if ("object" === m.type(c)) {
                e = !0;
                for (h in c) m.access(a, b, h, c[h], !0, f, g);
            } else if (
                void 0 !== d &&
                ((e = !0),
                m.isFunction(d) || (g = !0),
                j &&
                    (g
                        ? (b.call(a, d), (b = null))
                        : ((j = b),
                          (b = function (a, b, c) {
                              return j.call(m(a), c);
                          }))),
                b)
            )
                for (; i > h; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
            return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
        }),
        W = /^(?:checkbox|radio)$/i;
    !(function () {
        var a = y.createElement("input"),
            b = y.createElement("div"),
            c = y.createDocumentFragment();
        if (
            ((b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"),
            (k.leadingWhitespace = 3 === b.firstChild.nodeType),
            (k.tbody = !b.getElementsByTagName("tbody").length),
            (k.htmlSerialize = !!b.getElementsByTagName("link").length),
            (k.html5Clone = "<:nav></:nav>" !== y.createElement("nav").cloneNode(!0).outerHTML),
            (a.type = "checkbox"),
            (a.checked = !0),
            c.appendChild(a),
            (k.appendChecked = a.checked),
            (b.innerHTML = "<textarea>x</textarea>"),
            (k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue),
            c.appendChild(b),
            (b.innerHTML = "<input type='radio' checked='checked' name='t'/>"),
            (k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked),
            (k.noCloneEvent = !0),
            b.attachEvent &&
                (b.attachEvent("onclick", function () {
                    k.noCloneEvent = !1;
                }),
                b.cloneNode(!0).click()),
            null == k.deleteExpando)
        ) {
            k.deleteExpando = !0;
            try {
                delete b.test;
            } catch (d) {
                k.deleteExpando = !1;
            }
        }
    })(),
        (function () {
            var b,
                c,
                d = y.createElement("div");
            for (b in { submit: !0, change: !0, focusin: !0 }) (c = "on" + b), (k[b + "Bubbles"] = c in a) || (d.setAttribute(c, "t"), (k[b + "Bubbles"] = d.attributes[c].expando === !1));
            d = null;
        })();
    var X = /^(?:input|select|textarea)$/i,
        Y = /^key/,
        Z = /^(?:mouse|pointer|contextmenu)|click/,
        $ = /^(?:focusinfocus|focusoutblur)$/,
        _ = /^([^.]*)(?:\.(.+)|)$/;
    function ab() {
        return !0;
    }
    function bb() {
        return !1;
    }
    function cb() {
        try {
            return y.activeElement;
        } catch (a) {}
    }
    (m.event = {
        global: {},
        add: function (a, b, c, d, e) {
            var f,
                g,
                h,
                i,
                j,
                k,
                l,
                n,
                o,
                p,
                q,
                r = m._data(a);
            if (r) {
                c.handler && ((i = c), (c = i.handler), (e = i.selector)),
                    c.guid || (c.guid = m.guid++),
                    (g = r.events) || (g = r.events = {}),
                    (k = r.handle) ||
                        ((k = r.handle = function (a) {
                            return typeof m === K || (a && m.event.triggered === a.type) ? void 0 : m.event.dispatch.apply(k.elem, arguments);
                        }),
                        (k.elem = a)),
                    (b = (b || "").match(E) || [""]),
                    (h = b.length);
                while (h--)
                    (f = _.exec(b[h]) || []),
                        (o = q = f[1]),
                        (p = (f[2] || "").split(".").sort()),
                        o &&
                            ((j = m.event.special[o] || {}),
                            (o = (e ? j.delegateType : j.bindType) || o),
                            (j = m.event.special[o] || {}),
                            (l = m.extend({ type: o, origType: q, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && m.expr.match.needsContext.test(e), namespace: p.join(".") }, i)),
                            (n = g[o]) || ((n = g[o] = []), (n.delegateCount = 0), (j.setup && j.setup.call(a, d, p, k) !== !1) || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent("on" + o, k))),
                            j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)),
                            e ? n.splice(n.delegateCount++, 0, l) : n.push(l),
                            (m.event.global[o] = !0));
                a = null;
            }
        },
        remove: function (a, b, c, d, e) {
            var f,
                g,
                h,
                i,
                j,
                k,
                l,
                n,
                o,
                p,
                q,
                r = m.hasData(a) && m._data(a);
            if (r && (k = r.events)) {
                (b = (b || "").match(E) || [""]), (j = b.length);
                while (j--)
                    if (((h = _.exec(b[j]) || []), (o = q = h[1]), (p = (h[2] || "").split(".").sort()), o)) {
                        (l = m.event.special[o] || {}), (o = (d ? l.delegateType : l.bindType) || o), (n = k[o] || []), (h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)")), (i = f = n.length);
                        while (f--)
                            (g = n[f]),
                                (!e && q !== g.origType) ||
                                    (c && c.guid !== g.guid) ||
                                    (h && !h.test(g.namespace)) ||
                                    (d && d !== g.selector && ("**" !== d || !g.selector)) ||
                                    (n.splice(f, 1), g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));
                        i && !n.length && ((l.teardown && l.teardown.call(a, p, r.handle) !== !1) || m.removeEvent(a, o, r.handle), delete k[o]);
                    } else for (o in k) m.event.remove(a, o + b[j], c, d, !0);
                m.isEmptyObject(k) && (delete r.handle, m._removeData(a, "events"));
            }
        },
        trigger: function (b, c, d, e) {
            var f,
                g,
                h,
                i,
                k,
                l,
                n,
                o = [d || y],
                p = j.call(b, "type") ? b.type : b,
                q = j.call(b, "namespace") ? b.namespace.split(".") : [];
            if (
                ((h = l = d = d || y),
                3 !== d.nodeType &&
                    8 !== d.nodeType &&
                    !$.test(p + m.event.triggered) &&
                    (p.indexOf(".") >= 0 && ((q = p.split(".")), (p = q.shift()), q.sort()),
                    (g = p.indexOf(":") < 0 && "on" + p),
                    (b = b[m.expando] ? b : new m.Event(p, "object" == typeof b && b)),
                    (b.isTrigger = e ? 2 : 3),
                    (b.namespace = q.join(".")),
                    (b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null),
                    (b.result = void 0),
                    b.target || (b.target = d),
                    (c = null == c ? [b] : m.makeArray(c, [b])),
                    (k = m.event.special[p] || {}),
                    e || !k.trigger || k.trigger.apply(d, c) !== !1))
            ) {
                if (!e && !k.noBubble && !m.isWindow(d)) {
                    for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode) o.push(h), (l = h);
                    l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a);
                }
                n = 0;
                while ((h = o[n++]) && !b.isPropagationStopped())
                    (b.type = n > 1 ? i : k.bindType || p),
                        (f = (m._data(h, "events") || {})[b.type] && m._data(h, "handle")),
                        f && f.apply(h, c),
                        (f = g && h[g]),
                        f && f.apply && m.acceptData(h) && ((b.result = f.apply(h, c)), b.result === !1 && b.preventDefault());
                if (((b.type = p), !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && m.acceptData(d) && g && d[p] && !m.isWindow(d))) {
                    (l = d[g]), l && (d[g] = null), (m.event.triggered = p);
                    try {
                        d[p]();
                    } catch (r) {}
                    (m.event.triggered = void 0), l && (d[g] = l);
                }
                return b.result;
            }
        },
        dispatch: function (a) {
            a = m.event.fix(a);
            var b,
                c,
                e,
                f,
                g,
                h = [],
                i = d.call(arguments),
                j = (m._data(this, "events") || {})[a.type] || [],
                k = m.event.special[a.type] || {};
            if (((i[0] = a), (a.delegateTarget = this), !k.preDispatch || k.preDispatch.call(this, a) !== !1)) {
                (h = m.event.handlers.call(this, a, j)), (b = 0);
                while ((f = h[b++]) && !a.isPropagationStopped()) {
                    (a.currentTarget = f.elem), (g = 0);
                    while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped())
                        (!a.namespace_re || a.namespace_re.test(e.namespace)) &&
                            ((a.handleObj = e), (a.data = e.data), (c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i)), void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation()));
                }
                return k.postDispatch && k.postDispatch.call(this, a), a.result;
            }
        },
        handlers: function (a, b) {
            var c,
                d,
                e,
                f,
                g = [],
                h = b.delegateCount,
                i = a.target;
            if (h && i.nodeType && (!a.button || "click" !== a.type))
                for (; i != this; i = i.parentNode || this)
                    if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {
                        for (e = [], f = 0; h > f; f++) (d = b[f]), (c = d.selector + " "), void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [i]).length), e[c] && e.push(d);
                        e.length && g.push({ elem: i, handlers: e });
                    }
            return h < b.length && g.push({ elem: this, handlers: b.slice(h) }), g;
        },
        fix: function (a) {
            if (a[m.expando]) return a;
            var b,
                c,
                d,
                e = a.type,
                f = a,
                g = this.fixHooks[e];
            g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), (d = g.props ? this.props.concat(g.props) : this.props), (a = new m.Event(f)), (b = d.length);
            while (b--) (c = d[b]), (a[c] = f[c]);
            return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), (a.metaKey = !!a.metaKey), g.filter ? g.filter(a, f) : a;
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function (a, b) {
                return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;
            },
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function (a, b) {
                var c,
                    d,
                    e,
                    f = b.button,
                    g = b.fromElement;
                return (
                    null == a.pageX &&
                        null != b.clientX &&
                        ((d = a.target.ownerDocument || y),
                        (e = d.documentElement),
                        (c = d.body),
                        (a.pageX = b.clientX + ((e && e.scrollLeft) || (c && c.scrollLeft) || 0) - ((e && e.clientLeft) || (c && c.clientLeft) || 0)),
                        (a.pageY = b.clientY + ((e && e.scrollTop) || (c && c.scrollTop) || 0) - ((e && e.clientTop) || (c && c.clientTop) || 0))),
                    !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g),
                    a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0),
                    a
                );
            },
        },
        special: {
            load: { noBubble: !0 },
            focus: {
                trigger: function () {
                    if (this !== cb() && this.focus)
                        try {
                            return this.focus(), !1;
                        } catch (a) {}
                },
                delegateType: "focusin",
            },
            blur: {
                trigger: function () {
                    return this === cb() && this.blur ? (this.blur(), !1) : void 0;
                },
                delegateType: "focusout",
            },
            click: {
                trigger: function () {
                    return m.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), !1) : void 0;
                },
                _default: function (a) {
                    return m.nodeName(a.target, "a");
                },
            },
            beforeunload: {
                postDispatch: function (a) {
                    void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
                },
            },
        },
        simulate: function (a, b, c, d) {
            var e = m.extend(new m.Event(), c, { type: a, isSimulated: !0, originalEvent: {} });
            d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
        },
    }),
        (m.removeEvent = y.removeEventListener
            ? function (a, b, c) {
                  a.removeEventListener && a.removeEventListener(b, c, !1);
              }
            : function (a, b, c) {
                  var d = "on" + b;
                  a.detachEvent && (typeof a[d] === K && (a[d] = null), a.detachEvent(d, c));
              }),
        (m.Event = function (a, b) {
            return this instanceof m.Event
                ? (a && a.type ? ((this.originalEvent = a), (this.type = a.type), (this.isDefaultPrevented = a.defaultPrevented || (void 0 === a.defaultPrevented && a.returnValue === !1) ? ab : bb)) : (this.type = a),
                  b && m.extend(this, b),
                  (this.timeStamp = (a && a.timeStamp) || m.now()),
                  void (this[m.expando] = !0))
                : new m.Event(a, b);
        }),
        (m.Event.prototype = {
            isDefaultPrevented: bb,
            isPropagationStopped: bb,
            isImmediatePropagationStopped: bb,
            preventDefault: function () {
                var a = this.originalEvent;
                (this.isDefaultPrevented = ab), a && (a.preventDefault ? a.preventDefault() : (a.returnValue = !1));
            },
            stopPropagation: function () {
                var a = this.originalEvent;
                (this.isPropagationStopped = ab), a && (a.stopPropagation && a.stopPropagation(), (a.cancelBubble = !0));
            },
            stopImmediatePropagation: function () {
                var a = this.originalEvent;
                (this.isImmediatePropagationStopped = ab), a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();
            },
        }),
        m.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) {
            m.event.special[a] = {
                delegateType: b,
                bindType: b,
                handle: function (a) {
                    var c,
                        d = this,
                        e = a.relatedTarget,
                        f = a.handleObj;
                    return (!e || (e !== d && !m.contains(d, e))) && ((a.type = f.origType), (c = f.handler.apply(this, arguments)), (a.type = b)), c;
                },
            };
        }),
        k.submitBubbles ||
            (m.event.special.submit = {
                setup: function () {
                    return m.nodeName(this, "form")
                        ? !1
                        : void m.event.add(this, "click._submit keypress._submit", function (a) {
                              var b = a.target,
                                  c = m.nodeName(b, "input") || m.nodeName(b, "button") ? b.form : void 0;
                              c &&
                                  !m._data(c, "submitBubbles") &&
                                  (m.event.add(c, "submit._submit", function (a) {
                                      a._submit_bubble = !0;
                                  }),
                                  m._data(c, "submitBubbles", !0));
                          });
                },
                postDispatch: function (a) {
                    a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate("submit", this.parentNode, a, !0));
                },
                teardown: function () {
                    return m.nodeName(this, "form") ? !1 : void m.event.remove(this, "._submit");
                },
            }),
        k.changeBubbles ||
            (m.event.special.change = {
                setup: function () {
                    return X.test(this.nodeName)
                        ? (("checkbox" === this.type || "radio" === this.type) &&
                              (m.event.add(this, "propertychange._change", function (a) {
                                  "checked" === a.originalEvent.propertyName && (this._just_changed = !0);
                              }),
                              m.event.add(this, "click._change", function (a) {
                                  this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate("change", this, a, !0);
                              })),
                          !1)
                        : void m.event.add(this, "beforeactivate._change", function (a) {
                              var b = a.target;
                              X.test(b.nodeName) &&
                                  !m._data(b, "changeBubbles") &&
                                  (m.event.add(b, "change._change", function (a) {
                                      !this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate("change", this.parentNode, a, !0);
                                  }),
                                  m._data(b, "changeBubbles", !0));
                          });
                },
                handle: function (a) {
                    var b = a.target;
                    return this !== b || a.isSimulated || a.isTrigger || ("radio" !== b.type && "checkbox" !== b.type) ? a.handleObj.handler.apply(this, arguments) : void 0;
                },
                teardown: function () {
                    return m.event.remove(this, "._change"), !X.test(this.nodeName);
                },
            }),
        k.focusinBubbles ||
            m.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
                var c = function (a) {
                    m.event.simulate(b, a.target, m.event.fix(a), !0);
                };
                m.event.special[b] = {
                    setup: function () {
                        var d = this.ownerDocument || this,
                            e = m._data(d, b);
                        e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1);
                    },
                    teardown: function () {
                        var d = this.ownerDocument || this,
                            e = m._data(d, b) - 1;
                        e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b));
                    },
                };
            }),
        m.fn.extend({
            on: function (a, b, c, d, e) {
                var f, g;
                if ("object" == typeof a) {
                    "string" != typeof b && ((c = c || b), (b = void 0));
                    for (f in a) this.on(f, b, c, a[f], e);
                    return this;
                }
                if ((null == c && null == d ? ((d = b), (c = b = void 0)) : null == d && ("string" == typeof b ? ((d = c), (c = void 0)) : ((d = c), (c = b), (b = void 0))), d === !1)) d = bb;
                else if (!d) return this;
                return (
                    1 === e &&
                        ((g = d),
                        (d = function (a) {
                            return m().off(a), g.apply(this, arguments);
                        }),
                        (d.guid = g.guid || (g.guid = m.guid++))),
                    this.each(function () {
                        m.event.add(this, a, d, c, b);
                    })
                );
            },
            one: function (a, b, c, d) {
                return this.on(a, b, c, d, 1);
            },
            off: function (a, b, c) {
                var d, e;
                if (a && a.preventDefault && a.handleObj) return (d = a.handleObj), m(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;
                if ("object" == typeof a) {
                    for (e in a) this.off(e, b, a[e]);
                    return this;
                }
                return (
                    (b === !1 || "function" == typeof b) && ((c = b), (b = void 0)),
                    c === !1 && (c = bb),
                    this.each(function () {
                        m.event.remove(this, a, c, b);
                    })
                );
            },
            trigger: function (a, b) {
                return this.each(function () {
                    m.event.trigger(a, b, this);
                });
            },
            triggerHandler: function (a, b) {
                var c = this[0];
                return c ? m.event.trigger(a, b, c, !0) : void 0;
            },
        });
    function db(a) {
        var b = eb.split("|"),
            c = a.createDocumentFragment();
        if (c.createElement) while (b.length) c.createElement(b.pop());
        return c;
    }
    var eb = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
        fb = / jQuery\d+="(?:null|\d+)"/g,
        gb = new RegExp("<(?:" + eb + ")[\\s/>]", "i"),
        hb = /^\s+/,
        ib = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        jb = /<([\w:]+)/,
        kb = /<tbody/i,
        lb = /<|&#?\w+;/,
        mb = /<(?:script|style|link)/i,
        nb = /checked\s*(?:[^=]|=\s*.checked.)/i,
        ob = /^$|\/(?:java|ecma)script/i,
        pb = /^true\/(.*)/,
        qb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
        rb = {
            option: [1, "<select multiple='multiple'>", "</select>"],
            legend: [1, "<fieldset>", "</fieldset>"],
            area: [1, "<map>", "</map>"],
            param: [1, "<object>", "</object>"],
            thead: [1, "<table>", "</table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: k.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"],
        },
        sb = db(y),
        tb = sb.appendChild(y.createElement("div"));
    (rb.optgroup = rb.option), (rb.tbody = rb.tfoot = rb.colgroup = rb.caption = rb.thead), (rb.th = rb.td);
    function ub(a, b) {
        var c,
            d,
            e = 0,
            f = typeof a.getElementsByTagName !== K ? a.getElementsByTagName(b || "*") : typeof a.querySelectorAll !== K ? a.querySelectorAll(b || "*") : void 0;
        if (!f) for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ub(d, b));
        return void 0 === b || (b && m.nodeName(a, b)) ? m.merge([a], f) : f;
    }
    function vb(a) {
        W.test(a.type) && (a.defaultChecked = a.checked);
    }
    function wb(a, b) {
        return m.nodeName(a, "table") && m.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;
    }
    function xb(a) {
        return (a.type = (null !== m.find.attr(a, "type")) + "/" + a.type), a;
    }
    function yb(a) {
        var b = pb.exec(a.type);
        return b ? (a.type = b[1]) : a.removeAttribute("type"), a;
    }
    function zb(a, b) {
        for (var c, d = 0; null != (c = a[d]); d++) m._data(c, "globalEval", !b || m._data(b[d], "globalEval"));
    }
    function Ab(a, b) {
        if (1 === b.nodeType && m.hasData(a)) {
            var c,
                d,
                e,
                f = m._data(a),
                g = m._data(b, f),
                h = f.events;
            if (h) {
                delete g.handle, (g.events = {});
                for (c in h) for (d = 0, e = h[c].length; e > d; d++) m.event.add(b, c, h[c][d]);
            }
            g.data && (g.data = m.extend({}, g.data));
        }
    }
    function Bb(a, b) {
        var c, d, e;
        if (1 === b.nodeType) {
            if (((c = b.nodeName.toLowerCase()), !k.noCloneEvent && b[m.expando])) {
                e = m._data(b);
                for (d in e.events) m.removeEvent(b, d, e.handle);
                b.removeAttribute(m.expando);
            }
            "script" === c && b.text !== a.text
                ? ((xb(b).text = a.text), yb(b))
                : "object" === c
                ? (b.parentNode && (b.outerHTML = a.outerHTML), k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML))
                : "input" === c && W.test(a.type)
                ? ((b.defaultChecked = b.checked = a.checked), b.value !== a.value && (b.value = a.value))
                : "option" === c
                ? (b.defaultSelected = b.selected = a.defaultSelected)
                : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue);
        }
    }
    m.extend({
        clone: function (a, b, c) {
            var d,
                e,
                f,
                g,
                h,
                i = m.contains(a.ownerDocument, a);
            if (
                (k.html5Clone || m.isXMLDoc(a) || !gb.test("<" + a.nodeName + ">") ? (f = a.cloneNode(!0)) : ((tb.innerHTML = a.outerHTML), tb.removeChild((f = tb.firstChild))),
                !((k.noCloneEvent && k.noCloneChecked) || (1 !== a.nodeType && 11 !== a.nodeType) || m.isXMLDoc(a)))
            )
                for (d = ub(f), h = ub(a), g = 0; null != (e = h[g]); ++g) d[g] && Bb(e, d[g]);
            if (b)
                if (c) for (h = h || ub(a), d = d || ub(f), g = 0; null != (e = h[g]); g++) Ab(e, d[g]);
                else Ab(a, f);
            return (d = ub(f, "script")), d.length > 0 && zb(d, !i && ub(a, "script")), (d = h = e = null), f;
        },
        buildFragment: function (a, b, c, d) {
            for (var e, f, g, h, i, j, l, n = a.length, o = db(b), p = [], q = 0; n > q; q++)
                if (((f = a[q]), f || 0 === f))
                    if ("object" === m.type(f)) m.merge(p, f.nodeType ? [f] : f);
                    else if (lb.test(f)) {
                        (h = h || o.appendChild(b.createElement("div"))), (i = (jb.exec(f) || ["", ""])[1].toLowerCase()), (l = rb[i] || rb._default), (h.innerHTML = l[1] + f.replace(ib, "<$1></$2>") + l[2]), (e = l[0]);
                        while (e--) h = h.lastChild;
                        if ((!k.leadingWhitespace && hb.test(f) && p.push(b.createTextNode(hb.exec(f)[0])), !k.tbody)) {
                            (f = "table" !== i || kb.test(f) ? ("<table>" !== l[1] || kb.test(f) ? 0 : h) : h.firstChild), (e = f && f.childNodes.length);
                            while (e--) m.nodeName((j = f.childNodes[e]), "tbody") && !j.childNodes.length && f.removeChild(j);
                        }
                        m.merge(p, h.childNodes), (h.textContent = "");
                        while (h.firstChild) h.removeChild(h.firstChild);
                        h = o.lastChild;
                    } else p.push(b.createTextNode(f));
            h && o.removeChild(h), k.appendChecked || m.grep(ub(p, "input"), vb), (q = 0);
            while ((f = p[q++]))
                if ((!d || -1 === m.inArray(f, d)) && ((g = m.contains(f.ownerDocument, f)), (h = ub(o.appendChild(f), "script")), g && zb(h), c)) {
                    e = 0;
                    while ((f = h[e++])) ob.test(f.type || "") && c.push(f);
                }
            return (h = null), o;
        },
        cleanData: function (a, b) {
            for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++)
                if ((b || m.acceptData(d)) && ((f = d[i]), (g = f && j[f]))) {
                    if (g.events) for (e in g.events) n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);
                    j[f] && (delete j[f], l ? delete d[i] : typeof d.removeAttribute !== K ? d.removeAttribute(i) : (d[i] = null), c.push(f));
                }
        },
    }),
        m.fn.extend({
            text: function (a) {
                return V(
                    this,
                    function (a) {
                        return void 0 === a ? m.text(this) : this.empty().append(((this[0] && this[0].ownerDocument) || y).createTextNode(a));
                    },
                    null,
                    a,
                    arguments.length
                );
            },
            append: function () {
                return this.domManip(arguments, function (a) {
                    if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                        var b = wb(this, a);
                        b.appendChild(a);
                    }
                });
            },
            prepend: function () {
                return this.domManip(arguments, function (a) {
                    if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                        var b = wb(this, a);
                        b.insertBefore(a, b.firstChild);
                    }
                });
            },
            before: function () {
                return this.domManip(arguments, function (a) {
                    this.parentNode && this.parentNode.insertBefore(a, this);
                });
            },
            after: function () {
                return this.domManip(arguments, function (a) {
                    this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
                });
            },
            remove: function (a, b) {
                for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++)
                    b || 1 !== c.nodeType || m.cleanData(ub(c)), c.parentNode && (b && m.contains(c.ownerDocument, c) && zb(ub(c, "script")), c.parentNode.removeChild(c));
                return this;
            },
            empty: function () {
                for (var a, b = 0; null != (a = this[b]); b++) {
                    1 === a.nodeType && m.cleanData(ub(a, !1));
                    while (a.firstChild) a.removeChild(a.firstChild);
                    a.options && m.nodeName(a, "select") && (a.options.length = 0);
                }
                return this;
            },
            clone: function (a, b) {
                return (
                    (a = null == a ? !1 : a),
                    (b = null == b ? a : b),
                    this.map(function () {
                        return m.clone(this, a, b);
                    })
                );
            },
            html: function (a) {
                return V(
                    this,
                    function (a) {
                        var b = this[0] || {},
                            c = 0,
                            d = this.length;
                        if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(fb, "") : void 0;
                        if (!("string" != typeof a || mb.test(a) || (!k.htmlSerialize && gb.test(a)) || (!k.leadingWhitespace && hb.test(a)) || rb[(jb.exec(a) || ["", ""])[1].toLowerCase()])) {
                            a = a.replace(ib, "<$1></$2>");
                            try {
                                for (; d > c; c++) (b = this[c] || {}), 1 === b.nodeType && (m.cleanData(ub(b, !1)), (b.innerHTML = a));
                                b = 0;
                            } catch (e) {}
                        }
                        b && this.empty().append(a);
                    },
                    null,
                    a,
                    arguments.length
                );
            },
            replaceWith: function () {
                var a = arguments[0];
                return (
                    this.domManip(arguments, function (b) {
                        (a = this.parentNode), m.cleanData(ub(this)), a && a.replaceChild(b, this);
                    }),
                    a && (a.length || a.nodeType) ? this : this.remove()
                );
            },
            detach: function (a) {
                return this.remove(a, !0);
            },
            domManip: function (a, b) {
                a = e.apply([], a);
                var c,
                    d,
                    f,
                    g,
                    h,
                    i,
                    j = 0,
                    l = this.length,
                    n = this,
                    o = l - 1,
                    p = a[0],
                    q = m.isFunction(p);
                if (q || (l > 1 && "string" == typeof p && !k.checkClone && nb.test(p)))
                    return this.each(function (c) {
                        var d = n.eq(c);
                        q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
                    });
                if (l && ((i = m.buildFragment(a, this[0].ownerDocument, !1, this)), (c = i.firstChild), 1 === i.childNodes.length && (i = c), c)) {
                    for (g = m.map(ub(i, "script"), xb), f = g.length; l > j; j++) (d = i), j !== o && ((d = m.clone(d, !0, !0)), f && m.merge(g, ub(d, "script"))), b.call(this[j], d, j);
                    if (f)
                        for (h = g[g.length - 1].ownerDocument, m.map(g, yb), j = 0; f > j; j++)
                            (d = g[j]), ob.test(d.type || "") && !m._data(d, "globalEval") && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || "").replace(qb, "")));
                    i = c = null;
                }
                return this;
            },
        }),
        m.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {
            m.fn[a] = function (a) {
                for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) (c = d === h ? this : this.clone(!0)), m(g[d])[b](c), f.apply(e, c.get());
                return this.pushStack(e);
            };
        });
    var Cb,
        Db = {};
    function Eb(b, c) {
        var d,
            e = m(c.createElement(b)).appendTo(c.body),
            f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], "display");
        return e.detach(), f;
    }
    function Fb(a) {
        var b = y,
            c = Db[a];
        return (
            c ||
                ((c = Eb(a, b)),
                ("none" !== c && c) ||
                    ((Cb = (Cb || m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement)), (b = (Cb[0].contentWindow || Cb[0].contentDocument).document), b.write(), b.close(), (c = Eb(a, b)), Cb.detach()),
                (Db[a] = c)),
            c
        );
    }
    !(function () {
        var a;
        k.shrinkWrapBlocks = function () {
            if (null != a) return a;
            a = !1;
            var b, c, d;
            return (
                (c = y.getElementsByTagName("body")[0]),
                c && c.style
                    ? ((b = y.createElement("div")),
                      (d = y.createElement("div")),
                      (d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"),
                      c.appendChild(d).appendChild(b),
                      typeof b.style.zoom !== K &&
                          ((b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1"),
                          (b.appendChild(y.createElement("div")).style.width = "5px"),
                          (a = 3 !== b.offsetWidth)),
                      c.removeChild(d),
                      a)
                    : void 0
            );
        };
    })();
    var Gb = /^margin/,
        Hb = new RegExp("^(" + S + ")(?!px)[a-z%]+$", "i"),
        Ib,
        Jb,
        Kb = /^(top|right|bottom|left)$/;
    a.getComputedStyle
        ? ((Ib = function (a) {
              return a.ownerDocument.defaultView.getComputedStyle(a, null);
          }),
          (Jb = function (a, b, c) {
              var d,
                  e,
                  f,
                  g,
                  h = a.style;
              return (
                  (c = c || Ib(a)),
                  (g = c ? c.getPropertyValue(b) || c[b] : void 0),
                  c &&
                      ("" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)),
                      Hb.test(g) && Gb.test(b) && ((d = h.width), (e = h.minWidth), (f = h.maxWidth), (h.minWidth = h.maxWidth = h.width = g), (g = c.width), (h.width = d), (h.minWidth = e), (h.maxWidth = f))),
                  void 0 === g ? g : g + ""
              );
          }))
        : y.documentElement.currentStyle &&
          ((Ib = function (a) {
              return a.currentStyle;
          }),
          (Jb = function (a, b, c) {
              var d,
                  e,
                  f,
                  g,
                  h = a.style;
              return (
                  (c = c || Ib(a)),
                  (g = c ? c[b] : void 0),
                  null == g && h && h[b] && (g = h[b]),
                  Hb.test(g) && !Kb.test(b) && ((d = h.left), (e = a.runtimeStyle), (f = e && e.left), f && (e.left = a.currentStyle.left), (h.left = "fontSize" === b ? "1em" : g), (g = h.pixelLeft + "px"), (h.left = d), f && (e.left = f)),
                  void 0 === g ? g : g + "" || "auto"
              );
          }));
    function Lb(a, b) {
        return {
            get: function () {
                var c = a();
                if (null != c) return c ? void delete this.get : (this.get = b).apply(this, arguments);
            },
        };
    }
    !(function () {
        var b, c, d, e, f, g, h;
        if (((b = y.createElement("div")), (b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"), (d = b.getElementsByTagName("a")[0]), (c = d && d.style))) {
            (c.cssText = "float:left;opacity:.5"),
                (k.opacity = "0.5" === c.opacity),
                (k.cssFloat = !!c.cssFloat),
                (b.style.backgroundClip = "content-box"),
                (b.cloneNode(!0).style.backgroundClip = ""),
                (k.clearCloneStyle = "content-box" === b.style.backgroundClip),
                (k.boxSizing = "" === c.boxSizing || "" === c.MozBoxSizing || "" === c.WebkitBoxSizing),
                m.extend(k, {
                    reliableHiddenOffsets: function () {
                        return null == g && i(), g;
                    },
                    boxSizingReliable: function () {
                        return null == f && i(), f;
                    },
                    pixelPosition: function () {
                        return null == e && i(), e;
                    },
                    reliableMarginRight: function () {
                        return null == h && i(), h;
                    },
                });
            function i() {
                var b, c, d, i;
                (c = y.getElementsByTagName("body")[0]),
                    c &&
                        c.style &&
                        ((b = y.createElement("div")),
                        (d = y.createElement("div")),
                        (d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px"),
                        c.appendChild(d).appendChild(b),
                        (b.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute"),
                        (e = f = !1),
                        (h = !0),
                        a.getComputedStyle &&
                            ((e = "1%" !== (a.getComputedStyle(b, null) || {}).top),
                            (f = "4px" === (a.getComputedStyle(b, null) || { width: "4px" }).width),
                            (i = b.appendChild(y.createElement("div"))),
                            (i.style.cssText = b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0"),
                            (i.style.marginRight = i.style.width = "0"),
                            (b.style.width = "1px"),
                            (h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight))),
                        (b.innerHTML = "<table><tr><td></td><td>t</td></tr></table>"),
                        (i = b.getElementsByTagName("td")),
                        (i[0].style.cssText = "margin:0;border:0;padding:0;display:none"),
                        (g = 0 === i[0].offsetHeight),
                        g && ((i[0].style.display = ""), (i[1].style.display = "none"), (g = 0 === i[0].offsetHeight)),
                        c.removeChild(d));
            }
        }
    })(),
        (m.swap = function (a, b, c, d) {
            var e,
                f,
                g = {};
            for (f in b) (g[f] = a.style[f]), (a.style[f] = b[f]);
            e = c.apply(a, d || []);
            for (f in b) a.style[f] = g[f];
            return e;
        });
    var Mb = /alpha\([^)]*\)/i,
        Nb = /opacity\s*=\s*([^)]*)/,
        Ob = /^(none|table(?!-c[ea]).+)/,
        Pb = new RegExp("^(" + S + ")(.*)$", "i"),
        Qb = new RegExp("^([+-])=(" + S + ")", "i"),
        Rb = { position: "absolute", visibility: "hidden", display: "block" },
        Sb = { letterSpacing: "0", fontWeight: "400" },
        Tb = ["Webkit", "O", "Moz", "ms"];
    function Ub(a, b) {
        if (b in a) return b;
        var c = b.charAt(0).toUpperCase() + b.slice(1),
            d = b,
            e = Tb.length;
        while (e--) if (((b = Tb[e] + c), b in a)) return b;
        return d;
    }
    function Vb(a, b) {
        for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++)
            (d = a[g]),
                d.style &&
                    ((f[g] = m._data(d, "olddisplay")),
                    (c = d.style.display),
                    b
                        ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && U(d) && (f[g] = m._data(d, "olddisplay", Fb(d.nodeName))))
                        : ((e = U(d)), ((c && "none" !== c) || !e) && m._data(d, "olddisplay", e ? c : m.css(d, "display"))));
        for (g = 0; h > g; g++) (d = a[g]), d.style && ((b && "none" !== d.style.display && "" !== d.style.display) || (d.style.display = b ? f[g] || "" : "none"));
        return a;
    }
    function Wb(a, b, c) {
        var d = Pb.exec(b);
        return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
    }
    function Xb(a, b, c, d, e) {
        for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2)
            "margin" === c && (g += m.css(a, c + T[f], !0, e)),
                d
                    ? ("content" === c && (g -= m.css(a, "padding" + T[f], !0, e)), "margin" !== c && (g -= m.css(a, "border" + T[f] + "Width", !0, e)))
                    : ((g += m.css(a, "padding" + T[f], !0, e)), "padding" !== c && (g += m.css(a, "border" + T[f] + "Width", !0, e)));
        return g;
    }
    function Yb(a, b, c) {
        var d = !0,
            e = "width" === b ? a.offsetWidth : a.offsetHeight,
            f = Ib(a),
            g = k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, f);
        if (0 >= e || null == e) {
            if (((e = Jb(a, b, f)), (0 > e || null == e) && (e = a.style[b]), Hb.test(e))) return e;
            (d = g && (k.boxSizingReliable() || e === a.style[b])), (e = parseFloat(e) || 0);
        }
        return e + Xb(a, b, c || (g ? "border" : "content"), d, f) + "px";
    }
    m.extend({
        cssHooks: {
            opacity: {
                get: function (a, b) {
                    if (b) {
                        var c = Jb(a, "opacity");
                        return "" === c ? "1" : c;
                    }
                },
            },
        },
        cssNumber: { columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 },
        cssProps: { float: k.cssFloat ? "cssFloat" : "styleFloat" },
        style: function (a, b, c, d) {
            if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                var e,
                    f,
                    g,
                    h = m.camelCase(b),
                    i = a.style;
                if (((b = m.cssProps[h] || (m.cssProps[h] = Ub(i, h))), (g = m.cssHooks[b] || m.cssHooks[h]), void 0 === c)) return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];
                if (
                    ((f = typeof c),
                    "string" === f && (e = Qb.exec(c)) && ((c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b))), (f = "number")),
                    null != c && c === c && ("number" !== f || m.cssNumber[h] || (c += "px"), k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), !(g && "set" in g && void 0 === (c = g.set(a, c, d)))))
                )
                    try {
                        i[b] = c;
                    } catch (j) {}
            }
        },
        css: function (a, b, c, d) {
            var e,
                f,
                g,
                h = m.camelCase(b);
            return (
                (b = m.cssProps[h] || (m.cssProps[h] = Ub(a.style, h))),
                (g = m.cssHooks[b] || m.cssHooks[h]),
                g && "get" in g && (f = g.get(a, !0, c)),
                void 0 === f && (f = Jb(a, b, d)),
                "normal" === f && b in Sb && (f = Sb[b]),
                "" === c || c ? ((e = parseFloat(f)), c === !0 || m.isNumeric(e) ? e || 0 : f) : f
            );
        },
    }),
        m.each(["height", "width"], function (a, b) {
            m.cssHooks[b] = {
                get: function (a, c, d) {
                    return c
                        ? Ob.test(m.css(a, "display")) && 0 === a.offsetWidth
                            ? m.swap(a, Rb, function () {
                                  return Yb(a, b, d);
                              })
                            : Yb(a, b, d)
                        : void 0;
                },
                set: function (a, c, d) {
                    var e = d && Ib(a);
                    return Wb(a, c, d ? Xb(a, b, d, k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, e), e) : 0);
                },
            };
        }),
        k.opacity ||
            (m.cssHooks.opacity = {
                get: function (a, b) {
                    return Nb.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? 0.01 * parseFloat(RegExp.$1) + "" : b ? "1" : "";
                },
                set: function (a, b) {
                    var c = a.style,
                        d = a.currentStyle,
                        e = m.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "",
                        f = (d && d.filter) || c.filter || "";
                    (c.zoom = 1), ((b >= 1 || "" === b) && "" === m.trim(f.replace(Mb, "")) && c.removeAttribute && (c.removeAttribute("filter"), "" === b || (d && !d.filter))) || (c.filter = Mb.test(f) ? f.replace(Mb, e) : f + " " + e);
                },
            }),
        (m.cssHooks.marginRight = Lb(k.reliableMarginRight, function (a, b) {
            return b ? m.swap(a, { display: "inline-block" }, Jb, [a, "marginRight"]) : void 0;
        })),
        m.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
            (m.cssHooks[a + b] = {
                expand: function (c) {
                    for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++) e[a + T[d] + b] = f[d] || f[d - 2] || f[0];
                    return e;
                },
            }),
                Gb.test(a) || (m.cssHooks[a + b].set = Wb);
        }),
        m.fn.extend({
            css: function (a, b) {
                return V(
                    this,
                    function (a, b, c) {
                        var d,
                            e,
                            f = {},
                            g = 0;
                        if (m.isArray(b)) {
                            for (d = Ib(a), e = b.length; e > g; g++) f[b[g]] = m.css(a, b[g], !1, d);
                            return f;
                        }
                        return void 0 !== c ? m.style(a, b, c) : m.css(a, b);
                    },
                    a,
                    b,
                    arguments.length > 1
                );
            },
            show: function () {
                return Vb(this, !0);
            },
            hide: function () {
                return Vb(this);
            },
            toggle: function (a) {
                return "boolean" == typeof a
                    ? a
                        ? this.show()
                        : this.hide()
                    : this.each(function () {
                          U(this) ? m(this).show() : m(this).hide();
                      });
            },
        });
    function Zb(a, b, c, d, e) {
        return new Zb.prototype.init(a, b, c, d, e);
    }
    (m.Tween = Zb),
        (Zb.prototype = {
            constructor: Zb,
            init: function (a, b, c, d, e, f) {
                (this.elem = a), (this.prop = c), (this.easing = e || "swing"), (this.options = b), (this.start = this.now = this.cur()), (this.end = d), (this.unit = f || (m.cssNumber[c] ? "" : "px"));
            },
            cur: function () {
                var a = Zb.propHooks[this.prop];
                return a && a.get ? a.get(this) : Zb.propHooks._default.get(this);
            },
            run: function (a) {
                var b,
                    c = Zb.propHooks[this.prop];
                return (
                    (this.pos = b = this.options.duration ? m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : a),
                    (this.now = (this.end - this.start) * b + this.start),
                    this.options.step && this.options.step.call(this.elem, this.now, this),
                    c && c.set ? c.set(this) : Zb.propHooks._default.set(this),
                    this
                );
            },
        }),
        (Zb.prototype.init.prototype = Zb.prototype),
        (Zb.propHooks = {
            _default: {
                get: function (a) {
                    var b;
                    return null == a.elem[a.prop] || (a.elem.style && null != a.elem.style[a.prop]) ? ((b = m.css(a.elem, a.prop, "")), b && "auto" !== b ? b : 0) : a.elem[a.prop];
                },
                set: function (a) {
                    m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : (a.elem[a.prop] = a.now);
                },
            },
        }),
        (Zb.propHooks.scrollTop = Zb.propHooks.scrollLeft = {
            set: function (a) {
                a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
            },
        }),
        (m.easing = {
            linear: function (a) {
                return a;
            },
            swing: function (a) {
                return 0.5 - Math.cos(a * Math.PI) / 2;
            },
        }),
        (m.fx = Zb.prototype.init),
        (m.fx.step = {});
    var $b,
        _b,
        ac = /^(?:toggle|show|hide)$/,
        bc = new RegExp("^(?:([+-])=|)(" + S + ")([a-z%]*)$", "i"),
        cc = /queueHooks$/,
        dc = [ic],
        ec = {
            "*": [
                function (a, b) {
                    var c = this.createTween(a, b),
                        d = c.cur(),
                        e = bc.exec(b),
                        f = (e && e[3]) || (m.cssNumber[a] ? "" : "px"),
                        g = (m.cssNumber[a] || ("px" !== f && +d)) && bc.exec(m.css(c.elem, a)),
                        h = 1,
                        i = 20;
                    if (g && g[3] !== f) {
                        (f = f || g[3]), (e = e || []), (g = +d || 1);
                        do (h = h || ".5"), (g /= h), m.style(c.elem, a, g + f);
                        while (h !== (h = c.cur() / d) && 1 !== h && --i);
                    }
                    return e && ((g = c.start = +g || +d || 0), (c.unit = f), (c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2])), c;
                },
            ],
        };
    function fc() {
        return (
            setTimeout(function () {
                $b = void 0;
            }),
            ($b = m.now())
        );
    }
    function gc(a, b) {
        var c,
            d = { height: a },
            e = 0;
        for (b = b ? 1 : 0; 4 > e; e += 2 - b) (c = T[e]), (d["margin" + c] = d["padding" + c] = a);
        return b && (d.opacity = d.width = a), d;
    }
    function hc(a, b, c) {
        for (var d, e = (ec[b] || []).concat(ec["*"]), f = 0, g = e.length; g > f; f++) if ((d = e[f].call(c, b, a))) return d;
    }
    function ic(a, b, c) {
        var d,
            e,
            f,
            g,
            h,
            i,
            j,
            l,
            n = this,
            o = {},
            p = a.style,
            q = a.nodeType && U(a),
            r = m._data(a, "fxshow");
        c.queue ||
            ((h = m._queueHooks(a, "fx")),
            null == h.unqueued &&
                ((h.unqueued = 0),
                (i = h.empty.fire),
                (h.empty.fire = function () {
                    h.unqueued || i();
                })),
            h.unqueued++,
            n.always(function () {
                n.always(function () {
                    h.unqueued--, m.queue(a, "fx").length || h.empty.fire();
                });
            })),
            1 === a.nodeType &&
                ("height" in b || "width" in b) &&
                ((c.overflow = [p.overflow, p.overflowX, p.overflowY]),
                (j = m.css(a, "display")),
                (l = "none" === j ? m._data(a, "olddisplay") || Fb(a.nodeName) : j),
                "inline" === l && "none" === m.css(a, "float") && (k.inlineBlockNeedsLayout && "inline" !== Fb(a.nodeName) ? (p.zoom = 1) : (p.display = "inline-block"))),
            c.overflow &&
                ((p.overflow = "hidden"),
                k.shrinkWrapBlocks() ||
                    n.always(function () {
                        (p.overflow = c.overflow[0]), (p.overflowX = c.overflow[1]), (p.overflowY = c.overflow[2]);
                    }));
        for (d in b)
            if (((e = b[d]), ac.exec(e))) {
                if ((delete b[d], (f = f || "toggle" === e), e === (q ? "hide" : "show"))) {
                    if ("show" !== e || !r || void 0 === r[d]) continue;
                    q = !0;
                }
                o[d] = (r && r[d]) || m.style(a, d);
            } else j = void 0;
        if (m.isEmptyObject(o)) "inline" === ("none" === j ? Fb(a.nodeName) : j) && (p.display = j);
        else {
            r ? "hidden" in r && (q = r.hidden) : (r = m._data(a, "fxshow", {})),
                f && (r.hidden = !q),
                q
                    ? m(a).show()
                    : n.done(function () {
                          m(a).hide();
                      }),
                n.done(function () {
                    var b;
                    m._removeData(a, "fxshow");
                    for (b in o) m.style(a, b, o[b]);
                });
            for (d in o) (g = hc(q ? r[d] : 0, d, n)), d in r || ((r[d] = g.start), q && ((g.end = g.start), (g.start = "width" === d || "height" === d ? 1 : 0)));
        }
    }
    function jc(a, b) {
        var c, d, e, f, g;
        for (c in a)
            if (((d = m.camelCase(c)), (e = b[d]), (f = a[c]), m.isArray(f) && ((e = f[1]), (f = a[c] = f[0])), c !== d && ((a[d] = f), delete a[c]), (g = m.cssHooks[d]), g && "expand" in g)) {
                (f = g.expand(f)), delete a[d];
                for (c in f) c in a || ((a[c] = f[c]), (b[c] = e));
            } else b[d] = e;
    }
    function kc(a, b, c) {
        var d,
            e,
            f = 0,
            g = dc.length,
            h = m.Deferred().always(function () {
                delete i.elem;
            }),
            i = function () {
                if (e) return !1;
                for (var b = $b || fc(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) j.tweens[g].run(f);
                return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);
            },
            j = h.promise({
                elem: a,
                props: m.extend({}, b),
                opts: m.extend(!0, { specialEasing: {} }, c),
                originalProperties: b,
                originalOptions: c,
                startTime: $b || fc(),
                duration: c.duration,
                tweens: [],
                createTween: function (b, c) {
                    var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                    return j.tweens.push(d), d;
                },
                stop: function (b) {
                    var c = 0,
                        d = b ? j.tweens.length : 0;
                    if (e) return this;
                    for (e = !0; d > c; c++) j.tweens[c].run(1);
                    return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;
                },
            }),
            k = j.props;
        for (jc(k, j.opts.specialEasing); g > f; f++) if ((d = dc[f].call(j, a, k, j.opts))) return d;
        return (
            m.map(k, hc, j),
            m.isFunction(j.opts.start) && j.opts.start.call(a, j),
            m.fx.timer(m.extend(i, { elem: a, anim: j, queue: j.opts.queue })),
            j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always)
        );
    }
    (m.Animation = m.extend(kc, {
        tweener: function (a, b) {
            m.isFunction(a) ? ((b = a), (a = ["*"])) : (a = a.split(" "));
            for (var c, d = 0, e = a.length; e > d; d++) (c = a[d]), (ec[c] = ec[c] || []), ec[c].unshift(b);
        },
        prefilter: function (a, b) {
            b ? dc.unshift(a) : dc.push(a);
        },
    })),
        (m.speed = function (a, b, c) {
            var d = a && "object" == typeof a ? m.extend({}, a) : { complete: c || (!c && b) || (m.isFunction(a) && a), duration: a, easing: (c && b) || (b && !m.isFunction(b) && b) };
            return (
                (d.duration = m.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default),
                (null == d.queue || d.queue === !0) && (d.queue = "fx"),
                (d.old = d.complete),
                (d.complete = function () {
                    m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue);
                }),
                d
            );
        }),
        m.fn.extend({
            fadeTo: function (a, b, c, d) {
                return this.filter(U).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);
            },
            animate: function (a, b, c, d) {
                var e = m.isEmptyObject(a),
                    f = m.speed(b, c, d),
                    g = function () {
                        var b = kc(this, m.extend({}, a), f);
                        (e || m._data(this, "finish")) && b.stop(!0);
                    };
                return (g.finish = g), e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
            },
            stop: function (a, b, c) {
                var d = function (a) {
                    var b = a.stop;
                    delete a.stop, b(c);
                };
                return (
                    "string" != typeof a && ((c = b), (b = a), (a = void 0)),
                    b && a !== !1 && this.queue(a || "fx", []),
                    this.each(function () {
                        var b = !0,
                            e = null != a && a + "queueHooks",
                            f = m.timers,
                            g = m._data(this);
                        if (e) g[e] && g[e].stop && d(g[e]);
                        else for (e in g) g[e] && g[e].stop && cc.test(e) && d(g[e]);
                        for (e = f.length; e--; ) f[e].elem !== this || (null != a && f[e].queue !== a) || (f[e].anim.stop(c), (b = !1), f.splice(e, 1));
                        (b || !c) && m.dequeue(this, a);
                    })
                );
            },
            finish: function (a) {
                return (
                    a !== !1 && (a = a || "fx"),
                    this.each(function () {
                        var b,
                            c = m._data(this),
                            d = c[a + "queue"],
                            e = c[a + "queueHooks"],
                            f = m.timers,
                            g = d ? d.length : 0;
                        for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--; ) f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
                        for (b = 0; g > b; b++) d[b] && d[b].finish && d[b].finish.call(this);
                        delete c.finish;
                    })
                );
            },
        }),
        m.each(["toggle", "show", "hide"], function (a, b) {
            var c = m.fn[b];
            m.fn[b] = function (a, d, e) {
                return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gc(b, !0), a, d, e);
            };
        }),
        m.each({ slideDown: gc("show"), slideUp: gc("hide"), slideToggle: gc("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {
            m.fn[a] = function (a, c, d) {
                return this.animate(b, a, c, d);
            };
        }),
        (m.timers = []),
        (m.fx.tick = function () {
            var a,
                b = m.timers,
                c = 0;
            for ($b = m.now(); c < b.length; c++) (a = b[c]), a() || b[c] !== a || b.splice(c--, 1);
            b.length || m.fx.stop(), ($b = void 0);
        }),
        (m.fx.timer = function (a) {
            m.timers.push(a), a() ? m.fx.start() : m.timers.pop();
        }),
        (m.fx.interval = 13),
        (m.fx.start = function () {
            _b || (_b = setInterval(m.fx.tick, m.fx.interval));
        }),
        (m.fx.stop = function () {
            clearInterval(_b), (_b = null);
        }),
        (m.fx.speeds = { slow: 600, fast: 200, _default: 400 }),
        (m.fn.delay = function (a, b) {
            return (
                (a = m.fx ? m.fx.speeds[a] || a : a),
                (b = b || "fx"),
                this.queue(b, function (b, c) {
                    var d = setTimeout(b, a);
                    c.stop = function () {
                        clearTimeout(d);
                    };
                })
            );
        }),
        (function () {
            var a, b, c, d, e;
            (b = y.createElement("div")),
                b.setAttribute("className", "t"),
                (b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"),
                (d = b.getElementsByTagName("a")[0]),
                (c = y.createElement("select")),
                (e = c.appendChild(y.createElement("option"))),
                (a = b.getElementsByTagName("input")[0]),
                (d.style.cssText = "top:1px"),
                (k.getSetAttribute = "t" !== b.className),
                (k.style = /top/.test(d.getAttribute("style"))),
                (k.hrefNormalized = "/a" === d.getAttribute("href")),
                (k.checkOn = !!a.value),
                (k.optSelected = e.selected),
                (k.enctype = !!y.createElement("form").enctype),
                (c.disabled = !0),
                (k.optDisabled = !e.disabled),
                (a = y.createElement("input")),
                a.setAttribute("value", ""),
                (k.input = "" === a.getAttribute("value")),
                (a.value = "t"),
                a.setAttribute("type", "radio"),
                (k.radioValue = "t" === a.value);
        })();
    var lc = /\r/g;
    m.fn.extend({
        val: function (a) {
            var b,
                c,
                d,
                e = this[0];
            {
                if (arguments.length)
                    return (
                        (d = m.isFunction(a)),
                        this.each(function (c) {
                            var e;
                            1 === this.nodeType &&
                                ((e = d ? a.call(this, c, m(this).val()) : a),
                                null == e
                                    ? (e = "")
                                    : "number" == typeof e
                                    ? (e += "")
                                    : m.isArray(e) &&
                                      (e = m.map(e, function (a) {
                                          return null == a ? "" : a + "";
                                      })),
                                (b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()]),
                                (b && "set" in b && void 0 !== b.set(this, e, "value")) || (this.value = e));
                        })
                    );
                if (e) return (b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()]), b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : ((c = e.value), "string" == typeof c ? c.replace(lc, "") : null == c ? "" : c);
            }
        },
    }),
        m.extend({
            valHooks: {
                option: {
                    get: function (a) {
                        var b = m.find.attr(a, "value");
                        return null != b ? b : m.trim(m.text(a));
                    },
                },
                select: {
                    get: function (a) {
                        for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++)
                            if (((c = d[i]), !((!c.selected && i !== e) || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || (c.parentNode.disabled && m.nodeName(c.parentNode, "optgroup"))))) {
                                if (((b = m(c).val()), f)) return b;
                                g.push(b);
                            }
                        return g;
                    },
                    set: function (a, b) {
                        var c,
                            d,
                            e = a.options,
                            f = m.makeArray(b),
                            g = e.length;
                        while (g--)
                            if (((d = e[g]), m.inArray(m.valHooks.option.get(d), f) >= 0))
                                try {
                                    d.selected = c = !0;
                                } catch (h) {
                                    d.scrollHeight;
                                }
                            else d.selected = !1;
                        return c || (a.selectedIndex = -1), e;
                    },
                },
            },
        }),
        m.each(["radio", "checkbox"], function () {
            (m.valHooks[this] = {
                set: function (a, b) {
                    return m.isArray(b) ? (a.checked = m.inArray(m(a).val(), b) >= 0) : void 0;
                },
            }),
                k.checkOn ||
                    (m.valHooks[this].get = function (a) {
                        return null === a.getAttribute("value") ? "on" : a.value;
                    });
        });
    var mc,
        nc,
        oc = m.expr.attrHandle,
        pc = /^(?:checked|selected)$/i,
        qc = k.getSetAttribute,
        rc = k.input;
    m.fn.extend({
        attr: function (a, b) {
            return V(this, m.attr, a, b, arguments.length > 1);
        },
        removeAttr: function (a) {
            return this.each(function () {
                m.removeAttr(this, a);
            });
        },
    }),
        m.extend({
            attr: function (a, b, c) {
                var d,
                    e,
                    f = a.nodeType;
                if (a && 3 !== f && 8 !== f && 2 !== f)
                    return typeof a.getAttribute === K
                        ? m.prop(a, b, c)
                        : ((1 === f && m.isXMLDoc(a)) || ((b = b.toLowerCase()), (d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nc : mc))),
                          void 0 === c
                              ? d && "get" in d && null !== (e = d.get(a, b))
                                  ? e
                                  : ((e = m.find.attr(a, b)), null == e ? void 0 : e)
                              : null !== c
                              ? d && "set" in d && void 0 !== (e = d.set(a, c, b))
                                  ? e
                                  : (a.setAttribute(b, c + ""), c)
                              : void m.removeAttr(a, b));
            },
            removeAttr: function (a, b) {
                var c,
                    d,
                    e = 0,
                    f = b && b.match(E);
                if (f && 1 === a.nodeType)
                    while ((c = f[e++])) (d = m.propFix[c] || c), m.expr.match.bool.test(c) ? ((rc && qc) || !pc.test(c) ? (a[d] = !1) : (a[m.camelCase("default-" + c)] = a[d] = !1)) : m.attr(a, c, ""), a.removeAttribute(qc ? c : d);
            },
            attrHooks: {
                type: {
                    set: function (a, b) {
                        if (!k.radioValue && "radio" === b && m.nodeName(a, "input")) {
                            var c = a.value;
                            return a.setAttribute("type", b), c && (a.value = c), b;
                        }
                    },
                },
            },
        }),
        (nc = {
            set: function (a, b, c) {
                return b === !1 ? m.removeAttr(a, c) : (rc && qc) || !pc.test(c) ? a.setAttribute((!qc && m.propFix[c]) || c, c) : (a[m.camelCase("default-" + c)] = a[c] = !0), c;
            },
        }),
        m.each(m.expr.match.bool.source.match(/\w+/g), function (a, b) {
            var c = oc[b] || m.find.attr;
            oc[b] =
                (rc && qc) || !pc.test(b)
                    ? function (a, b, d) {
                          var e, f;
                          return d || ((f = oc[b]), (oc[b] = e), (e = null != c(a, b, d) ? b.toLowerCase() : null), (oc[b] = f)), e;
                      }
                    : function (a, b, c) {
                          return c ? void 0 : a[m.camelCase("default-" + b)] ? b.toLowerCase() : null;
                      };
        }),
        (rc && qc) ||
            (m.attrHooks.value = {
                set: function (a, b, c) {
                    return m.nodeName(a, "input") ? void (a.defaultValue = b) : mc && mc.set(a, b, c);
                },
            }),
        qc ||
            ((mc = {
                set: function (a, b, c) {
                    var d = a.getAttributeNode(c);
                    return d || a.setAttributeNode((d = a.ownerDocument.createAttribute(c))), (d.value = b += ""), "value" === c || b === a.getAttribute(c) ? b : void 0;
                },
            }),
            (oc.id = oc.name = oc.coords = function (a, b, c) {
                var d;
                return c ? void 0 : (d = a.getAttributeNode(b)) && "" !== d.value ? d.value : null;
            }),
            (m.valHooks.button = {
                get: function (a, b) {
                    var c = a.getAttributeNode(b);
                    return c && c.specified ? c.value : void 0;
                },
                set: mc.set,
            }),
            (m.attrHooks.contenteditable = {
                set: function (a, b, c) {
                    mc.set(a, "" === b ? !1 : b, c);
                },
            }),
            m.each(["width", "height"], function (a, b) {
                m.attrHooks[b] = {
                    set: function (a, c) {
                        return "" === c ? (a.setAttribute(b, "auto"), c) : void 0;
                    },
                };
            })),
        k.style ||
            (m.attrHooks.style = {
                get: function (a) {
                    return a.style.cssText || void 0;
                },
                set: function (a, b) {
                    return (a.style.cssText = b + "");
                },
            });
    var sc = /^(?:input|select|textarea|button|object)$/i,
        tc = /^(?:a|area)$/i;
    m.fn.extend({
        prop: function (a, b) {
            return V(this, m.prop, a, b, arguments.length > 1);
        },
        removeProp: function (a) {
            return (
                (a = m.propFix[a] || a),
                this.each(function () {
                    try {
                        (this[a] = void 0), delete this[a];
                    } catch (b) {}
                })
            );
        },
    }),
        m.extend({
            propFix: { for: "htmlFor", class: "className" },
            prop: function (a, b, c) {
                var d,
                    e,
                    f,
                    g = a.nodeType;
                if (a && 3 !== g && 8 !== g && 2 !== g)
                    return (
                        (f = 1 !== g || !m.isXMLDoc(a)),
                        f && ((b = m.propFix[b] || b), (e = m.propHooks[b])),
                        void 0 !== c ? (e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a[b] = c)) : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b]
                    );
            },
            propHooks: {
                tabIndex: {
                    get: function (a) {
                        var b = m.find.attr(a, "tabindex");
                        return b ? parseInt(b, 10) : sc.test(a.nodeName) || (tc.test(a.nodeName) && a.href) ? 0 : -1;
                    },
                },
            },
        }),
        k.hrefNormalized ||
            m.each(["href", "src"], function (a, b) {
                m.propHooks[b] = {
                    get: function (a) {
                        return a.getAttribute(b, 4);
                    },
                };
            }),
        k.optSelected ||
            (m.propHooks.selected = {
                get: function (a) {
                    var b = a.parentNode;
                    return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;
                },
            }),
        m.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
            m.propFix[this.toLowerCase()] = this;
        }),
        k.enctype || (m.propFix.enctype = "encoding");
    var uc = /[\t\r\n\f]/g;
    m.fn.extend({
        addClass: function (a) {
            var b,
                c,
                d,
                e,
                f,
                g,
                h = 0,
                i = this.length,
                j = "string" == typeof a && a;
            if (m.isFunction(a))
                return this.each(function (b) {
                    m(this).addClass(a.call(this, b, this.className));
                });
            if (j)
                for (b = (a || "").match(E) || []; i > h; h++)
                    if (((c = this[h]), (d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : " ")))) {
                        f = 0;
                        while ((e = b[f++])) d.indexOf(" " + e + " ") < 0 && (d += e + " ");
                        (g = m.trim(d)), c.className !== g && (c.className = g);
                    }
            return this;
        },
        removeClass: function (a) {
            var b,
                c,
                d,
                e,
                f,
                g,
                h = 0,
                i = this.length,
                j = 0 === arguments.length || ("string" == typeof a && a);
            if (m.isFunction(a))
                return this.each(function (b) {
                    m(this).removeClass(a.call(this, b, this.className));
                });
            if (j)
                for (b = (a || "").match(E) || []; i > h; h++)
                    if (((c = this[h]), (d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(uc, " ") : "")))) {
                        f = 0;
                        while ((e = b[f++])) while (d.indexOf(" " + e + " ") >= 0) d = d.replace(" " + e + " ", " ");
                        (g = a ? m.trim(d) : ""), c.className !== g && (c.className = g);
                    }
            return this;
        },
        toggleClass: function (a, b) {
            var c = typeof a;
            return "boolean" == typeof b && "string" === c
                ? b
                    ? this.addClass(a)
                    : this.removeClass(a)
                : this.each(
                      m.isFunction(a)
                          ? function (c) {
                                m(this).toggleClass(a.call(this, c, this.className, b), b);
                            }
                          : function () {
                                if ("string" === c) {
                                    var b,
                                        d = 0,
                                        e = m(this),
                                        f = a.match(E) || [];
                                    while ((b = f[d++])) e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
                                } else (c === K || "boolean" === c) && (this.className && m._data(this, "__className__", this.className), (this.className = this.className || a === !1 ? "" : m._data(this, "__className__") || ""));
                            }
                  );
        },
        hasClass: function (a) {
            for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(uc, " ").indexOf(b) >= 0) return !0;
            return !1;
        },
    }),
        m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (
            a,
            b
        ) {
            m.fn[b] = function (a, c) {
                return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
            };
        }),
        m.fn.extend({
            hover: function (a, b) {
                return this.mouseenter(a).mouseleave(b || a);
            },
            bind: function (a, b, c) {
                return this.on(a, null, b, c);
            },
            unbind: function (a, b) {
                return this.off(a, null, b);
            },
            delegate: function (a, b, c, d) {
                return this.on(b, a, c, d);
            },
            undelegate: function (a, b, c) {
                return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
            },
        });
    var vc = m.now(),
        wc = /\?/,
        xc = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
    (m.parseJSON = function (b) {
        if (a.JSON && a.JSON.parse) return a.JSON.parse(b + "");
        var c,
            d = null,
            e = m.trim(b + "");
        return e &&
            !m.trim(
                e.replace(xc, function (a, b, e, f) {
                    return c && b && (d = 0), 0 === d ? a : ((c = e || b), (d += !f - !e), "");
                })
            )
            ? Function("return " + e)()
            : m.error("Invalid JSON: " + b);
    }),
        (m.parseXML = function (b) {
            var c, d;
            if (!b || "string" != typeof b) return null;
            try {
                a.DOMParser ? ((d = new DOMParser()), (c = d.parseFromString(b, "text/xml"))) : ((c = new ActiveXObject("Microsoft.XMLDOM")), (c.async = "false"), c.loadXML(b));
            } catch (e) {
                c = void 0;
            }
            return (c && c.documentElement && !c.getElementsByTagName("parsererror").length) || m.error("Invalid XML: " + b), c;
        });
    var yc,
        zc,
        Ac = /#.*$/,
        Bc = /([?&])_=[^&]*/,
        Cc = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
        Dc = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        Ec = /^(?:GET|HEAD)$/,
        Fc = /^\/\//,
        Gc = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
        Hc = {},
        Ic = {},
        Jc = "*/".concat("*");
    try {
        zc = location.href;
    } catch (Kc) {
        (zc = y.createElement("a")), (zc.href = ""), (zc = zc.href);
    }
    yc = Gc.exec(zc.toLowerCase()) || [];
    function Lc(a) {
        return function (b, c) {
            "string" != typeof b && ((c = b), (b = "*"));
            var d,
                e = 0,
                f = b.toLowerCase().match(E) || [];
            if (m.isFunction(c)) while ((d = f[e++])) "+" === d.charAt(0) ? ((d = d.slice(1) || "*"), (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
        };
    }
    function Mc(a, b, c, d) {
        var e = {},
            f = a === Ic;
        function g(h) {
            var i;
            return (
                (e[h] = !0),
                m.each(a[h] || [], function (a, h) {
                    var j = h(b, c, d);
                    return "string" != typeof j || f || e[j] ? (f ? !(i = j) : void 0) : (b.dataTypes.unshift(j), g(j), !1);
                }),
                i
            );
        }
        return g(b.dataTypes[0]) || (!e["*"] && g("*"));
    }
    function Nc(a, b) {
        var c,
            d,
            e = m.ajaxSettings.flatOptions || {};
        for (d in b) void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);
        return c && m.extend(!0, a, c), a;
    }
    function Oc(a, b, c) {
        var d,
            e,
            f,
            g,
            h = a.contents,
            i = a.dataTypes;
        while ("*" === i[0]) i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));
        if (e)
            for (g in h)
                if (h[g] && h[g].test(e)) {
                    i.unshift(g);
                    break;
                }
        if (i[0] in c) f = i[0];
        else {
            for (g in c) {
                if (!i[0] || a.converters[g + " " + i[0]]) {
                    f = g;
                    break;
                }
                d || (d = g);
            }
            f = f || d;
        }
        return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
    }
    function Pc(a, b, c, d) {
        var e,
            f,
            g,
            h,
            i,
            j = {},
            k = a.dataTypes.slice();
        if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g];
        f = k.shift();
        while (f)
            if ((a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), (i = f), (f = k.shift())))
                if ("*" === f) f = i;
                else if ("*" !== i && i !== f) {
                    if (((g = j[i + " " + f] || j["* " + f]), !g))
                        for (e in j)
                            if (((h = e.split(" ")), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]]))) {
                                g === !0 ? (g = j[e]) : j[e] !== !0 && ((f = h[0]), k.unshift(h[1]));
                                break;
                            }
                    if (g !== !0)
                        if (g && a["throws"]) b = g(b);
                        else
                            try {
                                b = g(b);
                            } catch (l) {
                                return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f };
                            }
                }
        return { state: "success", data: b };
    }
    m.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: zc,
            type: "GET",
            isLocal: Dc.test(yc[1]),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: { "*": Jc, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" },
            contents: { xml: /xml/, html: /html/, json: /json/ },
            responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" },
            converters: { "* text": String, "text html": !0, "text json": m.parseJSON, "text xml": m.parseXML },
            flatOptions: { url: !0, context: !0 },
        },
        ajaxSetup: function (a, b) {
            return b ? Nc(Nc(a, m.ajaxSettings), b) : Nc(m.ajaxSettings, a);
        },
        ajaxPrefilter: Lc(Hc),
        ajaxTransport: Lc(Ic),
        ajax: function (a, b) {
            "object" == typeof a && ((b = a), (a = void 0)), (b = b || {});
            var c,
                d,
                e,
                f,
                g,
                h,
                i,
                j,
                k = m.ajaxSetup({}, b),
                l = k.context || k,
                n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event,
                o = m.Deferred(),
                p = m.Callbacks("once memory"),
                q = k.statusCode || {},
                r = {},
                s = {},
                t = 0,
                u = "canceled",
                v = {
                    readyState: 0,
                    getResponseHeader: function (a) {
                        var b;
                        if (2 === t) {
                            if (!j) {
                                j = {};
                                while ((b = Cc.exec(f))) j[b[1].toLowerCase()] = b[2];
                            }
                            b = j[a.toLowerCase()];
                        }
                        return null == b ? null : b;
                    },
                    getAllResponseHeaders: function () {
                        return 2 === t ? f : null;
                    },
                    setRequestHeader: function (a, b) {
                        var c = a.toLowerCase();
                        return t || ((a = s[c] = s[c] || a), (r[a] = b)), this;
                    },
                    overrideMimeType: function (a) {
                        return t || (k.mimeType = a), this;
                    },
                    statusCode: function (a) {
                        var b;
                        if (a)
                            if (2 > t) for (b in a) q[b] = [q[b], a[b]];
                            else v.always(a[v.status]);
                        return this;
                    },
                    abort: function (a) {
                        var b = a || u;
                        return i && i.abort(b), x(0, b), this;
                    },
                };
            if (
                ((o.promise(v).complete = p.add),
                (v.success = v.done),
                (v.error = v.fail),
                (k.url = ((a || k.url || zc) + "").replace(Ac, "").replace(Fc, yc[1] + "//")),
                (k.type = b.method || b.type || k.method || k.type),
                (k.dataTypes = m
                    .trim(k.dataType || "*")
                    .toLowerCase()
                    .match(E) || [""]),
                null == k.crossDomain && ((c = Gc.exec(k.url.toLowerCase())), (k.crossDomain = !(!c || (c[1] === yc[1] && c[2] === yc[2] && (c[3] || ("http:" === c[1] ? "80" : "443")) === (yc[3] || ("http:" === yc[1] ? "80" : "443")))))),
                k.data && k.processData && "string" != typeof k.data && (k.data = m.param(k.data, k.traditional)),
                Mc(Hc, k, b, v),
                2 === t)
            )
                return v;
            (h = k.global),
                h && 0 === m.active++ && m.event.trigger("ajaxStart"),
                (k.type = k.type.toUpperCase()),
                (k.hasContent = !Ec.test(k.type)),
                (e = k.url),
                k.hasContent || (k.data && ((e = k.url += (wc.test(e) ? "&" : "?") + k.data), delete k.data), k.cache === !1 && (k.url = Bc.test(e) ? e.replace(Bc, "$1_=" + vc++) : e + (wc.test(e) ? "&" : "?") + "_=" + vc++)),
                k.ifModified && (m.lastModified[e] && v.setRequestHeader("If-Modified-Since", m.lastModified[e]), m.etag[e] && v.setRequestHeader("If-None-Match", m.etag[e])),
                ((k.data && k.hasContent && k.contentType !== !1) || b.contentType) && v.setRequestHeader("Content-Type", k.contentType),
                v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + Jc + "; q=0.01" : "") : k.accepts["*"]);
            for (d in k.headers) v.setRequestHeader(d, k.headers[d]);
            if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();
            u = "abort";
            for (d in { success: 1, error: 1, complete: 1 }) v[d](k[d]);
            if ((i = Mc(Ic, k, b, v))) {
                (v.readyState = 1),
                    h && n.trigger("ajaxSend", [v, k]),
                    k.async &&
                        k.timeout > 0 &&
                        (g = setTimeout(function () {
                            v.abort("timeout");
                        }, k.timeout));
                try {
                    (t = 1), i.send(r, x);
                } catch (w) {
                    if (!(2 > t)) throw w;
                    x(-1, w);
                }
            } else x(-1, "No Transport");
            function x(a, b, c, d) {
                var j,
                    r,
                    s,
                    u,
                    w,
                    x = b;
                2 !== t &&
                    ((t = 2),
                    g && clearTimeout(g),
                    (i = void 0),
                    (f = d || ""),
                    (v.readyState = a > 0 ? 4 : 0),
                    (j = (a >= 200 && 300 > a) || 304 === a),
                    c && (u = Oc(k, v, c)),
                    (u = Pc(k, u, v, j)),
                    j
                        ? (k.ifModified && ((w = v.getResponseHeader("Last-Modified")), w && (m.lastModified[e] = w), (w = v.getResponseHeader("etag")), w && (m.etag[e] = w)),
                          204 === a || "HEAD" === k.type ? (x = "nocontent") : 304 === a ? (x = "notmodified") : ((x = u.state), (r = u.data), (s = u.error), (j = !s)))
                        : ((s = x), (a || !x) && ((x = "error"), 0 > a && (a = 0))),
                    (v.status = a),
                    (v.statusText = (b || x) + ""),
                    j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]),
                    v.statusCode(q),
                    (q = void 0),
                    h && n.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]),
                    p.fireWith(l, [v, x]),
                    h && (n.trigger("ajaxComplete", [v, k]), --m.active || m.event.trigger("ajaxStop")));
            }
            return v;
        },
        getJSON: function (a, b, c) {
            return m.get(a, b, c, "json");
        },
        getScript: function (a, b) {
            return m.get(a, void 0, b, "script");
        },
    }),
        m.each(["get", "post"], function (a, b) {
            m[b] = function (a, c, d, e) {
                return m.isFunction(c) && ((e = e || d), (d = c), (c = void 0)), m.ajax({ url: a, type: b, dataType: e, data: c, success: d });
            };
        }),
        m.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
            m.fn[b] = function (a) {
                return this.on(b, a);
            };
        }),
        (m._evalUrl = function (a) {
            return m.ajax({ url: a, type: "GET", dataType: "script", async: !1, global: !1, throws: !0 });
        }),
        m.fn.extend({
            wrapAll: function (a) {
                if (m.isFunction(a))
                    return this.each(function (b) {
                        m(this).wrapAll(a.call(this, b));
                    });
                if (this[0]) {
                    var b = m(a, this[0].ownerDocument).eq(0).clone(!0);
                    this[0].parentNode && b.insertBefore(this[0]),
                        b
                            .map(function () {
                                var a = this;
                                while (a.firstChild && 1 === a.firstChild.nodeType) a = a.firstChild;
                                return a;
                            })
                            .append(this);
                }
                return this;
            },
            wrapInner: function (a) {
                return this.each(
                    m.isFunction(a)
                        ? function (b) {
                              m(this).wrapInner(a.call(this, b));
                          }
                        : function () {
                              var b = m(this),
                                  c = b.contents();
                              c.length ? c.wrapAll(a) : b.append(a);
                          }
                );
            },
            wrap: function (a) {
                var b = m.isFunction(a);
                return this.each(function (c) {
                    m(this).wrapAll(b ? a.call(this, c) : a);
                });
            },
            unwrap: function () {
                return this.parent()
                    .each(function () {
                        m.nodeName(this, "body") || m(this).replaceWith(this.childNodes);
                    })
                    .end();
            },
        }),
        (m.expr.filters.hidden = function (a) {
            return (a.offsetWidth <= 0 && a.offsetHeight <= 0) || (!k.reliableHiddenOffsets() && "none" === ((a.style && a.style.display) || m.css(a, "display")));
        }),
        (m.expr.filters.visible = function (a) {
            return !m.expr.filters.hidden(a);
        });
    var Qc = /%20/g,
        Rc = /\[\]$/,
        Sc = /\r?\n/g,
        Tc = /^(?:submit|button|image|reset|file)$/i,
        Uc = /^(?:input|select|textarea|keygen)/i;
    function Vc(a, b, c, d) {
        var e;
        if (m.isArray(b))
            m.each(b, function (b, e) {
                c || Rc.test(a) ? d(a, e) : Vc(a + "[" + ("object" == typeof e ? b : "") + "]", e, c, d);
            });
        else if (c || "object" !== m.type(b)) d(a, b);
        else for (e in b) Vc(a + "[" + e + "]", b[e], c, d);
    }
    (m.param = function (a, b) {
        var c,
            d = [],
            e = function (a, b) {
                (b = m.isFunction(b) ? b() : null == b ? "" : b), (d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b));
            };
        if ((void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || (a.jquery && !m.isPlainObject(a))))
            m.each(a, function () {
                e(this.name, this.value);
            });
        else for (c in a) Vc(c, a[c], b, e);
        return d.join("&").replace(Qc, "+");
    }),
        m.fn.extend({
            serialize: function () {
                return m.param(this.serializeArray());
            },
            serializeArray: function () {
                return this.map(function () {
                    var a = m.prop(this, "elements");
                    return a ? m.makeArray(a) : this;
                })
                    .filter(function () {
                        var a = this.type;
                        return this.name && !m(this).is(":disabled") && Uc.test(this.nodeName) && !Tc.test(a) && (this.checked || !W.test(a));
                    })
                    .map(function (a, b) {
                        var c = m(this).val();
                        return null == c
                            ? null
                            : m.isArray(c)
                            ? m.map(c, function (a) {
                                  return { name: b.name, value: a.replace(Sc, "\r\n") };
                              })
                            : { name: b.name, value: c.replace(Sc, "\r\n") };
                    })
                    .get();
            },
        }),
        (m.ajaxSettings.xhr =
            void 0 !== a.ActiveXObject
                ? function () {
                      return (!this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zc()) || $c();
                  }
                : Zc);
    var Wc = 0,
        Xc = {},
        Yc = m.ajaxSettings.xhr();
    a.ActiveXObject &&
        m(a).on("unload", function () {
            for (var a in Xc) Xc[a](void 0, !0);
        }),
        (k.cors = !!Yc && "withCredentials" in Yc),
        (Yc = k.ajax = !!Yc),
        Yc &&
            m.ajaxTransport(function (a) {
                if (!a.crossDomain || k.cors) {
                    var b;
                    return {
                        send: function (c, d) {
                            var e,
                                f = a.xhr(),
                                g = ++Wc;
                            if ((f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields)) for (e in a.xhrFields) f[e] = a.xhrFields[e];
                            a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");
                            for (e in c) void 0 !== c[e] && f.setRequestHeader(e, c[e] + "");
                            f.send((a.hasContent && a.data) || null),
                                (b = function (c, e) {
                                    var h, i, j;
                                    if (b && (e || 4 === f.readyState))
                                        if ((delete Xc[g], (b = void 0), (f.onreadystatechange = m.noop), e)) 4 !== f.readyState && f.abort();
                                        else {
                                            (j = {}), (h = f.status), "string" == typeof f.responseText && (j.text = f.responseText);
                                            try {
                                                i = f.statusText;
                                            } catch (k) {
                                                i = "";
                                            }
                                            h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : (h = j.text ? 200 : 404);
                                        }
                                    j && d(h, i, j, f.getAllResponseHeaders());
                                }),
                                a.async ? (4 === f.readyState ? setTimeout(b) : (f.onreadystatechange = Xc[g] = b)) : b();
                        },
                        abort: function () {
                            b && b(void 0, !0);
                        },
                    };
                }
            });
    function Zc() {
        try {
            return new a.XMLHttpRequest();
        } catch (b) {}
    }
    function $c() {
        try {
            return new a.ActiveXObject("Microsoft.XMLHTTP");
        } catch (b) {}
    }
    m.ajaxSetup({
        accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" },
        contents: { script: /(?:java|ecma)script/ },
        converters: {
            "text script": function (a) {
                return m.globalEval(a), a;
            },
        },
    }),
        m.ajaxPrefilter("script", function (a) {
            void 0 === a.cache && (a.cache = !1), a.crossDomain && ((a.type = "GET"), (a.global = !1));
        }),
        m.ajaxTransport("script", function (a) {
            if (a.crossDomain) {
                var b,
                    c = y.head || m("head")[0] || y.documentElement;
                return {
                    send: function (d, e) {
                        (b = y.createElement("script")),
                            (b.async = !0),
                            a.scriptCharset && (b.charset = a.scriptCharset),
                            (b.src = a.url),
                            (b.onload = b.onreadystatechange = function (a, c) {
                                (c || !b.readyState || /loaded|complete/.test(b.readyState)) && ((b.onload = b.onreadystatechange = null), b.parentNode && b.parentNode.removeChild(b), (b = null), c || e(200, "success"));
                            }),
                            c.insertBefore(b, c.firstChild);
                    },
                    abort: function () {
                        b && b.onload(void 0, !0);
                    },
                };
            }
        });
    var _c = [],
        ad = /(=)\?(?=&|$)|\?\?/;
    m.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function () {
            var a = _c.pop() || m.expando + "_" + vc++;
            return (this[a] = !0), a;
        },
    }),
        m.ajaxPrefilter("json jsonp", function (b, c, d) {
            var e,
                f,
                g,
                h = b.jsonp !== !1 && (ad.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && ad.test(b.data) && "data");
            return h || "jsonp" === b.dataTypes[0]
                ? ((e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback),
                  h ? (b[h] = b[h].replace(ad, "$1" + e)) : b.jsonp !== !1 && (b.url += (wc.test(b.url) ? "&" : "?") + b.jsonp + "=" + e),
                  (b.converters["script json"] = function () {
                      return g || m.error(e + " was not called"), g[0];
                  }),
                  (b.dataTypes[0] = "json"),
                  (f = a[e]),
                  (a[e] = function () {
                      g = arguments;
                  }),
                  d.always(function () {
                      (a[e] = f), b[e] && ((b.jsonpCallback = c.jsonpCallback), _c.push(e)), g && m.isFunction(f) && f(g[0]), (g = f = void 0);
                  }),
                  "script")
                : void 0;
        }),
        (m.parseHTML = function (a, b, c) {
            if (!a || "string" != typeof a) return null;
            "boolean" == typeof b && ((c = b), (b = !1)), (b = b || y);
            var d = u.exec(a),
                e = !c && [];
            return d ? [b.createElement(d[1])] : ((d = m.buildFragment([a], b, e)), e && e.length && m(e).remove(), m.merge([], d.childNodes));
        });
    var bd = m.fn.load;
    (m.fn.load = function (a, b, c) {
        if ("string" != typeof a && bd) return bd.apply(this, arguments);
        var d,
            e,
            f,
            g = this,
            h = a.indexOf(" ");
        return (
            h >= 0 && ((d = m.trim(a.slice(h, a.length))), (a = a.slice(0, h))),
            m.isFunction(b) ? ((c = b), (b = void 0)) : b && "object" == typeof b && (f = "POST"),
            g.length > 0 &&
                m
                    .ajax({ url: a, type: f, dataType: "html", data: b })
                    .done(function (a) {
                        (e = arguments), g.html(d ? m("<div>").append(m.parseHTML(a)).find(d) : a);
                    })
                    .complete(
                        c &&
                            function (a, b) {
                                g.each(c, e || [a.responseText, b, a]);
                            }
                    ),
            this
        );
    }),
        (m.expr.filters.animated = function (a) {
            return m.grep(m.timers, function (b) {
                return a === b.elem;
            }).length;
        });
    var cd = a.document.documentElement;
    function dd(a) {
        return m.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1;
    }
    (m.offset = {
        setOffset: function (a, b, c) {
            var d,
                e,
                f,
                g,
                h,
                i,
                j,
                k = m.css(a, "position"),
                l = m(a),
                n = {};
            "static" === k && (a.style.position = "relative"),
                (h = l.offset()),
                (f = m.css(a, "top")),
                (i = m.css(a, "left")),
                (j = ("absolute" === k || "fixed" === k) && m.inArray("auto", [f, i]) > -1),
                j ? ((d = l.position()), (g = d.top), (e = d.left)) : ((g = parseFloat(f) || 0), (e = parseFloat(i) || 0)),
                m.isFunction(b) && (b = b.call(a, c, h)),
                null != b.top && (n.top = b.top - h.top + g),
                null != b.left && (n.left = b.left - h.left + e),
                "using" in b ? b.using.call(a, n) : l.css(n);
        },
    }),
        m.fn.extend({
            offset: function (a) {
                if (arguments.length)
                    return void 0 === a
                        ? this
                        : this.each(function (b) {
                              m.offset.setOffset(this, a, b);
                          });
                var b,
                    c,
                    d = { top: 0, left: 0 },
                    e = this[0],
                    f = e && e.ownerDocument;
                if (f)
                    return (
                        (b = f.documentElement),
                        m.contains(b, e)
                            ? (typeof e.getBoundingClientRect !== K && (d = e.getBoundingClientRect()),
                              (c = dd(f)),
                              { top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0), left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0) })
                            : d
                    );
            },
            position: function () {
                if (this[0]) {
                    var a,
                        b,
                        c = { top: 0, left: 0 },
                        d = this[0];
                    return (
                        "fixed" === m.css(d, "position")
                            ? (b = d.getBoundingClientRect())
                            : ((a = this.offsetParent()), (b = this.offset()), m.nodeName(a[0], "html") || (c = a.offset()), (c.top += m.css(a[0], "borderTopWidth", !0)), (c.left += m.css(a[0], "borderLeftWidth", !0))),
                        { top: b.top - c.top - m.css(d, "marginTop", !0), left: b.left - c.left - m.css(d, "marginLeft", !0) }
                    );
                }
            },
            offsetParent: function () {
                return this.map(function () {
                    var a = this.offsetParent || cd;
                    while (a && !m.nodeName(a, "html") && "static" === m.css(a, "position")) a = a.offsetParent;
                    return a || cd;
                });
            },
        }),
        m.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) {
            var c = /Y/.test(b);
            m.fn[a] = function (d) {
                return V(
                    this,
                    function (a, d, e) {
                        var f = dd(a);
                        return void 0 === e ? (f ? (b in f ? f[b] : f.document.documentElement[d]) : a[d]) : void (f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : (a[d] = e));
                    },
                    a,
                    d,
                    arguments.length,
                    null
                );
            };
        }),
        m.each(["top", "left"], function (a, b) {
            m.cssHooks[b] = Lb(k.pixelPosition, function (a, c) {
                return c ? ((c = Jb(a, b)), Hb.test(c) ? m(a).position()[b] + "px" : c) : void 0;
            });
        }),
        m.each({ Height: "height", Width: "width" }, function (a, b) {
            m.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) {
                m.fn[d] = function (d, e) {
                    var f = arguments.length && (c || "boolean" != typeof d),
                        g = c || (d === !0 || e === !0 ? "margin" : "border");
                    return V(
                        this,
                        function (b, c, d) {
                            var e;
                            return m.isWindow(b)
                                ? b.document.documentElement["client" + a]
                                : 9 === b.nodeType
                                ? ((e = b.documentElement), Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a]))
                                : void 0 === d
                                ? m.css(b, c, g)
                                : m.style(b, c, d, g);
                        },
                        b,
                        f ? d : void 0,
                        f,
                        null
                    );
                };
            });
        }),
        (m.fn.size = function () {
            return this.length;
        }),
        (m.fn.andSelf = m.fn.addBack),
        "function" == typeof define &&
            define.amd &&
            define("jquery", [], function () {
                return m;
            });
    var ed = a.jQuery,
        fd = a.$;
    return (
        (m.noConflict = function (b) {
            return a.$ === m && (a.$ = fd), b && a.jQuery === m && (a.jQuery = ed), m;
        }),
        typeof b === K && (a.jQuery = a.$ = m),
        m
    );
});

/*! jQuery Migrate v1.2.1 | (c) 2005, 2013 jQuery Foundation, Inc. and other contributors | jquery.org/license */
jQuery.migrateMute === void 0 && (jQuery.migrateMute = !0),
    (function (e, t, n) {
        function r(n) {
            var r = t.console;
            i[n] || ((i[n] = !0), e.migrateWarnings.push(n), r && r.warn && !e.migrateMute && (r.warn("JQMIGRATE: " + n), e.migrateTrace && r.trace && r.trace()));
        }
        function a(t, a, i, o) {
            if (Object.defineProperty)
                try {
                    return (
                        Object.defineProperty(t, a, {
                            configurable: !0,
                            enumerable: !0,
                            get: function () {
                                return r(o), i;
                            },
                            set: function (e) {
                                r(o), (i = e);
                            },
                        }),
                        n
                    );
                } catch (s) {}
            (e._definePropertyBroken = !0), (t[a] = i);
        }
        var i = {};
        (e.migrateWarnings = []),
            !e.migrateMute && t.console && t.console.log && t.console.log("JQMIGRATE: Logging is active"),
            e.migrateTrace === n && (e.migrateTrace = !0),
            (e.migrateReset = function () {
                (i = {}), (e.migrateWarnings.length = 0);
            }),
            "BackCompat" === document.compatMode && r("jQuery is not compatible with Quirks Mode");
        var o = e("<input/>", { size: 1 }).attr("size") && e.attrFn,
            s = e.attr,
            u =
                (e.attrHooks.value && e.attrHooks.value.get) ||
                function () {
                    return null;
                },
            c =
                (e.attrHooks.value && e.attrHooks.value.set) ||
                function () {
                    return n;
                },
            l = /^(?:input|button)$/i,
            d = /^[238]$/,
            p = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
            f = /^(?:checked|selected)$/i;
        a(e, "attrFn", o || {}, "jQuery.attrFn is deprecated"),
            (e.attr = function (t, a, i, u) {
                var c = a.toLowerCase(),
                    g = t && t.nodeType;
                return u && (4 > s.length && r("jQuery.fn.attr( props, pass ) is deprecated"), t && !d.test(g) && (o ? a in o : e.isFunction(e.fn[a])))
                    ? e(t)[a](i)
                    : ("type" === a && i !== n && l.test(t.nodeName) && t.parentNode && r("Can't change the 'type' of an input or button in IE 6/7/8"),
                      !e.attrHooks[c] &&
                          p.test(c) &&
                          ((e.attrHooks[c] = {
                              get: function (t, r) {
                                  var a,
                                      i = e.prop(t, r);
                                  return i === !0 || ("boolean" != typeof i && (a = t.getAttributeNode(r)) && a.nodeValue !== !1) ? r.toLowerCase() : n;
                              },
                              set: function (t, n, r) {
                                  var a;
                                  return n === !1 ? e.removeAttr(t, r) : ((a = e.propFix[r] || r), a in t && (t[a] = !0), t.setAttribute(r, r.toLowerCase())), r;
                              },
                          }),
                          f.test(c) && r("jQuery.fn.attr('" + c + "') may use property instead of attribute")),
                      s.call(e, t, a, i));
            }),
            (e.attrHooks.value = {
                get: function (e, t) {
                    var n = (e.nodeName || "").toLowerCase();
                    return "button" === n ? u.apply(this, arguments) : ("input" !== n && "option" !== n && r("jQuery.fn.attr('value') no longer gets properties"), t in e ? e.value : null);
                },
                set: function (e, t) {
                    var a = (e.nodeName || "").toLowerCase();
                    return "button" === a ? c.apply(this, arguments) : ("input" !== a && "option" !== a && r("jQuery.fn.attr('value', val) no longer sets properties"), (e.value = t), n);
                },
            });
        var g,
            h,
            v = e.fn.init,
            m = e.parseJSON,
            y = /^([^<]*)(<[\w\W]+>)([^>]*)$/;
        (e.fn.init = function (t, n, a) {
            var i;
            return t &&
                "string" == typeof t &&
                !e.isPlainObject(n) &&
                (i = y.exec(e.trim(t))) &&
                i[0] &&
                ("<" !== t.charAt(0) && r("$(html) HTML strings must start with '<' character"),
                i[3] && r("$(html) HTML text after last tag is ignored"),
                "#" === i[0].charAt(0) && (r("HTML string cannot start with a '#' character"), e.error("JQMIGRATE: Invalid selector string (XSS)")),
                n && n.context && (n = n.context),
                e.parseHTML)
                ? v.call(this, e.parseHTML(i[2], n, !0), n, a)
                : v.apply(this, arguments);
        }),
            (e.fn.init.prototype = e.fn),
            (e.parseJSON = function (e) {
                return e || null === e ? m.apply(this, arguments) : (r("jQuery.parseJSON requires a valid JSON string"), null);
            }),
            (e.uaMatch = function (e) {
                e = e.toLowerCase();
                var t =
                    /(chrome)[ \/]([\w.]+)/.exec(e) ||
                    /(webkit)[ \/]([\w.]+)/.exec(e) ||
                    /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) ||
                    /(msie) ([\w.]+)/.exec(e) ||
                    (0 > e.indexOf("compatible") && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)) ||
                    [];
                return { browser: t[1] || "", version: t[2] || "0" };
            }),
            e.browser || ((g = e.uaMatch(navigator.userAgent)), (h = {}), g.browser && ((h[g.browser] = !0), (h.version = g.version)), h.chrome ? (h.webkit = !0) : h.webkit && (h.safari = !0), (e.browser = h)),
            a(e, "browser", e.browser, "jQuery.browser is deprecated"),
            (e.sub = function () {
                function t(e, n) {
                    return new t.fn.init(e, n);
                }
                e.extend(!0, t, this),
                    (t.superclass = this),
                    (t.fn = t.prototype = this()),
                    (t.fn.constructor = t),
                    (t.sub = this.sub),
                    (t.fn.init = function (r, a) {
                        return a && a instanceof e && !(a instanceof t) && (a = t(a)), e.fn.init.call(this, r, a, n);
                    }),
                    (t.fn.init.prototype = t.fn);
                var n = t(document);
                return r("jQuery.sub() is deprecated"), t;
            }),
            e.ajaxSetup({ converters: { "text json": e.parseJSON } });
        var b = e.fn.data;
        e.fn.data = function (t) {
            var a,
                i,
                o = this[0];
            return !o || "events" !== t || 1 !== arguments.length || ((a = e.data(o, t)), (i = e._data(o, t)), (a !== n && a !== i) || i === n) ? b.apply(this, arguments) : (r("Use of jQuery.fn.data('events') is deprecated"), i);
        };
        var j = /\/(java|ecma)script/i,
            w = e.fn.andSelf || e.fn.addBack;
        (e.fn.andSelf = function () {
            return r("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()"), w.apply(this, arguments);
        }),
            e.clean ||
                (e.clean = function (t, a, i, o) {
                    (a = a || document), (a = (!a.nodeType && a[0]) || a), (a = a.ownerDocument || a), r("jQuery.clean() is deprecated");
                    var s,
                        u,
                        c,
                        l,
                        d = [];
                    if ((e.merge(d, e.buildFragment(t, a).childNodes), i))
                        for (
                            c = function (e) {
                                return !e.type || j.test(e.type) ? (o ? o.push(e.parentNode ? e.parentNode.removeChild(e) : e) : i.appendChild(e)) : n;
                            },
                                s = 0;
                            null != (u = d[s]);
                            s++
                        )
                            (e.nodeName(u, "script") && c(u)) || (i.appendChild(u), u.getElementsByTagName !== n && ((l = e.grep(e.merge([], u.getElementsByTagName("script")), c)), d.splice.apply(d, [s + 1, 0].concat(l)), (s += l.length)));
                    return d;
                });
        var Q = e.event.add,
            x = e.event.remove,
            k = e.event.trigger,
            N = e.fn.toggle,
            T = e.fn.live,
            M = e.fn.die,
            S = "ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",
            C = RegExp("\\b(?:" + S + ")\\b"),
            H = /(?:^|\s)hover(\.\S+|)\b/,
            A = function (t) {
                return "string" != typeof t || e.event.special.hover ? t : (H.test(t) && r("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'"), t && t.replace(H, "mouseenter$1 mouseleave$1"));
            };
        e.event.props && "attrChange" !== e.event.props[0] && e.event.props.unshift("attrChange", "attrName", "relatedNode", "srcElement"),
            e.event.dispatch && a(e.event, "handle", e.event.dispatch, "jQuery.event.handle is undocumented and deprecated"),
            (e.event.add = function (e, t, n, a, i) {
                e !== document && C.test(t) && r("AJAX events should be attached to document: " + t), Q.call(this, e, A(t || ""), n, a, i);
            }),
            (e.event.remove = function (e, t, n, r, a) {
                x.call(this, e, A(t) || "", n, r, a);
            }),
            (e.fn.error = function () {
                var e = Array.prototype.slice.call(arguments, 0);
                return r("jQuery.fn.error() is deprecated"), e.splice(0, 0, "error"), arguments.length ? this.bind.apply(this, e) : (this.triggerHandler.apply(this, e), this);
            }),
            (e.fn.toggle = function (t, n) {
                if (!e.isFunction(t) || !e.isFunction(n)) return N.apply(this, arguments);
                r("jQuery.fn.toggle(handler, handler...) is deprecated");
                var a = arguments,
                    i = t.guid || e.guid++,
                    o = 0,
                    s = function (n) {
                        var r = (e._data(this, "lastToggle" + t.guid) || 0) % o;
                        return e._data(this, "lastToggle" + t.guid, r + 1), n.preventDefault(), a[r].apply(this, arguments) || !1;
                    };
                for (s.guid = i; a.length > o; ) a[o++].guid = i;
                return this.click(s);
            }),
            (e.fn.live = function (t, n, a) {
                return r("jQuery.fn.live() is deprecated"), T ? T.apply(this, arguments) : (e(this.context).on(t, this.selector, n, a), this);
            }),
            (e.fn.die = function (t, n) {
                return r("jQuery.fn.die() is deprecated"), M ? M.apply(this, arguments) : (e(this.context).off(t, this.selector || "**", n), this);
            }),
            (e.event.trigger = function (e, t, n, a) {
                return n || C.test(e) || r("Global events are undocumented and deprecated"), k.call(this, e, t, n || document, a);
            }),
            e.each(S.split("|"), function (t, n) {
                e.event.special[n] = {
                    setup: function () {
                        var t = this;
                        return (
                            t !== document &&
                                (e.event.add(document, n + "." + e.guid, function () {
                                    e.event.trigger(n, null, t, !0);
                                }),
                                e._data(this, n, e.guid++)),
                            !1
                        );
                    },
                    teardown: function () {
                        return this !== document && e.event.remove(document, n + "." + e._data(this, n)), !1;
                    },
                };
            });
    })(jQuery, window);

// jQuery RoyalSlider plugin. Custom build. Copyright 2011-2012 Dmitry Semenov http://dimsemenov.com
// jquery.royalslider v9.2.5
(function (k) {
    function u(b, e) {
        var c = navigator.userAgent.toLowerCase(),
            g = k.browser,
            a = this,
            f = g.webkit;
        c.indexOf("android");
        a.isIPAD = c.match(/(ipad)/);
        for (var d = document.createElement("div").style, i = ["webkit", "Moz", "ms", "O"], h = "", j = 0, m, c = 0; c < i.length; c++)
            (m = i[c]),
                !h && m + "Transform" in d && (h = m),
                (m = m.toLowerCase()),
                window.requestAnimationFrame || ((window.requestAnimationFrame = window[m + "RequestAnimationFrame"]), (window.cancelAnimationFrame = window[m + "CancelAnimationFrame"] || window[m + "CancelRequestAnimationFrame"]));
        window.requestAnimationFrame ||
            (window.requestAnimationFrame = function (a) {
                var b = new Date().getTime(),
                    c = Math.max(0, 16 - (b - j)),
                    d = window.setTimeout(function () {
                        a(b + c);
                    }, c);
                j = b + c;
                return d;
            });
        window.cancelAnimationFrame ||
            (window.cancelAnimationFrame = function (a) {
                clearTimeout(a);
            });
        a.slider = k(b);
        a.ev = k({});
        a._a = k(document);
        a.st = k.extend({}, k.fn.royalSlider.defaults, e);
        a._b = a.st.transitionSpeed;
        if (a.st.allowCSS3 && (!f || a.st.allowCSS3OnWebkit)) (c = h + (h ? "T" : "t")), (a._c = c + "ransform" in d && c + "ransition" in d), a._c && (a._d = h + (h ? "P" : "p") + "erspective" in d);
        h = h.toLowerCase();
        a._e = "-" + h + "-";
        a._f = "vertical" === a.st.slidesOrientation ? !1 : !0;
        a._g = a._f ? "left" : "top";
        a._h = a._f ? "width" : "height";
        a._i = -1;
        a._j = "fade" === a.st.transitionType ? !1 : !0;
        a._j || ((a.st.sliderDrag = !1), (a._k = 10));
        a._l = 0;
        a._m = 0;
        k.each(k.rsModules, function (b, c) {
            c.call(a);
        });
        a.slides = [];
        a._n = 0;
        (a.st.slides ? k(a.st.slides) : a.slider.children().detach()).each(function () {
            a._o(this, !0);
        });
        a.st.randomizeSlides &&
            a.slides.sort(function () {
                return 0.5 - Math.random();
            });
        a.numSlides = a.slides.length;
        a._p();
        a.st.startSlideId > a.numSlides - 1 && (a.st.startSlideId = a.numSlides - 1);
        a.staticSlideId = a.currSlideId = a._q = a.st.startSlideId;
        a.currSlide = a.slides[a.currSlideId];
        a._r = 0;
        a.slider.addClass((a._f ? "rsHor" : "rsVer") + (a._j ? "" : " rsFade"));
        d = '<div class="rsOverflow"><div class="rsContainer">';
        a.slidesSpacing = a.st.slidesSpacing;
        a._s = (a._f ? a.slider.width() : a.slider.height()) + a.st.slidesSpacing;
        a._t = Boolean(0 < a._u);
        1 >= a.numSlides && (a._v = !1);
        a._w = a._v && a._j ? (2 === a.numSlides ? 1 : 2) : 0;
        a._x = 6 > a.numSlides ? a.numSlides : 6;
        a._y = 0;
        a._z = 0;
        a.slidesJQ = [];
        for (c = 0; c < a.numSlides; c++)
            a.slidesJQ.push(
                k('<div style="' + (a._j ? "" : c !== a.currSlideId ? "z-index: 0; display:none; opacity: 0; position: absolute;  left: 0; top: 0;" : "z-index: 0;  position: absolute; left: 0; top: 0;") + '" class="rsSlide "></div>')
            );
        a.slider.html(d + "</div></div>");
        a._a1 = a.slider.children(".rsOverflow");
        a._b1 = a._a1.children(".rsContainer");
        a._c1 = k('<div class="rsPreloader"></div>');
        c = a._b1.children(".rsSlide");
        a._d1 = a.slidesJQ[a.currSlideId];
        a._e1 = 0;
        "ontouchstart" in window || "createTouch" in document
            ? ((a.hasTouch = !0), (a._f1 = "touchstart.rs"), (a._g1 = "touchmove.rs"), (a._h1 = "touchend.rs"), (a._i1 = "touchcancel.rs"), (a._j1 = 0.5))
            : ((a.hasTouch = !1),
              (a._j1 = 0.2),
              a.st.sliderDrag &&
                  (g.msie || g.opera ? (a._k1 = a._l1 = "move") : g.mozilla ? ((a._k1 = "-moz-grab"), (a._l1 = "-moz-grabbing")) : f && -1 != navigator.platform.indexOf("Mac") && ((a._k1 = "-webkit-grab"), (a._l1 = "-webkit-grabbing")),
                  a._m1()),
              (a._f1 = "mousedown.rs"),
              (a._g1 = "mousemove.rs"),
              (a._h1 = "mouseup.rs"),
              (a._i1 = "mouseup.rs"));
        a._c
            ? ((a._n1 = "transition-property"),
              (a._o1 = "transition-duration"),
              (a._p1 = "transition-timing-function"),
              (a._q1 = a._r1 = a._e + "transform"),
              a._d ? (f && a.slider.addClass("rsWebkit3d"), (a._s1 = "translate3d("), (a._t1 = "px, "), (a._u1 = "px, 0px)")) : ((a._s1 = "translate("), (a._t1 = "px, "), (a._u1 = "px)")),
              a._j ? (a._b1[a._e + a._n1] = a._e + "transform") : ((g = {}), (g[a._e + a._n1] = "opacity"), (g[a._e + a._o1] = a.st.transitionSpeed + "ms"), (g[a._e + a._p1] = a.st.css3easeInOut), c.css(g)))
            : ((a._r1 = "left"), (a._q1 = "top"));
        var l;
        k(window).on("resize.rs", function () {
            l && clearTimeout(l);
            l = setTimeout(function () {
                a.updateSliderSize();
            }, 50);
        });
        a.ev.trigger("rsAfterPropsSetup");
        a.updateSliderSize();
        a.st.keyboardNavEnabled && a._v1();
        a.st.arrowsNavHideOnTouch && a.hasTouch && (a.st.arrowsNav = !1);
        a.st.arrowsNav &&
            ((g = a.st.controlsInside ? a._a1 : a.slider),
            k('<div class="rsArrow rsArrowLeft"><div class="rsArrowIcn"></div></div><div class="rsArrow rsArrowRight"><div class="rsArrowIcn"></div></div>').appendTo(g),
            (a._w1 = g.children(".rsArrowLeft").click(function (b) {
                b.preventDefault();
                a.prev();
            })),
            (a._x1 = g.children(".rsArrowRight").click(function (b) {
                b.preventDefault();
                a.next();
            })),
            a.st.arrowsNavAutoHide &&
                !a.hasTouch &&
                (a._w1.addClass("rsHidden"),
                a._x1.addClass("rsHidden"),
                g.one("mousemove.arrowshover", function () {
                    a._w1.removeClass("rsHidden");
                    a._x1.removeClass("rsHidden");
                }),
                g.hover(
                    function () {
                        a._y1 || (a._w1.removeClass("rsHidden"), a._x1.removeClass("rsHidden"));
                    },
                    function () {
                        a._y1 || (a._w1.addClass("rsHidden"), a._x1.addClass("rsHidden"));
                    }
                )),
            a.ev.on("rsOnUpdateNav", function () {
                a._z1();
            }),
            a._z1());
        a._a2 = (!a.hasTouch && a.st.sliderDrag) || (a.hasTouch && a.st.sliderTouch);
        if (a._a2)
            a._b1.on(a._f1, function (b) {
                a._b2(b);
            });
        else a.dragSuccess = !1;
        var r = ["rsPlayBtnIcon", "rsPlayBtn", "rsCloseVideoBtn", "rsCloseVideoIcn"];
        a._b1.click(function (b) {
            if (!a.dragSuccess) {
                var c = k(b.target).attr("class");
                if (-1 !== k.inArray(c, r) && a.toggleVideo()) return !1;
                if (a.st.navigateByClick && !a._c2) {
                    if (k(b.target).closest(".rsNoDrag", a._d1).length) return !0;
                    a._d2(b);
                }
                a.ev.trigger("rsSlideClick");
            }
        });
        a.ev.trigger("rsAfterInit");
    }
    k.rsModules || (k.rsModules = {});
    u.prototype = {
        _d2: function (b) {
            0 < b[this._f ? "pageX" : "pageY"] - this._e2 ? this.next() : this.prev();
        },
        _p: function () {
            var b;
            b = this.st.numImagesToPreload;
            if ((this._v = this.st.loop)) 2 === this.numSlides ? ((this._v = !1), (this.st.loopRewind = !0)) : 2 > this.numSlides && (this.st.loopRewind = this._v = !1);
            this._v && 0 < b && (4 >= this.numSlides ? (b = 1) : this.st.numImagesToPreload > (this.numSlides - 1) / 2 && (b = Math.floor((this.numSlides - 1) / 2)));
            this._u = b;
        },
        _o: function (b, e) {
            function c(b, c) {
                a.image = b.attr(!c ? "src" : c);
                a.caption = !c ? b.attr("alt") : b.contents();
                a.videoURL = b.attr("data-rsVideo");
            }
            var g,
                a = {};
            this._f2 = b = k(b);
            this.ev.trigger("rsBeforeParseNode", [b, a]);
            if (!a.stopParsing)
                return (
                    (b = this._f2),
                    (a.id = this._n),
                    (a.contentAdded = !1),
                    this._n++,
                    a.hasCover ||
                        (b.hasClass("rsImg") ? ((tempEl = b), (g = !0)) : ((tempEl = b.find(".rsImg")), tempEl.length && (g = !0)),
                        g ? ((a.bigImage = tempEl.attr("data-rsBigImg")), tempEl.is("a") ? c(tempEl, "href") : tempEl.is("img") && c(tempEl)) : b.is("img") && (b.addClass("rsImg"), c(b))),
                    (tempEl = b.find(".rsCaption")),
                    tempEl.length && (a.caption = tempEl.remove()),
                    a.image || ((a.isLoaded = !0), (a.isRendered = !1), (a.isLoading = !1)),
                    (a.content = b),
                    this.ev.trigger("rsAfterParseNode", [b, a]),
                    e && this.slides.push(a),
                    a
                );
        },
        _v1: function () {
            function b(a) {
                37 === a ? e.prev() : 39 === a && e.next();
            }
            var e = this,
                c,
                g;
            e._a
                .on("keydown.rskb", function (a) {
                    if (!e._g2 && ((g = a.keyCode), (37 === g || 39 === g) && !c))
                        b(g),
                            (c = setInterval(function () {
                                b(g);
                            }, 700));
                })
                .on("keyup.rskb", function () {
                    c && (clearInterval(c), (c = null));
                });
        },
        goTo: function (b, e) {
            b !== this.currSlideId && this._h2(b, this.st.transitionSpeed, !0, !e);
        },
        destroy: function (b) {
            var e = this;
            e.ev.trigger("rsBeforeDestroy");
            e._a.off("keydown.rskb keyup.rskb " + e._g1 + " " + e._h1);
            e._b1.on(e._f1, function (b) {
                e._b2(b);
            });
            e.slider.data("royalSlider", "");
            b && e.slider.remove();
        },
        _i2: function (b, e) {
            function c(c, e, f) {
                c.isAdded
                    ? (g(e, c), a(e, c))
                    : (f || (f = d.slidesJQ[e]), c.holder ? (f = c.holder) : ((f = d.slidesJQ[e] = k(f)), (c.holder = f)), (c.appendOnLoaded = !1), a(e, c, f), g(e, c), d._k2(c, f, b), (appended = c.isAdded = !0));
            }
            function g(a, c) {
                c.contentAdded || (d.setItemHtml(c, b), b || (c.contentAdded = !0));
            }
            function a(a, b, c) {
                d._j && (c || (c = d.slidesJQ[a]), c.css(d._g, (a + d._z + r) * d._s));
            }
            function f(a) {
                if (j) {
                    if (a > m - 1) return f(a - m);
                    if (0 > a) return f(m + a);
                }
                return a;
            }
            var d = this,
                i,
                h,
                j = d._v,
                m = d.numSlides;
            if (!isNaN(e)) return f(e);
            var l = d.currSlideId,
                r,
                n = b ? (Math.abs(d._j2 - d.currSlideId) >= d.numSlides - 1 ? 0 : 1) : d._u,
                p = Math.min(2, n),
                s = !1,
                t = !1,
                q;
            for (h = l; h < l + 1 + p; h++)
                if (((q = f(h)), (i = d.slides[q]) && (!i.isAdded || !i.positionSet))) {
                    s = !0;
                    break;
                }
            for (h = l - 1; h > l - 1 - p; h--)
                if (((q = f(h)), (i = d.slides[q]) && (!i.isAdded || !i.positionSet))) {
                    t = !0;
                    break;
                }
            if (s) for (h = l; h < l + n + 1; h++) (q = f(h)), (r = Math.floor((d._q - (l - h)) / d.numSlides) * d.numSlides), (i = d.slides[q]) && c(i, q);
            if (t) for (h = l - 1; h > l - 1 - n; h--) (q = f(h)), (r = Math.floor((d._q - (l - h)) / m) * m), (i = d.slides[q]) && c(i, q);
            if (!b) {
                p = f(l - n);
                l = f(l + n);
                n = p > l ? 0 : p;
                for (h = 0; h < m; h++) if (!(p > l && h > p - 1) && (h < n || h > l)) if ((i = d.slides[h]) && i.holder) i.holder.detach(), (i.isAdded = !1);
            }
        },
        setItemHtml: function (b, e) {
            function c() {
                a.isWaiting = !0;
                b.holder.html(g._c1.clone());
                a.slideId = -99;
            }
            var g = this,
                a = b.holder,
                f = function (a) {
                    var b = a.sizeType;
                    return function (d) {
                        var f = a.content,
                            h = a.holder;
                        if (d) {
                            var i = d.currentTarget;
                            k(i).off("load error");
                            if ("error" === d.type) {
                                a.isLoaded = !0;
                                a.image = "";
                                a.isLoading = !1;
                                f.addClass("rsSlideError");
                                h.html(f);
                                a.holder.trigger("rsAfterContentSet");
                                g.ev.trigger("rsAfterContentSet", a);
                                return;
                            }
                        }
                        if (a.image) {
                            if (a.bigImage && a.sizeType !== b) {
                                "med" === b ? (a.isMedLoading = !1) : "big" === b ? (a.isBigLoading = !1) : (a.isMedLoading = a.isLoading = !1);
                                return;
                            }
                            if (a.isLoaded) {
                                if (!a.isRendered && e) {
                                    c();
                                    return;
                                }
                                g._l2(a);
                            } else {
                                var j;
                                f.hasClass("rsImg") ? ((j = !0), (d = f)) : ((j = !1), (d = f.find(".rsImg")));
                                d.length && d.is("a") && (j ? (f = k('<img class="rsImg" src="' + a.image + '" />')) : f.find(".rsImg").replaceWith('<img class="rsImg" src="' + a.image + '" />'), (a.content = f));
                                a.iW = i.width;
                                0 < a.iW && ((a.iH = i.height), (a.isLoaded = !0), (a.isLoading = !1), g._l2(a));
                            }
                        } else {
                            if (!g._t && e && !a.isRendered) {
                                a.isRendered = !0;
                                c();
                                return;
                            }
                            a.isLoaded = !0;
                            a.isLoading = !1;
                        }
                        i = a.id - g._l;
                        !e && !a.appendOnLoaded && g.st.fadeinLoadedSlide && (0 === i || ((g._m2 || g._g2) && (-1 === i || 1 === i)))
                            ? (f.css(g._e + "transition", "opacity 400ms ease-in-out").css({ visibility: "visible", opacity: 0 }),
                              h.html(f),
                              setTimeout(function () {
                                  f.css("opacity", 1);
                              }, 6))
                            : h.html(f);
                        a.isRendered = !0;
                        h.find("a")
                            .off("click.rs")
                            .on("click.rs", function () {
                                if (g.dragSuccess) return !1;
                                g._c2 = !0;
                                setTimeout(function () {
                                    g._c2 = !1;
                                }, 3);
                            });
                        a.holder.trigger("rsAfterContentSet");
                        g.ev.trigger("rsAfterContentSet", a);
                        a.appendOnLoaded && g._k2(a, f, e);
                    };
                };
            if (b.isLoaded) f(b)();
            else if (e) c();
            else if (b.image)
                if (b.isLoading) {
                    var d = 1,
                        i = function () {
                            if (b.isLoading)
                                if (b.isLoaded) f(b)();
                                else {
                                    if (0 === d % 50) {
                                        var a = b.imageLoader;
                                        if (a.complete && void 0 !== a.naturalWidth && 0 !== a.naturalWidth && 0 !== a.naturalHeight) {
                                            f(b)();
                                            return;
                                        }
                                    }
                                    300 < d || (setTimeout(i, 400), d++);
                                }
                        };
                    i(b.sizeType);
                } else {
                    var h = k("<img/>"),
                        j = b.image;
                    e ? c() : b.isLoading || (j || ((j = h.attr("src")), (h = k("<img/>"))), b.holder.html(g._c1.clone()), (b.isLoading = !0), (b.imageLoader = h), h.one("load error", f(b)).attr("src", j));
                }
            else f(b)();
        },
        _k2: function (b, e, c) {
            var g = b.holder,
                a = b.id - this._l;
            this._j && !c && this.st.fadeinLoadedSlide && (0 === a || ((this._m2 || this._g2) && (-1 === a || 1 === a)))
                ? ((e = b.content),
                  e.css(this._e + "transition", "opacity 400ms ease-in-out").css({ visibility: "visible", opacity: 0 }),
                  this._b1.append(g),
                  setTimeout(function () {
                      e.css("opacity", 1);
                  }, 6))
                : this._b1.append(g);
            b.appendOnLoaded = !1;
        },
        _b2: function (b, e) {
            var c = this,
                g;
            c.dragSuccess = !1;
            if (k(b.target).closest(".rsNoDrag", c._d1).length) return !0;
            e || (c._m2 && c._n2());
            if (c._g2) c.hasTouch && (c._o2 = !0);
            else {
                c.hasTouch && (c._o2 = !1);
                c._p2();
                if (c.hasTouch) {
                    var a = b.originalEvent.touches;
                    if (a && 0 < a.length) (g = a[0]), 1 < a.length && (c._o2 = !0);
                    else return;
                } else (g = b), b.preventDefault();
                c._g2 = !0;
                c._a
                    .on(c._g1, function (a) {
                        c._q2(a, e);
                    })
                    .on(c._h1, function (a) {
                        c._r2(a, e);
                    });
                c._s2 = "";
                c._t2 = !1;
                c._u2 = g.pageX;
                c._v2 = g.pageY;
                c._w2 = c._r = (!e ? c._f : c._x2) ? g.pageX : g.pageY;
                c._y2 = 0;
                c._z2 = 0;
                c._a3 = !e ? c._m : c._b3;
                c._c3 = new Date().getTime();
                if (c.hasTouch)
                    c._a1.on(c._i1, function (a) {
                        c._r2(a, e);
                    });
            }
        },
        _d3: function (b, e) {
            if (this._e3) {
                var c = this._f3,
                    g = b.pageX - this._u2,
                    a = b.pageY - this._v2,
                    f = this._a3 + g,
                    d = this._a3 + a,
                    i = !e ? this._f : this._x2,
                    f = i ? f : d,
                    h = this._s2;
                this._t2 = !0;
                this._u2 = b.pageX;
                this._v2 = b.pageY;
                d = i ? this._u2 : this._v2;
                "x" === h && 0 !== g ? (this._y2 = 0 < g ? 1 : -1) : "y" === h && 0 !== a && (this._z2 = 0 < a ? 1 : -1);
                g = i ? g : a;
                e
                    ? f > this._g3
                        ? (f = this._a3 + g * this._j1)
                        : f < this._h3 && (f = this._a3 + g * this._j1)
                    : this._v || (0 >= this.currSlideId && 0 < d - this._w2 && (f = this._a3 + g * this._j1), this.currSlideId >= this.numSlides - 1 && 0 > d - this._w2 && (f = this._a3 + g * this._j1));
                this._a3 = f;
                200 < c - this._c3 && ((this._c3 = c), (this._r = d));
                e ? this._j3(this._a3) : this._j && this._i3(this._a3);
            }
        },
        _q2: function (b, e) {
            var c = this;
            if (c.hasTouch) {
                if (c._k3) return;
                var g = b.originalEvent.touches;
                if (g) {
                    if (1 < g.length) return;
                    point = g[0];
                } else return;
            } else point = b;
            c._t2 ||
                (c._c && (!e ? c._b1 : c._l3).css(c._e + c._o1, "0s"),
                (function d() {
                    c._g2 && ((c._m3 = requestAnimationFrame(d)), c._n3 && c._d3(c._n3, e));
                })());
            if (c._e3) b.preventDefault(), (c._f3 = new Date().getTime()), (c._n3 = point);
            else {
                var g = !e ? c._f : c._x2,
                    a = Math.abs(point.pageX - c._u2) - Math.abs(point.pageY - c._v2) - (g ? -7 : 7);
                if (7 < a) {
                    if (g) b.preventDefault(), (c._s2 = "x");
                    else if (c.hasTouch) {
                        c._o3();
                        return;
                    }
                    c._e3 = !0;
                } else if (-7 > a) {
                    if (g) {
                        if (c.hasTouch) {
                            c._o3();
                            return;
                        }
                    } else b.preventDefault(), (c._s2 = "y");
                    c._e3 = !0;
                }
            }
        },
        _o3: function () {
            this._k3 = !0;
            this._t2 = this._g2 = !1;
            this._r2();
        },
        _r2: function (b, e) {
            function c(a) {
                return 100 > a ? 100 : 500 < a ? 500 : a;
            }
            function g(b, d) {
                if (a._j || e) (i = (-a._q - a._z) * a._s), (h = Math.abs(a._m - i)), (a._b = h / d), b && (a._b += 250), (a._b = c(a._b)), a._q3(i, !1);
            }
            var a = this,
                f,
                d,
                i,
                h;
            a.ev.trigger("rsDragRelease");
            a._n3 = null;
            a._g2 = !1;
            a._k3 = !1;
            a._e3 = !1;
            a._f3 = 0;
            cancelAnimationFrame(a._m3);
            a._t2 && (e ? a._j3(a._a3) : a._j && a._i3(a._a3));
            a._a.off(a._g1).off(a._h1);
            a.hasTouch && a._a1.off(a._i1);
            a._m1();
            if (!a._t2 && !a._o2 && e && a._p3) {
                var j = k(b.target).closest(".rsNavItem");
                j.length && a.goTo(j.index());
            } else if (((d = !e ? a._f : a._x2), a._t2 && !(("y" === a._s2 && d) || ("x" === a._s2 && !d)))) {
                a.dragSuccess = !0;
                a._s2 = "";
                var m = a.st.minSlideOffset;
                f = a.hasTouch ? b.originalEvent.changedTouches[0] : b;
                var l = d ? f.pageX : f.pageY,
                    r = a._w2;
                f = a._r;
                var n = a.currSlideId,
                    p = a.numSlides,
                    s = d ? a._y2 : a._z2,
                    t = a._v;
                Math.abs(l - r);
                f = l - f;
                d = new Date().getTime() - a._c3;
                d = Math.abs(f) / d;
                if (0 === s || 1 >= p) g(!0, d);
                else {
                    if (!t && !e)
                        if (0 >= n) {
                            if (0 < s) {
                                g(!0, d);
                                return;
                            }
                        } else if (n >= p - 1 && 0 > s) {
                            g(!0, d);
                            return;
                        }
                    if (e) {
                        i = a._b3;
                        if (i > a._g3) i = a._g3;
                        else if (i < a._h3) i = a._h3;
                        else {
                            m = (d * d) / 0.006;
                            j = -a._b3;
                            l = a._r3 - a._s3 + a._b3;
                            0 < f && m > j ? ((j += a._s3 / (15 / (0.003 * (m / d)))), (d = (d * j) / m), (m = j)) : 0 > f && m > l && ((l += a._s3 / (15 / (0.003 * (m / d)))), (d = (d * l) / m), (m = l));
                            j = Math.max(Math.round(d / 0.003), 50);
                            i += m * (0 > f ? -1 : 1);
                            if (i > a._g3) {
                                a._t3(i, j, !0, a._g3, 200);
                                return;
                            }
                            if (i < a._h3) {
                                a._t3(i, j, !0, a._h3, 200);
                                return;
                            }
                        }
                        a._t3(i, j, !0);
                    } else
                        r + m < l
                            ? 0 > s
                                ? g(!1, d)
                                : a._h2("prev", c(Math.abs(a._m - (-a._q - a._z + 1) * a._s) / d), !1, !0, !0)
                            : r - m > l
                            ? 0 < s
                                ? g(!1, d)
                                : a._h2("next", c(Math.abs(a._m - (-a._q - a._z - 1) * a._s) / d), !1, !0, !0)
                            : g(!1, d);
                }
            }
        },
        _i3: function (b) {
            b = this._m = b;
            this._c ? this._b1.css(this._r1, this._s1 + (this._f ? b + this._t1 + 0 : 0 + this._t1 + b) + this._u1) : this._b1.css(this._f ? this._r1 : this._q1, b);
        },
        updateSliderSize: function (b) {
            var e, c;
            this.st.beforeResize && this.st.beforeResize.call(this);
            if (this.st.autoScaleSlider) {
                var g = this.st.autoScaleSliderWidth,
                    a = this.st.autoScaleSliderHeight;
                this.st.autoScaleHeight
                    ? ((e = this.slider.width()), e != this.width && (this.slider.css("height", e * (a / g)), (e = this.slider.width())), (c = this.slider.height()))
                    : ((c = this.slider.height()), c != this.height && (this.slider.css("width", c * (g / a)), (c = this.slider.height())), (e = this.slider.width()));
            } else (e = this.slider.width()), (c = this.slider.height());
            this._e2 = this.slider.offset();
            this._e2 = this._e2[this._g];
            if (b || e != this.width || c != this.height) {
                this.width = e;
                this.height = c;
                this._u3 = e;
                this._v3 = c;
                this.ev.trigger("rsBeforeSizeSet");
                this._a1.css({ width: this._u3, height: this._v3 });
                this._s = (this._f ? this._u3 : this._v3) + this.st.slidesSpacing;
                this._w3 = this.st.imageScalePadding;
                for (e = 0; e < this.slides.length; e++) (b = this.slides[e]), (b.positionSet = !1), b && b.image && b.isLoaded && ((b.isRendered = !1), this._l2(b));
                if (this._x3) for (e = 0; e < this._x3.length; e++) (b = this._x3[e]), b.holder.css(this._g, (b.id + this._z) * this._s);
                this._i2();
                this._j && (this._c && this._b1.css(this._e + "transition-duration", "0s"), this._i3((-this._q - this._z) * this._s));
                this.ev.trigger("rsOnUpdateNav");
                this.st.afterResize && this.st.afterResize.call(this);
            }
        },
        setSlidesOrientation: function () {},
        appendSlide: function (b, e) {
            var c = this._o(b);
            if (isNaN(e) || e > this.numSlides) e = this.numSlides;
            this.slides.splice(e, 0, c);
            this.slidesJQ.splice(e, 0, '<div style="' + (this._j ? "position: absolute;" : "z-index: 0; display:none; opacity: 0; position: absolute;  left: 0; top: 0;") + '" class="rsSlide"></div>');
            e < this.currSlideId && this.currSlideId++;
            this.ev.trigger("rsOnAppendSlide", [c, e]);
            this._z3(e);
            e === this.currSlideId && this.ev.trigger("rsAfterSlideChange");
        },
        removeSlide: function (b) {
            var e = this.slides[b];
            e &&
                (e.holder && e.holder.remove(),
                b < this.currSlideId && this.currSlideId++,
                this.slides.splice(b, 1),
                this.slidesJQ.splice(b, 1),
                this.ev.trigger("rsOnRemoveSlide", [b]),
                this._z3(b),
                b === this.currSlideId && this.ev.trigger("rsAfterSlideChange"));
        },
        _z3: function () {
            var b = this,
                e = b.numSlides,
                e = 0 >= b._q ? 0 : Math.floor(b._q / e);
            b.numSlides = b.slides.length;
            0 === b.numSlides ? ((b.currSlideId = b._z = b._q = 0), (b.currSlide = b._a4 = null)) : (b._q = e * b.numSlides + b.currSlideId);
            for (e = 0; e < b.numSlides; e++) b.slides[e].id = e;
            b.currSlide = b.slides[b.currSlideId];
            b._d1 = b.slidesJQ[b.currSlideId];
            b.currSlideId >= b.numSlides ? b.goTo(b.numSlides - 1) : 0 > b.currSlideId && b.goTo(0);
            b._p();
            b._j && b._v && b._b1.css(b._e + b._o1, "0ms");
            b._b4 && clearTimeout(b._b4);
            b._b4 = setTimeout(function () {
                b._j && b._i3((-b._q - b._z) * b._s);
                b._i2();
                b._j || b._d1.css({ display: "block", opacity: 1 });
            }, 14);
            b.ev.trigger("rsOnUpdateNav");
        },
        _m1: function () {
            !this.hasTouch && this._j && (this._k1 ? this._a1.css("cursor", this._k1) : (this._a1.removeClass("grabbing-cursor"), this._a1.addClass("grab-cursor")));
        },
        _p2: function () {
            !this.hasTouch && this._j && (this._l1 ? this._a1.css("cursor", this._l1) : (this._a1.removeClass("grab-cursor"), this._a1.addClass("grabbing-cursor")));
        },
        next: function (b) {
            this._h2("next", this.st.transitionSpeed, !0, !b);
        },
        prev: function (b) {
            this._h2("prev", this.st.transitionSpeed, !0, !b);
        },
        _h2: function (b, e, c, g, a) {
            var f = this,
                d,
                i,
                h;
            f._d4 && f.stopVideo();
            f.ev.trigger("rsBeforeMove", [b, g]);
            newItemId = "next" === b ? f.currSlideId + 1 : "prev" === b ? f.currSlideId - 1 : (b = parseInt(b, 10));
            if (!f._v) {
                if (0 > newItemId) {
                    f._e4("left", !g);
                    return;
                }
                if (newItemId >= f.numSlides) {
                    f._e4("right", !g);
                    return;
                }
            }
            f._m2 && (f._n2(), (c = !1));
            i = newItemId - f.currSlideId;
            h = f._j2 = f.currSlideId;
            var j = f.currSlideId + i,
                g = f._q,
                m;
            f._v ? ((j = f._i2(!1, j)), (g += i)) : (g = j);
            f._l = j;
            f._a4 = f.slidesJQ[f.currSlideId];
            f._q = g;
            f.currSlideId = f._l;
            f.currSlide = f.slides[f.currSlideId];
            f._d1 = f.slidesJQ[f.currSlideId];
            j = Boolean(0 < i);
            i = Math.abs(i);
            var l = Math.floor(h / f._u),
                k = Math.floor((h + (j ? 2 : -2)) / f._u),
                l = (j ? Math.max(l, k) : Math.min(l, k)) * f._u + (j ? f._u - 1 : 0);
            l > f.numSlides - 1 ? (l = f.numSlides - 1) : 0 > l && (l = 0);
            h = j ? l - h : h - l;
            h > f._u && (h = f._u);
            if (i > h + 2) {
                f._z += (i - (h + 2)) * (j ? -1 : 1);
                e *= 1.4;
                for (h = 0; h < f.numSlides; h++) f.slides[h].positionSet = !1;
            }
            f._b = e;
            f._i2(!0);
            a || (m = !0);
            d = (-g - f._z) * f._s;
            m
                ? setTimeout(function () {
                      f._c4 = !1;
                      f._q3(d, b, !1, c);
                      f.ev.trigger("rsOnUpdateNav");
                  }, 0)
                : (f._q3(d, b, !1, c), f.ev.trigger("rsOnUpdateNav"));
        },
        _z1: function () {
            this.st.arrowsNav &&
                (1 >= this.numSlides
                    ? (this._w1.css("display", "none"), this._x1.css("display", "none"))
                    : (this._w1.css("display", "block"),
                      this._x1.css("display", "block"),
                      !this._v &&
                          !this.st.loopRewind &&
                          (0 === this.currSlideId ? this._w1.addClass("rsArrowDisabled") : this._w1.removeClass("rsArrowDisabled"),
                          this.currSlideId === this.numSlides - 1 ? this._x1.addClass("rsArrowDisabled") : this._x1.removeClass("rsArrowDisabled"))));
        },
        _q3: function (b, e, c, g, a) {
            function f() {
                var a;
                if (i && (a = i.data("rsTimeout"))) i !== h && i.css({ opacity: 0, display: "none", zIndex: 0 }), clearTimeout(a), i.data("rsTimeout", "");
                if ((a = h.data("rsTimeout"))) clearTimeout(a), h.data("rsTimeout", "");
            }
            var d = this,
                i,
                h,
                j = {};
            isNaN(d._b) && (d._b = 400);
            d._m = d._a3 = b;
            d.ev.trigger("rsBeforeAnimStart");
            d.st.beforeSlideChange && d.st.beforeSlideChange.call(d);
            d._c
                ? d._j
                    ? ((j[d._e + d._o1] = d._b + "ms"),
                      (j[d._e + d._p1] = g ? k.rsCSS3Easing[d.st.easeInOut] : k.rsCSS3Easing[d.st.easeOut]),
                      d._b1.css(j),
                      setTimeout(
                          function () {
                              d._i3(b);
                          },
                          d.hasTouch ? 5 : 0
                      ))
                    : ((d._b = d.st.transitionSpeed),
                      (i = d._a4),
                      (h = d._d1),
                      h.data("rsTimeout") && h.css("opacity", 0),
                      f(),
                      i &&
                          i.data(
                              "rsTimeout",
                              setTimeout(function () {
                                  j[d._e + d._o1] = "0ms";
                                  j.zIndex = 0;
                                  j.display = "none";
                                  i.data("rsTimeout", "");
                                  i.css(j);
                                  setTimeout(function () {
                                      i.css("opacity", 0);
                                  }, 16);
                              }, d._b + 60)
                          ),
                      (j.display = "block"),
                      (j.zIndex = d._k),
                      (j.opacity = 0),
                      (j[d._e + d._o1] = "0ms"),
                      (j[d._e + d._p1] = k.rsCSS3Easing[d.st.easeInOut]),
                      h.css(j),
                      h.data(
                          "rsTimeout",
                          setTimeout(function () {
                              h.css(d._e + d._o1, d._b + "ms");
                              h.data(
                                  "rsTimeout",
                                  setTimeout(function () {
                                      h.css("opacity", 1);
                                      h.data("rsTimeout", "");
                                  }, 20)
                              );
                          }, 20)
                      ))
                : d._j
                ? ((j[d._f ? d._r1 : d._q1] = b + "px"), d._b1.animate(j, d._b, g ? d.st.easeInOut : d.st.easeOut))
                : ((i = d._a4),
                  (h = d._d1),
                  h.stop(!0, !0).css({ opacity: 0, display: "block", zIndex: d._k }),
                  (d._b = d.st.transitionSpeed),
                  h.animate({ opacity: 1 }, d._b, d.st.easeInOut),
                  f(),
                  i &&
                      i.data(
                          "rsTimeout",
                          setTimeout(function () {
                              i.stop(!0, !0).css({ opacity: 0, display: "none", zIndex: 0 });
                          }, d._b + 60)
                      ));
            d._m2 = !0;
            d.loadingTimeout && clearTimeout(d.loadingTimeout);
            d.loadingTimeout = a
                ? setTimeout(function () {
                      d.loadingTimeout = null;
                      a.call();
                  }, d._b + 60)
                : setTimeout(function () {
                      d.loadingTimeout = null;
                      d._f4(e);
                  }, d._b + 60);
        },
        _n2: function () {
            this._m2 = !1;
            clearTimeout(this.loadingTimeout);
            if (this._j)
                if (this._c) {
                    var b = this._m,
                        e = (this._a3 = this._g4());
                    this._b1.css(this._e + this._o1, "0ms");
                    b !== e && this._i3(e);
                } else this._b1.stop(!0), (this._m = parseInt(this._b1.css(this._r1), 10));
            else 20 < this._k ? (this._k = 10) : this._k++;
        },
        _g4: function () {
            var b = window
                .getComputedStyle(this._b1.get(0), null)
                .getPropertyValue(this._e + "transform")
                .replace(/^matrix\(/i, "")
                .split(/, |\)$/g);
            return parseInt(b[this._f ? 4 : 5], 10);
        },
        _h4: function (b, e) {
            return this._c ? this._s1 + (e ? b + this._t1 + 0 : 0 + this._t1 + b) + this._u1 : b;
        },
        _f4: function () {
            this._j || (this._d1.css("z-index", 0), (this._k = 10));
            this._m2 = !1;
            this.staticSlideId = this.currSlideId;
            this._i2();
            this._i4 = !1;
            this.ev.trigger("rsAfterSlideChange");
            this.st.afterSlideChange && this.st.afterSlideChange.call(this);
        },
        _e4: function (b, e) {
            var c = this,
                g = (-c._q - c._z) * c._s;
            moveDist = 30;
            if (0 !== c.numSlides)
                if (c.st.loopRewind) "left" === b ? c.goTo(c.numSlides - 1, e) : c.goTo(0, e);
                else if (!c._m2 && c._j && 0 !== moveDist) {
                    c._b = 200;
                    var a = function () {
                        c._m2 = !1;
                    };
                    c._q3(g + ("left" === b ? moveDist : -moveDist), "", !1, !0, function () {
                        c._m2 = !1;
                        c._q3(g, "", !1, !0, a);
                    });
                }
        },
        _l2: function (b) {
            if (!b.isRendered) {
                var e = b.content,
                    c = "rsImg",
                    g,
                    a = this.st.imageAlignCenter,
                    f = this.st.imageScaleMode,
                    d;
                b.videoURL && ((c = "rsVideoContainer"), "fill" !== f ? (g = !0) : ((d = e), d.hasClass(c) || (d = d.find("." + c)), d.css({ width: "100%", height: "100%" }), (c = "rsImg")));
                e.hasClass(c) || (e = e.find("." + c));
                var i = b.iW,
                    c = b.iH;
                b.isRendered = !0;
                if ("none" !== f || a) {
                    bMargin = "fill" !== f ? this._w3 : 0;
                    b = this._u3 - 2 * bMargin;
                    d = this._v3 - 2 * bMargin;
                    var h,
                        j,
                        k = {};
                    if ("fit-if-smaller" === f && (i > b || c > d)) f = "fit";
                    if ("fill" === f || "fit" === f) (h = b / i), (j = d / c), (h = "fill" == f ? (h > j ? h : j) : "fit" == f ? (h < j ? h : j) : 1), (i = Math.ceil(i * h, 10)), (c = Math.ceil(c * h, 10));
                    "none" !== f && ((k.width = i), (k.height = c), g && e.find(".rsImg").css({ width: "100%", height: "100%" }));
                    a && ((k.marginLeft = Math.floor((b - i) / 2) + bMargin), (k.marginTop = Math.floor((d - c) / 2) + bMargin));
                    e.css(k);
                }
            }
        },
    };
    k.rsProto = u.prototype;
    k.fn.royalSlider = function (b) {
        var e = arguments;
        return this.each(function () {
            var c = k(this);
            if ("object" === typeof b || !b) c.data("royalSlider") || c.data("royalSlider", new u(c, b));
            else if ((c = c.data("royalSlider")) && c[b]) return c[b].apply(c, Array.prototype.slice.call(e, 1));
        });
    };
    k.fn.royalSlider.defaults = {
        slidesSpacing: 8,
        startSlideId: 0,
        loop: !1,
        loopRewind: !1,
        numImagesToPreload: 4,
        fadeinLoadedSlide: !0,
        slidesOrientation: "horizontal",
        transitionType: "move",
        transitionSpeed: 600,
        controlNavigation: "bullets",
        controlsInside: !0,
        arrowsNav: !0,
        arrowsNavAutoHide: !0,
        navigateByClick: !0,
        randomizeSlides: !1,
        sliderDrag: !0,
        sliderTouch: !0,
        keyboardNavEnabled: !1,
        fadeInAfterLoaded: !0,
        allowCSS3: !0,
        allowCSS3OnWebkit: !0,
        addActiveClass: !1,
        autoHeight: !1,
        easeOut: "easeOutSine",
        easeInOut: "easeInOutSine",
        minSlideOffset: 10,
        imageScaleMode: "fit-if-smaller",
        imageAlignCenter: !0,
        imageScalePadding: 4,
        autoScaleSlider: !1,
        autoScaleSliderWidth: 800,
        autoScaleSliderHeight: 400,
        autoScaleHeight: !0,
        arrowsNavHideOnTouch: !1,
        globalCaption: !1,
        beforeSlideChange: null,
        afterSlideChange: null,
        beforeResize: null,
        afterResize: null,
    };
    k.rsCSS3Easing = { easeOutSine: "cubic-bezier(0.390, 0.575, 0.565, 1.000)", easeInOutSine: "cubic-bezier(0.445, 0.050, 0.550, 0.950)" };
    k.extend(jQuery.easing, {
        easeInOutSine: function (b, e, c, g, a) {
            return (-g / 2) * (Math.cos((Math.PI * e) / a) - 1) + c;
        },
        easeOutSine: function (b, e, c, g, a) {
            return g * Math.sin((e / a) * (Math.PI / 2)) + c;
        },
        easeOutCubic: function (b, e, c, g, a) {
            return g * ((e = e / a - 1) * e * e + 1) + c;
        },
    });
})(jQuery, window);
// jquery.rs.bullets v1.0
(function (c) {
    c.extend(c.rsProto, {
        _f5: function () {
            var a = this;
            "bullets" === a.st.controlNavigation &&
                (a.ev.one("rsAfterPropsSetup", function () {
                    a._g5 = !0;
                    a.slider.addClass("rsWithBullets");
                    for (var b = '<div class="rsNav rsBullets">', e = 0; e < a.numSlides; e++) b += '<div class="rsNavItem rsBullet"><span class=""></span></div>';
                    b = c(b + "</div>");
                    a._t4 = b;
                    a._h5 = b.children();
                    a.slider.append(b);
                    a._t4.click(function (b) {
                        b = c(b.target).closest(".rsNavItem");
                        b.length && a.goTo(b.index());
                    });
                }),
                a.ev.on("rsOnAppendSlide", function (b, c, d) {
                    d >= a.numSlides ? a._t4.append('<div class="rsNavItem rsBullet"><span class=""></span></div>') : a._h5.eq(d).before('<div class="rsNavItem rsBullet"><span class=""></span></div>');
                    a._h5 = a._t4.children();
                }),
                a.ev.on("rsOnRemoveSlide", function (b, c) {
                    var d = a._h5.eq(c);
                    d && (d.remove(), (a._h5 = a._t4.children()));
                }),
                a.ev.on("rsOnUpdateNav", function () {
                    var b = a.currSlideId;
                    a._i5 && a._i5.removeClass("rsNavSelected");
                    b = c(a._h5[b]);
                    b.addClass("rsNavSelected");
                    a._i5 = b;
                }));
        },
    });
    c.rsModules.bullets = c.rsProto._f5;
})(jQuery);
// jquery.rs.thumbnails v1.0.2
(function (f) {
    f.extend(f.rsProto, {
        _y5: function () {
            var a = this;
            "thumbnails" === a.st.controlNavigation &&
                ((a._z5 = {
                    drag: !0,
                    touch: !0,
                    orientation: "horizontal",
                    navigation: !0,
                    arrows: !0,
                    arrowLeft: null,
                    arrowRight: null,
                    spacing: 4,
                    arrowsAutoHide: !1,
                    appendSpan: !1,
                    transitionSpeed: 600,
                    autoCenter: !0,
                    fitInViewport: !0,
                    firstMargin: !0,
                }),
                (a.st.thumbs = f.extend({}, a._z5, a.st.thumbs)),
                a.ev.on("rsBeforeParseNode", function (a, b, c) {
                    b = f(b);
                    c.thumbnail = b.find(".rsTmb").remove();
                    c.thumbnail.length
                        ? (c.thumbnail = f(document.createElement("div")).append(c.thumbnail).html())
                        : ((c.thumbnail = b.attr("data-rsTmb")), c.thumbnail || (c.thumbnail = b.find(".rsImg").attr("data-rsTmb")), (c.thumbnail = c.thumbnail ? '<img src="' + c.thumbnail + '"/>' : ""));
                }),
                a.ev.one("rsAfterPropsSetup", function () {
                    a._a6();
                }),
                a.ev.on("rsOnUpdateNav", function () {
                    var e = a.currSlideId,
                        b;
                    a._i5 && a._i5.removeClass("rsNavSelected");
                    b = f(a._h5[e]);
                    b.addClass("rsNavSelected");
                    a._b6 && a._c6(e);
                    a._i5 = b;
                }),
                a.ev.on("rsOnAppendSlide", function (e, b, c) {
                    e = "<div" + a._d6 + ' class="rsNavItem rsThumb">' + a._e6 + b.thumbnail + "</div>";
                    c >= a.numSlides ? a._l3.append(e) : a._h5.eq(c).before(e);
                    a._h5 = a._l3.children();
                    a.updateThumbsSize();
                }),
                a.ev.on("rsOnRemoveSlide", function (e, b) {
                    var c = a._h5.eq(b);
                    c && (c.remove(), (a._h5 = a._l3.children()), a.updateThumbsSize());
                }));
        },
        _a6: function () {
            var a = this,
                e = "rsThumbs",
                b = "",
                c,
                g,
                d = a.st.thumbs.spacing;
            a._g5 = !0;
            0 < d ? ((c = d + "px "), (c = ' style="margin: 0 ' + c + c + '0;"')) : (c = "");
            a._d6 = c;
            a._x2 = "vertical" === a.st.thumbs.orientation ? !1 : !0;
            a._b3 = 0;
            a._f6 = !1;
            a._g6 = !1;
            a._b6 = !1;
            a._h6 = a.st.thumbs.arrows && a.st.thumbs.navigation;
            g = a._x2 ? "Hor" : "Ver";
            a.slider.addClass("rsWithThumbs rsWithThumbs" + g);
            b += '<div class="rsNav rsThumbs rsThumbs' + g + '"><div class="' + e + 'Container">';
            a._e6 = a.st.thumbs.appendSpan ? '<span class="thumbIco"></span>' : "";
            for (var h = 0; h < a.numSlides; h++) (g = a.slides[h]), (b += "<div" + c + ' class="rsNavItem rsThumb">' + a._e6 + g.thumbnail + "</div>");
            b = f(b + "</div></div>");
            a._l3 = f(b).find("." + e + "Container");
            a._h6 &&
                ((e += "Arrow"),
                a.st.thumbs.arrowLeft ? (a._i6 = a.st.thumbs.arrowLeft) : ((a._i6 = f('<div class="' + e + " " + e + 'Left"><div class="' + e + 'Icn"></div></div>')), b.append(a._i6)),
                a.st.thumbs.arrowRight ? (a._j6 = a.st.thumbs.arrowRight) : ((a._j6 = f('<div class="' + e + " " + e + 'Right"><div class="' + e + 'Icn"></div></div>')), b.append(a._j6)),
                a._i6.click(function () {
                    var b = (Math.floor(a._b3 / a._k6) + a._l6) * a._k6;
                    a._t3(b > a._g3 ? a._g3 : b);
                }),
                a._j6.click(function () {
                    var b = (Math.floor(a._b3 / a._k6) - a._l6) * a._k6;
                    a._t3(b < a._h3 ? a._h3 : b);
                }),
                a.st.thumbs.arrowsAutoHide &&
                    !a.hasTouch &&
                    (a._i6.css("opacity", 0),
                    a._j6.css("opacity", 0),
                    b.one("mousemove.rsarrowshover", function () {
                        a._b6 && (a._i6.css("opacity", 1), a._j6.css("opacity", 1));
                    }),
                    b.hover(
                        function () {
                            a._b6 && (a._i6.css("opacity", 1), a._j6.css("opacity", 1));
                        },
                        function () {
                            a._b6 && (a._i6.css("opacity", 0), a._j6.css("opacity", 0));
                        }
                    )));
            a._t4 = b;
            a._h5 = a._l3.children();
            a.slider.append(b);
            a._p3 = !0;
            a._m6 = d;
            a.st.thumbs.navigation && a._c && a._l3.css(a._e + "transition-property", a._e + "transform");
            a._t4.click(function (b) {
                a._g6 || ((b = f(b.target).closest(".rsNavItem")), b.length && a.goTo(b.index()));
            });
            a.ev.off("rsBeforeSizeSet.thumbs").on("rsBeforeSizeSet.thumbs", function () {
                a._n6 = a._x2 ? a._v3 : a._u3;
                a.updateThumbsSize();
            });
        },
        updateThumbsSize: function () {
            var a = this,
                e = a._h5.first(),
                b = {},
                c = a._h5.length;
            a._k6 = (a._x2 ? e.outerWidth() : e.outerHeight()) + a._m6;
            a._r3 = c * a._k6 - a._m6;
            b[a._x2 ? "width" : "height"] = a._r3 + a._m6;
            a._s3 = a._x2 ? a._t4.width() : a._t4.height();
            a._h3 = -(a._r3 - a._s3) - (a.st.thumbs.firstMargin ? a._m6 : 0);
            a._g3 = a.st.thumbs.firstMargin ? a._m6 : 0;
            a._l6 = Math.floor(a._s3 / a._k6);
            if (a._r3 < a._s3)
                a.st.thumbs.autoCenter && a._j3((a._s3 - a._r3) / 2), a.st.thumbs.arrows && a._i6 && (a._i6.addClass("rsThumbsArrowDisabled"), a._j6.addClass("rsThumbsArrowDisabled")), (a._b6 = !1), (a._g6 = !1), a._t4.off(a._f1);
            else if (a.st.thumbs.navigation && !a._b6 && ((a._b6 = !0), (!a.hasTouch && a.st.thumbs.drag) || (a.hasTouch && a.st.thumbs.touch)))
                (a._g6 = !0),
                    a._t4.on(a._f1, function (b) {
                        a._b2(b, !0);
                    });
            a._l3.css(b);
            if (a._p3 && (a.isFullscreen || a.st.thumbs.fitInViewport)) a._x2 ? (a._v3 = a._n6 - a._t4.outerHeight()) : (a._u3 = a._n6 - a._t4.outerWidth());
        },
        setThumbsOrientation: function (a, e) {
            this._p3 && ((this.st.thumbs.orientation = a), this._t4.remove(), this.slider.removeClass("rsWithThumbsHor rsWithThumbsVer"), this._a6(), this._t4.off(this._f1), e || this.updateSliderSize(!0));
        },
        _j3: function (a) {
            this._b3 = a;
            this._c ? this._l3.css(this._r1, this._s1 + (this._x2 ? a + this._t1 + 0 : 0 + this._t1 + a) + this._u1) : this._l3.css(this._x2 ? this._r1 : this._q1, a);
        },
        _t3: function (a, e, b, c, g) {
            var d = this;
            if (d._b6) {
                e || (e = d.st.thumbs.transitionSpeed);
                d._b3 = a;
                d._o6 && clearTimeout(d._o6);
                d._f6 && (d._c || d._l3.stop(), (b = !0));
                var h = {};
                d._f6 = !0;
                d._c
                    ? ((h[d._e + "transition-duration"] = e + "ms"), (h[d._e + "transition-timing-function"] = b ? f.rsCSS3Easing[d.st.easeOut] : f.rsCSS3Easing[d.st.easeInOut]), d._l3.css(h), d._j3(a))
                    : ((h[d._x2 ? d._r1 : d._q1] = a + "px"), d._l3.animate(h, e, b ? "easeOutCubic" : d.st.easeInOut));
                c && (d._b3 = c);
                d._p6();
                d._o6 = setTimeout(function () {
                    d._f6 = !1;
                    g && (d._t3(c, g, !0), (g = null));
                }, e);
            }
        },
        _p6: function () {
            this._h6 &&
                (this._b3 === this._g3 ? this._i6.addClass("rsThumbsArrowDisabled") : this._i6.removeClass("rsThumbsArrowDisabled"),
                this._b3 === this._h3 ? this._j6.addClass("rsThumbsArrowDisabled") : this._j6.removeClass("rsThumbsArrowDisabled"));
        },
        _c6: function (a, e) {
            var b = 0,
                c,
                f = a * this._k6 + 2 * this._k6 - this._m6 + this._g3,
                d = Math.floor(this._b3 / this._k6);
            this._b6 &&
                (f + this._b3 > this._s3
                    ? (a === this.numSlides - 1 && (b = 1), (d = -a + this._l6 - 2 + b), (c = d * this._k6 + (this._s3 % this._k6) + this._m6 - this._g3))
                    : 0 !== a
                    ? (a - 1) * this._k6 <= -this._b3 + this._g3 && a - 1 <= this.numSlides - this._l6 && (c = (-a + 1) * this._k6 + this._g3)
                    : (c = this._g3),
                c !== this._b3 && ((b = void 0 === c ? this._b3 : c), b > this._g3 ? this._j3(this._g3) : b < this._h3 ? this._j3(this._h3) : void 0 !== c && (e ? this._j3(c) : this._t3(c))),
                this._p6());
        },
    });
    f.rsModules.thumbnails = f.rsProto._y5;
})(jQuery);
// jquery.rs.tabs v1.0.1
(function (e) {
    e.extend(e.rsProto, {
        _w5: function () {
            var a = this;
            "tabs" === a.st.controlNavigation &&
                (a.ev.on("rsBeforeParseNode", function (a, d, b) {
                    d = e(d);
                    b.thumbnail = d.find(".rsTmb").remove();
                    b.thumbnail.length
                        ? (b.thumbnail = e(document.createElement("div")).append(b.thumbnail).html())
                        : ((b.thumbnail = d.attr("data-rsTmb")), b.thumbnail || (b.thumbnail = d.find(".rsImg").attr("data-rsTmb")), (b.thumbnail = b.thumbnail ? '<img src="' + b.thumbnail + '"/>' : ""));
                }),
                a.ev.one("rsAfterPropsSetup", function () {
                    a._x5();
                }),
                a.ev.on("rsOnAppendSlide", function (c, d, b) {
                    b >= a.numSlides ? a._t4.append('<div class="rsNavItem rsTab">' + d.thumbnail + "</div>") : a._h5.eq(b).before('<div class="rsNavItem rsTab">' + item.thumbnail + "</div>");
                    a._h5 = a._t4.children();
                }),
                a.ev.on("rsOnRemoveSlide", function (c, d) {
                    var b = a._h5.eq(d);
                    b && (b.remove(), (a._h5 = a._t4.children()));
                }),
                a.ev.on("rsOnUpdateNav", function () {
                    var c = a.currSlideId;
                    a._i5 && a._i5.removeClass("rsNavSelected");
                    c = e(a._h5[c]);
                    c.addClass("rsNavSelected");
                    a._i5 = c;
                }));
        },
        _x5: function () {
            var a = this,
                c,
                d;
            a._g5 = !0;
            c = '<div class="rsNav rsTabs">';
            for (var b = 0; b < a.numSlides; b++) b === a.numSlides - 1 && (style = ""), (d = a.slides[b]), (c += '<div class="rsNavItem rsTab">' + d.thumbnail + "</div>");
            c = e(c + "</div>");
            a._t4 = c;
            a._h5 = c.find(".rsNavItem");
            a.slider.append(c);
            a._t4.click(function (b) {
                b = e(b.target).closest(".rsNavItem");
                b.length && a.goTo(b.index());
            });
        },
    });
    e.rsModules.tabs = e.rsProto._w5;
})(jQuery);
// jquery.rs.fullscreen v1.0.1
(function (c) {
    c.extend(c.rsProto, {
        _l5: function () {
            var a = this;
            a._m5 = { enabled: !1, keyboardNav: !0, buttonFS: !0, nativeFS: !1, doubleTap: !0 };
            a.st.fullscreen = c.extend({}, a._m5, a.st.fullscreen);
            if (a.st.fullscreen.enabled)
                a.ev.one("rsBeforeSizeSet", function () {
                    a._n5();
                });
        },
        _n5: function () {
            var a = this;
            a._o5 = !a.st.keyboardNavEnabled && a.st.fullscreen.keyboardNav;
            if (a.st.fullscreen.nativeFS) {
                a._p5 = {
                    supportsFullScreen: !1,
                    isFullScreen: function () {
                        return !1;
                    },
                    requestFullScreen: function () {},
                    cancelFullScreen: function () {},
                    fullScreenEventName: "",
                    prefix: "",
                };
                var b = ["webkit", "moz", "o", "ms", "khtml"];
                if ("undefined" != typeof document.cancelFullScreen) a._p5.supportsFullScreen = !0;
                else
                    for (var d = 0; d < b.length; d++)
                        if (((a._p5.prefix = b[d]), "undefined" != typeof document[a._p5.prefix + "CancelFullScreen"])) {
                            a._p5.supportsFullScreen = !0;
                            break;
                        }
                a._p5.supportsFullScreen
                    ? ((a._p5.fullScreenEventName = a._p5.prefix + "fullscreenchange.rs"),
                      (a._p5.isFullScreen = function () {
                          switch (this.prefix) {
                              case "":
                                  return document.fullScreen;
                              case "webkit":
                                  return document.webkitIsFullScreen;
                              default:
                                  return document[this.prefix + "FullScreen"];
                          }
                      }),
                      (a._p5.requestFullScreen = function (a) {
                          return "" === this.prefix ? a.requestFullScreen() : a[this.prefix + "RequestFullScreen"]();
                      }),
                      (a._p5.cancelFullScreen = function () {
                          return "" === this.prefix ? document.cancelFullScreen() : document[this.prefix + "CancelFullScreen"]();
                      }))
                    : (a._p5 = !1);
            }
            a.st.fullscreen.buttonFS &&
                (a._q5 = c('<div class="rsFullscreenBtn"><div class="rsFullscreenIcn"></div></div>')
                    .appendTo(a.st.controlsInside ? a._a1 : a.slider)
                    .on("click.rs", function () {
                        a.isFullscreen ? a.exitFullscreen() : a.enterFullscreen();
                    }));
        },
        enterFullscreen: function (a) {
            var b = this;
            if (b._p5)
                if (a) b._p5.requestFullScreen(c("html")[0]);
                else {
                    b._a.on(b._p5.fullScreenEventName, function () {
                        b._p5.isFullScreen() ? b.enterFullscreen(!0) : b.exitFullscreen(!0);
                    });
                    b._p5.requestFullScreen(c("html")[0]);
                    return;
                }
            if (!b._r5) {
                b._r5 = !0;
                b._a.on("keyup.rsfullscreen", function (a) {
                    27 === a.keyCode && b.exitFullscreen();
                });
                b._o5 && b._v1();
                b._s5 = c("html").attr("style");
                b._t5 = c("body").attr("style");
                b._u5 = b.slider.attr("style");
                c("body, html").css({ overflow: "hidden", height: "100%", width: "100%", margin: "0", padding: "0" });
                b.slider.addClass("rsFullscreen");
                var d;
                for (d = 0; d < b.numSlides; d++)
                    if (((a = b.slides[d]), (a.isRendered = !1), a.bigImage)) {
                        a.isMedLoaded = a.isLoaded;
                        a.isMedLoading = a.isLoading;
                        a.medImage = a.image;
                        a.medIW = a.iW;
                        a.medIH = a.iH;
                        a.slideId = -99;
                        a.bigImage !== a.medImage && (a.sizeType = "big");
                        a.isLoaded = a.isBigLoaded;
                        a.isLoading = a.isBigLoading;
                        a.image = a.bigImage;
                        a.iW = a.bigIW;
                        a.iH = a.bigIH;
                        a.contentAdded = !1;
                        var e = !a.isLoaded ? '<a class="rsImg" href="' + a.image + '"></a>' : '<img class="rsImg" src="' + a.image + '"/>';
                        a.content.hasClass("rsImg") ? (a.content = c(e)) : a.content.find(".rsImg").replaceWith(e);
                    }
                b.isFullscreen = !0;
                setTimeout(function () {
                    b._r5 = !1;
                    b.updateSliderSize();
                    b.ev.trigger("rsEnterFullscreen");
                }, 100);
            }
        },
        exitFullscreen: function (a) {
            var b = this;
            if (b._p5) {
                if (!a) {
                    b._p5.cancelFullScreen(c("html")[0]);
                    return;
                }
                b._a.off(b._p5.fullScreenEventName);
            }
            if (!b._r5) {
                b._r5 = !0;
                b._a.off("keyup.rsfullscreen");
                b._o5 && b._a.off("keydown.rskb");
                c("html").attr("style", b._s5 || "");
                c("body").attr("style", b._t5 || "");
                b.slider.removeClass("rsFullscreen");
                var d;
                for (d = 0; d < b.numSlides; d++)
                    if (((a = b.slides[d]), (a.isRendered = !1), a.bigImage)) {
                        a.slideId = -99;
                        a.isBigLoaded = a.isLoaded;
                        a.isBigLoading = a.isLoading;
                        a.bigImage = a.image;
                        a.bigIW = a.iW;
                        a.bigIH = a.iH;
                        a.isLoaded = a.isMedLoaded;
                        a.isLoading = a.isMedLoading;
                        a.image = a.medImage;
                        a.iW = a.medIW;
                        a.iH = a.medIH;
                        a.contentAdded = !1;
                        var e = !a.isLoaded ? '<a class="rsImg" href="' + a.image + '"></a>' : '<img class="rsImg" src="' + a.image + '"/>';
                        a.content.hasClass("rsImg") ? (a.content = c(e)) : a.content.find(".rsImg").replaceWith(e);
                        a.holder && a.holder.html(a.content);
                        a.bigImage !== a.medImage && (a.sizeType = "med");
                    }
                b.isFullscreen = !1;
                setTimeout(function () {
                    b._r5 = !1;
                    b.updateSliderSize();
                    b.ev.trigger("rsExitFullscreen");
                }, 100);
            }
        },
    });
    c.rsModules.fullscreen = c.rsProto._l5;
})(jQuery);
// jquery.rs.autoplay v1.0.4
(function (b) {
    b.extend(b.rsProto, {
        _u4: function () {
            var a = this,
                d;
            a._v4 = { enabled: !1, stopAtAction: !0, pauseOnHover: !0, delay: 2e3 };
            !a.st.autoPlay && a.st.autoplay && (a.st.autoPlay = a.st.autoplay);
            a.st.autoPlay = b.extend({}, a._v4, a.st.autoPlay);
            a.st.autoPlay.enabled &&
                (a.ev.on("rsBeforeParseNode", function (a, c, e) {
                    c = b(c);
                    if ((d = c.attr("data-rsDelay"))) e.customDelay = parseInt(d, 10);
                }),
                a.ev.one("rsAfterInit", function () {
                    a._w4();
                }),
                a.ev.on("rsBeforeDestroy", function () {
                    a.stopAutoPlay();
                }));
        },
        _w4: function () {
            var a = this;
            a.startAutoPlay();
            a.ev.on("rsAfterContentSet", function (d, b) {
                !a._g2 && !a._m2 && a._x4 && b === a.currSlide && a._y4();
            });
            a.ev.on("rsDragRelease", function () {
                a._x4 && a._z4 && ((a._z4 = !1), a._y4());
            });
            a.ev.on("rsAfterSlideChange", function () {
                a._x4 && a._z4 && ((a._z4 = !1), a.currSlide.isLoaded && a._y4());
            });
            a.ev.on("rsDragStart", function () {
                a._x4 && (a.st.autoPlay.stopAtAction ? a.stopAutoPlay() : ((a._z4 = !0), a._a5()));
            });
            a.ev.on("rsBeforeMove", function (b, f, c) {
                a._x4 && (c && a.st.autoPlay.stopAtAction ? a.stopAutoPlay() : ((a._z4 = !0), a._a5()));
            });
            a._b5 = !1;
            a.ev.on("rsVideoStop", function () {
                a._x4 && ((a._b5 = !1), a._y4());
            });
            a.ev.on("rsVideoPlay", function () {
                a._x4 && ((a._z4 = !1), a._a5(), (a._b5 = !0));
            });
            a.st.autoPlay.pauseOnHover &&
                ((a._c5 = !1),
                a.slider.hover(
                    function () {
                        a._x4 && ((a._z4 = !1), a._a5(), (a._c5 = !0));
                    },
                    function () {
                        a._x4 && ((a._c5 = !1), a._y4());
                    }
                ));
        },
        toggleAutoPlay: function () {
            this._x4 ? this.stopAutoPlay() : this.startAutoPlay();
        },
        startAutoPlay: function () {
            this._x4 = !0;
            this.currSlide.isLoaded && this._y4();
        },
        stopAutoPlay: function () {
            this._b5 = this._c5 = this._z4 = this._x4 = !1;
            this._a5();
        },
        _y4: function () {
            var a = this;
            !a._c5 &&
                !a._b5 &&
                ((a._d5 = !0),
                a._e5 && clearTimeout(a._e5),
                (a._e5 = setTimeout(
                    function () {
                        var b;
                        !a._v && !a.st.loopRewind && ((b = !0), (a.st.loopRewind = !0));
                        a.next(!0);
                        b && (a.st.loopRewind = !1);
                    },
                    !a.currSlide.customDelay ? a.st.autoPlay.delay : a.currSlide.customDelay
                )));
        },
        _a5: function () {
            !this._c5 && !this._b5 && ((this._d5 = !1), this._e5 && (clearTimeout(this._e5), (this._e5 = null)));
        },
    });
    b.rsModules.autoplay = b.rsProto._u4;
})(jQuery);
// jquery.rs.video v1.0.4
(function (e) {
    e.extend(e.rsProto, {
        _q6: function () {
            var a = this;
            a._r6 = {
                autoHideArrows: !0,
                autoHideControlNav: !1,
                autoHideBlocks: !1,
                youTubeCode: '<iframe src="http://www.youtube.com/embed/%id%?rel=1&autoplay=1&showinfo=0&autoplay=1&wmode=transparent" frameborder="no"></iframe>',
                vimeoCode: '<iframe src="http://player.vimeo.com/video/%id%?byline=0&amp;portrait=0&amp;autoplay=1" frameborder="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>',
            };
            a.st.video = e.extend({}, a._r6, a.st.video);
            a.ev.on("rsBeforeSizeSet", function () {
                a._d4 &&
                    setTimeout(function () {
                        var b = a._d1,
                            b = b.hasClass("rsVideoContainer") ? b : b.find(".rsVideoContainer");
                        a._s6.css({ width: b.width(), height: b.height() });
                    }, 32);
            });
            var c = e.browser.mozilla;
            a.ev.on("rsAfterParseNode", function (b, f, d) {
                b = e(f);
                if (d.videoURL) {
                    c && (a._c = a._d = !1);
                    var f = e('<div class="rsVideoContainer"></div>'),
                        g = e('<div class="rsBtnCenterer"><div class="rsPlayBtn"><div class="rsPlayBtnIcon"></div></div></div>');
                    b.hasClass("rsImg") ? (d.content = f.append(b).append(g)) : d.content.find(".rsImg").wrap(f).after(g);
                }
            });
        },
        toggleVideo: function () {
            return this._d4 ? this.stopVideo() : this.playVideo();
        },
        playVideo: function () {
            var a = this;
            if (!a._d4) {
                var c = a.currSlide;
                if (!c.videoURL) return !1;
                var b = (a._t6 = c.content),
                    c = c.videoURL,
                    f,
                    d;
                c.match(/youtu\.be/i) || c.match(/youtube\.com\/watch/i)
                    ? ((d = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/), (d = c.match(d)) && 11 == d[7].length && (f = d[7]), void 0 !== f && (a._s6 = a.st.video.youTubeCode.replace("%id%", f)))
                    : c.match(/vimeo\.com/i) && ((d = /\/\/(www\.)?vimeo.com\/(\d+)($|\/)/), (d = c.match(d)) && (f = d[2]), void 0 !== f && (a._s6 = a.st.video.vimeoCode.replace("%id%", f)));
                a.videoObj = e(a._s6);
                a.ev.trigger("rsOnCreateVideoElement", [c]);
                a.videoObj.length &&
                    ((a._s6 = e('<div class="rsVideoFrameHolder"><div class="rsPreloader"></div><div class="rsCloseVideoBtn"><div class="rsCloseVideoIcn"></div></div></div>')),
                    a._s6.find(".rsPreloader").after(a.videoObj),
                    (b = b.hasClass("rsVideoContainer") ? b : b.find(".rsVideoContainer")),
                    a._s6
                        .css({ width: b.width(), height: b.height() })
                        .find(".rsCloseVideoBtn")
                        .off("click.rsv")
                        .on("click.rsv", function (b) {
                            a.stopVideo();
                            b.preventDefault();
                            b.stopPropagation();
                            return !1;
                        }),
                    b.append(a._s6),
                    a.isIPAD && b.addClass("rsIOSVideo"),
                    a._w1 && a.st.video.autoHideArrows && (a._w1.addClass("rsHidden"), a._x1.addClass("rsHidden"), (a._y1 = !0)),
                    a._t4 && a.st.video.autoHideControlNav && a._t4.addClass("rsHidden"),
                    a.st.video.autoHideBlocks && a.currSlide.animBlocks && a.currSlide.animBlocks.addClass("rsHidden"),
                    setTimeout(function () {
                        a._s6.addClass("rsVideoActive");
                    }, 10),
                    a.ev.trigger("rsVideoPlay"),
                    (a._d4 = !0));
                return !0;
            }
            return !1;
        },
        stopVideo: function () {
            var a = this;
            return a._d4
                ? (a.isIPAD && a.slider.find(".rsCloseVideoBtn").remove(),
                  a._w1 && a.st.video.autoHideArrows && (a._w1.removeClass("rsHidden"), a._x1.removeClass("rsHidden"), (a._y1 = !1)),
                  a._t4 && a.st.video.autoHideControlNav && a._t4.removeClass("rsHidden"),
                  a.st.video.autoHideBlocks && a.currSlide.animBlocks && a.currSlide.animBlocks.removeClass("rsHidden"),
                  setTimeout(function () {
                      a.ev.trigger("rsOnDestroyVideoElement", [a.videoObj]);
                      var c = a._s6.find("iframe");
                      c.length && c.attr("src", "");
                      a._s6.remove();
                  }, 16),
                  a.ev.trigger("rsVideoStop"),
                  (a._d4 = !1),
                  !0)
                : !1;
        },
    });
    e.rsModules.video = e.rsProto._q6;
})(jQuery);
// jquery.rs.animated-blocks v1.0.2
(function (i) {
    i.extend(i.rsProto, {
        _k4: function () {
            function j() {
                var e = a.currSlide;
                if (a.currSlide && a.currSlide.isLoaded && a._o4 !== e) {
                    if (0 < a._n4.length) {
                        for (b = 0; b < a._n4.length; b++) clearTimeout(a._n4[b]);
                        a._n4 = [];
                    }
                    if (0 < a._m4.length) {
                        var g;
                        for (b = 0; b < a._m4.length; b++)
                            if ((g = a._m4[b])) a._c ? (g.block.css(a._e + a._o1, "0s"), g.block.css(g.css)) : g.running ? g.block.stop(!0, !0) : g.block.css(g.css), (a._o4 = null), (e.animBlocksDisplayed = !1);
                        a._m4 = [];
                    }
                    e.animBlocks && ((e.animBlocksDisplayed = !0), (a._o4 = e), a._p4(e.animBlocks));
                }
            }
            var a = this,
                b;
            a._l4 = { fadeEffect: !0, moveEffect: "top", moveOffset: 20, speed: 400, easing: "easeOutSine", delay: 200 };
            a.st.block = i.extend({}, a._l4, a.st.block);
            a._m4 = [];
            a._n4 = [];
            a.ev.on("rsAfterInit", function () {
                j();
            });
            a.ev.on("rsBeforeParseNode", function (a, b, c) {
                b = i(b);
                c.animBlocks = b.find(".rsABlock").css("display", "none");
                c.animBlocks.length || (c.animBlocks = b.hasClass("rsABlock") ? b.css("display", "none") : !1);
            });
            a.ev.on("rsAfterContentSet", function (b, g) {
                g.id === a.currSlideId &&
                    setTimeout(
                        function () {
                            j();
                        },
                        a.st.fadeinLoadedSlide ? 300 : 0
                    );
            });
            a.ev.on("rsAfterSlideChange", function () {
                j();
            });
        },
        _q4: function (i, a) {
            setTimeout(function () {
                i.css(a);
            }, 6);
        },
        _p4: function (j) {
            var a = this,
                b,
                e,
                g,
                c;
            a._n4 = [];
            j.each(function (j) {
                b = i(this);
                e = {};
                g = {};
                c = null;
                var f = b.data("move-offset");
                isNaN(f) && (f = a.st.block.moveOffset);
                if (0 < f) {
                    var d = b.data("move-effect");
                    d ? ((d = d.toLowerCase()), "none" === d ? (d = !1) : "left" !== d && "top" !== d && "bottom" !== d && "right" !== d && ((d = a.st.block.moveEffect), "none" === d && (d = !1))) : (d = a.st.block.moveEffect);
                    if (d) {
                        var l;
                        l = "right" === d || "left" === d ? !0 : !1;
                        var k, h;
                        isOppositeProp = !1;
                        a._c
                            ? ((k = 0), (h = a._r1))
                            : (l ? (isNaN(parseInt(b.css("right"), 10)) ? (h = "left") : ((h = "right"), (isOppositeProp = !0))) : isNaN(parseInt(b.css("bottom"), 10)) ? (h = "top") : ((h = "bottom"), (isOppositeProp = !0)),
                              (h = "margin-" + h),
                              isOppositeProp && (f = -f),
                              (k = parseInt(b.css(h), 10)));
                        g[h] = a._h4("top" === d || "left" === d ? k - f : k + f, l);
                        e[h] = a._h4(k, l);
                    }
                }
                if ((f = b.attr("data-fade-effect"))) {
                    if ("none" === f.toLowerCase() || "false" === f.toLowerCase()) f = !1;
                } else f = a.st.block.fadeEffect;
                f && ((g.opacity = 0), (e.opacity = 1));
                if (f || d)
                    (c = {}),
                        (c.hasFade = Boolean(f)),
                        Boolean(d) && ((c.moveProp = h), (c.hasMove = !0)),
                        (c.speed = b.data("speed")),
                        isNaN(c.speed) && (c.speed = a.st.block.speed),
                        (c.easing = b.data("easing")),
                        c.easing || (c.easing = a.st.block.easing),
                        (c.css3Easing = i.rsCSS3Easing[c.easing]),
                        (c.delay = b.data("delay")),
                        isNaN(c.delay) && (c.delay = a.st.block.delay * j);
                d = {};
                a._c && (d[a._e + a._o1] = "0ms");
                d.moveProp = e.moveProp;
                d.opacity = e.opacity;
                d.display = "none";
                a._m4.push({ block: b, css: d });
                a._q4(b, g);
                a._n4.push(
                    setTimeout(
                        (function (b, d, c, g) {
                            return function () {
                                b.css("display", "block");
                                if (c) {
                                    var f = {};
                                    if (a._c) {
                                        var e = "";
                                        c.hasMove && (e += c.moveProp);
                                        c.hasFade && (c.hasMove && (e += ", "), (e += "opacity"));
                                        f[a._e + a._n1] = e;
                                        f[a._e + a._o1] = c.speed + "ms";
                                        f[a._e + a._p1] = c.css3Easing;
                                        b.css(f);
                                        setTimeout(function () {
                                            b.css(d);
                                        }, 24);
                                    } else
                                        setTimeout(function () {
                                            b.animate(d, c.speed, c.easing);
                                        }, 16);
                                }
                                delete a._n4[g];
                            };
                        })(b, e, c, j),
                        6 >= c.delay ? 12 : c.delay
                    )
                );
            });
        },
    });
    i.rsModules.animatedBlocks = i.rsProto._k4;
})(jQuery);
// jquery.rs.auto-height v1.0.1
(function (b) {
    b.extend(b.rsProto, {
        _r4: function () {
            var a = this;
            if (a.st.autoHeight) {
                var b, c;
                a.slider.addClass("rsAutoHeight");
                a.ev.on("rsAfterInit", function () {
                    setTimeout(function () {
                        d(!1);
                        setTimeout(function () {
                            a.slider.append('<div id="clear" style="clear:both;"></div>');
                            a._c && a._a1.css(a._e + "transition", "height " + a.st.transitionSpeed + "ms ease-in-out");
                        }, 16);
                    }, 16);
                });
                a.ev.on("rsBeforeAnimStart", function () {
                    d(!0);
                });
                a.ev.on("rsBeforeSizeSet", function () {
                    setTimeout(function () {
                        d(!1);
                    }, 16);
                });
                var d = function (f) {
                    var e = a.slides[a.currSlideId];
                    b = e.holder;
                    if (e.isLoaded) b && ((c = b.height()), 0 !== c && void 0 !== c && ((a._v3 = c), a._c || !f ? a._a1.css("height", c) : a._a1.stop(!0, !0).animate({ height: c }, a.st.transitionSpeed)));
                    else
                        a.ev.off("rsAfterContentSet.rsAutoHeight").on("rsAfterContentSet.rsAutoHeight", function (a, b) {
                            e === b && d();
                        });
                };
            }
        },
    });
    b.rsModules.autoHeight = b.rsProto._r4;
})(jQuery);
// jquery.rs.global-caption v1.0
(function (b) {
    b.extend(b.rsProto, {
        _v5: function () {
            var a = this;
            a.st.globalCaption &&
                (a.ev.on("rsAfterInit", function () {
                    a.globalCaption = b('<div class="rsGCaption"></div>').appendTo(a.slider);
                    a.globalCaption.html(a.currSlide.caption);
                }),
                a.ev.on("rsBeforeAnimStart", function () {
                    a.globalCaption.html(a.currSlide.caption);
                }));
        },
    });
    b.rsModules.globalCaption = b.rsProto._v5;
})(jQuery);
// jquery.rs.active-class v1.0
(function (b) {
    b.rsProto._j4 = function () {
        var c,
            a = this;
        if (a.st.addActiveClass) {
            a.ev.on("rsBeforeMove", function () {
                b();
            });
            a.ev.on("rsAfterInit", function () {
                b();
            });
            var b = function () {
                c && clearTimeout(c);
                c = setTimeout(function () {
                    a._a4 && a._a4.removeClass("rsActiveSlide");
                    a._d1 && a._d1.addClass("rsActiveSlide");
                    c = null;
                }, 50);
            };
        }
    };
    b.rsModules.activeClass = b.rsProto._j4;
})(jQuery);
// jquery.rs.deeplinking v1.0.1 + jQuery hashchange plugin v1.3 Copyright (c) 2010
(function (a) {
    a.extend(a.rsProto, {
        _j5: function () {
            var b = this,
                g,
                d,
                e;
            b._k5 = { enabled: !1, change: !1, prefix: "" };
            b.st.deeplinking = a.extend({}, b._k5, b.st.deeplinking);
            if (b.st.deeplinking.enabled) {
                var j = b.st.deeplinking.change,
                    c = "#" + b.st.deeplinking.prefix,
                    f = function () {
                        var a = window.location.hash;
                        return a && ((a = parseInt(a.substring(c.length), 10)), 0 <= a) ? a - 1 : -1;
                    },
                    h = f();
                -1 !== h && (b.st.startSlideId = h);
                if (j)
                    a(window).on("hashchange.rs", function () {
                        if (!g) {
                            var a = f();
                            0 > a || (a > b.numSlides - 1 && (a = b.numSlides - 1), b.goTo(a));
                        }
                    });
                b.ev.on("rsAfterSlideChange", function () {
                    d && clearTimeout(d);
                    e && clearTimeout(e);
                    e = setTimeout(function () {
                        g = !0;
                        window.location.hash = c + (b.currSlideId + 1);
                        d = setTimeout(function () {
                            g = !1;
                            d = 0;
                        }, 60);
                    }, 750);
                });
            }
        },
    });
    a.rsModules.deeplinking = a.rsProto._j5;
})(jQuery);
(function (a, b, g) {
    function d(a) {
        a = a || location.href;
        return "#" + a.replace(/^[^#]*#?(.*)$/, "$1");
    }
    ("$:nomunge");
    var e = document,
        j,
        c = a.event.special,
        f = e.documentMode,
        h = "onhashchange" in b && (f === g || 7 < f);
    a.fn.hashchange = function (a) {
        return a ? this.bind("hashchange", a) : this.trigger("hashchange");
    };
    a.fn.hashchange.delay = 50;
    c.hashchange = a.extend(c.hashchange, {
        setup: function () {
            if (h) return !1;
            a(j.start);
        },
        teardown: function () {
            if (h) return !1;
            a(j.stop);
        },
    });
    var n = function () {
            var c = d(),
                e = q(m);
            c !== m ? (p((m = c), e), a(b).trigger("hashchange")) : e !== m && (location.href = location.href.replace(/#.*/, "") + e);
            k = setTimeout(n, a.fn.hashchange.delay);
        },
        c = {},
        k,
        m = d(),
        p = (f = function (a) {
            return a;
        }),
        q = f;
    c.start = function () {
        k || n();
    };
    c.stop = function () {
        k && clearTimeout(k);
        k = g;
    };
    if (a.browser.msie && !h) {
        var i, l;
        c.start = function () {
            i ||
                ((l = (l = a.fn.hashchange.src) && l + d()),
                (i = a('<iframe tabindex="-1" title="empty"/>')
                    .hide()
                    .one("load", function () {
                        l || p(d());
                        n();
                    })
                    .attr("src", l || "javascript:0")
                    .insertAfter("body")[0].contentWindow),
                (e.onpropertychange = function () {
                    try {
                        "title" === event.propertyName && (i.document.title = e.title);
                    } catch (a) {}
                }));
        };
        c.stop = f;
        q = function () {
            return d(i.location.href);
        };
        p = function (b, c) {
            var d = i.document,
                f = a.fn.hashchange.domain;
            b !== c && ((d.title = e.title), d.open(), f && d.write('<script>document.domain="' + f + '"</script>'), d.close(), (i.location.hash = b));
        };
    }
    j = c;
})(jQuery, this);

/*! iScroll v5.1.3 ~ (c) 2008-2014 Matteo Spinelli ~ http://cubiq.org/license */
(function (window, document, Math) {
    var rAF =
        window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimationFrame ||
        function (callback) {
            window.setTimeout(callback, 1000 / 60);
        };

    var utils = (function () {
        var me = {};

        var _elementStyle = document.createElement("div").style;
        var _vendor = (function () {
            var vendors = ["t", "webkitT", "MozT", "msT", "OT"],
                transform,
                i = 0,
                l = vendors.length;

            for (; i < l; i++) {
                transform = vendors[i] + "ransform";
                if (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);
            }

            return false;
        })();

        function _prefixStyle(style) {
            if (_vendor === false) return false;
            if (_vendor === "") return style;
            return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
        }

        me.getTime =
            Date.now ||
            function getTime() {
                return new Date().getTime();
            };

        me.extend = function (target, obj) {
            for (var i in obj) {
                target[i] = obj[i];
            }
        };

        me.addEvent = function (el, type, fn, capture) {
            el.addEventListener(type, fn, !!capture);
        };

        me.removeEvent = function (el, type, fn, capture) {
            el.removeEventListener(type, fn, !!capture);
        };

        me.prefixPointerEvent = function (pointerEvent) {
            return window.MSPointerEvent ? "MSPointer" + pointerEvent.charAt(9).toUpperCase() + pointerEvent.substr(10) : pointerEvent;
        };

        me.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {
            var distance = current - start,
                speed = Math.abs(distance) / time,
                destination,
                duration;

            deceleration = deceleration === undefined ? 0.0006 : deceleration;

            destination = current + ((speed * speed) / (2 * deceleration)) * (distance < 0 ? -1 : 1);
            duration = speed / deceleration;

            if (destination < lowerMargin) {
                destination = wrapperSize ? lowerMargin - (wrapperSize / 2.5) * (speed / 8) : lowerMargin;
                distance = Math.abs(destination - current);
                duration = distance / speed;
            } else if (destination > 0) {
                destination = wrapperSize ? (wrapperSize / 2.5) * (speed / 8) : 0;
                distance = Math.abs(current) + destination;
                duration = distance / speed;
            }

            return {
                destination: Math.round(destination),
                duration: duration,
            };
        };

        var _transform = _prefixStyle("transform");

        me.extend(me, {
            hasTransform: _transform !== false,
            hasPerspective: _prefixStyle("perspective") in _elementStyle,
            hasTouch: "ontouchstart" in window,
            hasPointer: window.PointerEvent || window.MSPointerEvent, // IE10 is prefixed
            hasTransition: _prefixStyle("transition") in _elementStyle,
        });

        // This should find all Android browsers lower than build 535.19 (both stock browser and webview)
        me.isBadAndroid = /Android /.test(window.navigator.appVersion) && !/Chrome\/\d/.test(window.navigator.appVersion);

        me.extend((me.style = {}), {
            transform: _transform,
            transitionTimingFunction: _prefixStyle("transitionTimingFunction"),
            transitionDuration: _prefixStyle("transitionDuration"),
            transitionDelay: _prefixStyle("transitionDelay"),
            transformOrigin: _prefixStyle("transformOrigin"),
        });

        me.hasClass = function (e, c) {
            var re = new RegExp("(^|\\s)" + c + "(\\s|$)");
            return re.test(e.className);
        };

        me.addClass = function (e, c) {
            if (me.hasClass(e, c)) {
                return;
            }

            var newclass = e.className.split(" ");
            newclass.push(c);
            e.className = newclass.join(" ");
        };

        me.removeClass = function (e, c) {
            if (!me.hasClass(e, c)) {
                return;
            }

            var re = new RegExp("(^|\\s)" + c + "(\\s|$)", "g");
            e.className = e.className.replace(re, " ");
        };

        me.offset = function (el) {
            var left = -el.offsetLeft,
                top = -el.offsetTop;

            // jshint -W084
            while ((el = el.offsetParent)) {
                left -= el.offsetLeft;
                top -= el.offsetTop;
            }
            // jshint +W084

            return {
                left: left,
                top: top,
            };
        };

        me.preventDefaultException = function (el, exceptions) {
            for (var i in exceptions) {
                if (exceptions[i].test(el[i])) {
                    return true;
                }
            }

            return false;
        };

        me.extend((me.eventType = {}), {
            touchstart: 1,
            touchmove: 1,
            touchend: 1,

            mousedown: 2,
            mousemove: 2,
            mouseup: 2,

            pointerdown: 3,
            pointermove: 3,
            pointerup: 3,

            MSPointerDown: 3,
            MSPointerMove: 3,
            MSPointerUp: 3,
        });

        me.extend((me.ease = {}), {
            quadratic: {
                style: "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
                fn: function (k) {
                    return k * (2 - k);
                },
            },
            circular: {
                style: "cubic-bezier(0.1, 0.57, 0.1, 1)", // Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
                fn: function (k) {
                    return Math.sqrt(1 - --k * k);
                },
            },
            back: {
                style: "cubic-bezier(0.175, 0.885, 0.32, 1.275)",
                fn: function (k) {
                    var b = 4;
                    return (k = k - 1) * k * ((b + 1) * k + b) + 1;
                },
            },
            bounce: {
                style: "",
                fn: function (k) {
                    if ((k /= 1) < 1 / 2.75) {
                        return 7.5625 * k * k;
                    } else if (k < 2 / 2.75) {
                        return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
                    } else if (k < 2.5 / 2.75) {
                        return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
                    } else {
                        return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
                    }
                },
            },
            elastic: {
                style: "",
                fn: function (k) {
                    var f = 0.22,
                        e = 0.4;

                    if (k === 0) {
                        return 0;
                    }
                    if (k == 1) {
                        return 1;
                    }

                    return e * Math.pow(2, -10 * k) * Math.sin(((k - f / 4) * (2 * Math.PI)) / f) + 1;
                },
            },
        });

        me.tap = function (e, eventName) {
            var ev = document.createEvent("Event");
            ev.initEvent(eventName, true, true);
            ev.pageX = e.pageX;
            ev.pageY = e.pageY;
            e.target.dispatchEvent(ev);
        };

        me.click = function (e) {
            var target = e.target,
                ev;

            if (!/(SELECT|INPUT|TEXTAREA)/i.test(target.tagName)) {
                ev = document.createEvent("MouseEvents");
                ev.initMouseEvent("click", true, true, e.view, 1, target.screenX, target.screenY, target.clientX, target.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, 0, null);

                ev._constructed = true;
                target.dispatchEvent(ev);
            }
        };

        return me;
    })();

    function IScroll(el, options) {
        this.wrapper = typeof el == "string" ? document.querySelector(el) : el;
        this.scroller = this.wrapper.children[0];
        this.scrollerStyle = this.scroller.style; // cache style for better performance

        this.options = {
            resizeScrollbars: true,

            mouseWheelSpeed: 20,

            snapThreshold: 0.334,

            // INSERT POINT: OPTIONS

            startX: 0,
            startY: 0,
            scrollY: true,
            directionLockThreshold: 5,
            momentum: true,

            bounce: true,
            bounceTime: 600,
            bounceEasing: "",

            preventDefault: true,
            preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ },

            HWCompositing: true,
            useTransition: true,
            useTransform: true,
        };

        for (var i in options) {
            this.options[i] = options[i];
        }

        // Normalize options
        this.translateZ = this.options.HWCompositing && utils.hasPerspective ? " translateZ(0)" : "";

        this.options.useTransition = utils.hasTransition && this.options.useTransition;
        this.options.useTransform = utils.hasTransform && this.options.useTransform;

        this.options.eventPassthrough = this.options.eventPassthrough === true ? "vertical" : this.options.eventPassthrough;
        this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;

        // If you want eventPassthrough I have to lock one of the axes
        this.options.scrollY = this.options.eventPassthrough == "vertical" ? false : this.options.scrollY;
        this.options.scrollX = this.options.eventPassthrough == "horizontal" ? false : this.options.scrollX;

        // With eventPassthrough we also need lockDirection mechanism
        this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;
        this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;

        this.options.bounceEasing = typeof this.options.bounceEasing == "string" ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;

        this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;

        if (this.options.tap === true) {
            this.options.tap = "tap";
        }

        if (this.options.shrinkScrollbars == "scale") {
            this.options.useTransition = false;
        }

        this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;

        // INSERT POINT: NORMALIZATION

        // Some defaults
        this.x = 0;
        this.y = 0;
        this.directionX = 0;
        this.directionY = 0;
        this._events = {};

        // INSERT POINT: DEFAULTS

        this._init();
        this.refresh();

        this.scrollTo(this.options.startX, this.options.startY);
        this.enable();
    }

    IScroll.prototype = {
        version: "5.1.3",

        _init: function () {
            this._initEvents();

            if (this.options.scrollbars || this.options.indicators) {
                this._initIndicators();
            }

            if (this.options.mouseWheel) {
                this._initWheel();
            }

            if (this.options.snap) {
                this._initSnap();
            }

            if (this.options.keyBindings) {
                this._initKeys();
            }

            // INSERT POINT: _init
        },

        destroy: function () {
            this._initEvents(true);

            this._execEvent("destroy");
        },

        _transitionEnd: function (e) {
            if (e.target != this.scroller || !this.isInTransition) {
                return;
            }

            this._transitionTime();
            if (!this.resetPosition(this.options.bounceTime)) {
                this.isInTransition = false;
                this._execEvent("scrollEnd");
            }
        },

        _start: function (e) {
            // React to left mouse button only
            if (utils.eventType[e.type] != 1) {
                if (e.button !== 0) {
                    return;
                }
            }

            if (!this.enabled || (this.initiated && utils.eventType[e.type] !== this.initiated)) {
                return;
            }

            if (this.options.preventDefault && !utils.isBadAndroid && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {
                e.preventDefault();
            }

            var point = e.touches ? e.touches[0] : e,
                pos;

            this.initiated = utils.eventType[e.type];
            this.moved = false;
            this.distX = 0;
            this.distY = 0;
            this.directionX = 0;
            this.directionY = 0;
            this.directionLocked = 0;

            this._transitionTime();

            this.startTime = utils.getTime();

            if (this.options.useTransition && this.isInTransition) {
                this.isInTransition = false;
                pos = this.getComputedPosition();
                this._translate(Math.round(pos.x), Math.round(pos.y));
                this._execEvent("scrollEnd");
            } else if (!this.options.useTransition && this.isAnimating) {
                this.isAnimating = false;
                this._execEvent("scrollEnd");
            }

            this.startX = this.x;
            this.startY = this.y;
            this.absStartX = this.x;
            this.absStartY = this.y;
            this.pointX = point.pageX;
            this.pointY = point.pageY;

            this._execEvent("beforeScrollStart");
        },

        _move: function (e) {
            if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
                return;
            }

            if (this.options.preventDefault) {
                // increases performance on Android? TODO: check!
                e.preventDefault();
            }

            var point = e.touches ? e.touches[0] : e,
                deltaX = point.pageX - this.pointX,
                deltaY = point.pageY - this.pointY,
                timestamp = utils.getTime(),
                newX,
                newY,
                absDistX,
                absDistY;

            this.pointX = point.pageX;
            this.pointY = point.pageY;

            this.distX += deltaX;
            this.distY += deltaY;
            absDistX = Math.abs(this.distX);
            absDistY = Math.abs(this.distY);

            // We need to move at least 10 pixels for the scrolling to initiate
            if (timestamp - this.endTime > 300 && absDistX < 10 && absDistY < 10) {
                return;
            }

            // If you are scrolling in one direction lock the other
            if (!this.directionLocked && !this.options.freeScroll) {
                if (absDistX > absDistY + this.options.directionLockThreshold) {
                    this.directionLocked = "h"; // lock horizontally
                } else if (absDistY >= absDistX + this.options.directionLockThreshold) {
                    this.directionLocked = "v"; // lock vertically
                } else {
                    this.directionLocked = "n"; // no lock
                }
            }

            if (this.directionLocked == "h") {
                if (this.options.eventPassthrough == "vertical") {
                    e.preventDefault();
                } else if (this.options.eventPassthrough == "horizontal") {
                    this.initiated = false;
                    return;
                }

                deltaY = 0;
            } else if (this.directionLocked == "v") {
                if (this.options.eventPassthrough == "horizontal") {
                    e.preventDefault();
                } else if (this.options.eventPassthrough == "vertical") {
                    this.initiated = false;
                    return;
                }

                deltaX = 0;
            }

            deltaX = this.hasHorizontalScroll ? deltaX : 0;
            deltaY = this.hasVerticalScroll ? deltaY : 0;

            newX = this.x + deltaX;
            newY = this.y + deltaY;

            // Slow down if outside of the boundaries
            if (newX > 0 || newX < this.maxScrollX) {
                newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;
            }
            if (newY > 0 || newY < this.maxScrollY) {
                newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;
            }

            this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
            this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;

            if (!this.moved) {
                this._execEvent("scrollStart");
            }

            this.moved = true;

            this._translate(newX, newY);

            /* REPLACE START: _move */

            if (timestamp - this.startTime > 300) {
                this.startTime = timestamp;
                this.startX = this.x;
                this.startY = this.y;
            }

            /* REPLACE END: _move */
        },

        _end: function (e) {
            if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
                return;
            }

            if (this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {
                e.preventDefault();
            }

            var point = e.changedTouches ? e.changedTouches[0] : e,
                momentumX,
                momentumY,
                duration = utils.getTime() - this.startTime,
                newX = Math.round(this.x),
                newY = Math.round(this.y),
                distanceX = Math.abs(newX - this.startX),
                distanceY = Math.abs(newY - this.startY),
                time = 0,
                easing = "";

            this.isInTransition = 0;
            this.initiated = 0;
            this.endTime = utils.getTime();

            // reset if we are outside of the boundaries
            if (this.resetPosition(this.options.bounceTime)) {
                return;
            }

            this.scrollTo(newX, newY); // ensures that the last position is rounded

            // we scrolled less than 10 pixels
            if (!this.moved) {
                if (this.options.tap) {
                    utils.tap(e, this.options.tap);
                }

                if (this.options.click) {
                    utils.click(e);
                }

                this._execEvent("scrollCancel");
                return;
            }

            if (this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100) {
                this._execEvent("flick");
                return;
            }

            // start momentum animation if needed
            if (this.options.momentum && duration < 300) {
                momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : { destination: newX, duration: 0 };
                momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : { destination: newY, duration: 0 };
                newX = momentumX.destination;
                newY = momentumY.destination;
                time = Math.max(momentumX.duration, momentumY.duration);
                this.isInTransition = 1;
            }

            if (this.options.snap) {
                var snap = this._nearestSnap(newX, newY);
                this.currentPage = snap;
                time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(newX - snap.x), 1000), Math.min(Math.abs(newY - snap.y), 1000)), 300);
                newX = snap.x;
                newY = snap.y;

                this.directionX = 0;
                this.directionY = 0;
                easing = this.options.bounceEasing;
            }

            // INSERT POINT: _end

            if (newX != this.x || newY != this.y) {
                // change easing function when scroller goes out of the boundaries
                if (newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY) {
                    easing = utils.ease.quadratic;
                }

                this.scrollTo(newX, newY, time, easing);
                return;
            }

            this._execEvent("scrollEnd");
        },

        _resize: function () {
            var that = this;

            clearTimeout(this.resizeTimeout);

            this.resizeTimeout = setTimeout(function () {
                that.refresh();
            }, this.options.resizePolling);
        },

        resetPosition: function (time) {
            var x = this.x,
                y = this.y;

            time = time || 0;

            if (!this.hasHorizontalScroll || this.x > 0) {
                x = 0;
            } else if (this.x < this.maxScrollX) {
                x = this.maxScrollX;
            }

            if (!this.hasVerticalScroll || this.y > 0) {
                y = 0;
            } else if (this.y < this.maxScrollY) {
                y = this.maxScrollY;
            }

            if (x == this.x && y == this.y) {
                return false;
            }

            this.scrollTo(x, y, time, this.options.bounceEasing);

            return true;
        },

        disable: function () {
            this.enabled = false;
        },

        enable: function () {
            this.enabled = true;
        },

        refresh: function () {
            var rf = this.wrapper.offsetHeight; // Force reflow

            this.wrapperWidth = this.wrapper.clientWidth;
            this.wrapperHeight = this.wrapper.clientHeight;

            /* REPLACE START: refresh */

            this.scrollerWidth = this.scroller.offsetWidth;
            this.scrollerHeight = this.scroller.offsetHeight;

            this.maxScrollX = this.wrapperWidth - this.scrollerWidth;
            this.maxScrollY = this.wrapperHeight - this.scrollerHeight;

            /* REPLACE END: refresh */

            this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0;
            this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0;

            if (!this.hasHorizontalScroll) {
                this.maxScrollX = 0;
                this.scrollerWidth = this.wrapperWidth;
            }

            if (!this.hasVerticalScroll) {
                this.maxScrollY = 0;
                this.scrollerHeight = this.wrapperHeight;
            }

            this.endTime = 0;
            this.directionX = 0;
            this.directionY = 0;

            this.wrapperOffset = utils.offset(this.wrapper);

            this._execEvent("refresh");

            this.resetPosition();

            // INSERT POINT: _refresh
        },

        on: function (type, fn) {
            if (!this._events[type]) {
                this._events[type] = [];
            }

            this._events[type].push(fn);
        },

        off: function (type, fn) {
            if (!this._events[type]) {
                return;
            }

            var index = this._events[type].indexOf(fn);

            if (index > -1) {
                this._events[type].splice(index, 1);
            }
        },

        _execEvent: function (type) {
            if (!this._events[type]) {
                return;
            }

            var i = 0,
                l = this._events[type].length;

            if (!l) {
                return;
            }

            for (; i < l; i++) {
                this._events[type][i].apply(this, [].slice.call(arguments, 1));
            }
        },

        scrollBy: function (x, y, time, easing) {
            x = this.x + x;
            y = this.y + y;
            time = time || 0;

            this.scrollTo(x, y, time, easing);
        },

        scrollTo: function (x, y, time, easing) {
            easing = easing || utils.ease.circular;

            this.isInTransition = this.options.useTransition && time > 0;

            if (!time || (this.options.useTransition && easing.style)) {
                this._transitionTimingFunction(easing.style);
                this._transitionTime(time);
                this._translate(x, y);
            } else {
                this._animate(x, y, time, easing.fn);
            }
        },

        scrollToElement: function (el, time, offsetX, offsetY, easing) {
            el = el.nodeType ? el : this.scroller.querySelector(el);

            if (!el) {
                return;
            }

            var pos = utils.offset(el);

            pos.left -= this.wrapperOffset.left;
            pos.top -= this.wrapperOffset.top;

            // if offsetX/Y are true we center the element to the screen
            if (offsetX === true) {
                offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);
            }
            if (offsetY === true) {
                offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);
            }

            pos.left -= offsetX || 0;
            pos.top -= offsetY || 0;

            pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;
            pos.top = pos.top > 0 ? 0 : pos.top < this.maxScrollY ? this.maxScrollY : pos.top;

            time = time === undefined || time === null || time === "auto" ? Math.max(Math.abs(this.x - pos.left), Math.abs(this.y - pos.top)) : time;

            this.scrollTo(pos.left, pos.top, time, easing);
        },

        _transitionTime: function (time) {
            time = time || 0;

            this.scrollerStyle[utils.style.transitionDuration] = time + "ms";

            if (!time && utils.isBadAndroid) {
                this.scrollerStyle[utils.style.transitionDuration] = "0.001s";
            }

            if (this.indicators) {
                for (var i = this.indicators.length; i--; ) {
                    this.indicators[i].transitionTime(time);
                }
            }

            // INSERT POINT: _transitionTime
        },

        _transitionTimingFunction: function (easing) {
            this.scrollerStyle[utils.style.transitionTimingFunction] = easing;

            if (this.indicators) {
                for (var i = this.indicators.length; i--; ) {
                    this.indicators[i].transitionTimingFunction(easing);
                }
            }

            // INSERT POINT: _transitionTimingFunction
        },

        _translate: function (x, y) {
            if (this.options.useTransform) {
                /* REPLACE START: _translate */

                this.scrollerStyle[utils.style.transform] = "translate(" + x + "px," + y + "px)" + this.translateZ;

                /* REPLACE END: _translate */
            } else {
                x = Math.round(x);
                y = Math.round(y);
                this.scrollerStyle.left = x + "px";
                this.scrollerStyle.top = y + "px";
            }

            this.x = x;
            this.y = y;

            if (this.indicators) {
                for (var i = this.indicators.length; i--; ) {
                    this.indicators[i].updatePosition();
                }
            }

            // INSERT POINT: _translate
        },

        _initEvents: function (remove) {
            var eventType = remove ? utils.removeEvent : utils.addEvent,
                target = this.options.bindToWrapper ? this.wrapper : window;

            eventType(window, "orientationchange", this);
            eventType(window, "resize", this);

            if (this.options.click) {
                eventType(this.wrapper, "click", this, true);
            }

            if (!this.options.disableMouse) {
                eventType(this.wrapper, "mousedown", this);
                eventType(target, "mousemove", this);
                eventType(target, "mousecancel", this);
                eventType(target, "mouseup", this);
            }

            if (utils.hasPointer && !this.options.disablePointer) {
                eventType(this.wrapper, utils.prefixPointerEvent("pointerdown"), this);
                eventType(target, utils.prefixPointerEvent("pointermove"), this);
                eventType(target, utils.prefixPointerEvent("pointercancel"), this);
                eventType(target, utils.prefixPointerEvent("pointerup"), this);
            }

            if (utils.hasTouch && !this.options.disableTouch) {
                eventType(this.wrapper, "touchstart", this);
                eventType(target, "touchmove", this);
                eventType(target, "touchcancel", this);
                eventType(target, "touchend", this);
            }

            eventType(this.scroller, "transitionend", this);
            eventType(this.scroller, "webkitTransitionEnd", this);
            eventType(this.scroller, "oTransitionEnd", this);
            eventType(this.scroller, "MSTransitionEnd", this);
        },

        getComputedPosition: function () {
            var matrix = window.getComputedStyle(this.scroller, null),
                x,
                y;

            if (this.options.useTransform) {
                matrix = matrix[utils.style.transform].split(")")[0].split(", ");
                x = +(matrix[12] || matrix[4]);
                y = +(matrix[13] || matrix[5]);
            } else {
                x = +matrix.left.replace(/[^-\d.]/g, "");
                y = +matrix.top.replace(/[^-\d.]/g, "");
            }

            return { x: x, y: y };
        },

        _initIndicators: function () {
            var interactive = this.options.interactiveScrollbars,
                customStyle = typeof this.options.scrollbars != "string",
                indicators = [],
                indicator;

            var that = this;

            this.indicators = [];

            if (this.options.scrollbars) {
                // Vertical scrollbar
                if (this.options.scrollY) {
                    indicator = {
                        el: createDefaultScrollbar("v", interactive, this.options.scrollbars),
                        interactive: interactive,
                        defaultScrollbars: true,
                        customStyle: customStyle,
                        resize: this.options.resizeScrollbars,
                        shrink: this.options.shrinkScrollbars,
                        fade: this.options.fadeScrollbars,
                        listenX: false,
                    };

                    this.wrapper.appendChild(indicator.el);
                    indicators.push(indicator);
                }

                // Horizontal scrollbar
                if (this.options.scrollX) {
                    indicator = {
                        el: createDefaultScrollbar("h", interactive, this.options.scrollbars),
                        interactive: interactive,
                        defaultScrollbars: true,
                        customStyle: customStyle,
                        resize: this.options.resizeScrollbars,
                        shrink: this.options.shrinkScrollbars,
                        fade: this.options.fadeScrollbars,
                        listenY: false,
                    };

                    this.wrapper.appendChild(indicator.el);
                    indicators.push(indicator);
                }
            }

            if (this.options.indicators) {
                // TODO: check concat compatibility
                indicators = indicators.concat(this.options.indicators);
            }

            for (var i = indicators.length; i--; ) {
                this.indicators.push(new Indicator(this, indicators[i]));
            }

            // TODO: check if we can use array.map (wide compatibility and performance issues)
            function _indicatorsMap(fn) {
                for (var i = that.indicators.length; i--; ) {
                    fn.call(that.indicators[i]);
                }
            }

            if (this.options.fadeScrollbars) {
                this.on("scrollEnd", function () {
                    _indicatorsMap(function () {
                        this.fade();
                    });
                });

                this.on("scrollCancel", function () {
                    _indicatorsMap(function () {
                        this.fade();
                    });
                });

                this.on("scrollStart", function () {
                    _indicatorsMap(function () {
                        this.fade(1);
                    });
                });

                this.on("beforeScrollStart", function () {
                    _indicatorsMap(function () {
                        this.fade(1, true);
                    });
                });
            }

            this.on("refresh", function () {
                _indicatorsMap(function () {
                    this.refresh();
                });
            });

            this.on("destroy", function () {
                _indicatorsMap(function () {
                    this.destroy();
                });

                delete this.indicators;
            });
        },

        _initWheel: function () {
            utils.addEvent(this.wrapper, "wheel", this);
            utils.addEvent(this.wrapper, "mousewheel", this);
            utils.addEvent(this.wrapper, "DOMMouseScroll", this);

            this.on("destroy", function () {
                utils.removeEvent(this.wrapper, "wheel", this);
                utils.removeEvent(this.wrapper, "mousewheel", this);
                utils.removeEvent(this.wrapper, "DOMMouseScroll", this);
            });
        },

        _wheel: function (e) {
            if (!this.enabled) {
                return;
            }

            e.preventDefault();
            e.stopPropagation();

            var wheelDeltaX,
                wheelDeltaY,
                newX,
                newY,
                that = this;

            if (this.wheelTimeout === undefined) {
                that._execEvent("scrollStart");
            }

            // Execute the scrollEnd event after 400ms the wheel stopped scrolling
            clearTimeout(this.wheelTimeout);
            this.wheelTimeout = setTimeout(function () {
                that._execEvent("scrollEnd");
                that.wheelTimeout = undefined;
            }, 400);

            if ("deltaX" in e) {
                if (e.deltaMode === 1) {
                    wheelDeltaX = -e.deltaX * this.options.mouseWheelSpeed;
                    wheelDeltaY = -e.deltaY * this.options.mouseWheelSpeed;
                } else {
                    wheelDeltaX = -e.deltaX;
                    wheelDeltaY = -e.deltaY;
                }
            } else if ("wheelDeltaX" in e) {
                wheelDeltaX = (e.wheelDeltaX / 120) * this.options.mouseWheelSpeed;
                wheelDeltaY = (e.wheelDeltaY / 120) * this.options.mouseWheelSpeed;
            } else if ("wheelDelta" in e) {
                wheelDeltaX = wheelDeltaY = (e.wheelDelta / 120) * this.options.mouseWheelSpeed;
            } else if ("detail" in e) {
                wheelDeltaX = wheelDeltaY = (-e.detail / 3) * this.options.mouseWheelSpeed;
            } else {
                return;
            }

            wheelDeltaX *= this.options.invertWheelDirection;
            wheelDeltaY *= this.options.invertWheelDirection;

            if (!this.hasVerticalScroll) {
                wheelDeltaX = wheelDeltaY;
                wheelDeltaY = 0;
            }

            if (this.options.snap) {
                newX = this.currentPage.pageX;
                newY = this.currentPage.pageY;

                if (wheelDeltaX > 0) {
                    newX--;
                } else if (wheelDeltaX < 0) {
                    newX++;
                }

                if (wheelDeltaY > 0) {
                    newY--;
                } else if (wheelDeltaY < 0) {
                    newY++;
                }

                this.goToPage(newX, newY);

                return;
            }

            newX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX : 0);
            newY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY : 0);

            if (newX > 0) {
                newX = 0;
            } else if (newX < this.maxScrollX) {
                newX = this.maxScrollX;
            }

            if (newY > 0) {
                newY = 0;
            } else if (newY < this.maxScrollY) {
                newY = this.maxScrollY;
            }

            this.scrollTo(newX, newY, 0);

            // INSERT POINT: _wheel
        },

        _initSnap: function () {
            this.currentPage = {};

            if (typeof this.options.snap == "string") {
                this.options.snap = this.scroller.querySelectorAll(this.options.snap);
            }

            this.on("refresh", function () {
                var i = 0,
                    l,
                    m = 0,
                    n,
                    cx,
                    cy,
                    x = 0,
                    y,
                    stepX = this.options.snapStepX || this.wrapperWidth,
                    stepY = this.options.snapStepY || this.wrapperHeight,
                    el;

                this.pages = [];

                if (!this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight) {
                    return;
                }

                if (this.options.snap === true) {
                    cx = Math.round(stepX / 2);
                    cy = Math.round(stepY / 2);

                    while (x > -this.scrollerWidth) {
                        this.pages[i] = [];
                        l = 0;
                        y = 0;

                        while (y > -this.scrollerHeight) {
                            this.pages[i][l] = {
                                x: Math.max(x, this.maxScrollX),
                                y: Math.max(y, this.maxScrollY),
                                width: stepX,
                                height: stepY,
                                cx: x - cx,
                                cy: y - cy,
                            };

                            y -= stepY;
                            l++;
                        }

                        x -= stepX;
                        i++;
                    }
                } else {
                    el = this.options.snap;
                    l = el.length;
                    n = -1;

                    for (; i < l; i++) {
                        if (i === 0 || el[i].offsetLeft <= el[i - 1].offsetLeft) {
                            m = 0;
                            n++;
                        }

                        if (!this.pages[m]) {
                            this.pages[m] = [];
                        }

                        x = Math.max(-el[i].offsetLeft, this.maxScrollX);
                        y = Math.max(-el[i].offsetTop, this.maxScrollY);
                        cx = x - Math.round(el[i].offsetWidth / 2);
                        cy = y - Math.round(el[i].offsetHeight / 2);

                        this.pages[m][n] = {
                            x: x,
                            y: y,
                            width: el[i].offsetWidth,
                            height: el[i].offsetHeight,
                            cx: cx,
                            cy: cy,
                        };

                        if (x > this.maxScrollX) {
                            m++;
                        }
                    }
                }

                this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0);

                // Update snap threshold if needed
                if (this.options.snapThreshold % 1 === 0) {
                    this.snapThresholdX = this.options.snapThreshold;
                    this.snapThresholdY = this.options.snapThreshold;
                } else {
                    this.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);
                    this.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);
                }
            });

            this.on("flick", function () {
                var time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.x - this.startX), 1000), Math.min(Math.abs(this.y - this.startY), 1000)), 300);

                this.goToPage(this.currentPage.pageX + this.directionX, this.currentPage.pageY + this.directionY, time);
            });
        },

        _nearestSnap: function (x, y) {
            if (!this.pages.length) {
                return { x: 0, y: 0, pageX: 0, pageY: 0 };
            }

            var i = 0,
                l = this.pages.length,
                m = 0;

            // Check if we exceeded the snap threshold
            if (Math.abs(x - this.absStartX) < this.snapThresholdX && Math.abs(y - this.absStartY) < this.snapThresholdY) {
                return this.currentPage;
            }

            if (x > 0) {
                x = 0;
            } else if (x < this.maxScrollX) {
                x = this.maxScrollX;
            }

            if (y > 0) {
                y = 0;
            } else if (y < this.maxScrollY) {
                y = this.maxScrollY;
            }

            for (; i < l; i++) {
                if (x >= this.pages[i][0].cx) {
                    x = this.pages[i][0].x;
                    break;
                }
            }

            l = this.pages[i].length;

            for (; m < l; m++) {
                if (y >= this.pages[0][m].cy) {
                    y = this.pages[0][m].y;
                    break;
                }
            }

            if (i == this.currentPage.pageX) {
                i += this.directionX;

                if (i < 0) {
                    i = 0;
                } else if (i >= this.pages.length) {
                    i = this.pages.length - 1;
                }

                x = this.pages[i][0].x;
            }

            if (m == this.currentPage.pageY) {
                m += this.directionY;

                if (m < 0) {
                    m = 0;
                } else if (m >= this.pages[0].length) {
                    m = this.pages[0].length - 1;
                }

                y = this.pages[0][m].y;
            }

            return {
                x: x,
                y: y,
                pageX: i,
                pageY: m,
            };
        },

        goToPage: function (x, y, time, easing) {
            easing = easing || this.options.bounceEasing;

            if (x >= this.pages.length) {
                x = this.pages.length - 1;
            } else if (x < 0) {
                x = 0;
            }

            if (y >= this.pages[x].length) {
                y = this.pages[x].length - 1;
            } else if (y < 0) {
                y = 0;
            }

            var posX = this.pages[x][y].x,
                posY = this.pages[x][y].y;

            time = time === undefined ? this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(posX - this.x), 1000), Math.min(Math.abs(posY - this.y), 1000)), 300) : time;

            this.currentPage = {
                x: posX,
                y: posY,
                pageX: x,
                pageY: y,
            };

            this.scrollTo(posX, posY, time, easing);
        },

        next: function (time, easing) {
            var x = this.currentPage.pageX,
                y = this.currentPage.pageY;

            x++;

            if (x >= this.pages.length && this.hasVerticalScroll) {
                x = 0;
                y++;
            }

            this.goToPage(x, y, time, easing);
        },

        prev: function (time, easing) {
            var x = this.currentPage.pageX,
                y = this.currentPage.pageY;

            x--;

            if (x < 0 && this.hasVerticalScroll) {
                x = 0;
                y--;
            }

            this.goToPage(x, y, time, easing);
        },

        _initKeys: function (e) {
            // default key bindings
            var keys = {
                pageUp: 33,
                pageDown: 34,
                end: 35,
                home: 36,
                left: 37,
                up: 38,
                right: 39,
                down: 40,
            };
            var i;

            // if you give me characters I give you keycode
            if (typeof this.options.keyBindings == "object") {
                for (i in this.options.keyBindings) {
                    if (typeof this.options.keyBindings[i] == "string") {
                        this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);
                    }
                }
            } else {
                this.options.keyBindings = {};
            }

            for (i in keys) {
                this.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];
            }

            utils.addEvent(window, "keydown", this);

            this.on("destroy", function () {
                utils.removeEvent(window, "keydown", this);
            });
        },

        _key: function (e) {
            if (!this.enabled) {
                return;
            }

            var snap = this.options.snap, // we are using this alot, better to cache it
                newX = snap ? this.currentPage.pageX : this.x,
                newY = snap ? this.currentPage.pageY : this.y,
                now = utils.getTime(),
                prevTime = this.keyTime || 0,
                acceleration = 0.25,
                pos;

            if (this.options.useTransition && this.isInTransition) {
                pos = this.getComputedPosition();

                this._translate(Math.round(pos.x), Math.round(pos.y));
                this.isInTransition = false;
            }

            this.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;

            switch (e.keyCode) {
                case this.options.keyBindings.pageUp:
                    if (this.hasHorizontalScroll && !this.hasVerticalScroll) {
                        newX += snap ? 1 : this.wrapperWidth;
                    } else {
                        newY += snap ? 1 : this.wrapperHeight;
                    }
                    break;
                case this.options.keyBindings.pageDown:
                    if (this.hasHorizontalScroll && !this.hasVerticalScroll) {
                        newX -= snap ? 1 : this.wrapperWidth;
                    } else {
                        newY -= snap ? 1 : this.wrapperHeight;
                    }
                    break;
                case this.options.keyBindings.end:
                    newX = snap ? this.pages.length - 1 : this.maxScrollX;
                    newY = snap ? this.pages[0].length - 1 : this.maxScrollY;
                    break;
                case this.options.keyBindings.home:
                    newX = 0;
                    newY = 0;
                    break;
                case this.options.keyBindings.left:
                    newX += snap ? -1 : (5 + this.keyAcceleration) >> 0;
                    break;
                case this.options.keyBindings.up:
                    newY += snap ? 1 : (5 + this.keyAcceleration) >> 0;
                    break;
                case this.options.keyBindings.right:
                    newX -= snap ? -1 : (5 + this.keyAcceleration) >> 0;
                    break;
                case this.options.keyBindings.down:
                    newY -= snap ? 1 : (5 + this.keyAcceleration) >> 0;
                    break;
                default:
                    return;
            }

            if (snap) {
                this.goToPage(newX, newY);
                return;
            }

            if (newX > 0) {
                newX = 0;
                this.keyAcceleration = 0;
            } else if (newX < this.maxScrollX) {
                newX = this.maxScrollX;
                this.keyAcceleration = 0;
            }

            if (newY > 0) {
                newY = 0;
                this.keyAcceleration = 0;
            } else if (newY < this.maxScrollY) {
                newY = this.maxScrollY;
                this.keyAcceleration = 0;
            }

            this.scrollTo(newX, newY, 0);

            this.keyTime = now;
        },

        _animate: function (destX, destY, duration, easingFn) {
            var that = this,
                startX = this.x,
                startY = this.y,
                startTime = utils.getTime(),
                destTime = startTime + duration;

            function step() {
                var now = utils.getTime(),
                    newX,
                    newY,
                    easing;

                if (now >= destTime) {
                    that.isAnimating = false;
                    that._translate(destX, destY);

                    if (!that.resetPosition(that.options.bounceTime)) {
                        that._execEvent("scrollEnd");
                    }

                    return;
                }

                now = (now - startTime) / duration;
                easing = easingFn(now);
                newX = (destX - startX) * easing + startX;
                newY = (destY - startY) * easing + startY;
                that._translate(newX, newY);

                if (that.isAnimating) {
                    rAF(step);
                }
            }

            this.isAnimating = true;
            step();
        },
        handleEvent: function (e) {
            switch (e.type) {
                case "touchstart":
                case "pointerdown":
                case "MSPointerDown":
                case "mousedown":
                    this._start(e);
                    break;
                case "touchmove":
                case "pointermove":
                case "MSPointerMove":
                case "mousemove":
                    this._move(e);
                    break;
                case "touchend":
                case "pointerup":
                case "MSPointerUp":
                case "mouseup":
                case "touchcancel":
                case "pointercancel":
                case "MSPointerCancel":
                case "mousecancel":
                    this._end(e);
                    break;
                case "orientationchange":
                case "resize":
                    this._resize();
                    break;
                case "transitionend":
                case "webkitTransitionEnd":
                case "oTransitionEnd":
                case "MSTransitionEnd":
                    this._transitionEnd(e);
                    break;
                case "wheel":
                case "DOMMouseScroll":
                case "mousewheel":
                    this._wheel(e);
                    break;
                case "keydown":
                    this._key(e);
                    break;
                case "click":
                    if (!e._constructed) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                    break;
            }
        },
    };
    function createDefaultScrollbar(direction, interactive, type) {
        var scrollbar = document.createElement("div"),
            indicator = document.createElement("div");

        if (type === true) {
            scrollbar.style.cssText = "position:absolute;z-index:9999";
            indicator.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px";
        }

        indicator.className = "iScrollIndicator";

        if (direction == "h") {
            if (type === true) {
                scrollbar.style.cssText += ";height:7px;left:2px;right:2px;bottom:0";
                indicator.style.height = "100%";
            }
            scrollbar.className = "iScrollHorizontalScrollbar";
        } else {
            if (type === true) {
                scrollbar.style.cssText += ";width:7px;bottom:2px;top:2px;right:1px";
                indicator.style.width = "100%";
            }
            scrollbar.className = "iScrollVerticalScrollbar";
        }

        scrollbar.style.cssText += ";overflow:hidden";

        if (!interactive) {
            scrollbar.style.pointerEvents = "none";
        }

        scrollbar.appendChild(indicator);

        return scrollbar;
    }

    function Indicator(scroller, options) {
        this.wrapper = typeof options.el == "string" ? document.querySelector(options.el) : options.el;
        this.wrapperStyle = this.wrapper.style;
        this.indicator = this.wrapper.children[0];
        this.indicatorStyle = this.indicator.style;
        this.scroller = scroller;

        this.options = {
            listenX: true,
            listenY: true,
            interactive: false,
            resize: true,
            defaultScrollbars: false,
            shrink: false,
            fade: false,
            speedRatioX: 0,
            speedRatioY: 0,
        };

        for (var i in options) {
            this.options[i] = options[i];
        }

        this.sizeRatioX = 1;
        this.sizeRatioY = 1;
        this.maxPosX = 0;
        this.maxPosY = 0;

        if (this.options.interactive) {
            if (!this.options.disableTouch) {
                utils.addEvent(this.indicator, "touchstart", this);
                utils.addEvent(window, "touchend", this);
            }
            if (!this.options.disablePointer) {
                utils.addEvent(this.indicator, utils.prefixPointerEvent("pointerdown"), this);
                utils.addEvent(window, utils.prefixPointerEvent("pointerup"), this);
            }
            if (!this.options.disableMouse) {
                utils.addEvent(this.indicator, "mousedown", this);
                utils.addEvent(window, "mouseup", this);
            }
        }

        if (this.options.fade) {
            this.wrapperStyle[utils.style.transform] = this.scroller.translateZ;
            this.wrapperStyle[utils.style.transitionDuration] = utils.isBadAndroid ? "0.001s" : "0ms";
            this.wrapperStyle.opacity = "0";
        }
    }

    Indicator.prototype = {
        handleEvent: function (e) {
            switch (e.type) {
                case "touchstart":
                case "pointerdown":
                case "MSPointerDown":
                case "mousedown":
                    this._start(e);
                    break;
                case "touchmove":
                case "pointermove":
                case "MSPointerMove":
                case "mousemove":
                    this._move(e);
                    break;
                case "touchend":
                case "pointerup":
                case "MSPointerUp":
                case "mouseup":
                case "touchcancel":
                case "pointercancel":
                case "MSPointerCancel":
                case "mousecancel":
                    this._end(e);
                    break;
            }
        },

        destroy: function () {
            if (this.options.interactive) {
                utils.removeEvent(this.indicator, "touchstart", this);
                utils.removeEvent(this.indicator, utils.prefixPointerEvent("pointerdown"), this);
                utils.removeEvent(this.indicator, "mousedown", this);

                utils.removeEvent(window, "touchmove", this);
                utils.removeEvent(window, utils.prefixPointerEvent("pointermove"), this);
                utils.removeEvent(window, "mousemove", this);

                utils.removeEvent(window, "touchend", this);
                utils.removeEvent(window, utils.prefixPointerEvent("pointerup"), this);
                utils.removeEvent(window, "mouseup", this);
            }

            if (this.options.defaultScrollbars) {
                this.wrapper.parentNode.removeChild(this.wrapper);
            }
        },

        _start: function (e) {
            var point = e.touches ? e.touches[0] : e;

            e.preventDefault();
            e.stopPropagation();

            this.transitionTime();

            this.initiated = true;
            this.moved = false;
            this.lastPointX = point.pageX;
            this.lastPointY = point.pageY;

            this.startTime = utils.getTime();

            if (!this.options.disableTouch) {
                utils.addEvent(window, "touchmove", this);
            }
            if (!this.options.disablePointer) {
                utils.addEvent(window, utils.prefixPointerEvent("pointermove"), this);
            }
            if (!this.options.disableMouse) {
                utils.addEvent(window, "mousemove", this);
            }

            this.scroller._execEvent("beforeScrollStart");
        },

        _move: function (e) {
            var point = e.touches ? e.touches[0] : e,
                deltaX,
                deltaY,
                newX,
                newY,
                timestamp = utils.getTime();

            if (!this.moved) {
                this.scroller._execEvent("scrollStart");
            }

            this.moved = true;

            deltaX = point.pageX - this.lastPointX;
            this.lastPointX = point.pageX;

            deltaY = point.pageY - this.lastPointY;
            this.lastPointY = point.pageY;

            newX = this.x + deltaX;
            newY = this.y + deltaY;

            this._pos(newX, newY);

            // INSERT POINT: indicator._move

            e.preventDefault();
            e.stopPropagation();
        },

        _end: function (e) {
            if (!this.initiated) {
                return;
            }

            this.initiated = false;

            e.preventDefault();
            e.stopPropagation();

            utils.removeEvent(window, "touchmove", this);
            utils.removeEvent(window, utils.prefixPointerEvent("pointermove"), this);
            utils.removeEvent(window, "mousemove", this);

            if (this.scroller.options.snap) {
                var snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);

                var time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.scroller.x - snap.x), 1000), Math.min(Math.abs(this.scroller.y - snap.y), 1000)), 300);

                if (this.scroller.x != snap.x || this.scroller.y != snap.y) {
                    this.scroller.directionX = 0;
                    this.scroller.directionY = 0;
                    this.scroller.currentPage = snap;
                    this.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);
                }
            }

            if (this.moved) {
                this.scroller._execEvent("scrollEnd");
            }
        },

        transitionTime: function (time) {
            time = time || 0;
            this.indicatorStyle[utils.style.transitionDuration] = time + "ms";

            if (!time && utils.isBadAndroid) {
                this.indicatorStyle[utils.style.transitionDuration] = "0.001s";
            }
        },

        transitionTimingFunction: function (easing) {
            this.indicatorStyle[utils.style.transitionTimingFunction] = easing;
        },

        refresh: function () {
            this.transitionTime();

            if (this.options.listenX && !this.options.listenY) {
                this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? "block" : "none";
            } else if (this.options.listenY && !this.options.listenX) {
                this.indicatorStyle.display = this.scroller.hasVerticalScroll ? "block" : "none";
            } else {
                this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? "block" : "none";
            }

            if (this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll) {
                utils.addClass(this.wrapper, "iScrollBothScrollbars");
                utils.removeClass(this.wrapper, "iScrollLoneScrollbar");

                if (this.options.defaultScrollbars && this.options.customStyle) {
                    if (this.options.listenX) {
                        this.wrapper.style.right = "8px";
                    } else {
                        this.wrapper.style.bottom = "8px";
                    }
                }
            } else {
                utils.removeClass(this.wrapper, "iScrollBothScrollbars");
                utils.addClass(this.wrapper, "iScrollLoneScrollbar");

                if (this.options.defaultScrollbars && this.options.customStyle) {
                    if (this.options.listenX) {
                        this.wrapper.style.right = "2px";
                    } else {
                        this.wrapper.style.bottom = "2px";
                    }
                }
            }

            var r = this.wrapper.offsetHeight; // force refresh

            if (this.options.listenX) {
                this.wrapperWidth = this.wrapper.clientWidth;
                if (this.options.resize) {
                    this.indicatorWidth = Math.max(Math.round((this.wrapperWidth * this.wrapperWidth) / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);
                    this.indicatorStyle.width = this.indicatorWidth + "px";
                } else {
                    this.indicatorWidth = this.indicator.clientWidth;
                }

                this.maxPosX = this.wrapperWidth - this.indicatorWidth;

                if (this.options.shrink == "clip") {
                    this.minBoundaryX = -this.indicatorWidth + 8;
                    this.maxBoundaryX = this.wrapperWidth - 8;
                } else {
                    this.minBoundaryX = 0;
                    this.maxBoundaryX = this.maxPosX;
                }

                this.sizeRatioX = this.options.speedRatioX || (this.scroller.maxScrollX && this.maxPosX / this.scroller.maxScrollX);
            }

            if (this.options.listenY) {
                this.wrapperHeight = this.wrapper.clientHeight;
                if (this.options.resize) {
                    this.indicatorHeight = Math.max(Math.round((this.wrapperHeight * this.wrapperHeight) / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);
                    this.indicatorStyle.height = this.indicatorHeight + "px";
                } else {
                    this.indicatorHeight = this.indicator.clientHeight;
                }

                this.maxPosY = this.wrapperHeight - this.indicatorHeight;

                if (this.options.shrink == "clip") {
                    this.minBoundaryY = -this.indicatorHeight + 8;
                    this.maxBoundaryY = this.wrapperHeight - 8;
                } else {
                    this.minBoundaryY = 0;
                    this.maxBoundaryY = this.maxPosY;
                }

                this.maxPosY = this.wrapperHeight - this.indicatorHeight;
                this.sizeRatioY = this.options.speedRatioY || (this.scroller.maxScrollY && this.maxPosY / this.scroller.maxScrollY);
            }

            this.updatePosition();
        },

        updatePosition: function () {
            var x = (this.options.listenX && Math.round(this.sizeRatioX * this.scroller.x)) || 0,
                y = (this.options.listenY && Math.round(this.sizeRatioY * this.scroller.y)) || 0;

            if (!this.options.ignoreBoundaries) {
                if (x < this.minBoundaryX) {
                    if (this.options.shrink == "scale") {
                        this.width = Math.max(this.indicatorWidth + x, 8);
                        this.indicatorStyle.width = this.width + "px";
                    }
                    x = this.minBoundaryX;
                } else if (x > this.maxBoundaryX) {
                    if (this.options.shrink == "scale") {
                        this.width = Math.max(this.indicatorWidth - (x - this.maxPosX), 8);
                        this.indicatorStyle.width = this.width + "px";
                        x = this.maxPosX + this.indicatorWidth - this.width;
                    } else {
                        x = this.maxBoundaryX;
                    }
                } else if (this.options.shrink == "scale" && this.width != this.indicatorWidth) {
                    this.width = this.indicatorWidth;
                    this.indicatorStyle.width = this.width + "px";
                }

                if (y < this.minBoundaryY) {
                    if (this.options.shrink == "scale") {
                        this.height = Math.max(this.indicatorHeight + y * 3, 8);
                        this.indicatorStyle.height = this.height + "px";
                    }
                    y = this.minBoundaryY;
                } else if (y > this.maxBoundaryY) {
                    if (this.options.shrink == "scale") {
                        this.height = Math.max(this.indicatorHeight - (y - this.maxPosY) * 3, 8);
                        this.indicatorStyle.height = this.height + "px";
                        y = this.maxPosY + this.indicatorHeight - this.height;
                    } else {
                        y = this.maxBoundaryY;
                    }
                } else if (this.options.shrink == "scale" && this.height != this.indicatorHeight) {
                    this.height = this.indicatorHeight;
                    this.indicatorStyle.height = this.height + "px";
                }
            }

            this.x = x;
            this.y = y;

            if (this.scroller.options.useTransform) {
                this.indicatorStyle[utils.style.transform] = "translate(" + x + "px," + y + "px)" + this.scroller.translateZ;
            } else {
                this.indicatorStyle.left = x + "px";
                this.indicatorStyle.top = y + "px";
            }
        },

        _pos: function (x, y) {
            if (x < 0) {
                x = 0;
            } else if (x > this.maxPosX) {
                x = this.maxPosX;
            }

            if (y < 0) {
                y = 0;
            } else if (y > this.maxPosY) {
                y = this.maxPosY;
            }

            x = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;
            y = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;

            this.scroller.scrollTo(x, y);
        },

        fade: function (val, hold) {
            if (hold && !this.visible) {
                return;
            }

            clearTimeout(this.fadeTimeout);
            this.fadeTimeout = null;

            var time = val ? 250 : 500,
                delay = val ? 0 : 300;

            val = val ? "1" : "0";

            this.wrapperStyle[utils.style.transitionDuration] = time + "ms";

            this.fadeTimeout = setTimeout(
                function (val) {
                    this.wrapperStyle.opacity = val;
                    this.visible = +val;
                }.bind(this, val),
                delay
            );
        },
    };

    IScroll.utils = utils;

    if (typeof module != "undefined" && module.exports) {
        module.exports = IScroll;
    } else {
        window.IScroll = IScroll;
    }
})(window, document, Math);

/*! jQuery.scrollpanel %BUILD_VERSION% - //larsjung.de/scrollpanel - MIT License */

(function ($) {
    "use strict";

    var $window = $(window),
        name = "scrollpanel",
        defaults = {
            prefix: "sp-",
            onScroll: null,
        },
        // Scrollpanel
        // ===========
        ScrollPanel = function (element, options) {
            var self = this;

            // Main reference.
            self.$el = $(element);

            self.settings = $.extend({}, defaults, options);
            var prefix = self.settings.prefix;
            self.scrollCallback = self.settings.onScroll;

            // Mouse offset on drag start.
            self.mouseOffsetY = 0;
            // Interval ID for automatic scrollbar updates.
            self.updateId = 0;

            // Proxy to easily bind and unbind this method.
            self.scrollProxy = $.proxy(self.scroll, self);

            // Make content space relative, if not already.
            if (!self.$el.css("position") || self.$el.css("position") === "static") {
                self.$el.css("position", "relative");
            }

            // Create scrollbar.
            self.$scrollbar = $('<div class="' + prefix + 'scrollbar" />');
            self.$thumb = $('<div class="' + prefix + 'thumb" />').appendTo(self.$scrollbar);

            // Wrap element's content and add scrollbar.
            self.$el
                .addClass(prefix + "host")
                .wrapInner('<div class="' + prefix + 'viewport"><div class="' + prefix + 'container" /></div>')
                .append(self.$scrollbar);

            // // Get references.
            self.$viewport = self.$el.find("> ." + prefix + "viewport");
            self.$container = self.$viewport.find("> ." + prefix + "container");

            // Host
            // ----
            self.$el

                // Handle mouse wheel.
                .on("mousewheel", function (event, delta, deltaX, deltaY) {
                    var t = self.$viewport.scrollTop() - 50 * deltaY;
                    self.$viewport.scrollTop(t);
                    self.update();
                    event.preventDefault();
                    event.stopPropagation();
                })

                // Handle scrolling.
                .on("scroll", function () {
                    self.update();
                });

            // Viewport
            // --------
            self.$viewport

                // Basic styling.
                .css({
                    paddingRight: self.$scrollbar.outerWidth(true),
                    height: self.$el.height(),
                    overflow: "hidden",
                });

            // Container
            // ---------
            self.$container

                // Basic styling.
                .css({
                    overflow: "hidden",
                });

            // Srollbar
            // --------
            self.$scrollbar

                // Basic styling.
                .css({
                    position: "absolute",
                    top: 0,
                    right: 0,
                    overflow: "hidden",
                })

                // Handle mouse buttons.
                .on("mousedown", function (event) {
                    self.mouseOffsetY = self.$thumb.outerHeight() / 2;
                    self.onMousedown(event);
                })

                // Disable selection.
                .each(function () {
                    self.onselectstart = function () {
                        return false;
                    };
                });

            // Scrollbar Thumb
            // ---------------
            self.$thumb

                // Basic styling.
                .css({
                    position: "absolute",
                    left: 0,
                    width: "100%",
                })

                // Handle mouse buttons.
                .on("mousedown", function (event) {
                    self.mouseOffsetY = event.pageY - self.$thumb.offset().top;
                    self.onMousedown(event);
                });

            // Initial update.
            self.update();
        };

    // Scrollpanel methods
    // ===================
    $.extend(ScrollPanel.prototype, {
        // Rerender scrollbar.
        update: function (repeat) {
            var self = this;

            if (self.updateId && !repeat) {
                clearInterval(self.updateId);
                self.updateId = 0;
            } else if (!self.updateId && repeat) {
                self.updateId = setInterval(function () {
                    self.update(true);
                }, 50);
            }

            self.$viewport.css("height", self.$el.height());

            var visibleHeight = self.$el.height(),
                contentHeight = self.$container.outerHeight(),
                scrollTop = self.$viewport.scrollTop(),
                scrollTopFrac = scrollTop / contentHeight,
                visVertFrac = Math.min(visibleHeight / contentHeight, 1),
                scrollbarHeight = self.$scrollbar.height();

            if (visVertFrac < 1) {
                self.$scrollbar
                    .css({
                        height: self.$el.innerHeight() + scrollbarHeight - self.$scrollbar.outerHeight(true),
                    })
                    .fadeIn(50);
                self.$thumb.css({
                    top: scrollbarHeight * scrollTopFrac,
                    height: scrollbarHeight * visVertFrac,
                });
            } else {
                self.$scrollbar.fadeOut(50);
            }
        },

        // Scroll content according to mouse position.
        scroll: function (event) {
            var self = this,
                clickFrac = (event.pageY - self.$scrollbar.offset().top - self.mouseOffsetY) / self.$scrollbar.height();

            var t = self.$container.outerHeight() * clickFrac;
            self.$viewport.scrollTop(t);
            self.update();
            event.preventDefault();
            event.stopPropagation();
        },

        scrollToTop: function () {
            var self = this;

            self.$viewport.scrollTop(0);
            self.update();
        },

        // Handle mousedown events on scrollbar.
        onMousedown: function (event) {
            var self = this;

            self.scroll(event);
            self.$scrollbar.addClass("active");
            $window.on("mousemove", self.scrollProxy).one("mouseup", function (event) {
                self.$scrollbar.removeClass("active");
                $window.off("mousemove", self.scrollProxy);
                self.scroll(event);
            });
        },
    });

    // Register the plug in
    // --------------------
    $.fn[name] = function (options, options2) {
        return this.each(function () {
            var $this = $(this),
                scrollpanel = $this.data(name);

            if (!scrollpanel) {
                scrollpanel = new ScrollPanel(this, options);
                scrollpanel.update();
                $this.data(name, scrollpanel);
            }

            if (options === "update") {
                scrollpanel.update(options2);
            }
        });
    };
})(jQuery);

/*! Copyright (c) 2011 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.0.6
 *
 * Requires: 1.2.2+
 */

(function ($) {
    var types = ["DOMMouseScroll", "mousewheel"];

    if ($.event.fixHooks) {
        for (var i = types.length; i; ) {
            $.event.fixHooks[types[--i]] = $.event.mouseHooks;
        }
    }

    $.event.special.mousewheel = {
        setup: function () {
            if (this.addEventListener) {
                for (var i = types.length; i; ) {
                    this.addEventListener(types[--i], handler, false);
                }
            } else {
                this.onmousewheel = handler;
            }
        },

        teardown: function () {
            if (this.removeEventListener) {
                for (var i = types.length; i; ) {
                    this.removeEventListener(types[--i], handler, false);
                }
            } else {
                this.onmousewheel = null;
            }
        },
    };

    $.fn.extend({
        mousewheel: function (fn) {
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
        },

        unmousewheel: function (fn) {
            return this.unbind("mousewheel", fn);
        },
    });

    function handler(event) {
        var orgEvent = event || window.event,
            args = [].slice.call(arguments, 1),
            delta = 0,
            returnValue = true,
            deltaX = 0,
            deltaY = 0;
        event = $.event.fix(orgEvent);
        event.type = "mousewheel";

        // Old school scrollwheel delta
        if (orgEvent.wheelDelta) {
            delta = orgEvent.wheelDelta / 120;
        }
        if (orgEvent.detail) {
            delta = -orgEvent.detail / 3;
        }

        // New school multidimensional scroll (touchpads) deltas
        deltaY = delta;

        // Gecko
        if (orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
            deltaY = 0;
            deltaX = -1 * delta;
        }

        // Webkit
        if (orgEvent.wheelDeltaY !== undefined) {
            deltaY = orgEvent.wheelDeltaY / 120;
        }
        if (orgEvent.wheelDeltaX !== undefined) {
            deltaX = (-1 * orgEvent.wheelDeltaX) / 120;
        }

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }
})(jQuery);

(window._gsQueue || (window._gsQueue = [])).push(function () {
    "use strict";
    window._gsDefine(
        "TweenMax",
        ["core.Animation", "core.SimpleTimeline", "TweenLite"],
        function (t, e, i) {
            var s = [].slice,
                r = function (t, e, s) {
                    i.call(this, t, e, s),
                        (this._cycle = 0),
                        (this._yoyo = this.vars.yoyo === !0),
                        (this._repeat = this.vars.repeat || 0),
                        (this._repeatDelay = this.vars.repeatDelay || 0),
                        (this._dirty = !0),
                        (this.render = r.prototype.render);
                },
                n = 1e-10,
                a = i._internals.isSelector,
                o = i._internals.isArray,
                h = (r.prototype = i.to({}, 0.1, {})),
                l = [];
            (r.version = "1.11.4"),
                (h.constructor = r),
                (h.kill()._gc = !1),
                (r.killTweensOf = r.killDelayedCallsTo = i.killTweensOf),
                (r.getTweensOf = i.getTweensOf),
                (r.ticker = i.ticker),
                (h.invalidate = function () {
                    return (this._yoyo = this.vars.yoyo === !0), (this._repeat = this.vars.repeat || 0), (this._repeatDelay = this.vars.repeatDelay || 0), this._uncache(!0), i.prototype.invalidate.call(this);
                }),
                (h.updateTo = function (t, e) {
                    var s,
                        r = this.ratio;
                    e && this._startTime < this._timeline._time && ((this._startTime = this._timeline._time), this._uncache(!1), this._gc ? this._enabled(!0, !1) : this._timeline.insert(this, this._startTime - this._delay));
                    for (s in t) this.vars[s] = t[s];
                    if (this._initted)
                        if (e) this._initted = !1;
                        else if ((this._gc && this._enabled(!0, !1), this._notifyPluginsOfEnabled && this._firstPT && i._onPluginEvent("_onDisable", this), this._time / this._duration > 0.998)) {
                            var n = this._time;
                            this.render(0, !0, !1), (this._initted = !1), this.render(n, !0, !1);
                        } else if (this._time > 0) {
                            (this._initted = !1), this._init();
                            for (var a, o = 1 / (1 - r), h = this._firstPT; h; ) (a = h.s + h.c), (h.c *= o), (h.s = a - h.c), (h = h._next);
                        }
                    return this;
                }),
                (h.render = function (t, e, i) {
                    this._initted || (0 === this._duration && this.vars.repeat && this.invalidate());
                    var s,
                        r,
                        a,
                        o,
                        h,
                        _,
                        u,
                        p,
                        c = this._dirty ? this.totalDuration() : this._totalDuration,
                        f = this._time,
                        m = this._totalTime,
                        d = this._cycle,
                        g = this._duration;
                    if (
                        (t >= c
                            ? ((this._totalTime = c),
                              (this._cycle = this._repeat),
                              this._yoyo && 0 !== (1 & this._cycle) ? ((this._time = 0), (this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0)) : ((this._time = g), (this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1)),
                              this._reversed || ((s = !0), (r = "onComplete")),
                              0 === g && ((p = this._rawPrevTime), (0 === t || 0 > p || p === n) && p !== t && ((i = !0), p > n && (r = "onReverseComplete")), (this._rawPrevTime = p = !e || t || 0 === p ? t : n)))
                            : 1e-7 > t
                            ? ((this._totalTime = this._time = this._cycle = 0),
                              (this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0),
                              (0 !== m || (0 === g && this._rawPrevTime > n)) && ((r = "onReverseComplete"), (s = this._reversed)),
                              0 > t ? ((this._active = !1), 0 === g && (this._rawPrevTime >= 0 && (i = !0), (this._rawPrevTime = p = !e || t || 0 === this._rawPrevTime ? t : n))) : this._initted || (i = !0))
                            : ((this._totalTime = this._time = t),
                              0 !== this._repeat &&
                                  ((o = g + this._repeatDelay),
                                  (this._cycle = (this._totalTime / o) >> 0),
                                  0 !== this._cycle && this._cycle === this._totalTime / o && this._cycle--,
                                  (this._time = this._totalTime - this._cycle * o),
                                  this._yoyo && 0 !== (1 & this._cycle) && (this._time = g - this._time),
                                  this._time > g ? (this._time = g) : 0 > this._time && (this._time = 0)),
                              this._easeType
                                  ? ((h = this._time / g),
                                    (_ = this._easeType),
                                    (u = this._easePower),
                                    (1 === _ || (3 === _ && h >= 0.5)) && (h = 1 - h),
                                    3 === _ && (h *= 2),
                                    1 === u ? (h *= h) : 2 === u ? (h *= h * h) : 3 === u ? (h *= h * h * h) : 4 === u && (h *= h * h * h * h),
                                    (this.ratio = 1 === _ ? 1 - h : 2 === _ ? h : 0.5 > this._time / g ? h / 2 : 1 - h / 2))
                                  : (this.ratio = this._ease.getRatio(this._time / g))),
                        f === this._time && !i && d === this._cycle)
                    )
                        return m !== this._totalTime && this._onUpdate && (e || this._onUpdate.apply(this.vars.onUpdateScope || this, this.vars.onUpdateParams || l)), void 0;
                    if (!this._initted) {
                        if ((this._init(), !this._initted || this._gc)) return;
                        this._time && !s ? (this.ratio = this._ease.getRatio(this._time / g)) : s && this._ease._calcEnd && (this.ratio = this._ease.getRatio(0 === this._time ? 0 : 1));
                    }
                    for (
                        this._active || (!this._paused && this._time !== f && t >= 0 && (this._active = !0)),
                            0 === m &&
                                (this._startAt && (t >= 0 ? this._startAt.render(t, e, i) : r || (r = "_dummyGS")),
                                this.vars.onStart && (0 !== this._totalTime || 0 === g) && (e || this.vars.onStart.apply(this.vars.onStartScope || this, this.vars.onStartParams || l))),
                            a = this._firstPT;
                        a;

                    )
                        a.f ? a.t[a.p](a.c * this.ratio + a.s) : (a.t[a.p] = a.c * this.ratio + a.s), (a = a._next);
                    this._onUpdate && (0 > t && this._startAt && this._startTime && this._startAt.render(t, e, i), e || ((this._totalTime !== m || s) && this._onUpdate.apply(this.vars.onUpdateScope || this, this.vars.onUpdateParams || l))),
                        this._cycle !== d && (e || this._gc || (this.vars.onRepeat && this.vars.onRepeat.apply(this.vars.onRepeatScope || this, this.vars.onRepeatParams || l))),
                        r &&
                            (this._gc ||
                                (0 > t && this._startAt && !this._onUpdate && this._startTime && this._startAt.render(t, e, i),
                                s && (this._timeline.autoRemoveChildren && this._enabled(!1, !1), (this._active = !1)),
                                !e && this.vars[r] && this.vars[r].apply(this.vars[r + "Scope"] || this, this.vars[r + "Params"] || l),
                                0 === g && this._rawPrevTime === n && p !== n && (this._rawPrevTime = 0)));
                }),
                (r.to = function (t, e, i) {
                    return new r(t, e, i);
                }),
                (r.from = function (t, e, i) {
                    return (i.runBackwards = !0), (i.immediateRender = 0 != i.immediateRender), new r(t, e, i);
                }),
                (r.fromTo = function (t, e, i, s) {
                    return (s.startAt = i), (s.immediateRender = 0 != s.immediateRender && 0 != i.immediateRender), new r(t, e, s);
                }),
                (r.staggerTo = r.allTo = function (t, e, n, h, _, u, p) {
                    h = h || 0;
                    var c,
                        f,
                        m,
                        d,
                        g = n.delay || 0,
                        v = [],
                        y = function () {
                            n.onComplete && n.onComplete.apply(n.onCompleteScope || this, arguments), _.apply(p || this, u || l);
                        };
                    for (o(t) || ("string" == typeof t && (t = i.selector(t) || t), a(t) && (t = s.call(t, 0))), c = t.length, m = 0; c > m; m++) {
                        f = {};
                        for (d in n) f[d] = n[d];
                        (f.delay = g), m === c - 1 && _ && (f.onComplete = y), (v[m] = new r(t[m], e, f)), (g += h);
                    }
                    return v;
                }),
                (r.staggerFrom = r.allFrom = function (t, e, i, s, n, a, o) {
                    return (i.runBackwards = !0), (i.immediateRender = 0 != i.immediateRender), r.staggerTo(t, e, i, s, n, a, o);
                }),
                (r.staggerFromTo = r.allFromTo = function (t, e, i, s, n, a, o, h) {
                    return (s.startAt = i), (s.immediateRender = 0 != s.immediateRender && 0 != i.immediateRender), r.staggerTo(t, e, s, n, a, o, h);
                }),
                (r.delayedCall = function (t, e, i, s, n) {
                    return new r(e, 0, { delay: t, onComplete: e, onCompleteParams: i, onCompleteScope: s, onReverseComplete: e, onReverseCompleteParams: i, onReverseCompleteScope: s, immediateRender: !1, useFrames: n, overwrite: 0 });
                }),
                (r.set = function (t, e) {
                    return new r(t, 0, e);
                }),
                (r.isTweening = function (t) {
                    return i.getTweensOf(t, !0).length > 0;
                });
            var _ = function (t, e) {
                    for (var s = [], r = 0, n = t._first; n; ) n instanceof i ? (s[r++] = n) : (e && (s[r++] = n), (s = s.concat(_(n, e))), (r = s.length)), (n = n._next);
                    return s;
                },
                u = (r.getAllTweens = function (e) {
                    return _(t._rootTimeline, e).concat(_(t._rootFramesTimeline, e));
                });
            (r.killAll = function (t, i, s, r) {
                null == i && (i = !0), null == s && (s = !0);
                var n,
                    a,
                    o,
                    h = u(0 != r),
                    l = h.length,
                    _ = i && s && r;
                for (o = 0; l > o; o++) (a = h[o]), (_ || a instanceof e || ((n = a.target === a.vars.onComplete) && s) || (i && !n)) && (t ? a.totalTime(a.totalDuration()) : a._enabled(!1, !1));
            }),
                (r.killChildTweensOf = function (t, e) {
                    if (null != t) {
                        var n,
                            h,
                            l,
                            _,
                            u,
                            p = i._tweenLookup;
                        if (("string" == typeof t && (t = i.selector(t) || t), a(t) && (t = s.call(t, 0)), o(t))) for (_ = t.length; --_ > -1; ) r.killChildTweensOf(t[_], e);
                        else {
                            n = [];
                            for (l in p) for (h = p[l].target.parentNode; h; ) h === t && (n = n.concat(p[l].tweens)), (h = h.parentNode);
                            for (u = n.length, _ = 0; u > _; _++) e && n[_].totalTime(n[_].totalDuration()), n[_]._enabled(!1, !1);
                        }
                    }
                });
            var p = function (t, i, s, r) {
                (i = i !== !1), (s = s !== !1), (r = r !== !1);
                for (var n, a, o = u(r), h = i && s && r, l = o.length; --l > -1; ) (a = o[l]), (h || a instanceof e || ((n = a.target === a.vars.onComplete) && s) || (i && !n)) && a.paused(t);
            };
            return (
                (r.pauseAll = function (t, e, i) {
                    p(!0, t, e, i);
                }),
                (r.resumeAll = function (t, e, i) {
                    p(!1, t, e, i);
                }),
                (r.globalTimeScale = function (e) {
                    var s = t._rootTimeline,
                        r = i.ticker.time;
                    return arguments.length
                        ? ((e = e || n),
                          (s._startTime = r - ((r - s._startTime) * s._timeScale) / e),
                          (s = t._rootFramesTimeline),
                          (r = i.ticker.frame),
                          (s._startTime = r - ((r - s._startTime) * s._timeScale) / e),
                          (s._timeScale = t._rootTimeline._timeScale = e),
                          e)
                        : s._timeScale;
                }),
                (h.progress = function (t) {
                    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && 0 !== (1 & this._cycle) ? 1 - t : t) + this._cycle * (this._duration + this._repeatDelay), !1) : this._time / this.duration();
                }),
                (h.totalProgress = function (t) {
                    return arguments.length ? this.totalTime(this.totalDuration() * t, !1) : this._totalTime / this.totalDuration();
                }),
                (h.time = function (t, e) {
                    return arguments.length
                        ? (this._dirty && this.totalDuration(),
                          t > this._duration && (t = this._duration),
                          this._yoyo && 0 !== (1 & this._cycle) ? (t = this._duration - t + this._cycle * (this._duration + this._repeatDelay)) : 0 !== this._repeat && (t += this._cycle * (this._duration + this._repeatDelay)),
                          this.totalTime(t, e))
                        : this._time;
                }),
                (h.duration = function (e) {
                    return arguments.length ? t.prototype.duration.call(this, e) : this._duration;
                }),
                (h.totalDuration = function (t) {
                    return arguments.length
                        ? -1 === this._repeat
                            ? this
                            : this.duration((t - this._repeat * this._repeatDelay) / (this._repeat + 1))
                        : (this._dirty && ((this._totalDuration = -1 === this._repeat ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat), (this._dirty = !1)), this._totalDuration);
                }),
                (h.repeat = function (t) {
                    return arguments.length ? ((this._repeat = t), this._uncache(!0)) : this._repeat;
                }),
                (h.repeatDelay = function (t) {
                    return arguments.length ? ((this._repeatDelay = t), this._uncache(!0)) : this._repeatDelay;
                }),
                (h.yoyo = function (t) {
                    return arguments.length ? ((this._yoyo = t), this) : this._yoyo;
                }),
                r
            );
        },
        !0
    ),
        window._gsDefine(
            "TimelineLite",
            ["core.Animation", "core.SimpleTimeline", "TweenLite"],
            function (t, e, i) {
                var s = function (t) {
                        e.call(this, t),
                            (this._labels = {}),
                            (this.autoRemoveChildren = this.vars.autoRemoveChildren === !0),
                            (this.smoothChildTiming = this.vars.smoothChildTiming === !0),
                            (this._sortChildren = !0),
                            (this._onUpdate = this.vars.onUpdate);
                        var i,
                            s,
                            r = this.vars;
                        for (s in r) (i = r[s]), a(i) && -1 !== i.join("").indexOf("{self}") && (r[s] = this._swapSelfInParams(i));
                        a(r.tweens) && this.add(r.tweens, 0, r.align, r.stagger);
                    },
                    r = 1e-10,
                    n = i._internals.isSelector,
                    a = i._internals.isArray,
                    o = [],
                    h = function (t) {
                        var e,
                            i = {};
                        for (e in t) i[e] = t[e];
                        return i;
                    },
                    l = function (t, e, i, s) {
                        t._timeline.pause(t._startTime), e && e.apply(s || t._timeline, i || o);
                    },
                    _ = o.slice,
                    u = (s.prototype = new e());
                return (
                    (s.version = "1.11.4"),
                    (u.constructor = s),
                    (u.kill()._gc = !1),
                    (u.to = function (t, e, s, r) {
                        return e ? this.add(new i(t, e, s), r) : this.set(t, s, r);
                    }),
                    (u.from = function (t, e, s, r) {
                        return this.add(i.from(t, e, s), r);
                    }),
                    (u.fromTo = function (t, e, s, r, n) {
                        return e ? this.add(i.fromTo(t, e, s, r), n) : this.set(t, r, n);
                    }),
                    (u.staggerTo = function (t, e, r, a, o, l, u, p) {
                        var c,
                            f = new s({ onComplete: l, onCompleteParams: u, onCompleteScope: p, smoothChildTiming: this.smoothChildTiming });
                        for ("string" == typeof t && (t = i.selector(t) || t), n(t) && (t = _.call(t, 0)), a = a || 0, c = 0; t.length > c; c++) r.startAt && (r.startAt = h(r.startAt)), f.to(t[c], e, h(r), c * a);
                        return this.add(f, o);
                    }),
                    (u.staggerFrom = function (t, e, i, s, r, n, a, o) {
                        return (i.immediateRender = 0 != i.immediateRender), (i.runBackwards = !0), this.staggerTo(t, e, i, s, r, n, a, o);
                    }),
                    (u.staggerFromTo = function (t, e, i, s, r, n, a, o, h) {
                        return (s.startAt = i), (s.immediateRender = 0 != s.immediateRender && 0 != i.immediateRender), this.staggerTo(t, e, s, r, n, a, o, h);
                    }),
                    (u.call = function (t, e, s, r) {
                        return this.add(i.delayedCall(0, t, e, s), r);
                    }),
                    (u.set = function (t, e, s) {
                        return (s = this._parseTimeOrLabel(s, 0, !0)), null == e.immediateRender && (e.immediateRender = s === this._time && !this._paused), this.add(new i(t, 0, e), s);
                    }),
                    (s.exportRoot = function (t, e) {
                        (t = t || {}), null == t.smoothChildTiming && (t.smoothChildTiming = !0);
                        var r,
                            n,
                            a = new s(t),
                            o = a._timeline;
                        for (null == e && (e = !0), o._remove(a, !0), a._startTime = 0, a._rawPrevTime = a._time = a._totalTime = o._time, r = o._first; r; )
                            (n = r._next), (e && r instanceof i && r.target === r.vars.onComplete) || a.add(r, r._startTime - r._delay), (r = n);
                        return o.add(a, 0), a;
                    }),
                    (u.add = function (r, n, o, h) {
                        var l, _, u, p, c, f;
                        if (("number" != typeof n && (n = this._parseTimeOrLabel(n, 0, !0, r)), !(r instanceof t))) {
                            if (r instanceof Array || (r && r.push && a(r))) {
                                for (o = o || "normal", h = h || 0, l = n, _ = r.length, u = 0; _ > u; u++)
                                    a((p = r[u])) && (p = new s({ tweens: p })),
                                        this.add(p, l),
                                        "string" != typeof p && "function" != typeof p && ("sequence" === o ? (l = p._startTime + p.totalDuration() / p._timeScale) : "start" === o && (p._startTime -= p.delay())),
                                        (l += h);
                                return this._uncache(!0);
                            }
                            if ("string" == typeof r) return this.addLabel(r, n);
                            if ("function" != typeof r) throw "Cannot add " + r + " into the timeline; it is not a tween, timeline, function, or string.";
                            r = i.delayedCall(0, r);
                        }
                        if ((e.prototype.add.call(this, r, n), this._gc && !this._paused && this._duration < this.duration()))
                            for (c = this, f = c.rawTime() > r._startTime; c._gc && c._timeline; ) c._timeline.smoothChildTiming && f ? c.totalTime(c._totalTime, !0) : c._enabled(!0, !1), (c = c._timeline);
                        return this;
                    }),
                    (u.remove = function (e) {
                        if (e instanceof t) return this._remove(e, !1);
                        if (e instanceof Array || (e && e.push && a(e))) {
                            for (var i = e.length; --i > -1; ) this.remove(e[i]);
                            return this;
                        }
                        return "string" == typeof e ? this.removeLabel(e) : this.kill(null, e);
                    }),
                    (u._remove = function (t, i) {
                        e.prototype._remove.call(this, t, i);
                        var s = this._last;
                        return s ? this._time > s._startTime + s._totalDuration / s._timeScale && ((this._time = this.duration()), (this._totalTime = this._totalDuration)) : (this._time = this._totalTime = 0), this;
                    }),
                    (u.append = function (t, e) {
                        return this.add(t, this._parseTimeOrLabel(null, e, !0, t));
                    }),
                    (u.insert = u.insertMultiple = function (t, e, i, s) {
                        return this.add(t, e || 0, i, s);
                    }),
                    (u.appendMultiple = function (t, e, i, s) {
                        return this.add(t, this._parseTimeOrLabel(null, e, !0, t), i, s);
                    }),
                    (u.addLabel = function (t, e) {
                        return (this._labels[t] = this._parseTimeOrLabel(e)), this;
                    }),
                    (u.addPause = function (t, e, i, s) {
                        return this.call(l, ["{self}", e, i, s], this, t);
                    }),
                    (u.removeLabel = function (t) {
                        return delete this._labels[t], this;
                    }),
                    (u.getLabelTime = function (t) {
                        return null != this._labels[t] ? this._labels[t] : -1;
                    }),
                    (u._parseTimeOrLabel = function (e, i, s, r) {
                        var n;
                        if (r instanceof t && r.timeline === this) this.remove(r);
                        else if (r && (r instanceof Array || (r.push && a(r)))) for (n = r.length; --n > -1; ) r[n] instanceof t && r[n].timeline === this && this.remove(r[n]);
                        if ("string" == typeof i) return this._parseTimeOrLabel(i, s && "number" == typeof e && null == this._labels[i] ? e - this.duration() : 0, s);
                        if (((i = i || 0), "string" != typeof e || (!isNaN(e) && null == this._labels[e]))) null == e && (e = this.duration());
                        else {
                            if (((n = e.indexOf("=")), -1 === n)) return null == this._labels[e] ? (s ? (this._labels[e] = this.duration() + i) : i) : this._labels[e] + i;
                            (i = parseInt(e.charAt(n - 1) + "1", 10) * Number(e.substr(n + 1))), (e = n > 1 ? this._parseTimeOrLabel(e.substr(0, n - 1), 0, s) : this.duration());
                        }
                        return Number(e) + i;
                    }),
                    (u.seek = function (t, e) {
                        return this.totalTime("number" == typeof t ? t : this._parseTimeOrLabel(t), e !== !1);
                    }),
                    (u.stop = function () {
                        return this.paused(!0);
                    }),
                    (u.gotoAndPlay = function (t, e) {
                        return this.play(t, e);
                    }),
                    (u.gotoAndStop = function (t, e) {
                        return this.pause(t, e);
                    }),
                    (u.render = function (t, e, i) {
                        this._gc && this._enabled(!0, !1);
                        var s,
                            n,
                            a,
                            h,
                            l,
                            _ = this._dirty ? this.totalDuration() : this._totalDuration,
                            u = this._time,
                            p = this._startTime,
                            c = this._timeScale,
                            f = this._paused;
                        if (
                            (t >= _
                                ? ((this._totalTime = this._time = _),
                                  this._reversed ||
                                      this._hasPausedChild() ||
                                      ((n = !0),
                                      (h = "onComplete"),
                                      0 === this._duration && (0 === t || 0 > this._rawPrevTime || this._rawPrevTime === r) && this._rawPrevTime !== t && this._first && ((l = !0), this._rawPrevTime > r && (h = "onReverseComplete"))),
                                  (this._rawPrevTime = this._duration || !e || t || 0 === this._rawPrevTime ? t : r),
                                  (t = _ + 1e-4))
                                : 1e-7 > t
                                ? ((this._totalTime = this._time = 0),
                                  (0 !== u || (0 === this._duration && (this._rawPrevTime > r || (0 > t && this._rawPrevTime >= 0)))) && ((h = "onReverseComplete"), (n = this._reversed)),
                                  0 > t
                                      ? ((this._active = !1), 0 === this._duration && this._rawPrevTime >= 0 && this._first && (l = !0), (this._rawPrevTime = t))
                                      : ((this._rawPrevTime = this._duration || !e || t || 0 === this._rawPrevTime ? t : r), (t = 0), this._initted || (l = !0)))
                                : (this._totalTime = this._time = this._rawPrevTime = t),
                            (this._time !== u && this._first) || i || l)
                        ) {
                            if (
                                (this._initted || (this._initted = !0),
                                this._active || (!this._paused && this._time !== u && t > 0 && (this._active = !0)),
                                0 === u && this.vars.onStart && 0 !== this._time && (e || this.vars.onStart.apply(this.vars.onStartScope || this, this.vars.onStartParams || o)),
                                this._time >= u)
                            )
                                for (s = this._first; s && ((a = s._next), !this._paused || f); )
                                    (s._active || (s._startTime <= this._time && !s._paused && !s._gc)) &&
                                        (s._reversed ? s.render((s._dirty ? s.totalDuration() : s._totalDuration) - (t - s._startTime) * s._timeScale, e, i) : s.render((t - s._startTime) * s._timeScale, e, i)),
                                        (s = a);
                            else
                                for (s = this._last; s && ((a = s._prev), !this._paused || f); )
                                    (s._active || (u >= s._startTime && !s._paused && !s._gc)) &&
                                        (s._reversed ? s.render((s._dirty ? s.totalDuration() : s._totalDuration) - (t - s._startTime) * s._timeScale, e, i) : s.render((t - s._startTime) * s._timeScale, e, i)),
                                        (s = a);
                            this._onUpdate && (e || this._onUpdate.apply(this.vars.onUpdateScope || this, this.vars.onUpdateParams || o)),
                                h &&
                                    (this._gc ||
                                        ((p === this._startTime || c !== this._timeScale) &&
                                            (0 === this._time || _ >= this.totalDuration()) &&
                                            (n && (this._timeline.autoRemoveChildren && this._enabled(!1, !1), (this._active = !1)), !e && this.vars[h] && this.vars[h].apply(this.vars[h + "Scope"] || this, this.vars[h + "Params"] || o))));
                        }
                    }),
                    (u._hasPausedChild = function () {
                        for (var t = this._first; t; ) {
                            if (t._paused || (t instanceof s && t._hasPausedChild())) return !0;
                            t = t._next;
                        }
                        return !1;
                    }),
                    (u.getChildren = function (t, e, s, r) {
                        r = r || -9999999999;
                        for (var n = [], a = this._first, o = 0; a; )
                            r > a._startTime || (a instanceof i ? e !== !1 && (n[o++] = a) : (s !== !1 && (n[o++] = a), t !== !1 && ((n = n.concat(a.getChildren(!0, e, s))), (o = n.length)))), (a = a._next);
                        return n;
                    }),
                    (u.getTweensOf = function (t, e) {
                        for (var s = i.getTweensOf(t), r = s.length, n = [], a = 0; --r > -1; ) (s[r].timeline === this || (e && this._contains(s[r]))) && (n[a++] = s[r]);
                        return n;
                    }),
                    (u._contains = function (t) {
                        for (var e = t.timeline; e; ) {
                            if (e === this) return !0;
                            e = e.timeline;
                        }
                        return !1;
                    }),
                    (u.shiftChildren = function (t, e, i) {
                        i = i || 0;
                        for (var s, r = this._first, n = this._labels; r; ) r._startTime >= i && (r._startTime += t), (r = r._next);
                        if (e) for (s in n) n[s] >= i && (n[s] += t);
                        return this._uncache(!0);
                    }),
                    (u._kill = function (t, e) {
                        if (!t && !e) return this._enabled(!1, !1);
                        for (var i = e ? this.getTweensOf(e) : this.getChildren(!0, !0, !1), s = i.length, r = !1; --s > -1; ) i[s]._kill(t, e) && (r = !0);
                        return r;
                    }),
                    (u.clear = function (t) {
                        var e = this.getChildren(!1, !0, !0),
                            i = e.length;
                        for (this._time = this._totalTime = 0; --i > -1; ) e[i]._enabled(!1, !1);
                        return t !== !1 && (this._labels = {}), this._uncache(!0);
                    }),
                    (u.invalidate = function () {
                        for (var t = this._first; t; ) t.invalidate(), (t = t._next);
                        return this;
                    }),
                    (u._enabled = function (t, i) {
                        if (t === this._gc) for (var s = this._first; s; ) s._enabled(t, !0), (s = s._next);
                        return e.prototype._enabled.call(this, t, i);
                    }),
                    (u.duration = function (t) {
                        return arguments.length ? (0 !== this.duration() && 0 !== t && this.timeScale(this._duration / t), this) : (this._dirty && this.totalDuration(), this._duration);
                    }),
                    (u.totalDuration = function (t) {
                        if (!arguments.length) {
                            if (this._dirty) {
                                for (var e, i, s = 0, r = this._last, n = 999999999999; r; )
                                    (e = r._prev),
                                        r._dirty && r.totalDuration(),
                                        r._startTime > n && this._sortChildren && !r._paused ? this.add(r, r._startTime - r._delay) : (n = r._startTime),
                                        0 > r._startTime &&
                                            !r._paused &&
                                            ((s -= r._startTime), this._timeline.smoothChildTiming && (this._startTime += r._startTime / this._timeScale), this.shiftChildren(-r._startTime, !1, -9999999999), (n = 0)),
                                        (i = r._startTime + r._totalDuration / r._timeScale),
                                        i > s && (s = i),
                                        (r = e);
                                (this._duration = this._totalDuration = s), (this._dirty = !1);
                            }
                            return this._totalDuration;
                        }
                        return 0 !== this.totalDuration() && 0 !== t && this.timeScale(this._totalDuration / t), this;
                    }),
                    (u.usesFrames = function () {
                        for (var e = this._timeline; e._timeline; ) e = e._timeline;
                        return e === t._rootFramesTimeline;
                    }),
                    (u.rawTime = function () {
                        return this._paused ? this._totalTime : (this._timeline.rawTime() - this._startTime) * this._timeScale;
                    }),
                    s
                );
            },
            !0
        ),
        window._gsDefine(
            "TimelineMax",
            ["TimelineLite", "TweenLite", "easing.Ease"],
            function (t, e, i) {
                var s = function (e) {
                        t.call(this, e), (this._repeat = this.vars.repeat || 0), (this._repeatDelay = this.vars.repeatDelay || 0), (this._cycle = 0), (this._yoyo = this.vars.yoyo === !0), (this._dirty = !0);
                    },
                    r = 1e-10,
                    n = [],
                    a = new i(null, null, 1, 0),
                    o = (s.prototype = new t());
                return (
                    (o.constructor = s),
                    (o.kill()._gc = !1),
                    (s.version = "1.11.4"),
                    (o.invalidate = function () {
                        return (this._yoyo = this.vars.yoyo === !0), (this._repeat = this.vars.repeat || 0), (this._repeatDelay = this.vars.repeatDelay || 0), this._uncache(!0), t.prototype.invalidate.call(this);
                    }),
                    (o.addCallback = function (t, i, s, r) {
                        return this.add(e.delayedCall(0, t, s, r), i);
                    }),
                    (o.removeCallback = function (t, e) {
                        if (t)
                            if (null == e) this._kill(null, t);
                            else for (var i = this.getTweensOf(t, !1), s = i.length, r = this._parseTimeOrLabel(e); --s > -1; ) i[s]._startTime === r && i[s]._enabled(!1, !1);
                        return this;
                    }),
                    (o.tweenTo = function (t, i) {
                        i = i || {};
                        var s,
                            r,
                            o,
                            h = { ease: a, overwrite: 2, useFrames: this.usesFrames(), immediateRender: !1 };
                        for (r in i) h[r] = i[r];
                        return (
                            (h.time = this._parseTimeOrLabel(t)),
                            (s = Math.abs(Number(h.time) - this._time) / this._timeScale || 0.001),
                            (o = new e(this, s, h)),
                            (h.onStart = function () {
                                o.target.paused(!0),
                                    o.vars.time !== o.target.time() && s === o.duration() && o.duration(Math.abs(o.vars.time - o.target.time()) / o.target._timeScale),
                                    i.onStart && i.onStart.apply(i.onStartScope || o, i.onStartParams || n);
                            }),
                            o
                        );
                    }),
                    (o.tweenFromTo = function (t, e, i) {
                        (i = i || {}), (t = this._parseTimeOrLabel(t)), (i.startAt = { onComplete: this.seek, onCompleteParams: [t], onCompleteScope: this }), (i.immediateRender = i.immediateRender !== !1);
                        var s = this.tweenTo(e, i);
                        return s.duration(Math.abs(s.vars.time - t) / this._timeScale || 0.001);
                    }),
                    (o.render = function (t, e, i) {
                        this._gc && this._enabled(!0, !1);
                        var s,
                            a,
                            o,
                            h,
                            l,
                            _,
                            u = this._dirty ? this.totalDuration() : this._totalDuration,
                            p = this._duration,
                            c = this._time,
                            f = this._totalTime,
                            m = this._startTime,
                            d = this._timeScale,
                            g = this._rawPrevTime,
                            v = this._paused,
                            y = this._cycle;
                        if (
                            (t >= u
                                ? (this._locked || ((this._totalTime = u), (this._cycle = this._repeat)),
                                  this._reversed || this._hasPausedChild() || ((a = !0), (h = "onComplete"), 0 === this._duration && (0 === t || 0 > g || g === r) && g !== t && this._first && ((l = !0), g > r && (h = "onReverseComplete"))),
                                  (this._rawPrevTime = this._duration || !e || t || 0 === this._rawPrevTime ? t : r),
                                  this._yoyo && 0 !== (1 & this._cycle) ? (this._time = t = 0) : ((this._time = p), (t = p + 1e-4)))
                                : 1e-7 > t
                                ? (this._locked || (this._totalTime = this._cycle = 0),
                                  (this._time = 0),
                                  (0 !== c || (0 === p && (g > r || (0 > t && g >= 0)) && !this._locked)) && ((h = "onReverseComplete"), (a = this._reversed)),
                                  0 > t
                                      ? ((this._active = !1), 0 === p && g >= 0 && this._first && (l = !0), (this._rawPrevTime = t))
                                      : ((this._rawPrevTime = p || !e || t || 0 === this._rawPrevTime ? t : r), (t = 0), this._initted || (l = !0)))
                                : (0 === p && 0 > g && (l = !0),
                                  (this._time = this._rawPrevTime = t),
                                  this._locked ||
                                      ((this._totalTime = t),
                                      0 !== this._repeat &&
                                          ((_ = p + this._repeatDelay),
                                          (this._cycle = (this._totalTime / _) >> 0),
                                          0 !== this._cycle && this._cycle === this._totalTime / _ && this._cycle--,
                                          (this._time = this._totalTime - this._cycle * _),
                                          this._yoyo && 0 !== (1 & this._cycle) && (this._time = p - this._time),
                                          this._time > p ? ((this._time = p), (t = p + 1e-4)) : 0 > this._time ? (this._time = t = 0) : (t = this._time)))),
                            this._cycle !== y && !this._locked)
                        ) {
                            var T = this._yoyo && 0 !== (1 & y),
                                w = T === (this._yoyo && 0 !== (1 & this._cycle)),
                                x = this._totalTime,
                                b = this._cycle,
                                P = this._rawPrevTime,
                                S = this._time;
                            if (
                                ((this._totalTime = y * p),
                                y > this._cycle ? (T = !T) : (this._totalTime += p),
                                (this._time = c),
                                (this._rawPrevTime = 0 === p ? g - 1e-4 : g),
                                (this._cycle = y),
                                (this._locked = !0),
                                (c = T ? 0 : p),
                                this.render(c, e, 0 === p),
                                e || this._gc || (this.vars.onRepeat && this.vars.onRepeat.apply(this.vars.onRepeatScope || this, this.vars.onRepeatParams || n)),
                                w && ((c = T ? p + 1e-4 : -1e-4), this.render(c, !0, !1)),
                                (this._locked = !1),
                                this._paused && !v)
                            )
                                return;
                            (this._time = S), (this._totalTime = x), (this._cycle = b), (this._rawPrevTime = P);
                        }
                        if (!((this._time !== c && this._first) || i || l)) return f !== this._totalTime && this._onUpdate && (e || this._onUpdate.apply(this.vars.onUpdateScope || this, this.vars.onUpdateParams || n)), void 0;
                        if (
                            (this._initted || (this._initted = !0),
                            this._active || (!this._paused && this._totalTime !== f && t > 0 && (this._active = !0)),
                            0 === f && this.vars.onStart && 0 !== this._totalTime && (e || this.vars.onStart.apply(this.vars.onStartScope || this, this.vars.onStartParams || n)),
                            this._time >= c)
                        )
                            for (s = this._first; s && ((o = s._next), !this._paused || v); )
                                (s._active || (s._startTime <= this._time && !s._paused && !s._gc)) &&
                                    (s._reversed ? s.render((s._dirty ? s.totalDuration() : s._totalDuration) - (t - s._startTime) * s._timeScale, e, i) : s.render((t - s._startTime) * s._timeScale, e, i)),
                                    (s = o);
                        else
                            for (s = this._last; s && ((o = s._prev), !this._paused || v); )
                                (s._active || (c >= s._startTime && !s._paused && !s._gc)) &&
                                    (s._reversed ? s.render((s._dirty ? s.totalDuration() : s._totalDuration) - (t - s._startTime) * s._timeScale, e, i) : s.render((t - s._startTime) * s._timeScale, e, i)),
                                    (s = o);
                        this._onUpdate && (e || this._onUpdate.apply(this.vars.onUpdateScope || this, this.vars.onUpdateParams || n)),
                            h &&
                                (this._locked ||
                                    this._gc ||
                                    ((m === this._startTime || d !== this._timeScale) &&
                                        (0 === this._time || u >= this.totalDuration()) &&
                                        (a && (this._timeline.autoRemoveChildren && this._enabled(!1, !1), (this._active = !1)), !e && this.vars[h] && this.vars[h].apply(this.vars[h + "Scope"] || this, this.vars[h + "Params"] || n))));
                    }),
                    (o.getActive = function (t, e, i) {
                        null == t && (t = !0), null == e && (e = !0), null == i && (i = !1);
                        var s,
                            r,
                            n = [],
                            a = this.getChildren(t, e, i),
                            o = 0,
                            h = a.length;
                        for (s = 0; h > s; s++) (r = a[s]), r.isActive() && (n[o++] = r);
                        return n;
                    }),
                    (o.getLabelAfter = function (t) {
                        t || (0 !== t && (t = this._time));
                        var e,
                            i = this.getLabelsArray(),
                            s = i.length;
                        for (e = 0; s > e; e++) if (i[e].time > t) return i[e].name;
                        return null;
                    }),
                    (o.getLabelBefore = function (t) {
                        null == t && (t = this._time);
                        for (var e = this.getLabelsArray(), i = e.length; --i > -1; ) if (t > e[i].time) return e[i].name;
                        return null;
                    }),
                    (o.getLabelsArray = function () {
                        var t,
                            e = [],
                            i = 0;
                        for (t in this._labels) e[i++] = { time: this._labels[t], name: t };
                        return (
                            e.sort(function (t, e) {
                                return t.time - e.time;
                            }),
                            e
                        );
                    }),
                    (o.progress = function (t) {
                        return arguments.length ? this.totalTime(this.duration() * (this._yoyo && 0 !== (1 & this._cycle) ? 1 - t : t) + this._cycle * (this._duration + this._repeatDelay), !1) : this._time / this.duration();
                    }),
                    (o.totalProgress = function (t) {
                        return arguments.length ? this.totalTime(this.totalDuration() * t, !1) : this._totalTime / this.totalDuration();
                    }),
                    (o.totalDuration = function (e) {
                        return arguments.length
                            ? -1 === this._repeat
                                ? this
                                : this.duration((e - this._repeat * this._repeatDelay) / (this._repeat + 1))
                            : (this._dirty && (t.prototype.totalDuration.call(this), (this._totalDuration = -1 === this._repeat ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat)), this._totalDuration);
                    }),
                    (o.time = function (t, e) {
                        return arguments.length
                            ? (this._dirty && this.totalDuration(),
                              t > this._duration && (t = this._duration),
                              this._yoyo && 0 !== (1 & this._cycle) ? (t = this._duration - t + this._cycle * (this._duration + this._repeatDelay)) : 0 !== this._repeat && (t += this._cycle * (this._duration + this._repeatDelay)),
                              this.totalTime(t, e))
                            : this._time;
                    }),
                    (o.repeat = function (t) {
                        return arguments.length ? ((this._repeat = t), this._uncache(!0)) : this._repeat;
                    }),
                    (o.repeatDelay = function (t) {
                        return arguments.length ? ((this._repeatDelay = t), this._uncache(!0)) : this._repeatDelay;
                    }),
                    (o.yoyo = function (t) {
                        return arguments.length ? ((this._yoyo = t), this) : this._yoyo;
                    }),
                    (o.currentLabel = function (t) {
                        return arguments.length ? this.seek(t, !0) : this.getLabelBefore(this._time + 1e-8);
                    }),
                    s
                );
            },
            !0
        ),
        (function () {
            var t = 180 / Math.PI,
                e = [],
                i = [],
                s = [],
                r = {},
                n = function (t, e, i, s) {
                    (this.a = t), (this.b = e), (this.c = i), (this.d = s), (this.da = s - t), (this.ca = i - t), (this.ba = e - t);
                },
                a = ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",
                o = function (t, e, i, s) {
                    var r = { a: t },
                        n = {},
                        a = {},
                        o = { c: s },
                        h = (t + e) / 2,
                        l = (e + i) / 2,
                        _ = (i + s) / 2,
                        u = (h + l) / 2,
                        p = (l + _) / 2,
                        c = (p - u) / 8;
                    return (r.b = h + (t - h) / 4), (n.b = u + c), (r.c = n.a = (r.b + n.b) / 2), (n.c = a.a = (u + p) / 2), (a.b = p - c), (o.b = _ + (s - _) / 4), (a.c = o.a = (a.b + o.b) / 2), [r, n, a, o];
                },
                h = function (t, r, n, a, h) {
                    var l,
                        _,
                        u,
                        p,
                        c,
                        f,
                        m,
                        d,
                        g,
                        v,
                        y,
                        T,
                        w,
                        x = t.length - 1,
                        b = 0,
                        P = t[0].a;
                    for (l = 0; x > l; l++)
                        (c = t[b]),
                            (_ = c.a),
                            (u = c.d),
                            (p = t[b + 1].d),
                            h
                                ? ((y = e[l]),
                                  (T = i[l]),
                                  (w = (0.25 * (T + y) * r) / (a ? 0.5 : s[l] || 0.5)),
                                  (f = u - (u - _) * (a ? 0.5 * r : 0 !== y ? w / y : 0)),
                                  (m = u + (p - u) * (a ? 0.5 * r : 0 !== T ? w / T : 0)),
                                  (d = u - (f + (((m - f) * ((3 * y) / (y + T) + 0.5)) / 4 || 0))))
                                : ((f = u - 0.5 * (u - _) * r), (m = u + 0.5 * (p - u) * r), (d = u - (f + m) / 2)),
                            (f += d),
                            (m += d),
                            (c.c = g = f),
                            (c.b = 0 !== l ? P : (P = c.a + 0.6 * (c.c - c.a))),
                            (c.da = u - _),
                            (c.ca = g - _),
                            (c.ba = P - _),
                            n ? ((v = o(_, P, g, u)), t.splice(b, 1, v[0], v[1], v[2], v[3]), (b += 4)) : b++,
                            (P = m);
                    (c = t[b]), (c.b = P), (c.c = P + 0.4 * (c.d - P)), (c.da = c.d - c.a), (c.ca = c.c - c.a), (c.ba = P - c.a), n && ((v = o(c.a, P, c.c, c.d)), t.splice(b, 1, v[0], v[1], v[2], v[3]));
                },
                l = function (t, s, r, a) {
                    var o,
                        h,
                        l,
                        _,
                        u,
                        p,
                        c = [];
                    if (a) for (t = [a].concat(t), h = t.length; --h > -1; ) "string" == typeof (p = t[h][s]) && "=" === p.charAt(1) && (t[h][s] = a[s] + Number(p.charAt(0) + p.substr(2)));
                    if (((o = t.length - 2), 0 > o)) return (c[0] = new n(t[0][s], 0, 0, t[-1 > o ? 0 : 1][s])), c;
                    for (h = 0; o > h; h++) (l = t[h][s]), (_ = t[h + 1][s]), (c[h] = new n(l, 0, 0, _)), r && ((u = t[h + 2][s]), (e[h] = (e[h] || 0) + (_ - l) * (_ - l)), (i[h] = (i[h] || 0) + (u - _) * (u - _)));
                    return (c[h] = new n(t[h][s], 0, 0, t[h + 1][s])), c;
                },
                _ = function (t, n, o, _, u, p) {
                    var c,
                        f,
                        m,
                        d,
                        g,
                        v,
                        y,
                        T,
                        w = {},
                        x = [],
                        b = p || t[0];
                    (u = "string" == typeof u ? "," + u + "," : a), null == n && (n = 1);
                    for (f in t[0]) x.push(f);
                    if (t.length > 1) {
                        for (T = t[t.length - 1], y = !0, c = x.length; --c > -1; )
                            if (((f = x[c]), Math.abs(b[f] - T[f]) > 0.05)) {
                                y = !1;
                                break;
                            }
                        y && ((t = t.concat()), p && t.unshift(p), t.push(t[1]), (p = t[t.length - 3]));
                    }
                    for (e.length = i.length = s.length = 0, c = x.length; --c > -1; ) (f = x[c]), (r[f] = -1 !== u.indexOf("," + f + ",")), (w[f] = l(t, f, r[f], p));
                    for (c = e.length; --c > -1; ) (e[c] = Math.sqrt(e[c])), (i[c] = Math.sqrt(i[c]));
                    if (!_) {
                        for (c = x.length; --c > -1; ) if (r[f]) for (m = w[x[c]], v = m.length - 1, d = 0; v > d; d++) (g = m[d + 1].da / i[d] + m[d].da / e[d]), (s[d] = (s[d] || 0) + g * g);
                        for (c = s.length; --c > -1; ) s[c] = Math.sqrt(s[c]);
                    }
                    for (c = x.length, d = o ? 4 : 1; --c > -1; ) (f = x[c]), (m = w[f]), h(m, n, o, _, r[f]), y && (m.splice(0, d), m.splice(m.length - d, d));
                    return w;
                },
                u = function (t, e, i) {
                    e = e || "soft";
                    var s,
                        r,
                        a,
                        o,
                        h,
                        l,
                        _,
                        u,
                        p,
                        c,
                        f,
                        m = {},
                        d = "cubic" === e ? 3 : 2,
                        g = "soft" === e,
                        v = [];
                    if ((g && i && (t = [i].concat(t)), null == t || d + 1 > t.length)) throw "invalid Bezier data";
                    for (p in t[0]) v.push(p);
                    for (l = v.length; --l > -1; ) {
                        for (p = v[l], m[p] = h = [], c = 0, u = t.length, _ = 0; u > _; _++)
                            (s = null == i ? t[_][p] : "string" == typeof (f = t[_][p]) && "=" === f.charAt(1) ? i[p] + Number(f.charAt(0) + f.substr(2)) : Number(f)), g && _ > 1 && u - 1 > _ && (h[c++] = (s + h[c - 2]) / 2), (h[c++] = s);
                        for (u = c - d + 1, c = 0, _ = 0; u > _; _ += d) (s = h[_]), (r = h[_ + 1]), (a = h[_ + 2]), (o = 2 === d ? 0 : h[_ + 3]), (h[c++] = f = 3 === d ? new n(s, r, a, o) : new n(s, (2 * r + s) / 3, (2 * r + a) / 3, a));
                        h.length = c;
                    }
                    return m;
                },
                p = function (t, e, i) {
                    for (var s, r, n, a, o, h, l, _, u, p, c, f = 1 / i, m = t.length; --m > -1; )
                        for (p = t[m], n = p.a, a = p.d - n, o = p.c - n, h = p.b - n, s = r = 0, _ = 1; i >= _; _++)
                            (l = f * _), (u = 1 - l), (s = r - (r = (l * l * a + 3 * u * (l * o + u * h)) * l)), (c = m * i + _ - 1), (e[c] = (e[c] || 0) + s * s);
                },
                c = function (t, e) {
                    e = e >> 0 || 6;
                    var i,
                        s,
                        r,
                        n,
                        a = [],
                        o = [],
                        h = 0,
                        l = 0,
                        _ = e - 1,
                        u = [],
                        c = [];
                    for (i in t) p(t[i], a, e);
                    for (r = a.length, s = 0; r > s; s++) (h += Math.sqrt(a[s])), (n = s % e), (c[n] = h), n === _ && ((l += h), (n = (s / e) >> 0), (u[n] = c), (o[n] = l), (h = 0), (c = []));
                    return { length: l, lengths: o, segments: u };
                },
                f = window._gsDefine.plugin({
                    propName: "bezier",
                    priority: -1,
                    API: 2,
                    global: !0,
                    init: function (t, e, i) {
                        (this._target = t), e instanceof Array && (e = { values: e }), (this._func = {}), (this._round = {}), (this._props = []), (this._timeRes = null == e.timeResolution ? 6 : parseInt(e.timeResolution, 10));
                        var s,
                            r,
                            n,
                            a,
                            o,
                            h = e.values || [],
                            l = {},
                            p = h[0],
                            f = e.autoRotate || i.vars.orientToBezier;
                        this._autoRotate = f ? (f instanceof Array ? f : [["x", "y", "rotation", f === !0 ? 0 : Number(f) || 0]]) : null;
                        for (s in p) this._props.push(s);
                        for (n = this._props.length; --n > -1; )
                            (s = this._props[n]),
                                this._overwriteProps.push(s),
                                (r = this._func[s] = "function" == typeof t[s]),
                                (l[s] = r ? t[s.indexOf("set") || "function" != typeof t["get" + s.substr(3)] ? s : "get" + s.substr(3)]() : parseFloat(t[s])),
                                o || (l[s] !== h[0][s] && (o = l));
                        if (
                            ((this._beziers = "cubic" !== e.type && "quadratic" !== e.type && "soft" !== e.type ? _(h, isNaN(e.curviness) ? 1 : e.curviness, !1, "thruBasic" === e.type, e.correlate, o) : u(h, e.type, l)),
                            (this._segCount = this._beziers[s].length),
                            this._timeRes)
                        ) {
                            var m = c(this._beziers, this._timeRes);
                            (this._length = m.length),
                                (this._lengths = m.lengths),
                                (this._segments = m.segments),
                                (this._l1 = this._li = this._s1 = this._si = 0),
                                (this._l2 = this._lengths[0]),
                                (this._curSeg = this._segments[0]),
                                (this._s2 = this._curSeg[0]),
                                (this._prec = 1 / this._curSeg.length);
                        }
                        if ((f = this._autoRotate))
                            for (f[0] instanceof Array || (this._autoRotate = f = [f]), n = f.length; --n > -1; )
                                for (a = 0; 3 > a; a++) (s = f[n][a]), (this._func[s] = "function" == typeof t[s] ? t[s.indexOf("set") || "function" != typeof t["get" + s.substr(3)] ? s : "get" + s.substr(3)] : !1);
                        return !0;
                    },
                    set: function (e) {
                        var i,
                            s,
                            r,
                            n,
                            a,
                            o,
                            h,
                            l,
                            _,
                            u,
                            p = this._segCount,
                            c = this._func,
                            f = this._target;
                        if (this._timeRes) {
                            if (((_ = this._lengths), (u = this._curSeg), (e *= this._length), (r = this._li), e > this._l2 && p - 1 > r)) {
                                for (l = p - 1; l > r && e >= (this._l2 = _[++r]); );
                                (this._l1 = _[r - 1]), (this._li = r), (this._curSeg = u = this._segments[r]), (this._s2 = u[(this._s1 = this._si = 0)]);
                            } else if (this._l1 > e && r > 0) {
                                for (; r > 0 && (this._l1 = _[--r]) >= e; );
                                0 === r && this._l1 > e ? (this._l1 = 0) : r++, (this._l2 = _[r]), (this._li = r), (this._curSeg = u = this._segments[r]), (this._s1 = u[(this._si = u.length - 1) - 1] || 0), (this._s2 = u[this._si]);
                            }
                            if (((i = r), (e -= this._l1), (r = this._si), e > this._s2 && u.length - 1 > r)) {
                                for (l = u.length - 1; l > r && e >= (this._s2 = u[++r]); );
                                (this._s1 = u[r - 1]), (this._si = r);
                            } else if (this._s1 > e && r > 0) {
                                for (; r > 0 && (this._s1 = u[--r]) >= e; );
                                0 === r && this._s1 > e ? (this._s1 = 0) : r++, (this._s2 = u[r]), (this._si = r);
                            }
                            o = (r + (e - this._s1) / (this._s2 - this._s1)) * this._prec;
                        } else (i = 0 > e ? 0 : e >= 1 ? p - 1 : (p * e) >> 0), (o = (e - i * (1 / p)) * p);
                        for (s = 1 - o, r = this._props.length; --r > -1; )
                            (n = this._props[r]), (a = this._beziers[n][i]), (h = (o * o * a.da + 3 * s * (o * a.ca + s * a.ba)) * o + a.a), this._round[n] && (h = (h + (h > 0 ? 0.5 : -0.5)) >> 0), c[n] ? f[n](h) : (f[n] = h);
                        if (this._autoRotate) {
                            var m,
                                d,
                                g,
                                v,
                                y,
                                T,
                                w,
                                x = this._autoRotate;
                            for (r = x.length; --r > -1; )
                                (n = x[r][2]),
                                    (T = x[r][3] || 0),
                                    (w = x[r][4] === !0 ? 1 : t),
                                    (a = this._beziers[x[r][0]]),
                                    (m = this._beziers[x[r][1]]),
                                    a &&
                                        m &&
                                        ((a = a[i]),
                                        (m = m[i]),
                                        (d = a.a + (a.b - a.a) * o),
                                        (v = a.b + (a.c - a.b) * o),
                                        (d += (v - d) * o),
                                        (v += (a.c + (a.d - a.c) * o - v) * o),
                                        (g = m.a + (m.b - m.a) * o),
                                        (y = m.b + (m.c - m.b) * o),
                                        (g += (y - g) * o),
                                        (y += (m.c + (m.d - m.c) * o - y) * o),
                                        (h = Math.atan2(y - g, v - d) * w + T),
                                        c[n] ? f[n](h) : (f[n] = h));
                        }
                    },
                }),
                m = f.prototype;
            (f.bezierThrough = _),
                (f.cubicToQuadratic = o),
                (f._autoCSS = !0),
                (f.quadraticToCubic = function (t, e, i) {
                    return new n(t, (2 * e + t) / 3, (2 * e + i) / 3, i);
                }),
                (f._cssRegister = function () {
                    var t = window._gsDefine.globals.CSSPlugin;
                    if (t) {
                        var e = t._internals,
                            i = e._parseToProxy,
                            s = e._setPluginRatio,
                            r = e.CSSPropTween;
                        e._registerComplexSpecialProp("bezier", {
                            parser: function (t, e, n, a, o, h) {
                                e instanceof Array && (e = { values: e }), (h = new f());
                                var l,
                                    _,
                                    u,
                                    p = e.values,
                                    c = p.length - 1,
                                    m = [],
                                    d = {};
                                if (0 > c) return o;
                                for (l = 0; c >= l; l++) (u = i(t, p[l], a, o, h, c !== l)), (m[l] = u.end);
                                for (_ in e) d[_] = e[_];
                                return (
                                    (d.values = m),
                                    (o = new r(t, "bezier", 0, 0, u.pt, 2)),
                                    (o.data = u),
                                    (o.plugin = h),
                                    (o.setRatio = s),
                                    0 === d.autoRotate && (d.autoRotate = !0),
                                    !d.autoRotate ||
                                        d.autoRotate instanceof Array ||
                                        ((l = d.autoRotate === !0 ? 0 : Number(d.autoRotate)), (d.autoRotate = null != u.end.left ? [["left", "top", "rotation", l, !1]] : null != u.end.x ? [["x", "y", "rotation", l, !1]] : !1)),
                                    d.autoRotate && (a._transform || a._enableTransforms(!1), (u.autoRotate = a._target._gsTransform)),
                                    h._onInitTween(u.proxy, d, a._tween),
                                    o
                                );
                            },
                        });
                    }
                }),
                (m._roundProps = function (t, e) {
                    for (var i = this._overwriteProps, s = i.length; --s > -1; ) (t[i[s]] || t.bezier || t.bezierThrough) && (this._round[i[s]] = e);
                }),
                (m._kill = function (t) {
                    var e,
                        i,
                        s = this._props;
                    for (e in this._beziers) if (e in t) for (delete this._beziers[e], delete this._func[e], i = s.length; --i > -1; ) s[i] === e && s.splice(i, 1);
                    return this._super._kill.call(this, t);
                });
        })(),
        window._gsDefine(
            "plugins.CSSPlugin",
            ["plugins.TweenPlugin", "TweenLite"],
            function (t, e) {
                var i,
                    s,
                    r,
                    n,
                    a = function () {
                        t.call(this, "css"), (this._overwriteProps.length = 0), (this.setRatio = a.prototype.setRatio);
                    },
                    o = {},
                    h = (a.prototype = new t("css"));
                (h.constructor = a),
                    (a.version = "1.11.4"),
                    (a.API = 2),
                    (a.defaultTransformPerspective = 0),
                    (h = "px"),
                    (a.suffixMap = { top: h, right: h, bottom: h, left: h, width: h, height: h, fontSize: h, padding: h, margin: h, perspective: h, lineHeight: "" });
                var l,
                    _,
                    u,
                    p,
                    c,
                    f,
                    m = /(?:\d|\-\d|\.\d|\-\.\d)+/g,
                    d = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,
                    g = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,
                    v = /[^\d\-\.]/g,
                    y = /(?:\d|\-|\+|=|#|\.)*/g,
                    T = /opacity *= *([^)]*)/,
                    w = /opacity:([^;]*)/,
                    x = /alpha\(opacity *=.+?\)/i,
                    b = /^(rgb|hsl)/,
                    P = /([A-Z])/g,
                    S = /-([a-z])/gi,
                    k = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,
                    R = function (t, e) {
                        return e.toUpperCase();
                    },
                    A = /(?:Left|Right|Width)/i,
                    C = /(M11|M12|M21|M22)=[\d\-\.e]+/gi,
                    O = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,
                    D = /,(?=[^\)]*(?:\(|$))/gi,
                    M = Math.PI / 180,
                    I = 180 / Math.PI,
                    E = {},
                    N = document,
                    F = N.createElement("div"),
                    L = N.createElement("img"),
                    X = (a._internals = { _specialProps: o }),
                    z = navigator.userAgent,
                    U = (function () {
                        var t,
                            e = z.indexOf("Android"),
                            i = N.createElement("div");
                        return (
                            (u = -1 !== z.indexOf("Safari") && -1 === z.indexOf("Chrome") && (-1 === e || Number(z.substr(e + 8, 1)) > 3)),
                            (c = u && 6 > Number(z.substr(z.indexOf("Version/") + 8, 1))),
                            (p = -1 !== z.indexOf("Firefox")),
                            /MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(z) && (f = parseFloat(RegExp.$1)),
                            (i.innerHTML = "<a style='top:1px;opacity:.55;'>a</a>"),
                            (t = i.getElementsByTagName("a")[0]),
                            t ? /^0.55/.test(t.style.opacity) : !1
                        );
                    })(),
                    Y = function (t) {
                        return T.test("string" == typeof t ? t : (t.currentStyle ? t.currentStyle.filter : t.style.filter) || "") ? parseFloat(RegExp.$1) / 100 : 1;
                    },
                    j = function (t) {
                        window.console && console.log(t);
                    },
                    B = "",
                    q = "",
                    V = function (t, e) {
                        e = e || F;
                        var i,
                            s,
                            r = e.style;
                        if (void 0 !== r[t]) return t;
                        for (t = t.charAt(0).toUpperCase() + t.substr(1), i = ["O", "Moz", "ms", "Ms", "Webkit"], s = 5; --s > -1 && void 0 === r[i[s] + t]; );
                        return s >= 0 ? ((q = 3 === s ? "ms" : i[s]), (B = "-" + q.toLowerCase() + "-"), q + t) : null;
                    },
                    W = N.defaultView ? N.defaultView.getComputedStyle : function () {},
                    G = (a.getStyle = function (t, e, i, s, r) {
                        var n;
                        return U || "opacity" !== e
                            ? (!s && t.style[e] ? (n = t.style[e]) : (i = i || W(t, null)) ? ((t = i.getPropertyValue(e.replace(P, "-$1").toLowerCase())), (n = t || i.length ? t : i[e])) : t.currentStyle && (n = t.currentStyle[e]),
                              null == r || (n && "none" !== n && "auto" !== n && "auto auto" !== n) ? n : r)
                            : Y(t);
                    }),
                    $ = function (t, e, i, s, r) {
                        if ("px" === s || !s) return i;
                        if ("auto" === s || !i) return 0;
                        var n,
                            a = A.test(e),
                            o = t,
                            h = F.style,
                            l = 0 > i;
                        return (
                            l && (i = -i),
                            "%" === s && -1 !== e.indexOf("border")
                                ? (n = (i / 100) * (a ? t.clientWidth : t.clientHeight))
                                : ((h.cssText = "border:0 solid red;position:" + G(t, "position") + ";line-height:0;"),
                                  "%" !== s && o.appendChild ? (h[a ? "borderLeftWidth" : "borderTopWidth"] = i + s) : ((o = t.parentNode || N.body), (h[a ? "width" : "height"] = i + s)),
                                  o.appendChild(F),
                                  (n = parseFloat(F[a ? "offsetWidth" : "offsetHeight"])),
                                  o.removeChild(F),
                                  0 !== n || r || (n = $(t, e, i, s, !0))),
                            l ? -n : n
                        );
                    },
                    Z = function (t, e, i) {
                        if ("absolute" !== G(t, "position", i)) return 0;
                        var s = "left" === e ? "Left" : "Top",
                            r = G(t, "margin" + s, i);
                        return t["offset" + s] - ($(t, e, parseFloat(r), r.replace(y, "")) || 0);
                    },
                    Q = function (t, e) {
                        var i,
                            s,
                            r = {};
                        if ((e = e || W(t, null)))
                            if ((i = e.length)) for (; --i > -1; ) r[e[i].replace(S, R)] = e.getPropertyValue(e[i]);
                            else for (i in e) r[i] = e[i];
                        else if ((e = t.currentStyle || t.style)) for (i in e) "string" == typeof i && void 0 !== r[i] && (r[i.replace(S, R)] = e[i]);
                        return (
                            U || (r.opacity = Y(t)),
                            (s = be(t, e, !1)),
                            (r.rotation = s.rotation),
                            (r.skewX = s.skewX),
                            (r.scaleX = s.scaleX),
                            (r.scaleY = s.scaleY),
                            (r.x = s.x),
                            (r.y = s.y),
                            xe && ((r.z = s.z), (r.rotationX = s.rotationX), (r.rotationY = s.rotationY), (r.scaleZ = s.scaleZ)),
                            r.filters && delete r.filters,
                            r
                        );
                    },
                    H = function (t, e, i, s, r) {
                        var n,
                            a,
                            o,
                            h = {},
                            l = t.style;
                        for (a in i)
                            "cssText" !== a &&
                                "length" !== a &&
                                isNaN(a) &&
                                (e[a] !== (n = i[a]) || (r && r[a])) &&
                                -1 === a.indexOf("Origin") &&
                                ("number" == typeof n || "string" == typeof n) &&
                                ((h[a] = "auto" !== n || ("left" !== a && "top" !== a) ? (("" !== n && "auto" !== n && "none" !== n) || "string" != typeof e[a] || "" === e[a].replace(v, "") ? n : 0) : Z(t, a)),
                                void 0 !== l[a] && (o = new ue(l, a, l[a], o)));
                        if (s) for (a in s) "className" !== a && (h[a] = s[a]);
                        return { difs: h, firstMPT: o };
                    },
                    K = { width: ["Left", "Right"], height: ["Top", "Bottom"] },
                    J = ["marginLeft", "marginRight", "marginTop", "marginBottom"],
                    te = function (t, e, i) {
                        var s = parseFloat("width" === e ? t.offsetWidth : t.offsetHeight),
                            r = K[e],
                            n = r.length;
                        for (i = i || W(t, null); --n > -1; ) (s -= parseFloat(G(t, "padding" + r[n], i, !0)) || 0), (s -= parseFloat(G(t, "border" + r[n] + "Width", i, !0)) || 0);
                        return s;
                    },
                    ee = function (t, e) {
                        (null == t || "" === t || "auto" === t || "auto auto" === t) && (t = "0 0");
                        var i = t.split(" "),
                            s = -1 !== t.indexOf("left") ? "0%" : -1 !== t.indexOf("right") ? "100%" : i[0],
                            r = -1 !== t.indexOf("top") ? "0%" : -1 !== t.indexOf("bottom") ? "100%" : i[1];
                        return (
                            null == r ? (r = "0") : "center" === r && (r = "50%"),
                            ("center" === s || (isNaN(parseFloat(s)) && -1 === (s + "").indexOf("="))) && (s = "50%"),
                            e && ((e.oxp = -1 !== s.indexOf("%")), (e.oyp = -1 !== r.indexOf("%")), (e.oxr = "=" === s.charAt(1)), (e.oyr = "=" === r.charAt(1)), (e.ox = parseFloat(s.replace(v, ""))), (e.oy = parseFloat(r.replace(v, "")))),
                            s + " " + r + (i.length > 2 ? " " + i[2] : "")
                        );
                    },
                    ie = function (t, e) {
                        return "string" == typeof t && "=" === t.charAt(1) ? parseInt(t.charAt(0) + "1", 10) * parseFloat(t.substr(2)) : parseFloat(t) - parseFloat(e);
                    },
                    se = function (t, e) {
                        return null == t ? e : "string" == typeof t && "=" === t.charAt(1) ? parseInt(t.charAt(0) + "1", 10) * Number(t.substr(2)) + e : parseFloat(t);
                    },
                    re = function (t, e, i, s) {
                        var r,
                            n,
                            a,
                            o,
                            h = 1e-6;
                        return (
                            null == t
                                ? (o = e)
                                : "number" == typeof t
                                ? (o = t)
                                : ((r = 360),
                                  (n = t.split("_")),
                                  (a = Number(n[0].replace(v, "")) * (-1 === t.indexOf("rad") ? 1 : I) - ("=" === t.charAt(1) ? 0 : e)),
                                  n.length &&
                                      (s && (s[i] = e + a),
                                      -1 !== t.indexOf("short") && ((a %= r), a !== a % (r / 2) && (a = 0 > a ? a + r : a - r)),
                                      -1 !== t.indexOf("_cw") && 0 > a ? (a = ((a + 9999999999 * r) % r) - (0 | (a / r)) * r) : -1 !== t.indexOf("ccw") && a > 0 && (a = ((a - 9999999999 * r) % r) - (0 | (a / r)) * r)),
                                  (o = e + a)),
                            h > o && o > -h && (o = 0),
                            o
                        );
                    },
                    ne = {
                        aqua: [0, 255, 255],
                        lime: [0, 255, 0],
                        silver: [192, 192, 192],
                        black: [0, 0, 0],
                        maroon: [128, 0, 0],
                        teal: [0, 128, 128],
                        blue: [0, 0, 255],
                        navy: [0, 0, 128],
                        white: [255, 255, 255],
                        fuchsia: [255, 0, 255],
                        olive: [128, 128, 0],
                        yellow: [255, 255, 0],
                        orange: [255, 165, 0],
                        gray: [128, 128, 128],
                        purple: [128, 0, 128],
                        green: [0, 128, 0],
                        red: [255, 0, 0],
                        pink: [255, 192, 203],
                        cyan: [0, 255, 255],
                        transparent: [255, 255, 255, 0],
                    },
                    ae = function (t, e, i) {
                        return (t = 0 > t ? t + 1 : t > 1 ? t - 1 : t), 0 | (255 * (1 > 6 * t ? e + 6 * (i - e) * t : 0.5 > t ? i : 2 > 3 * t ? e + 6 * (i - e) * (2 / 3 - t) : e) + 0.5);
                    },
                    oe = function (t) {
                        var e, i, s, r, n, a;
                        return t && "" !== t
                            ? "number" == typeof t
                                ? [t >> 16, 255 & (t >> 8), 255 & t]
                                : ("," === t.charAt(t.length - 1) && (t = t.substr(0, t.length - 1)),
                                  ne[t]
                                      ? ne[t]
                                      : "#" === t.charAt(0)
                                      ? (4 === t.length && ((e = t.charAt(1)), (i = t.charAt(2)), (s = t.charAt(3)), (t = "#" + e + e + i + i + s + s)), (t = parseInt(t.substr(1), 16)), [t >> 16, 255 & (t >> 8), 255 & t])
                                      : "hsl" === t.substr(0, 3)
                                      ? ((t = t.match(m)),
                                        (r = (Number(t[0]) % 360) / 360),
                                        (n = Number(t[1]) / 100),
                                        (a = Number(t[2]) / 100),
                                        (i = 0.5 >= a ? a * (n + 1) : a + n - a * n),
                                        (e = 2 * a - i),
                                        t.length > 3 && (t[3] = Number(t[3])),
                                        (t[0] = ae(r + 1 / 3, e, i)),
                                        (t[1] = ae(r, e, i)),
                                        (t[2] = ae(r - 1 / 3, e, i)),
                                        t)
                                      : ((t = t.match(m) || ne.transparent), (t[0] = Number(t[0])), (t[1] = Number(t[1])), (t[2] = Number(t[2])), t.length > 3 && (t[3] = Number(t[3])), t))
                            : ne.black;
                    },
                    he = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#.+?\\b";
                for (h in ne) he += "|" + h + "\\b";
                he = RegExp(he + ")", "gi");
                var le = function (t, e, i, s) {
                        if (null == t)
                            return function (t) {
                                return t;
                            };
                        var r,
                            n = e ? (t.match(he) || [""])[0] : "",
                            a = t.split(n).join("").match(g) || [],
                            o = t.substr(0, t.indexOf(a[0])),
                            h = ")" === t.charAt(t.length - 1) ? ")" : "",
                            l = -1 !== t.indexOf(" ") ? " " : ",",
                            _ = a.length,
                            u = _ > 0 ? a[0].replace(m, "") : "";
                        return _
                            ? (r = e
                                  ? function (t) {
                                        var e, p, c, f;
                                        if ("number" == typeof t) t += u;
                                        else if (s && D.test(t)) {
                                            for (f = t.replace(D, "|").split("|"), c = 0; f.length > c; c++) f[c] = r(f[c]);
                                            return f.join(",");
                                        }
                                        if (((e = (t.match(he) || [n])[0]), (p = t.split(e).join("").match(g) || []), (c = p.length), _ > c--)) for (; _ > ++c; ) p[c] = i ? p[0 | ((c - 1) / 2)] : a[c];
                                        return o + p.join(l) + l + e + h + (-1 !== t.indexOf("inset") ? " inset" : "");
                                    }
                                  : function (t) {
                                        var e, n, p;
                                        if ("number" == typeof t) t += u;
                                        else if (s && D.test(t)) {
                                            for (n = t.replace(D, "|").split("|"), p = 0; n.length > p; p++) n[p] = r(n[p]);
                                            return n.join(",");
                                        }
                                        if (((e = t.match(g) || []), (p = e.length), _ > p--)) for (; _ > ++p; ) e[p] = i ? e[0 | ((p - 1) / 2)] : a[p];
                                        return o + e.join(l) + h;
                                    })
                            : function (t) {
                                  return t;
                              };
                    },
                    _e = function (t) {
                        return (
                            (t = t.split(",")),
                            function (e, i, s, r, n, a, o) {
                                var h,
                                    l = (i + "").split(" ");
                                for (o = {}, h = 0; 4 > h; h++) o[t[h]] = l[h] = l[h] || l[((h - 1) / 2) >> 0];
                                return r.parse(e, o, n, a);
                            }
                        );
                    },
                    ue =
                        ((X._setPluginRatio = function (t) {
                            this.plugin.setRatio(t);
                            for (var e, i, s, r, n = this.data, a = n.proxy, o = n.firstMPT, h = 1e-6; o; ) (e = a[o.v]), o.r ? (e = e > 0 ? 0 | (e + 0.5) : 0 | (e - 0.5)) : h > e && e > -h && (e = 0), (o.t[o.p] = e), (o = o._next);
                            if ((n.autoRotate && (n.autoRotate.rotation = a.rotation), 1 === t))
                                for (o = n.firstMPT; o; ) {
                                    if (((i = o.t), i.type)) {
                                        if (1 === i.type) {
                                            for (r = i.xs0 + i.s + i.xs1, s = 1; i.l > s; s++) r += i["xn" + s] + i["xs" + (s + 1)];
                                            i.e = r;
                                        }
                                    } else i.e = i.s + i.xs0;
                                    o = o._next;
                                }
                        }),
                        function (t, e, i, s, r) {
                            (this.t = t), (this.p = e), (this.v = i), (this.r = r), s && ((s._prev = this), (this._next = s));
                        }),
                    pe =
                        ((X._parseToProxy = function (t, e, i, s, r, n) {
                            var a,
                                o,
                                h,
                                l,
                                _,
                                u = s,
                                p = {},
                                c = {},
                                f = i._transform,
                                m = E;
                            for (i._transform = null, E = e, s = _ = i.parse(t, e, s, r), E = m, n && ((i._transform = f), u && ((u._prev = null), u._prev && (u._prev._next = null))); s && s !== u; ) {
                                if (1 >= s.type && ((o = s.p), (c[o] = s.s + s.c), (p[o] = s.s), n || ((l = new ue(s, "s", o, l, s.r)), (s.c = 0)), 1 === s.type))
                                    for (a = s.l; --a > 0; ) (h = "xn" + a), (o = s.p + "_" + h), (c[o] = s.data[h]), (p[o] = s[h]), n || (l = new ue(s, h, o, l, s.rxp[h]));
                                s = s._next;
                            }
                            return { proxy: p, end: c, firstMPT: l, pt: _ };
                        }),
                        (X.CSSPropTween = function (t, e, s, r, a, o, h, l, _, u, p) {
                            (this.t = t),
                                (this.p = e),
                                (this.s = s),
                                (this.c = r),
                                (this.n = h || e),
                                t instanceof pe || n.push(this.n),
                                (this.r = l),
                                (this.type = o || 0),
                                _ && ((this.pr = _), (i = !0)),
                                (this.b = void 0 === u ? s : u),
                                (this.e = void 0 === p ? s + r : p),
                                a && ((this._next = a), (a._prev = this));
                        })),
                    ce = (a.parseComplex = function (t, e, i, s, r, n, a, o, h, _) {
                        (i = i || n || ""), (a = new pe(t, e, 0, 0, a, _ ? 2 : 1, null, !1, o, i, s)), (s += "");
                        var u,
                            p,
                            c,
                            f,
                            g,
                            v,
                            y,
                            T,
                            w,
                            x,
                            P,
                            S,
                            k = i.split(", ").join(",").split(" "),
                            R = s.split(", ").join(",").split(" "),
                            A = k.length,
                            C = l !== !1;
                        for (
                            (-1 !== s.indexOf(",") || -1 !== i.indexOf(",")) && ((k = k.join(" ").replace(D, ", ").split(" ")), (R = R.join(" ").replace(D, ", ").split(" ")), (A = k.length)),
                                A !== R.length && ((k = (n || "").split(" ")), (A = k.length)),
                                a.plugin = h,
                                a.setRatio = _,
                                u = 0;
                            A > u;
                            u++
                        )
                            if (((f = k[u]), (g = R[u]), (T = parseFloat(f)), T || 0 === T)) a.appendXtra("", T, ie(g, T), g.replace(d, ""), C && -1 !== g.indexOf("px"), !0);
                            else if (r && ("#" === f.charAt(0) || ne[f] || b.test(f)))
                                (S = "," === g.charAt(g.length - 1) ? ")," : ")"),
                                    (f = oe(f)),
                                    (g = oe(g)),
                                    (w = f.length + g.length > 6),
                                    w && !U && 0 === g[3]
                                        ? ((a["xs" + a.l] += a.l ? " transparent" : "transparent"), (a.e = a.e.split(R[u]).join("transparent")))
                                        : (U || (w = !1),
                                          a
                                              .appendXtra(w ? "rgba(" : "rgb(", f[0], g[0] - f[0], ",", !0, !0)
                                              .appendXtra("", f[1], g[1] - f[1], ",", !0)
                                              .appendXtra("", f[2], g[2] - f[2], w ? "," : S, !0),
                                          w && ((f = 4 > f.length ? 1 : f[3]), a.appendXtra("", f, (4 > g.length ? 1 : g[3]) - f, S, !1)));
                            else if ((v = f.match(m))) {
                                if (((y = g.match(d)), !y || y.length !== v.length)) return a;
                                for (c = 0, p = 0; v.length > p; p++) (P = v[p]), (x = f.indexOf(P, c)), a.appendXtra(f.substr(c, x - c), Number(P), ie(y[p], P), "", C && "px" === f.substr(x + P.length, 2), 0 === p), (c = x + P.length);
                                a["xs" + a.l] += f.substr(c);
                            } else a["xs" + a.l] += a.l ? " " + f : f;
                        if (-1 !== s.indexOf("=") && a.data) {
                            for (S = a.xs0 + a.data.s, u = 1; a.l > u; u++) S += a["xs" + u] + a.data["xn" + u];
                            a.e = S + a["xs" + u];
                        }
                        return a.l || ((a.type = -1), (a.xs0 = a.e)), a.xfirst || a;
                    }),
                    fe = 9;
                for (h = pe.prototype, h.l = h.pr = 0; --fe > 0; ) (h["xn" + fe] = 0), (h["xs" + fe] = "");
                (h.xs0 = ""),
                    (h._next = h._prev = h.xfirst = h.data = h.plugin = h.setRatio = h.rxp = null),
                    (h.appendXtra = function (t, e, i, s, r, n) {
                        var a = this,
                            o = a.l;
                        return (
                            (a["xs" + o] += n && o ? " " + t : t || ""),
                            i || 0 === o || a.plugin
                                ? (a.l++,
                                  (a.type = a.setRatio ? 2 : 1),
                                  (a["xs" + a.l] = s || ""),
                                  o > 0
                                      ? ((a.data["xn" + o] = e + i), (a.rxp["xn" + o] = r), (a["xn" + o] = e), a.plugin || ((a.xfirst = new pe(a, "xn" + o, e, i, a.xfirst || a, 0, a.n, r, a.pr)), (a.xfirst.xs0 = 0)), a)
                                      : ((a.data = { s: e + i }), (a.rxp = {}), (a.s = e), (a.c = i), (a.r = r), a))
                                : ((a["xs" + o] += e + (s || "")), a)
                        );
                    });
                var me = function (t, e) {
                        (e = e || {}),
                            (this.p = e.prefix ? V(t) || t : t),
                            (o[t] = o[this.p] = this),
                            (this.format = e.formatter || le(e.defaultValue, e.color, e.collapsible, e.multi)),
                            e.parser && (this.parse = e.parser),
                            (this.clrs = e.color),
                            (this.multi = e.multi),
                            (this.keyword = e.keyword),
                            (this.dflt = e.defaultValue),
                            (this.pr = e.priority || 0);
                    },
                    de = (X._registerComplexSpecialProp = function (t, e, i) {
                        "object" != typeof e && (e = { parser: i });
                        var s,
                            r,
                            n = t.split(","),
                            a = e.defaultValue;
                        for (i = i || [a], s = 0; n.length > s; s++) (e.prefix = 0 === s && e.prefix), (e.defaultValue = i[s] || a), (r = new me(n[s], e));
                    }),
                    ge = function (t) {
                        if (!o[t]) {
                            var e = t.charAt(0).toUpperCase() + t.substr(1) + "Plugin";
                            de(t, {
                                parser: function (t, i, s, r, n, a, h) {
                                    var l = (window.GreenSockGlobals || window).com.greensock.plugins[e];
                                    return l ? (l._cssRegister(), o[s].parse(t, i, s, r, n, a, h)) : (j("Error: " + e + " js file not loaded."), n);
                                },
                            });
                        }
                    };
                (h = me.prototype),
                    (h.parseComplex = function (t, e, i, s, r, n) {
                        var a,
                            o,
                            h,
                            l,
                            _,
                            u,
                            p = this.keyword;
                        if ((this.multi && (D.test(i) || D.test(e) ? ((o = e.replace(D, "|").split("|")), (h = i.replace(D, "|").split("|"))) : p && ((o = [e]), (h = [i]))), h)) {
                            for (l = h.length > o.length ? h.length : o.length, a = 0; l > a; a++)
                                (e = o[a] = o[a] || this.dflt), (i = h[a] = h[a] || this.dflt), p && ((_ = e.indexOf(p)), (u = i.indexOf(p)), _ !== u && ((i = -1 === u ? h : o), (i[a] += " " + p)));
                            (e = o.join(", ")), (i = h.join(", "));
                        }
                        return ce(t, this.p, e, i, this.clrs, this.dflt, s, this.pr, r, n);
                    }),
                    (h.parse = function (t, e, i, s, n, a) {
                        return this.parseComplex(t.style, this.format(G(t, this.p, r, !1, this.dflt)), this.format(e), n, a);
                    }),
                    (a.registerSpecialProp = function (t, e, i) {
                        de(t, {
                            parser: function (t, s, r, n, a, o) {
                                var h = new pe(t, r, 0, 0, a, 2, r, !1, i);
                                return (h.plugin = o), (h.setRatio = e(t, s, n._tween, r)), h;
                            },
                            priority: i,
                        });
                    });
                var ve = "scaleX,scaleY,scaleZ,x,y,z,skewX,rotation,rotationX,rotationY,perspective".split(","),
                    ye = V("transform"),
                    Te = B + "transform",
                    we = V("transformOrigin"),
                    xe = null !== V("perspective"),
                    be = function (t, e, i, s) {
                        if (t._gsTransform && i && !s) return t._gsTransform;
                        var r,
                            n,
                            o,
                            h,
                            l,
                            _,
                            u,
                            p,
                            c,
                            f,
                            m,
                            d,
                            g,
                            v = i ? t._gsTransform || { skewY: 0 } : { skewY: 0 },
                            y = 0 > v.scaleX,
                            T = 2e-5,
                            w = 1e5,
                            x = 179.99,
                            b = x * M,
                            P = xe ? parseFloat(G(t, we, e, !1, "0 0 0").split(" ")[2]) || v.zOrigin || 0 : 0;
                        for (
                            ye
                                ? (r = G(t, Te, e, !0))
                                : t.currentStyle && ((r = t.currentStyle.filter.match(C)), (r = r && 4 === r.length ? [r[0].substr(4), Number(r[2].substr(4)), Number(r[1].substr(4)), r[3].substr(4), v.x || 0, v.y || 0].join(",") : "")),
                                n = (r || "").match(/(?:\-|\b)[\d\-\.e]+\b/gi) || [],
                                o = n.length;
                            --o > -1;

                        )
                            (h = Number(n[o])), (n[o] = (l = h - (h |= 0)) ? (0 | (l * w + (0 > l ? -0.5 : 0.5))) / w + h : h);
                        if (16 === n.length) {
                            var S = n[8],
                                k = n[9],
                                R = n[10],
                                A = n[12],
                                O = n[13],
                                D = n[14];
                            if ((v.zOrigin && ((D = -v.zOrigin), (A = S * D - n[12]), (O = k * D - n[13]), (D = R * D + v.zOrigin - n[14])), !i || s || null == v.rotationX)) {
                                var E,
                                    N,
                                    F,
                                    L,
                                    X,
                                    z,
                                    U,
                                    Y = n[0],
                                    j = n[1],
                                    B = n[2],
                                    q = n[3],
                                    V = n[4],
                                    W = n[5],
                                    $ = n[6],
                                    Z = n[7],
                                    Q = n[11],
                                    H = Math.atan2($, R),
                                    K = -b > H || H > b;
                                (v.rotationX = H * I),
                                    H &&
                                        ((L = Math.cos(-H)),
                                        (X = Math.sin(-H)),
                                        (E = V * L + S * X),
                                        (N = W * L + k * X),
                                        (F = $ * L + R * X),
                                        (S = V * -X + S * L),
                                        (k = W * -X + k * L),
                                        (R = $ * -X + R * L),
                                        (Q = Z * -X + Q * L),
                                        (V = E),
                                        (W = N),
                                        ($ = F)),
                                    (H = Math.atan2(S, Y)),
                                    (v.rotationY = H * I),
                                    H &&
                                        ((z = -b > H || H > b),
                                        (L = Math.cos(-H)),
                                        (X = Math.sin(-H)),
                                        (E = Y * L - S * X),
                                        (N = j * L - k * X),
                                        (F = B * L - R * X),
                                        (k = j * X + k * L),
                                        (R = B * X + R * L),
                                        (Q = q * X + Q * L),
                                        (Y = E),
                                        (j = N),
                                        (B = F)),
                                    (H = Math.atan2(j, W)),
                                    (v.rotation = H * I),
                                    H && ((U = -b > H || H > b), (L = Math.cos(-H)), (X = Math.sin(-H)), (Y = Y * L + V * X), (N = j * L + W * X), (W = j * -X + W * L), ($ = B * -X + $ * L), (j = N)),
                                    U && K ? (v.rotation = v.rotationX = 0) : U && z ? (v.rotation = v.rotationY = 0) : z && K && (v.rotationY = v.rotationX = 0),
                                    (v.scaleX = (0 | (Math.sqrt(Y * Y + j * j) * w + 0.5)) / w),
                                    (v.scaleY = (0 | (Math.sqrt(W * W + k * k) * w + 0.5)) / w),
                                    (v.scaleZ = (0 | (Math.sqrt($ * $ + R * R) * w + 0.5)) / w),
                                    (v.skewX = 0),
                                    (v.perspective = Q ? 1 / (0 > Q ? -Q : Q) : 0),
                                    (v.x = A),
                                    (v.y = O),
                                    (v.z = D);
                            }
                        } else if (!((xe && !s && n.length && v.x === n[4] && v.y === n[5] && (v.rotationX || v.rotationY)) || (void 0 !== v.x && "none" === G(t, "display", e)))) {
                            var J = n.length >= 6,
                                te = J ? n[0] : 1,
                                ee = n[1] || 0,
                                ie = n[2] || 0,
                                se = J ? n[3] : 1;
                            (v.x = n[4] || 0),
                                (v.y = n[5] || 0),
                                (_ = Math.sqrt(te * te + ee * ee)),
                                (u = Math.sqrt(se * se + ie * ie)),
                                (p = te || ee ? Math.atan2(ee, te) * I : v.rotation || 0),
                                (c = ie || se ? Math.atan2(ie, se) * I + p : v.skewX || 0),
                                (f = _ - Math.abs(v.scaleX || 0)),
                                (m = u - Math.abs(v.scaleY || 0)),
                                Math.abs(c) > 90 && 270 > Math.abs(c) && (y ? ((_ *= -1), (c += 0 >= p ? 180 : -180), (p += 0 >= p ? 180 : -180)) : ((u *= -1), (c += 0 >= c ? 180 : -180))),
                                (d = (p - v.rotation) % 180),
                                (g = (c - v.skewX) % 180),
                                (void 0 === v.skewX || f > T || -T > f || m > T || -T > m || (d > -x && x > d && false | (d * w)) || (g > -x && x > g && false | (g * w))) && ((v.scaleX = _), (v.scaleY = u), (v.rotation = p), (v.skewX = c)),
                                xe && ((v.rotationX = v.rotationY = v.z = 0), (v.perspective = parseFloat(a.defaultTransformPerspective) || 0), (v.scaleZ = 1));
                        }
                        v.zOrigin = P;
                        for (o in v) T > v[o] && v[o] > -T && (v[o] = 0);
                        return i && (t._gsTransform = v), v;
                    },
                    Pe = function (t) {
                        var e,
                            i,
                            s = this.data,
                            r = -s.rotation * M,
                            n = r + s.skewX * M,
                            a = 1e5,
                            o = (0 | (Math.cos(r) * s.scaleX * a)) / a,
                            h = (0 | (Math.sin(r) * s.scaleX * a)) / a,
                            l = (0 | (Math.sin(n) * -s.scaleY * a)) / a,
                            _ = (0 | (Math.cos(n) * s.scaleY * a)) / a,
                            u = this.t.style,
                            p = this.t.currentStyle;
                        if (p) {
                            (i = h), (h = -l), (l = -i), (e = p.filter), (u.filter = "");
                            var c,
                                m,
                                d = this.t.offsetWidth,
                                g = this.t.offsetHeight,
                                v = "absolute" !== p.position,
                                w = "progid:DXImageTransform.Microsoft.Matrix(M11=" + o + ", M12=" + h + ", M21=" + l + ", M22=" + _,
                                x = s.x,
                                b = s.y;
                            if (
                                (null != s.ox && ((c = (s.oxp ? 0.01 * d * s.ox : s.ox) - d / 2), (m = (s.oyp ? 0.01 * g * s.oy : s.oy) - g / 2), (x += c - (c * o + m * h)), (b += m - (c * l + m * _))),
                                v ? ((c = d / 2), (m = g / 2), (w += ", Dx=" + (c - (c * o + m * h) + x) + ", Dy=" + (m - (c * l + m * _) + b) + ")")) : (w += ", sizingMethod='auto expand')"),
                                (u.filter = -1 !== e.indexOf("DXImageTransform.Microsoft.Matrix(") ? e.replace(O, w) : w + " " + e),
                                (0 === t || 1 === t) &&
                                    1 === o &&
                                    0 === h &&
                                    0 === l &&
                                    1 === _ &&
                                    ((v && -1 === w.indexOf("Dx=0, Dy=0")) || (T.test(e) && 100 !== parseFloat(RegExp.$1)) || (-1 === e.indexOf("gradient(" && e.indexOf("Alpha")) && u.removeAttribute("filter"))),
                                !v)
                            ) {
                                var P,
                                    S,
                                    k,
                                    R = 8 > f ? 1 : -1;
                                for (
                                    c = s.ieOffsetX || 0,
                                        m = s.ieOffsetY || 0,
                                        s.ieOffsetX = Math.round((d - ((0 > o ? -o : o) * d + (0 > h ? -h : h) * g)) / 2 + x),
                                        s.ieOffsetY = Math.round((g - ((0 > _ ? -_ : _) * g + (0 > l ? -l : l) * d)) / 2 + b),
                                        fe = 0;
                                    4 > fe;
                                    fe++
                                )
                                    (S = J[fe]),
                                        (P = p[S]),
                                        (i = -1 !== P.indexOf("px") ? parseFloat(P) : $(this.t, S, parseFloat(P), P.replace(y, "")) || 0),
                                        (k = i !== s[S] ? (2 > fe ? -s.ieOffsetX : -s.ieOffsetY) : 2 > fe ? c - s.ieOffsetX : m - s.ieOffsetY),
                                        (u[S] = (s[S] = Math.round(i - k * (0 === fe || 2 === fe ? 1 : R))) + "px");
                            }
                        }
                    },
                    Se = function () {
                        var t,
                            e,
                            i,
                            s,
                            r,
                            n,
                            a,
                            o,
                            h,
                            l,
                            _,
                            u,
                            c,
                            f,
                            m,
                            d,
                            g,
                            v,
                            y,
                            T,
                            w,
                            x,
                            b,
                            P = this.data,
                            S = this.t.style,
                            k = P.rotation * M,
                            R = P.scaleX,
                            A = P.scaleY,
                            C = P.scaleZ,
                            O = P.perspective;
                        if (p) {
                            var D = 1e-4;
                            D > R && R > -D && (R = C = 2e-5), D > A && A > -D && (A = C = 2e-5), !O || P.z || P.rotationX || P.rotationY || (O = 0);
                        }
                        if (k || P.skewX) (v = Math.cos(k)), (y = Math.sin(k)), (t = v), (r = y), P.skewX && ((k -= P.skewX * M), (v = Math.cos(k)), (y = Math.sin(k))), (e = -y), (n = v);
                        else {
                            if (!(P.rotationY || P.rotationX || 1 !== C || O)) return (S[ye] = "translate3d(" + P.x + "px," + P.y + "px," + P.z + "px)" + (1 !== R || 1 !== A ? " scale(" + R + "," + A + ")" : "")), void 0;
                            (t = n = 1), (e = r = 0);
                        }
                        (_ = 1),
                            (i = s = a = o = h = l = u = c = f = 0),
                            (m = O ? -1 / O : 0),
                            (d = P.zOrigin),
                            (g = 1e5),
                            (k = P.rotationY * M),
                            k && ((v = Math.cos(k)), (y = Math.sin(k)), (h = _ * -y), (c = m * -y), (i = t * y), (a = r * y), (_ *= v), (m *= v), (t *= v), (r *= v)),
                            (k = P.rotationX * M),
                            k &&
                                ((v = Math.cos(k)),
                                (y = Math.sin(k)),
                                (T = e * v + i * y),
                                (w = n * v + a * y),
                                (x = l * v + _ * y),
                                (b = f * v + m * y),
                                (i = e * -y + i * v),
                                (a = n * -y + a * v),
                                (_ = l * -y + _ * v),
                                (m = f * -y + m * v),
                                (e = T),
                                (n = w),
                                (l = x),
                                (f = b)),
                            1 !== C && ((i *= C), (a *= C), (_ *= C), (m *= C)),
                            1 !== A && ((e *= A), (n *= A), (l *= A), (f *= A)),
                            1 !== R && ((t *= R), (r *= R), (h *= R), (c *= R)),
                            d && ((u -= d), (s = i * u), (o = a * u), (u = _ * u + d)),
                            (s = (T = (s += P.x) - (s |= 0)) ? (0 | (T * g + (0 > T ? -0.5 : 0.5))) / g + s : s),
                            (o = (T = (o += P.y) - (o |= 0)) ? (0 | (T * g + (0 > T ? -0.5 : 0.5))) / g + o : o),
                            (u = (T = (u += P.z) - (u |= 0)) ? (0 | (T * g + (0 > T ? -0.5 : 0.5))) / g + u : u),
                            (S[ye] =
                                "matrix3d(" +
                                [
                                    (0 | (t * g)) / g,
                                    (0 | (r * g)) / g,
                                    (0 | (h * g)) / g,
                                    (0 | (c * g)) / g,
                                    (0 | (e * g)) / g,
                                    (0 | (n * g)) / g,
                                    (0 | (l * g)) / g,
                                    (0 | (f * g)) / g,
                                    (0 | (i * g)) / g,
                                    (0 | (a * g)) / g,
                                    (0 | (_ * g)) / g,
                                    (0 | (m * g)) / g,
                                    s,
                                    o,
                                    u,
                                    O ? 1 + -u / O : 1,
                                ].join(",") +
                                ")");
                    },
                    ke = function (t) {
                        var e,
                            i,
                            s,
                            r,
                            n,
                            a = this.data,
                            o = this.t,
                            h = o.style;
                        return a.rotationX || a.rotationY || a.z || a.force3D
                            ? ((this.setRatio = Se), Se.call(this, t), void 0)
                            : (a.rotation || a.skewX
                                  ? ((e = a.rotation * M),
                                    (i = e - a.skewX * M),
                                    (s = 1e5),
                                    (r = a.scaleX * s),
                                    (n = a.scaleY * s),
                                    (h[ye] = "matrix(" + (0 | (Math.cos(e) * r)) / s + "," + (0 | (Math.sin(e) * r)) / s + "," + (0 | (Math.sin(i) * -n)) / s + "," + (0 | (Math.cos(i) * n)) / s + "," + a.x + "," + a.y + ")"))
                                  : (h[ye] = "matrix(" + a.scaleX + ",0,0," + a.scaleY + "," + a.x + "," + a.y + ")"),
                              void 0);
                    };
                de(
                    "transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,transformPerspective,directionalRotation,parseTransform,force3D",
                    {
                        parser: function (t, e, i, s, n, a, o) {
                            if (s._transform) return n;
                            var h,
                                l,
                                _,
                                u,
                                p,
                                c,
                                f,
                                m = (s._transform = be(t, r, !0, o.parseTransform)),
                                d = t.style,
                                g = 1e-6,
                                v = ve.length,
                                y = o,
                                T = {};
                            if ("string" == typeof y.transform && ye) (_ = d.cssText), (d[ye] = y.transform), (d.display = "block"), (h = be(t, null, !1)), (d.cssText = _);
                            else if ("object" == typeof y) {
                                if (
                                    ((h = {
                                        scaleX: se(null != y.scaleX ? y.scaleX : y.scale, m.scaleX),
                                        scaleY: se(null != y.scaleY ? y.scaleY : y.scale, m.scaleY),
                                        scaleZ: se(y.scaleZ, m.scaleZ),
                                        x: se(y.x, m.x),
                                        y: se(y.y, m.y),
                                        z: se(y.z, m.z),
                                        perspective: se(y.transformPerspective, m.perspective),
                                    }),
                                    (f = y.directionalRotation),
                                    null != f)
                                )
                                    if ("object" == typeof f) for (_ in f) y[_] = f[_];
                                    else y.rotation = f;
                                (h.rotation = re("rotation" in y ? y.rotation : "shortRotation" in y ? y.shortRotation + "_short" : "rotationZ" in y ? y.rotationZ : m.rotation, m.rotation, "rotation", T)),
                                    xe &&
                                        ((h.rotationX = re("rotationX" in y ? y.rotationX : "shortRotationX" in y ? y.shortRotationX + "_short" : m.rotationX || 0, m.rotationX, "rotationX", T)),
                                        (h.rotationY = re("rotationY" in y ? y.rotationY : "shortRotationY" in y ? y.shortRotationY + "_short" : m.rotationY || 0, m.rotationY, "rotationY", T))),
                                    (h.skewX = null == y.skewX ? m.skewX : re(y.skewX, m.skewX)),
                                    (h.skewY = null == y.skewY ? m.skewY : re(y.skewY, m.skewY)),
                                    (l = h.skewY - m.skewY) && ((h.skewX += l), (h.rotation += l));
                            }
                            for (
                                xe && null != y.force3D && ((m.force3D = y.force3D), (c = !0)),
                                    p = m.force3D || m.z || m.rotationX || m.rotationY || h.z || h.rotationX || h.rotationY || h.perspective,
                                    p || null == y.scale || (h.scaleZ = 1);
                                --v > -1;

                            )
                                (i = ve[v]), (u = h[i] - m[i]), (u > g || -g > u || null != E[i]) && ((c = !0), (n = new pe(m, i, m[i], u, n)), i in T && (n.e = T[i]), (n.xs0 = 0), (n.plugin = a), s._overwriteProps.push(n.n));
                            return (
                                (u = y.transformOrigin),
                                (u || (xe && p && m.zOrigin)) &&
                                    (ye
                                        ? ((c = !0),
                                          (i = we),
                                          (u = (u || G(t, i, r, !1, "50% 50%")) + ""),
                                          (n = new pe(d, i, 0, 0, n, -1, "transformOrigin")),
                                          (n.b = d[i]),
                                          (n.plugin = a),
                                          xe
                                              ? ((_ = m.zOrigin),
                                                (u = u.split(" ")),
                                                (m.zOrigin = (u.length > 2 && (0 === _ || "0px" !== u[2]) ? parseFloat(u[2]) : _) || 0),
                                                (n.xs0 = n.e = d[i] = u[0] + " " + (u[1] || "50%") + " 0px"),
                                                (n = new pe(m, "zOrigin", 0, 0, n, -1, n.n)),
                                                (n.b = _),
                                                (n.xs0 = n.e = m.zOrigin))
                                              : (n.xs0 = n.e = d[i] = u))
                                        : ee(u + "", m)),
                                c && (s._transformType = p || 3 === this._transformType ? 3 : 2),
                                n
                            );
                        },
                        prefix: !0,
                    }
                ),
                    de("boxShadow", { defaultValue: "0px 0px 0px 0px #999", prefix: !0, color: !0, multi: !0, keyword: "inset" }),
                    de("borderRadius", {
                        defaultValue: "0px",
                        parser: function (t, e, i, n, a) {
                            e = this.format(e);
                            var o,
                                h,
                                l,
                                _,
                                u,
                                p,
                                c,
                                f,
                                m,
                                d,
                                g,
                                v,
                                y,
                                T,
                                w,
                                x,
                                b = ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"],
                                P = t.style;
                            for (m = parseFloat(t.offsetWidth), d = parseFloat(t.offsetHeight), o = e.split(" "), h = 0; b.length > h; h++)
                                this.p.indexOf("border") && (b[h] = V(b[h])),
                                    (u = _ = G(t, b[h], r, !1, "0px")),
                                    -1 !== u.indexOf(" ") && ((_ = u.split(" ")), (u = _[0]), (_ = _[1])),
                                    (p = l = o[h]),
                                    (c = parseFloat(u)),
                                    (v = u.substr((c + "").length)),
                                    (y = "=" === p.charAt(1)),
                                    y ? ((f = parseInt(p.charAt(0) + "1", 10)), (p = p.substr(2)), (f *= parseFloat(p)), (g = p.substr((f + "").length - (0 > f ? 1 : 0)) || "")) : ((f = parseFloat(p)), (g = p.substr((f + "").length))),
                                    "" === g && (g = s[i] || v),
                                    g !== v &&
                                        ((T = $(t, "borderLeft", c, v)),
                                        (w = $(t, "borderTop", c, v)),
                                        "%" === g ? ((u = 100 * (T / m) + "%"), (_ = 100 * (w / d) + "%")) : "em" === g ? ((x = $(t, "borderLeft", 1, "em")), (u = T / x + "em"), (_ = w / x + "em")) : ((u = T + "px"), (_ = w + "px")),
                                        y && ((p = parseFloat(u) + f + g), (l = parseFloat(_) + f + g))),
                                    (a = ce(P, b[h], u + " " + _, p + " " + l, !1, "0px", a));
                            return a;
                        },
                        prefix: !0,
                        formatter: le("0px 0px 0px 0px", !1, !0),
                    }),
                    de("backgroundPosition", {
                        defaultValue: "0 0",
                        parser: function (t, e, i, s, n, a) {
                            var o,
                                h,
                                l,
                                _,
                                u,
                                p,
                                c = "background-position",
                                m = r || W(t, null),
                                d = this.format((m ? (f ? m.getPropertyValue(c + "-x") + " " + m.getPropertyValue(c + "-y") : m.getPropertyValue(c)) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"),
                                g = this.format(e);
                            if ((-1 !== d.indexOf("%")) != (-1 !== g.indexOf("%")) && ((p = G(t, "backgroundImage").replace(k, "")), p && "none" !== p)) {
                                for (o = d.split(" "), h = g.split(" "), L.setAttribute("src", p), l = 2; --l > -1; )
                                    (d = o[l]),
                                        (_ = -1 !== d.indexOf("%")),
                                        _ !== (-1 !== h[l].indexOf("%")) && ((u = 0 === l ? t.offsetWidth - L.width : t.offsetHeight - L.height), (o[l] = _ ? (parseFloat(d) / 100) * u + "px" : 100 * (parseFloat(d) / u) + "%"));
                                d = o.join(" ");
                            }
                            return this.parseComplex(t.style, d, g, n, a);
                        },
                        formatter: ee,
                    }),
                    de("backgroundSize", { defaultValue: "0 0", formatter: ee }),
                    de("perspective", { defaultValue: "0px", prefix: !0 }),
                    de("perspectiveOrigin", { defaultValue: "50% 50%", prefix: !0 }),
                    de("transformStyle", { prefix: !0 }),
                    de("backfaceVisibility", { prefix: !0 }),
                    de("userSelect", { prefix: !0 }),
                    de("margin", { parser: _e("marginTop,marginRight,marginBottom,marginLeft") }),
                    de("padding", { parser: _e("paddingTop,paddingRight,paddingBottom,paddingLeft") }),
                    de("clip", {
                        defaultValue: "rect(0px,0px,0px,0px)",
                        parser: function (t, e, i, s, n, a) {
                            var o, h, l;
                            return (
                                9 > f
                                    ? ((h = t.currentStyle), (l = 8 > f ? " " : ","), (o = "rect(" + h.clipTop + l + h.clipRight + l + h.clipBottom + l + h.clipLeft + ")"), (e = this.format(e).split(",").join(l)))
                                    : ((o = this.format(G(t, this.p, r, !1, this.dflt))), (e = this.format(e))),
                                this.parseComplex(t.style, o, e, n, a)
                            );
                        },
                    }),
                    de("textShadow", { defaultValue: "0px 0px 0px #999", color: !0, multi: !0 }),
                    de("autoRound,strictUnits", {
                        parser: function (t, e, i, s, r) {
                            return r;
                        },
                    }),
                    de("border", {
                        defaultValue: "0px solid #000",
                        parser: function (t, e, i, s, n, a) {
                            return this.parseComplex(t.style, this.format(G(t, "borderTopWidth", r, !1, "0px") + " " + G(t, "borderTopStyle", r, !1, "solid") + " " + G(t, "borderTopColor", r, !1, "#000")), this.format(e), n, a);
                        },
                        color: !0,
                        formatter: function (t) {
                            var e = t.split(" ");
                            return e[0] + " " + (e[1] || "solid") + " " + (t.match(he) || ["#000"])[0];
                        },
                    }),
                    de("borderWidth", { parser: _e("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth") }),
                    de("float,cssFloat,styleFloat", {
                        parser: function (t, e, i, s, r) {
                            var n = t.style,
                                a = "cssFloat" in n ? "cssFloat" : "styleFloat";
                            return new pe(n, a, 0, 0, r, -1, i, !1, 0, n[a], e);
                        },
                    });
                var Re = function (t) {
                    var e,
                        i = this.t,
                        s = i.filter || G(this.data, "filter"),
                        r = 0 | (this.s + this.c * t);
                    100 === r && (-1 === s.indexOf("atrix(") && -1 === s.indexOf("radient(") && -1 === s.indexOf("oader(") ? (i.removeAttribute("filter"), (e = !G(this.data, "filter"))) : ((i.filter = s.replace(x, "")), (e = !0))),
                        e || (this.xn1 && (i.filter = s = s || "alpha(opacity=" + r + ")"), -1 === s.indexOf("opacity") ? (0 === r && this.xn1) || (i.filter = s + " alpha(opacity=" + r + ")") : (i.filter = s.replace(T, "opacity=" + r)));
                };
                de("opacity,alpha,autoAlpha", {
                    defaultValue: "1",
                    parser: function (t, e, i, s, n, a) {
                        var o = parseFloat(G(t, "opacity", r, !1, "1")),
                            h = t.style,
                            l = "autoAlpha" === i;
                        return (
                            "string" == typeof e && "=" === e.charAt(1) && (e = ("-" === e.charAt(0) ? -1 : 1) * parseFloat(e.substr(2)) + o),
                            l && 1 === o && "hidden" === G(t, "visibility", r) && 0 !== e && (o = 0),
                            U
                                ? (n = new pe(h, "opacity", o, e - o, n))
                                : ((n = new pe(h, "opacity", 100 * o, 100 * (e - o), n)),
                                  (n.xn1 = l ? 1 : 0),
                                  (h.zoom = 1),
                                  (n.type = 2),
                                  (n.b = "alpha(opacity=" + n.s + ")"),
                                  (n.e = "alpha(opacity=" + (n.s + n.c) + ")"),
                                  (n.data = t),
                                  (n.plugin = a),
                                  (n.setRatio = Re)),
                            l && ((n = new pe(h, "visibility", 0, 0, n, -1, null, !1, 0, 0 !== o ? "inherit" : "hidden", 0 === e ? "hidden" : "inherit")), (n.xs0 = "inherit"), s._overwriteProps.push(n.n), s._overwriteProps.push(i)),
                            n
                        );
                    },
                });
                var Ae = function (t, e) {
                        e && (t.removeProperty ? t.removeProperty(e.replace(P, "-$1").toLowerCase()) : t.removeAttribute(e));
                    },
                    Ce = function (t) {
                        if (((this.t._gsClassPT = this), 1 === t || 0 === t)) {
                            this.t.className = 0 === t ? this.b : this.e;
                            for (var e = this.data, i = this.t.style; e; ) e.v ? (i[e.p] = e.v) : Ae(i, e.p), (e = e._next);
                            1 === t && this.t._gsClassPT === this && (this.t._gsClassPT = null);
                        } else this.t.className !== this.e && (this.t.className = this.e);
                    };
                de("className", {
                    parser: function (t, e, s, n, a, o, h) {
                        var l,
                            _,
                            u,
                            p,
                            c,
                            f = t.className,
                            m = t.style.cssText;
                        if (((a = n._classNamePT = new pe(t, s, 0, 0, a, 2)), (a.setRatio = Ce), (a.pr = -11), (i = !0), (a.b = f), (_ = Q(t, r)), (u = t._gsClassPT))) {
                            for (p = {}, c = u.data; c; ) (p[c.p] = 1), (c = c._next);
                            u.setRatio(1);
                        }
                        return (
                            (t._gsClassPT = a),
                            (a.e = "=" !== e.charAt(1) ? e : f.replace(RegExp("\\s*\\b" + e.substr(2) + "\\b"), "") + ("+" === e.charAt(0) ? " " + e.substr(2) : "")),
                            n._tween._duration && ((t.className = a.e), (l = H(t, _, Q(t), h, p)), (t.className = f), (a.data = l.firstMPT), (t.style.cssText = m), (a = a.xfirst = n.parse(t, l.difs, a, o))),
                            a
                        );
                    },
                });
                var Oe = function (t) {
                    if ((1 === t || 0 === t) && this.data._totalTime === this.data._totalDuration && "isFromStart" !== this.data.data) {
                        var e,
                            i,
                            s,
                            r,
                            n = this.t.style,
                            a = o.transform.parse;
                        if ("all" === this.e) (n.cssText = ""), (r = !0);
                        else for (e = this.e.split(","), s = e.length; --s > -1; ) (i = e[s]), o[i] && (o[i].parse === a ? (r = !0) : (i = "transformOrigin" === i ? we : o[i].p)), Ae(n, i);
                        r && (Ae(n, ye), this.t._gsTransform && delete this.t._gsTransform);
                    }
                };
                for (
                    de("clearProps", {
                        parser: function (t, e, s, r, n) {
                            return (n = new pe(t, s, 0, 0, n, 2)), (n.setRatio = Oe), (n.e = e), (n.pr = -10), (n.data = r._tween), (i = !0), n;
                        },
                    }),
                        h = "bezier,throwProps,physicsProps,physics2D".split(","),
                        fe = h.length;
                    fe--;

                )
                    ge(h[fe]);
                (h = a.prototype),
                    (h._firstPT = null),
                    (h._onInitTween = function (t, e, o) {
                        if (!t.nodeType) return !1;
                        (this._target = t), (this._tween = o), (this._vars = e), (l = e.autoRound), (i = !1), (s = e.suffixMap || a.suffixMap), (r = W(t, "")), (n = this._overwriteProps);
                        var h,
                            p,
                            f,
                            m,
                            d,
                            g,
                            v,
                            y,
                            T,
                            x = t.style;
                        if (
                            (_ && "" === x.zIndex && ((h = G(t, "zIndex", r)), ("auto" === h || "" === h) && (x.zIndex = 0)),
                            "string" == typeof e && ((m = x.cssText), (h = Q(t, r)), (x.cssText = m + ";" + e), (h = H(t, h, Q(t)).difs), !U && w.test(e) && (h.opacity = parseFloat(RegExp.$1)), (e = h), (x.cssText = m)),
                            (this._firstPT = p = this.parse(t, e, null)),
                            this._transformType)
                        ) {
                            for (
                                T = 3 === this._transformType,
                                    ye
                                        ? u &&
                                          ((_ = !0),
                                          "" === x.zIndex && ((v = G(t, "zIndex", r)), ("auto" === v || "" === v) && (x.zIndex = 0)),
                                          c && (x.WebkitBackfaceVisibility = this._vars.WebkitBackfaceVisibility || (T ? "visible" : "hidden")))
                                        : (x.zoom = 1),
                                    f = p;
                                f && f._next;

                            )
                                f = f._next;
                            (y = new pe(t, "transform", 0, 0, null, 2)), this._linkCSSP(y, null, f), (y.setRatio = T && xe ? Se : ye ? ke : Pe), (y.data = this._transform || be(t, r, !0)), n.pop();
                        }
                        if (i) {
                            for (; p; ) {
                                for (g = p._next, f = m; f && f.pr > p.pr; ) f = f._next;
                                (p._prev = f ? f._prev : d) ? (p._prev._next = p) : (m = p), (p._next = f) ? (f._prev = p) : (d = p), (p = g);
                            }
                            this._firstPT = m;
                        }
                        return !0;
                    }),
                    (h.parse = function (t, e, i, n) {
                        var a,
                            h,
                            _,
                            u,
                            p,
                            c,
                            f,
                            m,
                            d,
                            g,
                            v = t.style;
                        for (a in e)
                            (c = e[a]),
                                (h = o[a]),
                                h
                                    ? (i = h.parse(t, c, a, this, i, n, e))
                                    : ((p = G(t, a, r) + ""),
                                      (d = "string" == typeof c),
                                      "color" === a || "fill" === a || "stroke" === a || -1 !== a.indexOf("Color") || (d && b.test(c))
                                          ? (d || ((c = oe(c)), (c = (c.length > 3 ? "rgba(" : "rgb(") + c.join(",") + ")")), (i = ce(v, a, p, c, !0, "transparent", i, 0, n)))
                                          : !d || (-1 === c.indexOf(" ") && -1 === c.indexOf(","))
                                          ? ((_ = parseFloat(p)),
                                            (f = _ || 0 === _ ? p.substr((_ + "").length) : ""),
                                            ("" === p || "auto" === p) &&
                                                ("width" === a || "height" === a ? ((_ = te(t, a, r)), (f = "px")) : "left" === a || "top" === a ? ((_ = Z(t, a, r)), (f = "px")) : ((_ = "opacity" !== a ? 0 : 1), (f = ""))),
                                            (g = d && "=" === c.charAt(1)),
                                            g ? ((u = parseInt(c.charAt(0) + "1", 10)), (c = c.substr(2)), (u *= parseFloat(c)), (m = c.replace(y, ""))) : ((u = parseFloat(c)), (m = d ? c.substr((u + "").length) || "" : "")),
                                            "" === m && (m = a in s ? s[a] : f),
                                            (c = u || 0 === u ? (g ? u + _ : u) + m : e[a]),
                                            f !== m &&
                                                "" !== m &&
                                                (u || 0 === u) &&
                                                (_ || 0 === _) &&
                                                ((_ = $(t, a, _, f)),
                                                "%" === m ? ((_ /= $(t, a, 100, "%") / 100), e.strictUnits !== !0 && (p = _ + "%")) : "em" === m ? (_ /= $(t, a, 1, "em")) : ((u = $(t, a, u, m)), (m = "px")),
                                                g && (u || 0 === u) && (c = u + _ + m)),
                                            g && (u += _),
                                            (!_ && 0 !== _) || (!u && 0 !== u)
                                                ? void 0 !== v[a] && (c || ("NaN" != c + "" && null != c))
                                                    ? ((i = new pe(v, a, u || _ || 0, 0, i, -1, a, !1, 0, p, c)), (i.xs0 = "none" !== c || ("display" !== a && -1 === a.indexOf("Style")) ? c : p))
                                                    : j("invalid " + a + " tween value: " + e[a])
                                                : ((i = new pe(v, a, _, u - _, i, 0, a, l !== !1 && ("px" === m || "zIndex" === a), 0, p, c)), (i.xs0 = m)))
                                          : (i = ce(v, a, p, c, !0, null, i, 0, n))),
                                n && i && !i.plugin && (i.plugin = n);
                        return i;
                    }),
                    (h.setRatio = function (t) {
                        var e,
                            i,
                            s,
                            r = this._firstPT,
                            n = 1e-6;
                        if (1 !== t || (this._tween._time !== this._tween._duration && 0 !== this._tween._time))
                            if (t || (this._tween._time !== this._tween._duration && 0 !== this._tween._time) || this._tween._rawPrevTime === -1e-6)
                                for (; r; ) {
                                    if (((e = r.c * t + r.s), r.r ? (e = e > 0 ? 0 | (e + 0.5) : 0 | (e - 0.5)) : n > e && e > -n && (e = 0), r.type))
                                        if (1 === r.type)
                                            if (((s = r.l), 2 === s)) r.t[r.p] = r.xs0 + e + r.xs1 + r.xn1 + r.xs2;
                                            else if (3 === s) r.t[r.p] = r.xs0 + e + r.xs1 + r.xn1 + r.xs2 + r.xn2 + r.xs3;
                                            else if (4 === s) r.t[r.p] = r.xs0 + e + r.xs1 + r.xn1 + r.xs2 + r.xn2 + r.xs3 + r.xn3 + r.xs4;
                                            else if (5 === s) r.t[r.p] = r.xs0 + e + r.xs1 + r.xn1 + r.xs2 + r.xn2 + r.xs3 + r.xn3 + r.xs4 + r.xn4 + r.xs5;
                                            else {
                                                for (i = r.xs0 + e + r.xs1, s = 1; r.l > s; s++) i += r["xn" + s] + r["xs" + (s + 1)];
                                                r.t[r.p] = i;
                                            }
                                        else -1 === r.type ? (r.t[r.p] = r.xs0) : r.setRatio && r.setRatio(t);
                                    else r.t[r.p] = e + r.xs0;
                                    r = r._next;
                                }
                            else for (; r; ) 2 !== r.type ? (r.t[r.p] = r.b) : r.setRatio(t), (r = r._next);
                        else for (; r; ) 2 !== r.type ? (r.t[r.p] = r.e) : r.setRatio(t), (r = r._next);
                    }),
                    (h._enableTransforms = function (t) {
                        (this._transformType = t || 3 === this._transformType ? 3 : 2), (this._transform = this._transform || be(this._target, r, !0));
                    }),
                    (h._linkCSSP = function (t, e, i, s) {
                        return (
                            t &&
                                (e && (e._prev = t),
                                t._next && (t._next._prev = t._prev),
                                t._prev ? (t._prev._next = t._next) : this._firstPT === t && ((this._firstPT = t._next), (s = !0)),
                                i ? (i._next = t) : s || null !== this._firstPT || (this._firstPT = t),
                                (t._next = e),
                                (t._prev = i)),
                            t
                        );
                    }),
                    (h._kill = function (e) {
                        var i,
                            s,
                            r,
                            n = e;
                        if (e.autoAlpha || e.alpha) {
                            n = {};
                            for (s in e) n[s] = e[s];
                            (n.opacity = 1), n.autoAlpha && (n.visibility = 1);
                        }
                        return (
                            e.className &&
                                (i = this._classNamePT) &&
                                ((r = i.xfirst),
                                r && r._prev ? this._linkCSSP(r._prev, i._next, r._prev._prev) : r === this._firstPT && (this._firstPT = i._next),
                                i._next && this._linkCSSP(i._next, i._next._next, r._prev),
                                (this._classNamePT = null)),
                            t.prototype._kill.call(this, n)
                        );
                    });
                var De = function (t, e, i) {
                    var s, r, n, a;
                    if (t.slice) for (r = t.length; --r > -1; ) De(t[r], e, i);
                    else for (s = t.childNodes, r = s.length; --r > -1; ) (n = s[r]), (a = n.type), n.style && (e.push(Q(n)), i && i.push(n)), (1 !== a && 9 !== a && 11 !== a) || !n.childNodes.length || De(n, e, i);
                };
                return (
                    (a.cascadeTo = function (t, i, s) {
                        var r,
                            n,
                            a,
                            o = e.to(t, i, s),
                            h = [o],
                            l = [],
                            _ = [],
                            u = [],
                            p = e._internals.reservedProps;
                        for (t = o._targets || o.target, De(t, l, u), o.render(i, !0), De(t, _), o.render(0, !0), o._enabled(!0), r = u.length; --r > -1; )
                            if (((n = H(u[r], l[r], _[r])), n.firstMPT)) {
                                n = n.difs;
                                for (a in s) p[a] && (n[a] = s[a]);
                                h.push(e.to(u[r], i, n));
                            }
                        return h;
                    }),
                    t.activate([a]),
                    a
                );
            },
            !0
        ),
        (function () {
            var t = window._gsDefine.plugin({
                    propName: "roundProps",
                    priority: -1,
                    API: 2,
                    init: function (t, e, i) {
                        return (this._tween = i), !0;
                    },
                }),
                e = t.prototype;
            (e._onInitAllProps = function () {
                for (var t, e, i, s = this._tween, r = s.vars.roundProps instanceof Array ? s.vars.roundProps : s.vars.roundProps.split(","), n = r.length, a = {}, o = s._propLookup.roundProps; --n > -1; ) a[r[n]] = 1;
                for (n = r.length; --n > -1; )
                    for (t = r[n], e = s._firstPT; e; )
                        (i = e._next),
                            e.pg
                                ? e.t._roundProps(a, !0)
                                : e.n === t && (this._add(e.t, t, e.s, e.c), i && (i._prev = e._prev), e._prev ? (e._prev._next = i) : s._firstPT === e && (s._firstPT = i), (e._next = e._prev = null), (s._propLookup[t] = o)),
                            (e = i);
                return !1;
            }),
                (e._add = function (t, e, i, s) {
                    this._addTween(t, e, i, i + s, e, !0), this._overwriteProps.push(e);
                });
        })(),
        window._gsDefine.plugin({
            propName: "attr",
            API: 2,
            version: "0.2.0",
            init: function (t, e) {
                var i;
                if ("function" != typeof t.setAttribute) return !1;
                (this._target = t), (this._proxy = {});
                for (i in e) this._addTween(this._proxy, i, parseFloat(t.getAttribute(i)), e[i], i) && this._overwriteProps.push(i);
                return !0;
            },
            set: function (t) {
                this._super.setRatio.call(this, t);
                for (var e, i = this._overwriteProps, s = i.length; --s > -1; ) (e = i[s]), this._target.setAttribute(e, this._proxy[e] + "");
            },
        }),
        (window._gsDefine.plugin({
            propName: "directionalRotation",
            API: 2,
            version: "0.2.0",
            init: function (t, e) {
                "object" != typeof e && (e = { rotation: e }), (this.finals = {});
                var i,
                    s,
                    r,
                    n,
                    a,
                    o,
                    h = e.useRadians === !0 ? 2 * Math.PI : 360,
                    l = 1e-6;
                for (i in e)
                    "useRadians" !== i &&
                        ((o = (e[i] + "").split("_")),
                        (s = o[0]),
                        (r = parseFloat("function" != typeof t[i] ? t[i] : t[i.indexOf("set") || "function" != typeof t["get" + i.substr(3)] ? i : "get" + i.substr(3)]())),
                        (n = this.finals[i] = "string" == typeof s && "=" === s.charAt(1) ? r + parseInt(s.charAt(0) + "1", 10) * Number(s.substr(2)) : Number(s) || 0),
                        (a = n - r),
                        o.length &&
                            ((s = o.join("_")),
                            -1 !== s.indexOf("short") && ((a %= h), a !== a % (h / 2) && (a = 0 > a ? a + h : a - h)),
                            -1 !== s.indexOf("_cw") && 0 > a ? (a = ((a + 9999999999 * h) % h) - (0 | (a / h)) * h) : -1 !== s.indexOf("ccw") && a > 0 && (a = ((a - 9999999999 * h) % h) - (0 | (a / h)) * h)),
                        (a > l || -l > a) && (this._addTween(t, i, r, r + a, i), this._overwriteProps.push(i)));
                return !0;
            },
            set: function (t) {
                var e;
                if (1 !== t) this._super.setRatio.call(this, t);
                else for (e = this._firstPT; e; ) e.f ? e.t[e.p](this.finals[e.p]) : (e.t[e.p] = this.finals[e.p]), (e = e._next);
            },
        })._autoCSS = !0),
        window._gsDefine(
            "easing.Back",
            ["easing.Ease"],
            function (t) {
                var e,
                    i,
                    s,
                    r = window.GreenSockGlobals || window,
                    n = r.com.greensock,
                    a = 2 * Math.PI,
                    o = Math.PI / 2,
                    h = n._class,
                    l = function (e, i) {
                        var s = h("easing." + e, function () {}, !0),
                            r = (s.prototype = new t());
                        return (r.constructor = s), (r.getRatio = i), s;
                    },
                    _ = t.register || function () {},
                    u = function (t, e, i, s) {
                        var r = h("easing." + t, { easeOut: new e(), easeIn: new i(), easeInOut: new s() }, !0);
                        return _(r, t), r;
                    },
                    p = function (t, e, i) {
                        (this.t = t), (this.v = e), i && ((this.next = i), (i.prev = this), (this.c = i.v - e), (this.gap = i.t - t));
                    },
                    c = function (e, i) {
                        var s = h(
                                "easing." + e,
                                function (t) {
                                    (this._p1 = t || 0 === t ? t : 1.70158), (this._p2 = 1.525 * this._p1);
                                },
                                !0
                            ),
                            r = (s.prototype = new t());
                        return (
                            (r.constructor = s),
                            (r.getRatio = i),
                            (r.config = function (t) {
                                return new s(t);
                            }),
                            s
                        );
                    },
                    f = u(
                        "Back",
                        c("BackOut", function (t) {
                            return (t -= 1) * t * ((this._p1 + 1) * t + this._p1) + 1;
                        }),
                        c("BackIn", function (t) {
                            return t * t * ((this._p1 + 1) * t - this._p1);
                        }),
                        c("BackInOut", function (t) {
                            return 1 > (t *= 2) ? 0.5 * t * t * ((this._p2 + 1) * t - this._p2) : 0.5 * ((t -= 2) * t * ((this._p2 + 1) * t + this._p2) + 2);
                        })
                    ),
                    m = h(
                        "easing.SlowMo",
                        function (t, e, i) {
                            (e = e || 0 === e ? e : 0.7), null == t ? (t = 0.7) : t > 1 && (t = 1), (this._p = 1 !== t ? e : 0), (this._p1 = (1 - t) / 2), (this._p2 = t), (this._p3 = this._p1 + this._p2), (this._calcEnd = i === !0);
                        },
                        !0
                    ),
                    d = (m.prototype = new t());
                return (
                    (d.constructor = m),
                    (d.getRatio = function (t) {
                        var e = t + (0.5 - t) * this._p;
                        return this._p1 > t
                            ? this._calcEnd
                                ? 1 - (t = 1 - t / this._p1) * t
                                : e - (t = 1 - t / this._p1) * t * t * t * e
                            : t > this._p3
                            ? this._calcEnd
                                ? 1 - (t = (t - this._p3) / this._p1) * t
                                : e + (t - e) * (t = (t - this._p3) / this._p1) * t * t * t
                            : this._calcEnd
                            ? 1
                            : e;
                    }),
                    (m.ease = new m(0.7, 0.7)),
                    (d.config = m.config = function (t, e, i) {
                        return new m(t, e, i);
                    }),
                    (e = h(
                        "easing.SteppedEase",
                        function (t) {
                            (t = t || 1), (this._p1 = 1 / t), (this._p2 = t + 1);
                        },
                        !0
                    )),
                    (d = e.prototype = new t()),
                    (d.constructor = e),
                    (d.getRatio = function (t) {
                        return 0 > t ? (t = 0) : t >= 1 && (t = 0.999999999), ((this._p2 * t) >> 0) * this._p1;
                    }),
                    (d.config = e.config = function (t) {
                        return new e(t);
                    }),
                    (i = h(
                        "easing.RoughEase",
                        function (e) {
                            e = e || {};
                            for (
                                var i,
                                    s,
                                    r,
                                    n,
                                    a,
                                    o,
                                    h = e.taper || "none",
                                    l = [],
                                    _ = 0,
                                    u = 0 | (e.points || 20),
                                    c = u,
                                    f = e.randomize !== !1,
                                    m = e.clamp === !0,
                                    d = e.template instanceof t ? e.template : null,
                                    g = "number" == typeof e.strength ? 0.4 * e.strength : 0.4;
                                --c > -1;

                            )
                                (i = f ? Math.random() : (1 / u) * c),
                                    (s = d ? d.getRatio(i) : i),
                                    "none" === h ? (r = g) : "out" === h ? ((n = 1 - i), (r = n * n * g)) : "in" === h ? (r = i * i * g) : 0.5 > i ? ((n = 2 * i), (r = 0.5 * n * n * g)) : ((n = 2 * (1 - i)), (r = 0.5 * n * n * g)),
                                    f ? (s += Math.random() * r - 0.5 * r) : c % 2 ? (s += 0.5 * r) : (s -= 0.5 * r),
                                    m && (s > 1 ? (s = 1) : 0 > s && (s = 0)),
                                    (l[_++] = { x: i, y: s });
                            for (
                                l.sort(function (t, e) {
                                    return t.x - e.x;
                                }),
                                    o = new p(1, 1, null),
                                    c = u;
                                --c > -1;

                            )
                                (a = l[c]), (o = new p(a.x, a.y, o));
                            this._prev = new p(0, 0, 0 !== o.t ? o : o.next);
                        },
                        !0
                    )),
                    (d = i.prototype = new t()),
                    (d.constructor = i),
                    (d.getRatio = function (t) {
                        var e = this._prev;
                        if (t > e.t) {
                            for (; e.next && t >= e.t; ) e = e.next;
                            e = e.prev;
                        } else for (; e.prev && e.t >= t; ) e = e.prev;
                        return (this._prev = e), e.v + ((t - e.t) / e.gap) * e.c;
                    }),
                    (d.config = function (t) {
                        return new i(t);
                    }),
                    (i.ease = new i()),
                    u(
                        "Bounce",
                        l("BounceOut", function (t) {
                            return 1 / 2.75 > t ? 7.5625 * t * t : 2 / 2.75 > t ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75 : 2.5 / 2.75 > t ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375 : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
                        }),
                        l("BounceIn", function (t) {
                            return 1 / 2.75 > (t = 1 - t)
                                ? 1 - 7.5625 * t * t
                                : 2 / 2.75 > t
                                ? 1 - (7.5625 * (t -= 1.5 / 2.75) * t + 0.75)
                                : 2.5 / 2.75 > t
                                ? 1 - (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375)
                                : 1 - (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);
                        }),
                        l("BounceInOut", function (t) {
                            var e = 0.5 > t;
                            return (
                                (t = e ? 1 - 2 * t : 2 * t - 1),
                                (t = 1 / 2.75 > t ? 7.5625 * t * t : 2 / 2.75 > t ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75 : 2.5 / 2.75 > t ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375 : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375),
                                e ? 0.5 * (1 - t) : 0.5 * t + 0.5
                            );
                        })
                    ),
                    u(
                        "Circ",
                        l("CircOut", function (t) {
                            return Math.sqrt(1 - (t -= 1) * t);
                        }),
                        l("CircIn", function (t) {
                            return -(Math.sqrt(1 - t * t) - 1);
                        }),
                        l("CircInOut", function (t) {
                            return 1 > (t *= 2) ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
                        })
                    ),
                    (s = function (e, i, s) {
                        var r = h(
                                "easing." + e,
                                function (t, e) {
                                    (this._p1 = t || 1), (this._p2 = e || s), (this._p3 = (this._p2 / a) * (Math.asin(1 / this._p1) || 0));
                                },
                                !0
                            ),
                            n = (r.prototype = new t());
                        return (
                            (n.constructor = r),
                            (n.getRatio = i),
                            (n.config = function (t, e) {
                                return new r(t, e);
                            }),
                            r
                        );
                    }),
                    u(
                        "Elastic",
                        s(
                            "ElasticOut",
                            function (t) {
                                return this._p1 * Math.pow(2, -10 * t) * Math.sin(((t - this._p3) * a) / this._p2) + 1;
                            },
                            0.3
                        ),
                        s(
                            "ElasticIn",
                            function (t) {
                                return -(this._p1 * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t - this._p3) * a) / this._p2));
                            },
                            0.3
                        ),
                        s(
                            "ElasticInOut",
                            function (t) {
                                return 1 > (t *= 2) ? -0.5 * this._p1 * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t - this._p3) * a) / this._p2) : 0.5 * this._p1 * Math.pow(2, -10 * (t -= 1)) * Math.sin(((t - this._p3) * a) / this._p2) + 1;
                            },
                            0.45
                        )
                    ),
                    u(
                        "Expo",
                        l("ExpoOut", function (t) {
                            return 1 - Math.pow(2, -10 * t);
                        }),
                        l("ExpoIn", function (t) {
                            return Math.pow(2, 10 * (t - 1)) - 0.001;
                        }),
                        l("ExpoInOut", function (t) {
                            return 1 > (t *= 2) ? 0.5 * Math.pow(2, 10 * (t - 1)) : 0.5 * (2 - Math.pow(2, -10 * (t - 1)));
                        })
                    ),
                    u(
                        "Sine",
                        l("SineOut", function (t) {
                            return Math.sin(t * o);
                        }),
                        l("SineIn", function (t) {
                            return -Math.cos(t * o) + 1;
                        }),
                        l("SineInOut", function (t) {
                            return -0.5 * (Math.cos(Math.PI * t) - 1);
                        })
                    ),
                    h(
                        "easing.EaseLookup",
                        {
                            find: function (e) {
                                return t.map[e];
                            },
                        },
                        !0
                    ),
                    _(r.SlowMo, "SlowMo", "ease,"),
                    _(i, "RoughEase", "ease,"),
                    _(e, "SteppedEase", "ease,"),
                    f
                );
            },
            !0
        );
}),
    (function (t) {
        "use strict";
        var e = t.GreenSockGlobals || t;
        if (!e.TweenLite) {
            var i,
                s,
                r,
                n,
                a,
                o = function (t) {
                    var i,
                        s = t.split("."),
                        r = e;
                    for (i = 0; s.length > i; i++) r[s[i]] = r = r[s[i]] || {};
                    return r;
                },
                h = o("com.greensock"),
                l = 1e-10,
                _ = [].slice,
                u = function () {},
                p = (function () {
                    var t = Object.prototype.toString,
                        e = t.call([]);
                    return function (i) {
                        return null != i && (i instanceof Array || ("object" == typeof i && !!i.push && t.call(i) === e));
                    };
                })(),
                c = {},
                f = function (i, s, r, n) {
                    (this.sc = c[i] ? c[i].sc : []), (c[i] = this), (this.gsClass = null), (this.func = r);
                    var a = [];
                    (this.check = function (h) {
                        for (var l, _, u, p, m = s.length, d = m; --m > -1; ) (l = c[s[m]] || new f(s[m], [])).gsClass ? ((a[m] = l.gsClass), d--) : h && l.sc.push(this);
                        if (0 === d && r)
                            for (
                                _ = ("com.greensock." + i).split("."),
                                    u = _.pop(),
                                    p = o(_.join("."))[u] = this.gsClass = r.apply(r, a),
                                    n &&
                                        ((e[u] = p),
                                        "function" == typeof define && define.amd
                                            ? define((t.GreenSockAMDPath ? t.GreenSockAMDPath + "/" : "") + i.split(".").join("/"), [], function () {
                                                  return p;
                                              })
                                            : "undefined" != typeof module && module.exports && (module.exports = p)),
                                    m = 0;
                                this.sc.length > m;
                                m++
                            )
                                this.sc[m].check();
                    }),
                        this.check(!0);
                },
                m = (t._gsDefine = function (t, e, i, s) {
                    return new f(t, e, i, s);
                }),
                d = (h._class = function (t, e, i) {
                    return (
                        (e = e || function () {}),
                        m(
                            t,
                            [],
                            function () {
                                return e;
                            },
                            i
                        ),
                        e
                    );
                });
            m.globals = e;
            var g = [0, 0, 1, 1],
                v = [],
                y = d(
                    "easing.Ease",
                    function (t, e, i, s) {
                        (this._func = t), (this._type = i || 0), (this._power = s || 0), (this._params = e ? g.concat(e) : g);
                    },
                    !0
                ),
                T = (y.map = {}),
                w = (y.register = function (t, e, i, s) {
                    for (var r, n, a, o, l = e.split(","), _ = l.length, u = (i || "easeIn,easeOut,easeInOut").split(","); --_ > -1; )
                        for (n = l[_], r = s ? d("easing." + n, null, !0) : h.easing[n] || {}, a = u.length; --a > -1; ) (o = u[a]), (T[n + "." + o] = T[o + n] = r[o] = t.getRatio ? t : t[o] || new t());
                });
            for (
                r = y.prototype,
                    r._calcEnd = !1,
                    r.getRatio = function (t) {
                        if (this._func) return (this._params[0] = t), this._func.apply(null, this._params);
                        var e = this._type,
                            i = this._power,
                            s = 1 === e ? 1 - t : 2 === e ? t : 0.5 > t ? 2 * t : 2 * (1 - t);
                        return 1 === i ? (s *= s) : 2 === i ? (s *= s * s) : 3 === i ? (s *= s * s * s) : 4 === i && (s *= s * s * s * s), 1 === e ? 1 - s : 2 === e ? s : 0.5 > t ? s / 2 : 1 - s / 2;
                    },
                    i = ["Linear", "Quad", "Cubic", "Quart", "Quint,Strong"],
                    s = i.length;
                --s > -1;

            )
                (r = i[s] + ",Power" + s), w(new y(null, null, 1, s), r, "easeOut", !0), w(new y(null, null, 2, s), r, "easeIn" + (0 === s ? ",easeNone" : "")), w(new y(null, null, 3, s), r, "easeInOut");
            (T.linear = h.easing.Linear.easeIn), (T.swing = h.easing.Quad.easeInOut);
            var x = d("events.EventDispatcher", function (t) {
                (this._listeners = {}), (this._eventTarget = t || this);
            });
            (r = x.prototype),
                (r.addEventListener = function (t, e, i, s, r) {
                    r = r || 0;
                    var o,
                        h,
                        l = this._listeners[t],
                        _ = 0;
                    for (null == l && (this._listeners[t] = l = []), h = l.length; --h > -1; ) (o = l[h]), o.c === e && o.s === i ? l.splice(h, 1) : 0 === _ && r > o.pr && (_ = h + 1);
                    l.splice(_, 0, { c: e, s: i, up: s, pr: r }), this !== n || a || n.wake();
                }),
                (r.removeEventListener = function (t, e) {
                    var i,
                        s = this._listeners[t];
                    if (s) for (i = s.length; --i > -1; ) if (s[i].c === e) return s.splice(i, 1), void 0;
                }),
                (r.dispatchEvent = function (t) {
                    var e,
                        i,
                        s,
                        r = this._listeners[t];
                    if (r) for (e = r.length, i = this._eventTarget; --e > -1; ) (s = r[e]), s.up ? s.c.call(s.s || i, { type: t, target: i }) : s.c.call(s.s || i);
                });
            var b = t.requestAnimationFrame,
                P = t.cancelAnimationFrame,
                S =
                    Date.now ||
                    function () {
                        return new Date().getTime();
                    },
                k = S();
            for (i = ["ms", "moz", "webkit", "o"], s = i.length; --s > -1 && !b; ) (b = t[i[s] + "RequestAnimationFrame"]), (P = t[i[s] + "CancelAnimationFrame"] || t[i[s] + "CancelRequestAnimationFrame"]);
            d("Ticker", function (t, e) {
                var i,
                    s,
                    r,
                    o,
                    h,
                    l = this,
                    _ = S(),
                    p = e !== !1 && b,
                    c = function (t) {
                        (k = S()), (l.time = (k - _) / 1e3);
                        var e,
                            n = l.time - h;
                        (!i || n > 0 || t === !0) && (l.frame++, (h += n + (n >= o ? 0.004 : o - n)), (e = !0)), t !== !0 && (r = s(c)), e && l.dispatchEvent("tick");
                    };
                x.call(l),
                    (l.time = l.frame = 0),
                    (l.tick = function () {
                        c(!0);
                    }),
                    (l.sleep = function () {
                        null != r && (p && P ? P(r) : clearTimeout(r), (s = u), (r = null), l === n && (a = !1));
                    }),
                    (l.wake = function () {
                        null !== r && l.sleep(),
                            (s =
                                0 === i
                                    ? u
                                    : p && b
                                    ? b
                                    : function (t) {
                                          return setTimeout(t, 0 | (1e3 * (h - l.time) + 1));
                                      }),
                            l === n && (a = !0),
                            c(2);
                    }),
                    (l.fps = function (t) {
                        return arguments.length ? ((i = t), (o = 1 / (i || 60)), (h = this.time + o), l.wake(), void 0) : i;
                    }),
                    (l.useRAF = function (t) {
                        return arguments.length ? (l.sleep(), (p = t), l.fps(i), void 0) : p;
                    }),
                    l.fps(t),
                    setTimeout(function () {
                        p && (!r || 5 > l.frame) && l.useRAF(!1);
                    }, 1500);
            }),
                (r = h.Ticker.prototype = new h.events.EventDispatcher()),
                (r.constructor = h.Ticker);
            var R = d("core.Animation", function (t, e) {
                if (
                    ((this.vars = e = e || {}),
                    (this._duration = this._totalDuration = t || 0),
                    (this._delay = Number(e.delay) || 0),
                    (this._timeScale = 1),
                    (this._active = e.immediateRender === !0),
                    (this.data = e.data),
                    (this._reversed = e.reversed === !0),
                    U)
                ) {
                    a || n.wake();
                    var i = this.vars.useFrames ? z : U;
                    i.add(this, i._time), this.vars.paused && this.paused(!0);
                }
            });
            (n = R.ticker = new h.Ticker()),
                (r = R.prototype),
                (r._dirty = r._gc = r._initted = r._paused = !1),
                (r._totalTime = r._time = 0),
                (r._rawPrevTime = -1),
                (r._next = r._last = r._onUpdate = r._timeline = r.timeline = null),
                (r._paused = !1);
            var A = function () {
                a && S() - k > 2e3 && n.wake(), setTimeout(A, 2e3);
            };
            A(),
                (r.play = function (t, e) {
                    return arguments.length && this.seek(t, e), this.reversed(!1).paused(!1);
                }),
                (r.pause = function (t, e) {
                    return arguments.length && this.seek(t, e), this.paused(!0);
                }),
                (r.resume = function (t, e) {
                    return arguments.length && this.seek(t, e), this.paused(!1);
                }),
                (r.seek = function (t, e) {
                    return this.totalTime(Number(t), e !== !1);
                }),
                (r.restart = function (t, e) {
                    return this.reversed(!1)
                        .paused(!1)
                        .totalTime(t ? -this._delay : 0, e !== !1, !0);
                }),
                (r.reverse = function (t, e) {
                    return arguments.length && this.seek(t || this.totalDuration(), e), this.reversed(!0).paused(!1);
                }),
                (r.render = function () {}),
                (r.invalidate = function () {
                    return this;
                }),
                (r.isActive = function () {
                    var t,
                        e = this._timeline,
                        i = this._startTime;
                    return !e || (!this._gc && !this._paused && e.isActive() && (t = e.rawTime()) >= i && i + this.totalDuration() / this._timeScale > t);
                }),
                (r._enabled = function (t, e) {
                    return (
                        a || n.wake(),
                        (this._gc = !t),
                        (this._active = this.isActive()),
                        e !== !0 && (t && !this.timeline ? this._timeline.add(this, this._startTime - this._delay) : !t && this.timeline && this._timeline._remove(this, !0)),
                        !1
                    );
                }),
                (r._kill = function () {
                    return this._enabled(!1, !1);
                }),
                (r.kill = function (t, e) {
                    return this._kill(t, e), this;
                }),
                (r._uncache = function (t) {
                    for (var e = t ? this : this.timeline; e; ) (e._dirty = !0), (e = e.timeline);
                    return this;
                }),
                (r._swapSelfInParams = function (t) {
                    for (var e = t.length, i = t.concat(); --e > -1; ) "{self}" === t[e] && (i[e] = this);
                    return i;
                }),
                (r.eventCallback = function (t, e, i, s) {
                    if ("on" === (t || "").substr(0, 2)) {
                        var r = this.vars;
                        if (1 === arguments.length) return r[t];
                        null == e ? delete r[t] : ((r[t] = e), (r[t + "Params"] = p(i) && -1 !== i.join("").indexOf("{self}") ? this._swapSelfInParams(i) : i), (r[t + "Scope"] = s)), "onUpdate" === t && (this._onUpdate = e);
                    }
                    return this;
                }),
                (r.delay = function (t) {
                    return arguments.length ? (this._timeline.smoothChildTiming && this.startTime(this._startTime + t - this._delay), (this._delay = t), this) : this._delay;
                }),
                (r.duration = function (t) {
                    return arguments.length
                        ? ((this._duration = this._totalDuration = t),
                          this._uncache(!0),
                          this._timeline.smoothChildTiming && this._time > 0 && this._time < this._duration && 0 !== t && this.totalTime(this._totalTime * (t / this._duration), !0),
                          this)
                        : ((this._dirty = !1), this._duration);
                }),
                (r.totalDuration = function (t) {
                    return (this._dirty = !1), arguments.length ? this.duration(t) : this._totalDuration;
                }),
                (r.time = function (t, e) {
                    return arguments.length ? (this._dirty && this.totalDuration(), this.totalTime(t > this._duration ? this._duration : t, e)) : this._time;
                }),
                (r.totalTime = function (t, e, i) {
                    if ((a || n.wake(), !arguments.length)) return this._totalTime;
                    if (this._timeline) {
                        if ((0 > t && !i && (t += this.totalDuration()), this._timeline.smoothChildTiming)) {
                            this._dirty && this.totalDuration();
                            var s = this._totalDuration,
                                r = this._timeline;
                            if ((t > s && !i && (t = s), (this._startTime = (this._paused ? this._pauseTime : r._time) - (this._reversed ? s - t : t) / this._timeScale), r._dirty || this._uncache(!1), r._timeline))
                                for (; r._timeline; ) r._timeline._time !== (r._startTime + r._totalTime) / r._timeScale && r.totalTime(r._totalTime, !0), (r = r._timeline);
                        }
                        this._gc && this._enabled(!0, !1), (this._totalTime !== t || 0 === this._duration) && this.render(t, e, !1);
                    }
                    return this;
                }),
                (r.progress = r.totalProgress = function (t, e) {
                    return arguments.length ? this.totalTime(this.duration() * t, e) : this._time / this.duration();
                }),
                (r.startTime = function (t) {
                    return arguments.length ? (t !== this._startTime && ((this._startTime = t), this.timeline && this.timeline._sortChildren && this.timeline.add(this, t - this._delay)), this) : this._startTime;
                }),
                (r.timeScale = function (t) {
                    if (!arguments.length) return this._timeScale;
                    if (((t = t || l), this._timeline && this._timeline.smoothChildTiming)) {
                        var e = this._pauseTime,
                            i = e || 0 === e ? e : this._timeline.totalTime();
                        this._startTime = i - ((i - this._startTime) * this._timeScale) / t;
                    }
                    return (this._timeScale = t), this._uncache(!1);
                }),
                (r.reversed = function (t) {
                    return arguments.length
                        ? (t != this._reversed && ((this._reversed = t), this.totalTime(this._timeline && !this._timeline.smoothChildTiming ? this.totalDuration() - this._totalTime : this._totalTime, !0)), this)
                        : this._reversed;
                }),
                (r.paused = function (t) {
                    if (!arguments.length) return this._paused;
                    if (t != this._paused && this._timeline) {
                        a || t || n.wake();
                        var e = this._timeline,
                            i = e.rawTime(),
                            s = i - this._pauseTime;
                        !t && e.smoothChildTiming && ((this._startTime += s), this._uncache(!1)),
                            (this._pauseTime = t ? i : null),
                            (this._paused = t),
                            (this._active = this.isActive()),
                            !t && 0 !== s && this._initted && this.duration() && this.render(e.smoothChildTiming ? this._totalTime : (i - this._startTime) / this._timeScale, !0, !0);
                    }
                    return this._gc && !t && this._enabled(!0, !1), this;
                });
            var C = d("core.SimpleTimeline", function (t) {
                R.call(this, 0, t), (this.autoRemoveChildren = this.smoothChildTiming = !0);
            });
            (r = C.prototype = new R()),
                (r.constructor = C),
                (r.kill()._gc = !1),
                (r._first = r._last = null),
                (r._sortChildren = !1),
                (r.add = r.insert = function (t, e) {
                    var i, s;
                    if (
                        ((t._startTime = Number(e || 0) + t._delay),
                        t._paused && this !== t._timeline && (t._pauseTime = t._startTime + (this.rawTime() - t._startTime) / t._timeScale),
                        t.timeline && t.timeline._remove(t, !0),
                        (t.timeline = t._timeline = this),
                        t._gc && t._enabled(!0, !0),
                        (i = this._last),
                        this._sortChildren)
                    )
                        for (s = t._startTime; i && i._startTime > s; ) i = i._prev;
                    return i ? ((t._next = i._next), (i._next = t)) : ((t._next = this._first), (this._first = t)), t._next ? (t._next._prev = t) : (this._last = t), (t._prev = i), this._timeline && this._uncache(!0), this;
                }),
                (r._remove = function (t, e) {
                    return (
                        t.timeline === this &&
                            (e || t._enabled(!1, !0),
                            (t.timeline = null),
                            t._prev ? (t._prev._next = t._next) : this._first === t && (this._first = t._next),
                            t._next ? (t._next._prev = t._prev) : this._last === t && (this._last = t._prev),
                            this._timeline && this._uncache(!0)),
                        this
                    );
                }),
                (r.render = function (t, e, i) {
                    var s,
                        r = this._first;
                    for (this._totalTime = this._time = this._rawPrevTime = t; r; )
                        (s = r._next),
                            (r._active || (t >= r._startTime && !r._paused)) &&
                                (r._reversed ? r.render((r._dirty ? r.totalDuration() : r._totalDuration) - (t - r._startTime) * r._timeScale, e, i) : r.render((t - r._startTime) * r._timeScale, e, i)),
                            (r = s);
                }),
                (r.rawTime = function () {
                    return a || n.wake(), this._totalTime;
                });
            var O = d(
                    "TweenLite",
                    function (e, i, s) {
                        if ((R.call(this, i, s), (this.render = O.prototype.render), null == e)) throw "Cannot tween a null target.";
                        this.target = e = "string" != typeof e ? e : O.selector(e) || e;
                        var r,
                            n,
                            a,
                            o = e.jquery || (e.length && e !== t && e[0] && (e[0] === t || (e[0].nodeType && e[0].style && !e.nodeType))),
                            h = this.vars.overwrite;
                        if (((this._overwrite = h = null == h ? X[O.defaultOverwrite] : "number" == typeof h ? h >> 0 : X[h]), (o || e instanceof Array || (e.push && p(e))) && "number" != typeof e[0]))
                            for (this._targets = a = _.call(e, 0), this._propLookup = [], this._siblings = [], r = 0; a.length > r; r++)
                                (n = a[r]),
                                    n
                                        ? "string" != typeof n
                                            ? n.length && n !== t && n[0] && (n[0] === t || (n[0].nodeType && n[0].style && !n.nodeType))
                                                ? (a.splice(r--, 1), (this._targets = a = a.concat(_.call(n, 0))))
                                                : ((this._siblings[r] = Y(n, this, !1)), 1 === h && this._siblings[r].length > 1 && j(n, this, null, 1, this._siblings[r]))
                                            : ((n = a[r--] = O.selector(n)), "string" == typeof n && a.splice(r + 1, 1))
                                        : a.splice(r--, 1);
                        else (this._propLookup = {}), (this._siblings = Y(e, this, !1)), 1 === h && this._siblings.length > 1 && j(e, this, null, 1, this._siblings);
                        (this.vars.immediateRender || (0 === i && 0 === this._delay && this.vars.immediateRender !== !1)) && this.render(-this._delay, !1, !0);
                    },
                    !0
                ),
                D = function (e) {
                    return e.length && e !== t && e[0] && (e[0] === t || (e[0].nodeType && e[0].style && !e.nodeType));
                },
                M = function (t, e) {
                    var i,
                        s = {};
                    for (i in t) L[i] || (i in e && "x" !== i && "y" !== i && "width" !== i && "height" !== i && "className" !== i && "border" !== i) || !(!E[i] || (E[i] && E[i]._autoCSS)) || ((s[i] = t[i]), delete t[i]);
                    t.css = s;
                };
            (r = O.prototype = new R()),
                (r.constructor = O),
                (r.kill()._gc = !1),
                (r.ratio = 0),
                (r._firstPT = r._targets = r._overwrittenProps = r._startAt = null),
                (r._notifyPluginsOfEnabled = !1),
                (O.version = "1.11.4"),
                (O.defaultEase = r._ease = new y(null, null, 1, 1)),
                (O.defaultOverwrite = "auto"),
                (O.ticker = n),
                (O.autoSleep = !0),
                (O.selector =
                    t.$ ||
                    t.jQuery ||
                    function (e) {
                        return t.$ ? ((O.selector = t.$), t.$(e)) : t.document ? t.document.getElementById("#" === e.charAt(0) ? e.substr(1) : e) : e;
                    });
            var I = (O._internals = { isArray: p, isSelector: D }),
                E = (O._plugins = {}),
                N = (O._tweenLookup = {}),
                F = 0,
                L = (I.reservedProps = {
                    ease: 1,
                    delay: 1,
                    overwrite: 1,
                    onComplete: 1,
                    onCompleteParams: 1,
                    onCompleteScope: 1,
                    useFrames: 1,
                    runBackwards: 1,
                    startAt: 1,
                    onUpdate: 1,
                    onUpdateParams: 1,
                    onUpdateScope: 1,
                    onStart: 1,
                    onStartParams: 1,
                    onStartScope: 1,
                    onReverseComplete: 1,
                    onReverseCompleteParams: 1,
                    onReverseCompleteScope: 1,
                    onRepeat: 1,
                    onRepeatParams: 1,
                    onRepeatScope: 1,
                    easeParams: 1,
                    yoyo: 1,
                    immediateRender: 1,
                    repeat: 1,
                    repeatDelay: 1,
                    data: 1,
                    paused: 1,
                    reversed: 1,
                    autoCSS: 1,
                }),
                X = { none: 0, all: 1, auto: 2, concurrent: 3, allOnStart: 4, preexisting: 5, true: 1, false: 0 },
                z = (R._rootFramesTimeline = new C()),
                U = (R._rootTimeline = new C());
            (U._startTime = n.time),
                (z._startTime = n.frame),
                (U._active = z._active = !0),
                (R._updateRoot = function () {
                    if ((U.render((n.time - U._startTime) * U._timeScale, !1, !1), z.render((n.frame - z._startTime) * z._timeScale, !1, !1), !(n.frame % 120))) {
                        var t, e, i;
                        for (i in N) {
                            for (e = N[i].tweens, t = e.length; --t > -1; ) e[t]._gc && e.splice(t, 1);
                            0 === e.length && delete N[i];
                        }
                        if (((i = U._first), (!i || i._paused) && O.autoSleep && !z._first && 1 === n._listeners.tick.length)) {
                            for (; i && i._paused; ) i = i._next;
                            i || n.sleep();
                        }
                    }
                }),
                n.addEventListener("tick", R._updateRoot);
            var Y = function (t, e, i) {
                    var s,
                        r,
                        n = t._gsTweenID;
                    if ((N[n || (t._gsTweenID = n = "t" + F++)] || (N[n] = { target: t, tweens: [] }), e && ((s = N[n].tweens), (s[(r = s.length)] = e), i))) for (; --r > -1; ) s[r] === e && s.splice(r, 1);
                    return N[n].tweens;
                },
                j = function (t, e, i, s, r) {
                    var n, a, o, h;
                    if (1 === s || s >= 4) {
                        for (h = r.length, n = 0; h > n; n++)
                            if ((o = r[n]) !== e) o._gc || (o._enabled(!1, !1) && (a = !0));
                            else if (5 === s) break;
                        return a;
                    }
                    var _,
                        u = e._startTime + l,
                        p = [],
                        c = 0,
                        f = 0 === e._duration;
                    for (n = r.length; --n > -1; )
                        (o = r[n]) === e ||
                            o._gc ||
                            o._paused ||
                            (o._timeline !== e._timeline
                                ? ((_ = _ || B(e, 0, f)), 0 === B(o, _, f) && (p[c++] = o))
                                : u >= o._startTime && o._startTime + o.totalDuration() / o._timeScale > u && (((f || !o._initted) && 2e-10 >= u - o._startTime) || (p[c++] = o)));
                    for (n = c; --n > -1; ) (o = p[n]), 2 === s && o._kill(i, t) && (a = !0), (2 !== s || (!o._firstPT && o._initted)) && o._enabled(!1, !1) && (a = !0);
                    return a;
                },
                B = function (t, e, i) {
                    for (var s = t._timeline, r = s._timeScale, n = t._startTime; s._timeline; ) {
                        if (((n += s._startTime), (r *= s._timeScale), s._paused)) return -100;
                        s = s._timeline;
                    }
                    return (n /= r), n > e ? n - e : (i && n === e) || (!t._initted && 2 * l > n - e) ? l : (n += t.totalDuration() / t._timeScale / r) > e + l ? 0 : n - e - l;
                };
            (r._init = function () {
                var t,
                    e,
                    i,
                    s,
                    r = this.vars,
                    n = this._overwrittenProps,
                    a = this._duration,
                    o = r.immediateRender,
                    h = r.ease;
                if (r.startAt) {
                    if ((this._startAt && this._startAt.render(-1, !0), (r.startAt.overwrite = 0), (r.startAt.immediateRender = !0), (this._startAt = O.to(this.target, 0, r.startAt)), o))
                        if (this._time > 0) this._startAt = null;
                        else if (0 !== a) return;
                } else if (r.runBackwards && 0 !== a)
                    if (this._startAt) this._startAt.render(-1, !0), (this._startAt = null);
                    else {
                        i = {};
                        for (s in r) (L[s] && "autoCSS" !== s) || (i[s] = r[s]);
                        if (((i.overwrite = 0), (i.data = "isFromStart"), (this._startAt = O.to(this.target, 0, i)), r.immediateRender)) {
                            if (0 === this._time) return;
                        } else this._startAt.render(-1, !0);
                    }
                if (
                    ((this._ease = h ? (h instanceof y ? (r.easeParams instanceof Array ? h.config.apply(h, r.easeParams) : h) : "function" == typeof h ? new y(h, r.easeParams) : T[h] || O.defaultEase) : O.defaultEase),
                    (this._easeType = this._ease._type),
                    (this._easePower = this._ease._power),
                    (this._firstPT = null),
                    this._targets)
                )
                    for (t = this._targets.length; --t > -1; ) this._initProps(this._targets[t], (this._propLookup[t] = {}), this._siblings[t], n ? n[t] : null) && (e = !0);
                else e = this._initProps(this.target, this._propLookup, this._siblings, n);
                if ((e && O._onPluginEvent("_onInitAllProps", this), n && (this._firstPT || ("function" != typeof this.target && this._enabled(!1, !1))), r.runBackwards))
                    for (i = this._firstPT; i; ) (i.s += i.c), (i.c = -i.c), (i = i._next);
                (this._onUpdate = r.onUpdate), (this._initted = !0);
            }),
                (r._initProps = function (e, i, s, r) {
                    var n, a, o, h, l, _;
                    if (null == e) return !1;
                    this.vars.css || (e.style && e !== t && e.nodeType && E.css && this.vars.autoCSS !== !1 && M(this.vars, e));
                    for (n in this.vars) {
                        if (((_ = this.vars[n]), L[n])) _ && (_ instanceof Array || (_.push && p(_))) && -1 !== _.join("").indexOf("{self}") && (this.vars[n] = _ = this._swapSelfInParams(_, this));
                        else if (E[n] && (h = new E[n]())._onInitTween(e, this.vars[n], this)) {
                            for (this._firstPT = l = { _next: this._firstPT, t: h, p: "setRatio", s: 0, c: 1, f: !0, n: n, pg: !0, pr: h._priority }, a = h._overwriteProps.length; --a > -1; ) i[h._overwriteProps[a]] = this._firstPT;
                            (h._priority || h._onInitAllProps) && (o = !0), (h._onDisable || h._onEnable) && (this._notifyPluginsOfEnabled = !0);
                        } else
                            (this._firstPT = i[n] = l = { _next: this._firstPT, t: e, p: n, f: "function" == typeof e[n], n: n, pg: !1, pr: 0 }),
                                (l.s = l.f ? e[n.indexOf("set") || "function" != typeof e["get" + n.substr(3)] ? n : "get" + n.substr(3)]() : parseFloat(e[n])),
                                (l.c = "string" == typeof _ && "=" === _.charAt(1) ? parseInt(_.charAt(0) + "1", 10) * Number(_.substr(2)) : Number(_) - l.s || 0);
                        l && l._next && (l._next._prev = l);
                    }
                    return r && this._kill(r, e) ? this._initProps(e, i, s, r) : this._overwrite > 1 && this._firstPT && s.length > 1 && j(e, this, i, this._overwrite, s) ? (this._kill(i, e), this._initProps(e, i, s, r)) : o;
                }),
                (r.render = function (t, e, i) {
                    var s,
                        r,
                        n,
                        a,
                        o = this._time,
                        h = this._duration;
                    if (t >= h)
                        (this._totalTime = this._time = h),
                            (this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1),
                            this._reversed || ((s = !0), (r = "onComplete")),
                            0 === h && ((a = this._rawPrevTime), (0 === t || 0 > a || a === l) && a !== t && ((i = !0), a > l && (r = "onReverseComplete")), (this._rawPrevTime = a = !e || t || 0 === a ? t : l));
                    else if (1e-7 > t)
                        (this._totalTime = this._time = 0),
                            (this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0),
                            (0 !== o || (0 === h && this._rawPrevTime > l)) && ((r = "onReverseComplete"), (s = this._reversed)),
                            0 > t ? ((this._active = !1), 0 === h && (this._rawPrevTime >= 0 && (i = !0), (this._rawPrevTime = a = !e || t || 0 === this._rawPrevTime ? t : l))) : this._initted || (i = !0);
                    else if (((this._totalTime = this._time = t), this._easeType)) {
                        var _ = t / h,
                            u = this._easeType,
                            p = this._easePower;
                        (1 === u || (3 === u && _ >= 0.5)) && (_ = 1 - _),
                            3 === u && (_ *= 2),
                            1 === p ? (_ *= _) : 2 === p ? (_ *= _ * _) : 3 === p ? (_ *= _ * _ * _) : 4 === p && (_ *= _ * _ * _ * _),
                            (this.ratio = 1 === u ? 1 - _ : 2 === u ? _ : 0.5 > t / h ? _ / 2 : 1 - _ / 2);
                    } else this.ratio = this._ease.getRatio(t / h);
                    if (this._time !== o || i) {
                        if (!this._initted) {
                            if ((this._init(), !this._initted || this._gc)) return;
                            this._time && !s ? (this.ratio = this._ease.getRatio(this._time / h)) : s && this._ease._calcEnd && (this.ratio = this._ease.getRatio(0 === this._time ? 0 : 1));
                        }
                        for (
                            this._active || (!this._paused && this._time !== o && t >= 0 && (this._active = !0)),
                                0 === o &&
                                    (this._startAt && (t >= 0 ? this._startAt.render(t, e, i) : r || (r = "_dummyGS")),
                                    this.vars.onStart && (0 !== this._time || 0 === h) && (e || this.vars.onStart.apply(this.vars.onStartScope || this, this.vars.onStartParams || v))),
                                n = this._firstPT;
                            n;

                        )
                            n.f ? n.t[n.p](n.c * this.ratio + n.s) : (n.t[n.p] = n.c * this.ratio + n.s), (n = n._next);
                        this._onUpdate && (0 > t && this._startAt && this._startTime && this._startAt.render(t, e, i), e || ((this._time !== o || s) && this._onUpdate.apply(this.vars.onUpdateScope || this, this.vars.onUpdateParams || v))),
                            r &&
                                (this._gc ||
                                    (0 > t && this._startAt && !this._onUpdate && this._startTime && this._startAt.render(t, e, i),
                                    s && (this._timeline.autoRemoveChildren && this._enabled(!1, !1), (this._active = !1)),
                                    !e && this.vars[r] && this.vars[r].apply(this.vars[r + "Scope"] || this, this.vars[r + "Params"] || v),
                                    0 === h && this._rawPrevTime === l && a !== l && (this._rawPrevTime = 0)));
                    }
                }),
                (r._kill = function (t, e) {
                    if (("all" === t && (t = null), null == t && (null == e || e === this.target))) return this._enabled(!1, !1);
                    e = "string" != typeof e ? e || this._targets || this.target : O.selector(e) || e;
                    var i, s, r, n, a, o, h, l;
                    if ((p(e) || D(e)) && "number" != typeof e[0]) for (i = e.length; --i > -1; ) this._kill(t, e[i]) && (o = !0);
                    else {
                        if (this._targets) {
                            for (i = this._targets.length; --i > -1; )
                                if (e === this._targets[i]) {
                                    (a = this._propLookup[i] || {}), (this._overwrittenProps = this._overwrittenProps || []), (s = this._overwrittenProps[i] = t ? this._overwrittenProps[i] || {} : "all");
                                    break;
                                }
                        } else {
                            if (e !== this.target) return !1;
                            (a = this._propLookup), (s = this._overwrittenProps = t ? this._overwrittenProps || {} : "all");
                        }
                        if (a) {
                            (h = t || a), (l = t !== s && "all" !== s && t !== a && ("object" != typeof t || !t._tempKill));
                            for (r in h)
                                (n = a[r]) &&
                                    (n.pg && n.t._kill(h) && (o = !0),
                                    (n.pg && 0 !== n.t._overwriteProps.length) || (n._prev ? (n._prev._next = n._next) : n === this._firstPT && (this._firstPT = n._next), n._next && (n._next._prev = n._prev), (n._next = n._prev = null)),
                                    delete a[r]),
                                    l && (s[r] = 1);
                            !this._firstPT && this._initted && this._enabled(!1, !1);
                        }
                    }
                    return o;
                }),
                (r.invalidate = function () {
                    return (
                        this._notifyPluginsOfEnabled && O._onPluginEvent("_onDisable", this),
                        (this._firstPT = null),
                        (this._overwrittenProps = null),
                        (this._onUpdate = null),
                        (this._startAt = null),
                        (this._initted = this._active = this._notifyPluginsOfEnabled = !1),
                        (this._propLookup = this._targets ? {} : []),
                        this
                    );
                }),
                (r._enabled = function (t, e) {
                    if ((a || n.wake(), t && this._gc)) {
                        var i,
                            s = this._targets;
                        if (s) for (i = s.length; --i > -1; ) this._siblings[i] = Y(s[i], this, !0);
                        else this._siblings = Y(this.target, this, !0);
                    }
                    return R.prototype._enabled.call(this, t, e), this._notifyPluginsOfEnabled && this._firstPT ? O._onPluginEvent(t ? "_onEnable" : "_onDisable", this) : !1;
                }),
                (O.to = function (t, e, i) {
                    return new O(t, e, i);
                }),
                (O.from = function (t, e, i) {
                    return (i.runBackwards = !0), (i.immediateRender = 0 != i.immediateRender), new O(t, e, i);
                }),
                (O.fromTo = function (t, e, i, s) {
                    return (s.startAt = i), (s.immediateRender = 0 != s.immediateRender && 0 != i.immediateRender), new O(t, e, s);
                }),
                (O.delayedCall = function (t, e, i, s, r) {
                    return new O(e, 0, { delay: t, onComplete: e, onCompleteParams: i, onCompleteScope: s, onReverseComplete: e, onReverseCompleteParams: i, onReverseCompleteScope: s, immediateRender: !1, useFrames: r, overwrite: 0 });
                }),
                (O.set = function (t, e) {
                    return new O(t, 0, e);
                }),
                (O.getTweensOf = function (t, e) {
                    if (null == t) return [];
                    t = "string" != typeof t ? t : O.selector(t) || t;
                    var i, s, r, n;
                    if ((p(t) || D(t)) && "number" != typeof t[0]) {
                        for (i = t.length, s = []; --i > -1; ) s = s.concat(O.getTweensOf(t[i], e));
                        for (i = s.length; --i > -1; ) for (n = s[i], r = i; --r > -1; ) n === s[r] && s.splice(i, 1);
                    } else for (s = Y(t).concat(), i = s.length; --i > -1; ) (s[i]._gc || (e && !s[i].isActive())) && s.splice(i, 1);
                    return s;
                }),
                (O.killTweensOf = O.killDelayedCallsTo = function (t, e, i) {
                    "object" == typeof e && ((i = e), (e = !1));
                    for (var s = O.getTweensOf(t, e), r = s.length; --r > -1; ) s[r]._kill(i, t);
                });
            var q = d(
                "plugins.TweenPlugin",
                function (t, e) {
                    (this._overwriteProps = (t || "").split(",")), (this._propName = this._overwriteProps[0]), (this._priority = e || 0), (this._super = q.prototype);
                },
                !0
            );
            if (
                ((r = q.prototype),
                (q.version = "1.10.1"),
                (q.API = 2),
                (r._firstPT = null),
                (r._addTween = function (t, e, i, s, r, n) {
                    var a, o;
                    return null != s && (a = "number" == typeof s || "=" !== s.charAt(1) ? Number(s) - i : parseInt(s.charAt(0) + "1", 10) * Number(s.substr(2)))
                        ? ((this._firstPT = o = { _next: this._firstPT, t: t, p: e, s: i, c: a, f: "function" == typeof t[e], n: r || e, r: n }), o._next && (o._next._prev = o), o)
                        : void 0;
                }),
                (r.setRatio = function (t) {
                    for (var e, i = this._firstPT, s = 1e-6; i; ) (e = i.c * t + i.s), i.r ? (e = 0 | (e + (e > 0 ? 0.5 : -0.5))) : s > e && e > -s && (e = 0), i.f ? i.t[i.p](e) : (i.t[i.p] = e), (i = i._next);
                }),
                (r._kill = function (t) {
                    var e,
                        i = this._overwriteProps,
                        s = this._firstPT;
                    if (null != t[this._propName]) this._overwriteProps = [];
                    else for (e = i.length; --e > -1; ) null != t[i[e]] && i.splice(e, 1);
                    for (; s; ) null != t[s.n] && (s._next && (s._next._prev = s._prev), s._prev ? ((s._prev._next = s._next), (s._prev = null)) : this._firstPT === s && (this._firstPT = s._next)), (s = s._next);
                    return !1;
                }),
                (r._roundProps = function (t, e) {
                    for (var i = this._firstPT; i; ) (t[this._propName] || (null != i.n && t[i.n.split(this._propName + "_").join("")])) && (i.r = e), (i = i._next);
                }),
                (O._onPluginEvent = function (t, e) {
                    var i,
                        s,
                        r,
                        n,
                        a,
                        o = e._firstPT;
                    if ("_onInitAllProps" === t) {
                        for (; o; ) {
                            for (a = o._next, s = r; s && s.pr > o.pr; ) s = s._next;
                            (o._prev = s ? s._prev : n) ? (o._prev._next = o) : (r = o), (o._next = s) ? (s._prev = o) : (n = o), (o = a);
                        }
                        o = e._firstPT = r;
                    }
                    for (; o; ) o.pg && "function" == typeof o.t[t] && o.t[t]() && (i = !0), (o = o._next);
                    return i;
                }),
                (q.activate = function (t) {
                    for (var e = t.length; --e > -1; ) t[e].API === q.API && (E[new t[e]()._propName] = t[e]);
                    return !0;
                }),
                (m.plugin = function (t) {
                    if (!(t && t.propName && t.init && t.API)) throw "illegal plugin definition.";
                    var e,
                        i = t.propName,
                        s = t.priority || 0,
                        r = t.overwriteProps,
                        n = { init: "_onInitTween", set: "setRatio", kill: "_kill", round: "_roundProps", initAll: "_onInitAllProps" },
                        a = d(
                            "plugins." + i.charAt(0).toUpperCase() + i.substr(1) + "Plugin",
                            function () {
                                q.call(this, i, s), (this._overwriteProps = r || []);
                            },
                            t.global === !0
                        ),
                        o = (a.prototype = new q(i));
                    (o.constructor = a), (a.API = t.API);
                    for (e in n) "function" == typeof t[e] && (o[n[e]] = t[e]);
                    return (a.version = t.version), q.activate([a]), a;
                }),
                (i = t._gsQueue))
            ) {
                for (s = 0; i.length > s; s++) i[s]();
                for (r in c) c[r].func || t.console.log("GSAP encountered missing dependency: com.greensock." + r);
            }
            a = !1;
        }
    })(window);
/* Modernizr 2.8.2 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-cssanimations-csstransforms-csstransforms3d-csstransitions-touch-webgl-shiv-cssclasses-prefixed-teststyles-testprop-testallprops-prefixes-domprefixes-load
 */
(window.Modernizr = (function (a, b, c) {
    function z(a) {
        j.cssText = a;
    }
    function A(a, b) {
        return z(m.join(a + ";") + (b || ""));
    }
    function B(a, b) {
        return typeof a === b;
    }
    function C(a, b) {
        return !!~("" + a).indexOf(b);
    }
    function D(a, b) {
        for (var d in a) {
            var e = a[d];
            if (!C(e, "-") && j[e] !== c) return b == "pfx" ? e : !0;
        }
        return !1;
    }
    function E(a, b, d) {
        for (var e in a) {
            var f = b[a[e]];
            if (f !== c) return d === !1 ? a[e] : B(f, "function") ? f.bind(d || b) : f;
        }
        return !1;
    }
    function F(a, b, c) {
        var d = a.charAt(0).toUpperCase() + a.slice(1),
            e = (a + " " + o.join(d + " ") + d).split(" ");
        return B(b, "string") || B(b, "undefined") ? D(e, b) : ((e = (a + " " + p.join(d + " ") + d).split(" ")), E(e, b, c));
    }
    var d = "2.8.2",
        e = {},
        f = !0,
        g = b.documentElement,
        h = "modernizr",
        i = b.createElement(h),
        j = i.style,
        k,
        l = {}.toString,
        m = " -webkit- -moz- -o- -ms- ".split(" "),
        n = "Webkit Moz O ms",
        o = n.split(" "),
        p = n.toLowerCase().split(" "),
        q = {},
        r = {},
        s = {},
        t = [],
        u = t.slice,
        v,
        w = function (a, c, d, e) {
            var f,
                i,
                j,
                k,
                l = b.createElement("div"),
                m = b.body,
                n = m || b.createElement("body");
            if (parseInt(d, 10)) while (d--) (j = b.createElement("div")), (j.id = e ? e[d] : h + (d + 1)), l.appendChild(j);
            return (
                (f = ["&#173;", '<style id="s', h, '">', a, "</style>"].join("")),
                (l.id = h),
                ((m ? l : n).innerHTML += f),
                n.appendChild(l),
                m || ((n.style.background = ""), (n.style.overflow = "hidden"), (k = g.style.overflow), (g.style.overflow = "hidden"), g.appendChild(n)),
                (i = c(l, a)),
                m ? l.parentNode.removeChild(l) : (n.parentNode.removeChild(n), (g.style.overflow = k)),
                !!i
            );
        },
        x = {}.hasOwnProperty,
        y;
    !B(x, "undefined") && !B(x.call, "undefined")
        ? (y = function (a, b) {
              return x.call(a, b);
          })
        : (y = function (a, b) {
              return b in a && B(a.constructor.prototype[b], "undefined");
          }),
        Function.prototype.bind ||
            (Function.prototype.bind = function (b) {
                var c = this;
                if (typeof c != "function") throw new TypeError();
                var d = u.call(arguments, 1),
                    e = function () {
                        if (this instanceof e) {
                            var a = function () {};
                            a.prototype = c.prototype;
                            var f = new a(),
                                g = c.apply(f, d.concat(u.call(arguments)));
                            return Object(g) === g ? g : f;
                        }
                        return c.apply(b, d.concat(u.call(arguments)));
                    };
                return e;
            }),
        (q.webgl = function () {
            return !!a.WebGLRenderingContext;
        }),
        (q.touch = function () {
            var c;
            return (
                "ontouchstart" in a || (a.DocumentTouch && b instanceof DocumentTouch)
                    ? (c = !0)
                    : w(["@media (", m.join("touch-enabled),("), h, ")", "{#modernizr{top:9px;position:absolute}}"].join(""), function (a) {
                          c = a.offsetTop === 9;
                      }),
                c
            );
        }),
        (q.cssanimations = function () {
            return F("animationName");
        }),
        (q.csstransforms = function () {
            return !!F("transform");
        }),
        (q.csstransforms3d = function () {
            var a = !!F("perspective");
            return (
                a &&
                    "webkitPerspective" in g.style &&
                    w("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}", function (b, c) {
                        a = b.offsetLeft === 9 && b.offsetHeight === 3;
                    }),
                a
            );
        }),
        (q.csstransitions = function () {
            return F("transition");
        });
    for (var G in q) y(q, G) && ((v = G.toLowerCase()), (e[v] = q[G]()), t.push((e[v] ? "" : "no-") + v));
    return (
        (e.addTest = function (a, b) {
            if (typeof a == "object") for (var d in a) y(a, d) && e.addTest(d, a[d]);
            else {
                a = a.toLowerCase();
                if (e[a] !== c) return e;
                (b = typeof b == "function" ? b() : b), typeof f != "undefined" && f && (g.className += " " + (b ? "" : "no-") + a), (e[a] = b);
            }
            return e;
        }),
        z(""),
        (i = k = null),
        (function (a, b) {
            function l(a, b) {
                var c = a.createElement("p"),
                    d = a.getElementsByTagName("head")[0] || a.documentElement;
                return (c.innerHTML = "x<style>" + b + "</style>"), d.insertBefore(c.lastChild, d.firstChild);
            }
            function m() {
                var a = s.elements;
                return typeof a == "string" ? a.split(" ") : a;
            }
            function n(a) {
                var b = j[a[h]];
                return b || ((b = {}), i++, (a[h] = i), (j[i] = b)), b;
            }
            function o(a, c, d) {
                c || (c = b);
                if (k) return c.createElement(a);
                d || (d = n(c));
                var g;
                return d.cache[a] ? (g = d.cache[a].cloneNode()) : f.test(a) ? (g = (d.cache[a] = d.createElem(a)).cloneNode()) : (g = d.createElem(a)), g.canHaveChildren && !e.test(a) && !g.tagUrn ? d.frag.appendChild(g) : g;
            }
            function p(a, c) {
                a || (a = b);
                if (k) return a.createDocumentFragment();
                c = c || n(a);
                var d = c.frag.cloneNode(),
                    e = 0,
                    f = m(),
                    g = f.length;
                for (; e < g; e++) d.createElement(f[e]);
                return d;
            }
            function q(a, b) {
                b.cache || ((b.cache = {}), (b.createElem = a.createElement), (b.createFrag = a.createDocumentFragment), (b.frag = b.createFrag())),
                    (a.createElement = function (c) {
                        return s.shivMethods ? o(c, a, b) : b.createElem(c);
                    }),
                    (a.createDocumentFragment = Function(
                        "h,f",
                        "return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&(" +
                            m()
                                .join()
                                .replace(/[\w\-]+/g, function (a) {
                                    return b.createElem(a), b.frag.createElement(a), 'c("' + a + '")';
                                }) +
                            ");return n}"
                    )(s, b.frag));
            }
            function r(a) {
                a || (a = b);
                var c = n(a);
                return (
                    s.shivCSS && !g && !c.hasCSS && (c.hasCSS = !!l(a, "article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")), k || q(a, c), a
                );
            }
            var c = "3.7.0",
                d = a.html5 || {},
                e = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,
                f = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,
                g,
                h = "_html5shiv",
                i = 0,
                j = {},
                k;
            (function () {
                try {
                    var a = b.createElement("a");
                    (a.innerHTML = "<xyz></xyz>"),
                        (g = "hidden" in a),
                        (k =
                            a.childNodes.length == 1 ||
                            (function () {
                                b.createElement("a");
                                var a = b.createDocumentFragment();
                                return typeof a.cloneNode == "undefined" || typeof a.createDocumentFragment == "undefined" || typeof a.createElement == "undefined";
                            })());
                } catch (c) {
                    (g = !0), (k = !0);
                }
            })();
            var s = {
                elements: d.elements || "abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",
                version: c,
                shivCSS: d.shivCSS !== !1,
                supportsUnknownElements: k,
                shivMethods: d.shivMethods !== !1,
                type: "default",
                shivDocument: r,
                createElement: o,
                createDocumentFragment: p,
            };
            (a.html5 = s), r(b);
        })(this, b),
        (e._version = d),
        (e._prefixes = m),
        (e._domPrefixes = p),
        (e._cssomPrefixes = o),
        (e.testProp = function (a) {
            return D([a]);
        }),
        (e.testAllProps = F),
        (e.testStyles = w),
        (e.prefixed = function (a, b, c) {
            return b ? F(a, b, c) : F(a, "pfx");
        }),
        (g.className = g.className.replace(/(^|\s)no-js(\s|$)/, "$1$2") + (f ? " js " + t.join(" ") : "")),
        e
    );
})(this, this.document)),
    (function (a, b, c) {
        function d(a) {
            return "[object Function]" == o.call(a);
        }
        function e(a) {
            return "string" == typeof a;
        }
        function f() {}
        function g(a) {
            return !a || "loaded" == a || "complete" == a || "uninitialized" == a;
        }
        function h() {
            var a = p.shift();
            (q = 1),
                a
                    ? a.t
                        ? m(function () {
                              ("c" == a.t ? B.injectCss : B.injectJs)(a.s, 0, a.a, a.x, a.e, 1);
                          }, 0)
                        : (a(), h())
                    : (q = 0);
        }
        function i(a, c, d, e, f, i, j) {
            function k(b) {
                if (!o && g(l.readyState) && ((u.r = o = 1), !q && h(), (l.onload = l.onreadystatechange = null), b)) {
                    "img" != a &&
                        m(function () {
                            t.removeChild(l);
                        }, 50);
                    for (var d in y[c]) y[c].hasOwnProperty(d) && y[c][d].onload();
                }
            }
            var j = j || B.errorTimeout,
                l = b.createElement(a),
                o = 0,
                r = 0,
                u = { t: d, s: c, e: f, a: i, x: j };
            1 === y[c] && ((r = 1), (y[c] = [])),
                "object" == a ? (l.data = c) : ((l.src = c), (l.type = a)),
                (l.width = l.height = "0"),
                (l.onerror = l.onload = l.onreadystatechange = function () {
                    k.call(this, r);
                }),
                p.splice(e, 0, u),
                "img" != a && (r || 2 === y[c] ? (t.insertBefore(l, s ? null : n), m(k, j)) : y[c].push(l));
        }
        function j(a, b, c, d, f) {
            return (q = 0), (b = b || "j"), e(a) ? i("c" == b ? v : u, a, b, this.i++, c, d, f) : (p.splice(this.i++, 0, a), 1 == p.length && h()), this;
        }
        function k() {
            var a = B;
            return (a.loader = { load: j, i: 0 }), a;
        }
        var l = b.documentElement,
            m = a.setTimeout,
            n = b.getElementsByTagName("script")[0],
            o = {}.toString,
            p = [],
            q = 0,
            r = "MozAppearance" in l.style,
            s = r && !!b.createRange().compareNode,
            t = s ? l : n.parentNode,
            l = a.opera && "[object Opera]" == o.call(a.opera),
            l = !!b.attachEvent && !l,
            u = r ? "object" : l ? "script" : "img",
            v = l ? "script" : u,
            w =
                Array.isArray ||
                function (a) {
                    return "[object Array]" == o.call(a);
                },
            x = [],
            y = {},
            z = {
                timeout: function (a, b) {
                    return b.length && (a.timeout = b[0]), a;
                },
            },
            A,
            B;
        (B = function (a) {
            function b(a) {
                var a = a.split("!"),
                    b = x.length,
                    c = a.pop(),
                    d = a.length,
                    c = { url: c, origUrl: c, prefixes: a },
                    e,
                    f,
                    g;
                for (f = 0; f < d; f++) (g = a[f].split("=")), (e = z[g.shift()]) && (c = e(c, g));
                for (f = 0; f < b; f++) c = x[f](c);
                return c;
            }
            function g(a, e, f, g, h) {
                var i = b(a),
                    j = i.autoCallback;
                i.url.split(".").pop().split("?").shift(),
                    i.bypass ||
                        (e && (e = d(e) ? e : e[a] || e[g] || e[a.split("/").pop().split("?")[0]]),
                        i.instead
                            ? i.instead(a, e, f, g, h)
                            : (y[i.url] ? (i.noexec = !0) : (y[i.url] = 1),
                              f.load(i.url, i.forceCSS || (!i.forceJS && "css" == i.url.split(".").pop().split("?").shift()) ? "c" : c, i.noexec, i.attrs, i.timeout),
                              (d(e) || d(j)) &&
                                  f.load(function () {
                                      k(), e && e(i.origUrl, h, g), j && j(i.origUrl, h, g), (y[i.url] = 2);
                                  })));
            }
            function h(a, b) {
                function c(a, c) {
                    if (a) {
                        if (e(a))
                            c ||
                                (j = function () {
                                    var a = [].slice.call(arguments);
                                    k.apply(this, a), l();
                                }),
                                g(a, j, b, 0, h);
                        else if (Object(a) === a)
                            for (n in ((m = (function () {
                                var b = 0,
                                    c;
                                for (c in a) a.hasOwnProperty(c) && b++;
                                return b;
                            })()),
                            a))
                                a.hasOwnProperty(n) &&
                                    (!c &&
                                        !--m &&
                                        (d(j)
                                            ? (j = function () {
                                                  var a = [].slice.call(arguments);
                                                  k.apply(this, a), l();
                                              })
                                            : (j[n] = (function (a) {
                                                  return function () {
                                                      var b = [].slice.call(arguments);
                                                      a && a.apply(this, b), l();
                                                  };
                                              })(k[n]))),
                                    g(a[n], j, b, n, h));
                    } else !c && l();
                }
                var h = !!a.test,
                    i = a.load || a.both,
                    j = a.callback || f,
                    k = j,
                    l = a.complete || f,
                    m,
                    n;
                c(h ? a.yep : a.nope, !!i), i && c(i);
            }
            var i,
                j,
                l = this.yepnope.loader;
            if (e(a)) g(a, 0, l, 0);
            else if (w(a)) for (i = 0; i < a.length; i++) (j = a[i]), e(j) ? g(j, 0, l, 0) : w(j) ? B(j) : Object(j) === j && h(j, l);
            else Object(a) === a && h(a, l);
        }),
            (B.addPrefix = function (a, b) {
                z[a] = b;
            }),
            (B.addFilter = function (a) {
                x.push(a);
            }),
            (B.errorTimeout = 1e4),
            null == b.readyState &&
                b.addEventListener &&
                ((b.readyState = "loading"),
                b.addEventListener(
                    "DOMContentLoaded",
                    (A = function () {
                        b.removeEventListener("DOMContentLoaded", A, 0), (b.readyState = "complete");
                    }),
                    0
                )),
            (a.yepnope = k()),
            (a.yepnope.executeStack = h),
            (a.yepnope.injectJs = function (a, c, d, e, i, j) {
                var k = b.createElement("script"),
                    l,
                    o,
                    e = e || B.errorTimeout;
                k.src = a;
                for (o in d) k.setAttribute(o, d[o]);
                (c = j ? h : c || f),
                    (k.onreadystatechange = k.onload = function () {
                        !l && g(k.readyState) && ((l = 1), c(), (k.onload = k.onreadystatechange = null));
                    }),
                    m(function () {
                        l || ((l = 1), c(1));
                    }, e),
                    i ? k.onload() : n.parentNode.insertBefore(k, n);
            }),
            (a.yepnope.injectCss = function (a, c, d, e, g, i) {
                var e = b.createElement("link"),
                    j,
                    c = i ? h : c || f;
                (e.href = a), (e.rel = "stylesheet"), (e.type = "text/css");
                for (j in d) e.setAttribute(j, d[j]);
                g || (n.parentNode.insertBefore(e, n), m(c, 0));
            });
    })(this, document),
    (Modernizr.load = function () {
        yepnope.apply(window, [].slice.call(arguments, 0));
    });
//Set namesapce
var H = H || {};

//Helper variables
H.vendor = /webkit/i.test(navigator.appVersion) ? "webkit" : /firefox/i.test(navigator.userAgent) ? "Moz" : "opera" in window ? "O" : navigator.userAgent.indexOf("Trident") > -1 ? "ms" : "";
H.ease = {};
H.ease["expoOut"] = ["cubic-bezier(0.230, 1.000, 0.320, 1.000)", Expo.easeOut];
H.ease["expoInOut"] = ["cubic-bezier(0.860, 0.000, 0.070, 1.000)", Expo.easeInOut];
H.has3d = Modernizr.csstransforms3d;
H.hasTransitions = Modernizr.csstransitions;
H.isIE9 = false; //Transistion delay is not supported in IE9 blah !
H.isTouch = Modernizr.touch;

var transEndEventNames = {
    WebkitTransition: "webkitTransitionEnd",
    MozTransition: "transitionend",
    transition: "transitionend",
};
H.transEndEventName = transEndEventNames[Modernizr.prefixed("transition")];

H.soundExt = H.vendor == "Moz" ? ".ogg" : ".mp3";
H.videoExt = H.vendor == "Moz" ? ".ogv" : ".mp4";

//Animate element, if css transistions are not available it default to TweenLite library
H.animate = function (elem, time, properties, ease, delay, onComplete) {
    var del = 0;
    if (delay) {
        del = delay;
    }

    setTimeout(function () {
        if (H.hasTransitions) {
            var hasTrans = false;
            var propString = "";
            for (i in properties) {
                if ((i == "pos" || i == "scale" || i == "rotate") && !hasTrans) {
                    if (propString != "") {
                        propString += ",-" + H.vendor.toLowerCase() + "-transform ";
                    } else {
                        propString += "-" + H.vendor.toLowerCase() + "-transform ";
                    }
                    hasTrans = true;
                } else {
                    if (propString != "") {
                        propString += "," + i;
                    } else {
                        propString += "" + i;
                    }
                }
            }

            elem.style[H.vendor + "TransitionProperty"] = propString;
            elem.style[H.vendor + "TransitionDuration"] = time * 1000 + "ms";

            if (ease && !H.isIE9) {
                elem.style[H.vendor + "TransitionTimingFunction"] = ease[0];
            }

            hasTrans = false;
            var transString = "";
            for (i in properties) {
                if (i == "pos") {
                    if (H.has3d) {
                        transString += "translate3d(" + properties[i].left + "," + properties[i].top + ",0px) ";
                    } else {
                        transString += "translate(" + properties[i].left + "," + properties[i].top + ") ";
                    }
                    hasTrans = true;
                } else if (i == "scale") {
                    transString += "scale(" + properties[i] + ") ";
                    hasTrans = true;
                } else if (i == "rotate") {
                    transString += "rotate(" + properties[i] + "deg) ";
                    hasTrans = true;
                } else {
                    elem.style[i] = properties[i];
                }
            }

            if (hasTrans) {
                elem.style[H.vendor + "Transform"] = transString;
            }

            if (onComplete) {
                var complete = function () {
                    elem.removeEventListener(H.transEndEventName, complete);
                    onComplete();
                };
                elem.addEventListener(H.transEndEventName, complete, false);
            }
        } else {
            var cssProp = {};
            var TLease = Sine.easeOut;

            if (ease) {
                TLease = ease[1];
            }
            for (i in properties) {
                if (i == "pos") {
                    cssProp["marginLeft"] = properties[i].left;
                    cssProp["marginTop"] = properties[i].top;
                } else {
                    cssProp[i] = properties[i];
                }
            }
            TweenMax.to(elem, time, { css: cssProp, ease: TLease, onComplete: onComplete });
        }
    }, del);
};

H.clearCssTransition = function (el) {
    el.style[H.vendor + "Transition"] = "";
    if (!H.isIE9) {
        el.style[H.vendor + "TransitionDelay"] = "";
    }
};

// cross-browser event binding
H.bind = function (el, eventName, eventHandler) {
    if (el.addEventListener) {
        el.addEventListener(eventName, eventHandler, false);
    } else if (el.attachEvent) {
        el.attachEvent("on" + eventName, eventHandler);
    }
};

// cross-browser event un-binding
H.unbind = function (el, eventName, eventHandler) {
    if (el.removeEventListener) {
        el.removeEventListener(eventName, eventHandler, false);
    } else if (el.detachEvent) {
        el.detachEvent("on" + eventName, eventHandler);
    }
};

//Create an element of type 'type' and style it
H.createEl = function (type, style, parent, elClass) {
    var el = document.createElement(type);
    for (i in style) {
        if (i == "transform") {
            el.style[H.vendor + "Transform"] = style[i];
        } else {
            el.style[i] = style[i];
        }
    }
    //el.style = style;
    if (elClass) {
        el.setAttribute("class", elClass);
    }
    if (parent) {
        parent.appendChild(el);
    }
    return el;
};

H.createImg = function (src, style, parent, loader, elClass) {
    if (loader == null) {
        var el = new Image();
        el.src = src;
    } else {
        el = loader.addImage(src);
    }
    for (i in style) {
        if (i == "transform") {
            el.style[H.vendor + "Transform"] = style[i];
        } else {
            el.style[i] = style[i];
        }
    }

    if (elClass) {
        el.setAttribute("class", elClass);
    }
    if (parent) {
        parent.appendChild(el);
    }
    return el;
};

H.createVideo = function (src, style, parent, loader, elClass) {
    if (loader == null) {
        var el = document.createElement("video");
        el.src = src;
    } else {
        el = loader.addVideo(src);
    }
    for (i in style) {
        if (i == "transform") {
            el.style[H.vendor + "Transform"] = style[i];
        } else {
            el.style[i] = style[i];
        }
    }

    if (elClass) {
        el.setAttribute("class", elClass);
    }
    if (parent) {
        parent.appendChild(el);
    }
    return el;
};

H.createLink = function (el, url, target) {
    var anchor = document.createElement("a");
    anchor.setAttribute("href", url);
    if (target) {
        anchor.setAttribute("target", target);
    }

    var elParent = $(el).parent()[0];
    elParent.removeChild(el);
    elParent.appendChild(anchor);
    anchor.appendChild(el);

    return anchor;
};

H.createScroll = function (el) {
    var ret;
    if (H.isTouch) {
        var rand = Math.floor(Math.random() * 1000);
        $(el).wrapInner('<div id="' + rand + 'viewport" />');
        $("#" + rand + "viewport").css({
            height: $(el).height(),
            overflow: "hidden",
        });
        ret = new iScroll($("#" + rand + "viewport")[0], {
            vScrollbar: false,
            bounce: true,
        });
    } else {
        ret = $(el).scrollpanel().data("scrollpanel");
    }
    return ret;
};

H.updateScroll = function (scroll) {
    if (scroll.refresh) {
        scroll.refresh();
    } else {
        scroll.update();
    }
};

//Create a div with clear:both as style
H.clear = function () {
    var clear = document.createElement("div");
    clear.style.clear = "both";
    return clear;
};

H.resizeToContainer = function (image, container, imageRatio, centerH, centerV, scale) {
    var imgWidth, imgHeight;
    var cWidth = $(container).width();
    var cHeight = $(container).height();
    var cRatio = cWidth / cHeight;
    var cScale = 1;
    if (scale) {
        cScale = scale;
    }

    if (imageRatio > cRatio) {
        imgHeight = cHeight * cScale;
        imgWidth = imgHeight * imageRatio;
    } else {
        imgWidth = cWidth * cScale;
        imgHeight = imgWidth / imageRatio;
    }

    $(image).css("width", imgWidth + "px");
    $(image).css("height", imgHeight + "px");

    if (centerH == true || centerH == null) {
        $(image).css("left", (cWidth - imgWidth) / 2 + "px");
    }
    if (centerV == true || centerV == null) {
        $(image).css("top", (cHeight - imgHeight) / 2 + "px");
    }
};

H.distance = function (point1, point2) {
    var distancex = point1.x - point2.x;
    var distancey = point1.y - point2.y;
    return Math.sqrt(distancex * distancex + distancey * distancey);
};

/* -- UTILS FUNCTIONS -- */

//detect phone and tablet devices and redirect accordingly
var isMobile = {
    AndroidPhone: function () {
        if (navigator.userAgent.match(/Android/i) && navigator.userAgent.match(/Mobile/i)) {
            return true;
        } else {
            return false;
        }
    },
    AndroidTablet: function () {
        if (navigator.userAgent.match(/Android/i) && !navigator.userAgent.match(/Mobile/i)) {
            return true;
        } else {
            return false;
        }
    },
    BlackBerry: function () {
        return navigator.userAgent.match(/BlackBerry/i) ? true : false;
    },
    iPad: function () {
        return navigator.userAgent.match(/iPad/i) ? true : false;
    },
    iPhone: function () {
        return navigator.userAgent.match(/iPhone|iPod/i) ? true : false;
    },
    Windows: function () {
        return navigator.userAgent.match(/IEMobile/i) ? true : false;
    },
    any: function () {
        return isMobile.AndroidPhone() || isMobile.AndroidTablet() || isMobile.BlackBerry() || isMobile.iPad() || isMobile.Windows();
    },
};

if (isMobile.iPhone() || isMobile.BlackBerry() || isMobile.AndroidPhone() || isMobile.Windows()) {
    document.location = document.location.href.replace(document.location.hash, "") + "mobile/" + document.location.hash;
} else if (isMobile.any()) {
    //document.location = document.location+"ipad";
}

//Sets easing for the royal slider library
try {
    if (jQuery.rsCSS3Easing) {
        jQuery.rsCSS3Easing.easeOutExpo = "cubic-bezier(0.165, 0.840, 0.440, 1.000)";
        jQuery.rsCSS3Easing.easeInOutExpo = "cubic-bezier(0.770, 0.000, 0.175, 1.000)";
    }
} catch (e) {}

//Bunch of string variable for parsing url, twitter username and twitter hashtags
String.prototype.parseURL = function () {
    return this.replace(/[A-Za-z]+:\/\/[A-Za-z0-9-_]+\.[A-Za-z0-9-_:%&~\?\/.=]+/g, function (url) {
        return "<a href='" + url + "' target='_blank'>" + url + "</a>";
    });
};

String.prototype.parseUsername = function () {
    return this.replace(/[@]+[A-Za-z0-9-_]+/g, function (u) {
        var username = u.replace("@", "");
        return "<a href='http://twitter.com/" + username + "' target='_blank'>" + u + "</a>";
    });
};

String.prototype.parseTags = function () {
    return this.replace(/[#]+[A-Za-z0-9-_]+/g, function (t) {
        var tag = t.replace("#", "%23");
        return "<a href='http://twitter.com/search?q=" + tag + "&src=hash' target='_blank'>" + t + "</a>";
    });
};

/*global define: true */

(function (global) {
    /*
     * PixelLab Resource Loader
     * Loads resources while providing progress updates.
     */
    function PxLoader(settings) {
        // merge settings with defaults
        settings = settings || {};
        this.settings = settings;

        // how frequently we poll resources for progress
        if (settings.statusInterval == null) {
            settings.statusInterval = 5000; // every 5 seconds by default
        }

        // delay before logging since last progress change
        if (settings.loggingDelay == null) {
            settings.loggingDelay = 5 * 1000; // log stragglers after 20 secs
        }

        // stop waiting if no progress has been made in the moving time window
        if (settings.noProgressTimeout == null) {
            settings.noProgressTimeout = 5000; // do not stop waiting by default
        }

        var entries = [],
            // holds resources to be loaded with their status
            progressListeners = [],
            timeStarted,
            progressChanged = Date.now();

        /**
         * The status of a resource
         * @enum {number}
         */
        var ResourceState = {
            QUEUED: 0,
            WAITING: 1,
            LOADED: 2,
            ERROR: 3,
            TIMEOUT: 4,
        };

        // places non-array values into an array.
        var ensureArray = function (val) {
            if (val == null) {
                return [];
            }

            if (Array.isArray(val)) {
                return val;
            }

            return [val];
        };

        // add an entry to the list of resources to be loaded
        this.add = function (resource) {
            // TODO: would be better to create a base class for all resources and
            // initialize the PxLoaderTags there rather than overwritting tags here
            resource.tags = new PxLoaderTags(resource.tags);

            // ensure priority is set
            if (resource.priority == null) {
                resource.priority = Infinity;
            }

            entries.push({
                resource: resource,
                status: ResourceState.QUEUED,
            });
        };

        this.addProgressListener = function (callback, tags) {
            progressListeners.push({
                callback: callback,
                tags: new PxLoaderTags(tags),
            });
        };

        this.addCompletionListener = function (callback, tags) {
            progressListeners.push({
                tags: new PxLoaderTags(tags),
                callback: function (e) {
                    if (e.completedCount === e.totalCount) {
                        callback(e);
                    }
                },
            });
        };

        // creates a comparison function for resources
        var getResourceSort = function (orderedTags) {
            // helper to get the top tag's order for a resource
            orderedTags = ensureArray(orderedTags);
            var getTagOrder = function (entry) {
                var resource = entry.resource,
                    bestIndex = Infinity;
                for (var i = 0; i < resource.tags.length; i++) {
                    for (var j = 0; j < Math.min(orderedTags.length, bestIndex); j++) {
                        if (resource.tags.all[i] === orderedTags[j] && j < bestIndex) {
                            bestIndex = j;
                            if (bestIndex === 0) {
                                break;
                            }
                        }
                        if (bestIndex === 0) {
                            break;
                        }
                    }
                }
                return bestIndex;
            };
            return function (a, b) {
                // check tag order first
                var aOrder = getTagOrder(a),
                    bOrder = getTagOrder(b);
                if (aOrder < bOrder) {
                    return -1;
                }
                if (aOrder > bOrder) {
                    return 1;
                }

                // now check priority
                if (a.priority < b.priority) {
                    return -1;
                }
                if (a.priority > b.priority) {
                    return 1;
                }
                return 0;
            };
        };

        this.start = function (orderedTags) {
            timeStarted = Date.now();

            // first order the resources
            var compareResources = getResourceSort(orderedTags);
            entries.sort(compareResources);

            // trigger requests for each resource
            for (var i = 0, len = entries.length; i < len; i++) {
                var entry = entries[i];
                entry.status = ResourceState.WAITING;
                entry.resource.start(this);
            }

            // do an initial status check soon since items may be loaded from the cache
            setTimeout(statusCheck, 100);
        };

        var statusCheck = function () {
            var checkAgain = false,
                noProgressTime = Date.now() - progressChanged,
                timedOut = noProgressTime >= settings.noProgressTimeout,
                shouldLog = noProgressTime >= settings.loggingDelay;

            for (var i = 0, len = entries.length; i < len; i++) {
                var entry = entries[i];
                if (entry.status !== ResourceState.WAITING) {
                    continue;
                }

                // see if the resource has loaded
                if (entry.resource.checkStatus) {
                    entry.resource.checkStatus();
                }

                // if still waiting, mark as timed out or make sure we check again
                if (entry.status === ResourceState.WAITING) {
                    if (timedOut) {
                        entry.resource.onTimeout();
                    } else {
                        checkAgain = true;
                    }
                }
            }

            // log any resources that are still pending
            if (shouldLog && checkAgain) {
                log();
            }

            if (checkAgain) {
                setTimeout(statusCheck, settings.statusInterval);
            }
        };

        this.isBusy = function () {
            for (var i = 0, len = entries.length; i < len; i++) {
                if (entries[i].status === ResourceState.QUEUED || entries[i].status === ResourceState.WAITING) {
                    return true;
                }
            }
            return false;
        };

        var onProgress = function (resource, statusType) {
            var entry = null,
                i,
                len,
                numResourceTags,
                listener,
                shouldCall;

            // find the entry for the resource
            for (i = 0, len = entries.length; i < len; i++) {
                if (entries[i].resource === resource) {
                    entry = entries[i];
                    break;
                }
            }

            // we have already updated the status of the resource
            if (entry == null || entry.status !== ResourceState.WAITING) {
                return;
            }
            entry.status = statusType;
            progressChanged = Date.now();

            numResourceTags = resource.tags.length;

            // fire callbacks for interested listeners
            for (i = 0, len = progressListeners.length; i < len; i++) {
                listener = progressListeners[i];
                if (listener.tags.length === 0) {
                    // no tags specified so always tell the listener
                    shouldCall = true;
                } else {
                    // listener only wants to hear about certain tags
                    shouldCall = resource.tags.intersects(listener.tags);
                }

                if (shouldCall) {
                    sendProgress(entry, listener);
                }
            }
        };

        this.onLoad = function (resource) {
            onProgress(resource, ResourceState.LOADED);
        };
        this.onError = function (resource) {
            onProgress(resource, ResourceState.ERROR);
        };
        this.onTimeout = function (resource) {
            onProgress(resource, ResourceState.TIMEOUT);
        };

        // sends a progress report to a listener
        var sendProgress = function (updatedEntry, listener) {
            // find stats for all the resources the caller is interested in
            var completed = 0,
                total = 0,
                i,
                len,
                entry,
                includeResource;
            for (i = 0, len = entries.length; i < len; i++) {
                entry = entries[i];
                includeResource = false;

                if (listener.tags.length === 0) {
                    // no tags specified so always tell the listener
                    includeResource = true;
                } else {
                    includeResource = entry.resource.tags.intersects(listener.tags);
                }

                if (includeResource) {
                    total++;
                    if (entry.status === ResourceState.LOADED || entry.status === ResourceState.ERROR || entry.status === ResourceState.TIMEOUT) {
                        completed++;
                    }
                }
            }

            listener.callback({
                // info about the resource that changed
                resource: updatedEntry.resource,

                // should we expose StatusType instead?
                loaded: updatedEntry.status === ResourceState.LOADED,
                error: updatedEntry.status === ResourceState.ERROR,
                timeout: updatedEntry.status === ResourceState.TIMEOUT,

                // updated stats for all resources
                completedCount: completed,
                totalCount: total,
            });
        };

        // prints the status of each resource to the console
        var log = (this.log = function (showAll) {
            if (!window.console) {
                return;
            }

            var elapsedSeconds = Math.round((Date.now() - timeStarted) / 1000);
            window.console.log("PxLoader elapsed: " + elapsedSeconds + " sec");

            for (var i = 0, len = entries.length; i < len; i++) {
                var entry = entries[i];
                if (!showAll && entry.status !== ResourceState.WAITING) {
                    continue;
                }

                var message = "PxLoader: #" + i + " " + entry.resource.getName();
                switch (entry.status) {
                    case ResourceState.QUEUED:
                        message += " (Not Started)";
                        break;
                    case ResourceState.WAITING:
                        message += " (Waiting)";
                        break;
                    case ResourceState.LOADED:
                        message += " (Loaded)";
                        break;
                    case ResourceState.ERROR:
                        message += " (Error)";
                        break;
                    case ResourceState.TIMEOUT:
                        message += " (Timeout)";
                        break;
                }

                if (entry.resource.tags.length > 0) {
                    message += " Tags: [" + entry.resource.tags.all.join(",") + "]";
                }

                window.console.log(message);
            }
        });
    }

    // Tag object to handle tag intersection; once created not meant to be changed
    // Performance rationale: http://jsperf.com/lists-indexof-vs-in-operator/3

    function PxLoaderTags(values) {
        this.all = [];
        this.first = null; // cache the first value
        this.length = 0;

        // holds values as keys for quick lookup
        this.lookup = {};

        if (values) {
            // first fill the array of all values
            if (Array.isArray(values)) {
                // copy the array of values, just to be safe
                this.all = values.slice(0);
            } else if (typeof values === "object") {
                for (var key in values) {
                    if (values.hasOwnProperty(key)) {
                        this.all.push(key);
                    }
                }
            } else {
                this.all.push(values);
            }

            // cache the length and the first value
            this.length = this.all.length;
            if (this.length > 0) {
                this.first = this.all[0];
            }

            // set values as object keys for quick lookup during intersection test
            for (var i = 0; i < this.length; i++) {
                this.lookup[this.all[i]] = true;
            }
        }
    }

    // compare this object with another; return true if they share at least one value
    PxLoaderTags.prototype.intersects = function (other) {
        // handle empty values case
        if (this.length === 0 || other.length === 0) {
            return false;
        }

        // only a single value to compare?
        if (this.length === 1 && other.length === 1) {
            return this.first === other.first;
        }

        // better to loop through the smaller object
        if (other.length < this.length) {
            return other.intersects(this);
        }

        // loop through every key to see if there are any matches
        for (var key in this.lookup) {
            if (other.lookup[key]) {
                return true;
            }
        }

        return false;
    };

    // AMD module support
    if (typeof define === "function" && define.amd) {
        define("PxLoader", [], function () {
            return PxLoader;
        });
    }

    // exports
    global.PxLoader = PxLoader;
})(this);

// Date.now() shim for older browsers
if (!Date.now) {
    Date.now = function now() {
        return new Date().getTime();
    };
}

// shims to ensure we have newer Array utility methods
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
if (!Array.isArray) {
    Array.isArray = function (arg) {
        return Object.prototype.toString.call(arg) === "[object Array]";
    };
}

/*global PxLoader: true, define: true */

// PxLoader plugin to load images
function PxLoaderImage(url, tags, priority) {
    var self = this,
        loader = null;

    this.img = new Image();
    this.tags = tags;
    this.priority = priority;

    var onReadyStateChange = function () {
        if (self.img.readyState === "complete") {
            removeEventHandlers();
            loader.onLoad(self);
        }
    };

    var onLoad = function () {
        removeEventHandlers();
        loader.onLoad(self);
    };

    var onError = function () {
        removeEventHandlers();
        loader.onError(self);
    };

    var removeEventHandlers = function () {
        self.unbind("load", onLoad);
        self.unbind("readystatechange", onReadyStateChange);
        self.unbind("error", onError);
    };

    this.start = function (pxLoader) {
        // we need the loader ref so we can notify upon completion
        loader = pxLoader;

        // NOTE: Must add event listeners before the src is set. We
        // also need to use the readystatechange because sometimes
        // load doesn't fire when an image is in the cache.
        self.bind("load", onLoad);
        self.bind("readystatechange", onReadyStateChange);
        self.bind("error", onError);

        self.img.src = url;
    };

    // called by PxLoader to check status of image (fallback in case
    // the event listeners are not triggered).
    this.checkStatus = function () {
        if (self.img.complete) {
            removeEventHandlers();
            loader.onLoad(self);
        }
    };

    // called by PxLoader when it is no longer waiting
    this.onTimeout = function () {
        removeEventHandlers();
        if (self.img.complete) {
            loader.onLoad(self);
        } else {
            loader.onTimeout(self);
        }
    };

    // returns a name for the resource that can be used in logging
    this.getName = function () {
        return url;
    };

    // cross-browser event binding
    this.bind = function (eventName, eventHandler) {
        if (self.img.addEventListener) {
            self.img.addEventListener(eventName, eventHandler, false);
        } else if (self.img.attachEvent) {
            self.img.attachEvent("on" + eventName, eventHandler);
        }
    };

    // cross-browser event un-binding
    this.unbind = function (eventName, eventHandler) {
        if (self.img.removeEventListener) {
            self.img.removeEventListener(eventName, eventHandler, false);
        } else if (self.img.detachEvent) {
            self.img.detachEvent("on" + eventName, eventHandler);
        }
    };
}

// add a convenience method to PxLoader for adding an image
PxLoader.prototype.addImage = function (url, tags, priority) {
    var imageLoader = new PxLoaderImage(url, tags, priority);
    this.add(imageLoader);

    // return the img element to the caller
    return imageLoader.img;
};

// AMD module support
if (typeof define === "function" && define.amd) {
    define("PxLoaderImage", [], function () {
        return PxLoaderImage;
    });
}

/*global PxLoader: true, define: true, Video: true */

// PxLoader plugin to load video elements
function PxLoaderVideo(url, tags, priority) {
    var self = this;
    var loader = null;

    this.readyEventName = "canplaythrough";

    try {
        this.vid = new Video();
    } catch (e) {
        this.vid = document.createElement("video");
    }

    this.tags = tags;
    this.priority = priority;

    var onReadyStateChange = function () {
        if (self.vid.readyState !== 4 && self.vid.readyState !== 2) {
            return;
        }

        removeEventHandlers();
        loader.onLoad(self);
    };

    var onLoad = function () {
        removeEventHandlers();
        loader.onLoad(self);
    };

    var onError = function () {
        removeEventHandlers();
        loader.onError(self);
    };

    var removeEventHandlers = function () {
        self.unbind("load", onLoad);
        self.unbind(self.readyEventName, onReadyStateChange);
        self.unbind("error", onError);
    };

    this.start = function (pxLoader) {
        // we need the loader ref so we can notify upon completion
        loader = pxLoader;

        // NOTE: Must add event listeners before the src is set. We
        // also need to use the readystatechange because sometimes
        // load doesn't fire when an video is in the cache.
        self.bind("load", onLoad);
        self.bind(self.readyEventName, onReadyStateChange);
        self.bind("error", onError);

        // sometimes the browser will intentionally stop downloading
        // the video. In that case we'll consider the video loaded
        self.bind("suspend", onLoad);

        self.vid.src = url;
        self.vid.load();
    };

    // called by PxLoader to check status of video (fallback in case
    // the event listeners are not triggered).
    this.checkStatus = function () {
        if (self.vid.readyState !== 4 && self.vid.readyState !== 2) {
            return;
        }

        removeEventHandlers();
        loader.onLoad(self);
    };

    // called by PxLoader when it is no longer waiting
    this.onTimeout = function () {
        removeEventHandlers();
        if (self.vid.readyState !== 4) {
            loader.onLoad(self);
        } else {
            loader.onTimeout(self);
        }
    };

    // returns a name for the resource that can be used in logging
    this.getName = function () {
        return url;
    };

    // cross-browser event binding
    this.bind = function (eventName, eventHandler) {
        if (self.vid.addEventListener) {
            self.vid.addEventListener(eventName, eventHandler, false);
        } else if (self.vid.attachEvent) {
            self.vid.attachEvent("on" + eventName, eventHandler);
        }
    };

    // cross-browser event un-binding
    this.unbind = function (eventName, eventHandler) {
        if (self.vid.removeEventListener) {
            self.vid.removeEventListener(eventName, eventHandler, false);
        } else if (self.vid.detachEvent) {
            self.vid.detachEvent("on" + eventName, eventHandler);
        }
    };
}

// add a convenience method to PxLoader for adding an image
PxLoader.prototype.addVideo = function (url, tags, priority) {
    var videoLoader = new PxLoaderVideo(url, tags, priority);
    this.add(videoLoader);

    // return the vid element to the caller
    return videoLoader.vid;
};

// AMD module support
if (typeof define === "function" && define.amd) {
    define("PxLoaderVideo", [], function () {
        return PxLoaderVideo;
    });
}

/*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 *
 * Open source under the BSD License.
 *
 * Copyright © 2008 George McGinley Smith
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * Neither the name of the author nor the names of contributors may be used to endorse
 * or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

// t: current time, b: begInnIng value, c: change In value, d: duration
jQuery.easing["jswing"] = jQuery.easing["swing"];

jQuery.extend(jQuery.easing, {
    def: "easeOutQuad",
    swing: function (x, t, b, c, d) {
        //alert(jQuery.easing.default);
        return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
    },
    easeInQuad: function (x, t, b, c, d) {
        return c * (t /= d) * t + b;
    },
    easeOutQuad: function (x, t, b, c, d) {
        return -c * (t /= d) * (t - 2) + b;
    },
    easeInOutQuad: function (x, t, b, c, d) {
        if ((t /= d / 2) < 1) return (c / 2) * t * t + b;
        return (-c / 2) * (--t * (t - 2) - 1) + b;
    },
    easeInCubic: function (x, t, b, c, d) {
        return c * (t /= d) * t * t + b;
    },
    easeOutCubic: function (x, t, b, c, d) {
        return c * ((t = t / d - 1) * t * t + 1) + b;
    },
    easeInOutCubic: function (x, t, b, c, d) {
        if ((t /= d / 2) < 1) return (c / 2) * t * t * t + b;
        return (c / 2) * ((t -= 2) * t * t + 2) + b;
    },
    easeInQuart: function (x, t, b, c, d) {
        return c * (t /= d) * t * t * t + b;
    },
    easeOutQuart: function (x, t, b, c, d) {
        return -c * ((t = t / d - 1) * t * t * t - 1) + b;
    },
    easeInOutQuart: function (x, t, b, c, d) {
        if ((t /= d / 2) < 1) return (c / 2) * t * t * t * t + b;
        return (-c / 2) * ((t -= 2) * t * t * t - 2) + b;
    },
    easeInQuint: function (x, t, b, c, d) {
        return c * (t /= d) * t * t * t * t + b;
    },
    easeOutQuint: function (x, t, b, c, d) {
        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
    },
    easeInOutQuint: function (x, t, b, c, d) {
        if ((t /= d / 2) < 1) return (c / 2) * t * t * t * t * t + b;
        return (c / 2) * ((t -= 2) * t * t * t * t + 2) + b;
    },
    easeInSine: function (x, t, b, c, d) {
        return -c * Math.cos((t / d) * (Math.PI / 2)) + c + b;
    },
    easeOutSine: function (x, t, b, c, d) {
        return c * Math.sin((t / d) * (Math.PI / 2)) + b;
    },
    easeInOutSine: function (x, t, b, c, d) {
        return (-c / 2) * (Math.cos((Math.PI * t) / d) - 1) + b;
    },
    easeInExpo: function (x, t, b, c, d) {
        return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
    },
    easeOutExpo: function (x, t, b, c, d) {
        return t == d ? b + c : c * (-Math.pow(2, (-10 * t) / d) + 1) + b;
    },
    easeInOutExpo: function (x, t, b, c, d) {
        if (t == 0) return b;
        if (t == d) return b + c;
        if ((t /= d / 2) < 1) return (c / 2) * Math.pow(2, 10 * (t - 1)) + b;
        return (c / 2) * (-Math.pow(2, -10 * --t) + 2) + b;
    },
    easeInCirc: function (x, t, b, c, d) {
        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
    },
    easeOutCirc: function (x, t, b, c, d) {
        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
    },
    easeInOutCirc: function (x, t, b, c, d) {
        if ((t /= d / 2) < 1) return (-c / 2) * (Math.sqrt(1 - t * t) - 1) + b;
        return (c / 2) * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
    },
    easeInElastic: function (x, t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (t == 0) return b;
        if ((t /= d) == 1) return b + c;
        if (!p) p = d * 0.3;
        if (a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        } else var s = (p / (2 * Math.PI)) * Math.asin(c / a);
        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t * d - s) * (2 * Math.PI)) / p)) + b;
    },
    easeOutElastic: function (x, t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (t == 0) return b;
        if ((t /= d) == 1) return b + c;
        if (!p) p = d * 0.3;
        if (a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        } else var s = (p / (2 * Math.PI)) * Math.asin(c / a);
        return a * Math.pow(2, -10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) + c + b;
    },
    easeInOutElastic: function (x, t, b, c, d) {
        var s = 1.70158;
        var p = 0;
        var a = c;
        if (t == 0) return b;
        if ((t /= d / 2) == 2) return b + c;
        if (!p) p = d * (0.3 * 1.5);
        if (a < Math.abs(c)) {
            a = c;
            var s = p / 4;
        } else var s = (p / (2 * Math.PI)) * Math.asin(c / a);
        if (t < 1) return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin(((t * d - s) * (2 * Math.PI)) / p)) + b;
        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) * 0.5 + c + b;
    },
    easeInBack: function (x, t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        return c * (t /= d) * t * ((s + 1) * t - s) + b;
    },
    easeOutBack: function (x, t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
    },
    easeInOutBack: function (x, t, b, c, d, s) {
        if (s == undefined) s = 1.70158;
        if ((t /= d / 2) < 1) return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
        return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
    },
    easeInBounce: function (x, t, b, c, d) {
        return c - jQuery.easing.easeOutBounce(x, d - t, 0, c, d) + b;
    },
    easeOutBounce: function (x, t, b, c, d) {
        if ((t /= d) < 1 / 2.75) {
            return c * (7.5625 * t * t) + b;
        } else if (t < 2 / 2.75) {
            return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
        } else if (t < 2.5 / 2.75) {
            return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
        } else {
            return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
        }
    },
    easeInOutBounce: function (x, t, b, c, d) {
        if (t < d / 2) return jQuery.easing.easeInBounce(x, t * 2, 0, c, d) * 0.5 + b;
        return jQuery.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
    },
});

/*
 *
 * TERMS OF USE - EASING EQUATIONS
 *
 * Open source under the BSD License.
 *
 * Copyright © 2001 Robert Penner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * Neither the name of the author nor the names of contributors may be used to endorse
 * or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*!
 * Packery PACKAGED v1.4.1
 * bin-packing layout library
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * http://packery.metafizzy.co
 * Copyright 2015 Metafizzy
 */

(function (t) {
    function e() {}
    function i(t) {
        function i(e) {
            e.prototype.option ||
                (e.prototype.option = function (e) {
                    t.isPlainObject(e) && (this.options = t.extend(!0, this.options, e));
                });
        }
        function o(e, i) {
            t.fn[e] = function (o) {
                if ("string" == typeof o) {
                    for (var s = n.call(arguments, 1), a = 0, h = this.length; h > a; a++) {
                        var p = this[a],
                            u = t.data(p, e);
                        if (u)
                            if (t.isFunction(u[o]) && "_" !== o.charAt(0)) {
                                var c = u[o].apply(u, s);
                                if (void 0 !== c) return c;
                            } else r("no such method '" + o + "' for " + e + " instance");
                        else r("cannot call methods on " + e + " prior to initialization; " + "attempted to call '" + o + "'");
                    }
                    return this;
                }
                return this.each(function () {
                    var n = t.data(this, e);
                    n ? (n.option(o), n._init()) : ((n = new i(this, o)), t.data(this, e, n));
                });
            };
        }
        if (t) {
            var r =
                "undefined" == typeof console
                    ? e
                    : function (t) {
                          console.error(t);
                      };
            return (
                (t.bridget = function (t, e) {
                    i(e), o(t, e);
                }),
                t.bridget
            );
        }
    }
    var n = Array.prototype.slice;
    "function" == typeof define && define.amd ? define("jquery-bridget/jquery.bridget", ["jquery"], i) : "object" == typeof exports ? i(require("jquery")) : i(t.jQuery);
})(window),
    (function (t) {
        function e(t) {
            return RegExp("(^|\\s+)" + t + "(\\s+|$)");
        }
        function i(t, e) {
            var i = n(t, e) ? r : o;
            i(t, e);
        }
        var n, o, r;
        "classList" in document.documentElement
            ? ((n = function (t, e) {
                  return t.classList.contains(e);
              }),
              (o = function (t, e) {
                  t.classList.add(e);
              }),
              (r = function (t, e) {
                  t.classList.remove(e);
              }))
            : ((n = function (t, i) {
                  return e(i).test(t.className);
              }),
              (o = function (t, e) {
                  n(t, e) || (t.className = t.className + " " + e);
              }),
              (r = function (t, i) {
                  t.className = t.className.replace(e(i), " ");
              }));
        var s = { hasClass: n, addClass: o, removeClass: r, toggleClass: i, has: n, add: o, remove: r, toggle: i };
        "function" == typeof define && define.amd ? define("classie/classie", s) : "object" == typeof exports ? (module.exports = s) : (t.classie = s);
    })(window),
    (function (t) {
        function e(t) {
            if (t) {
                if ("string" == typeof n[t]) return t;
                t = t.charAt(0).toUpperCase() + t.slice(1);
                for (var e, o = 0, r = i.length; r > o; o++) if (((e = i[o] + t), "string" == typeof n[e])) return e;
            }
        }
        var i = "Webkit Moz ms Ms O".split(" "),
            n = document.documentElement.style;
        "function" == typeof define && define.amd
            ? define("get-style-property/get-style-property", [], function () {
                  return e;
              })
            : "object" == typeof exports
            ? (module.exports = e)
            : (t.getStyleProperty = e);
    })(window),
    (function (t) {
        function e(t) {
            var e = parseFloat(t),
                i = -1 === t.indexOf("%") && !isNaN(e);
            return i && e;
        }
        function i() {}
        function n() {
            for (var t = { width: 0, height: 0, innerWidth: 0, innerHeight: 0, outerWidth: 0, outerHeight: 0 }, e = 0, i = s.length; i > e; e++) {
                var n = s[e];
                t[n] = 0;
            }
            return t;
        }
        function o(i) {
            function o() {
                if (!d) {
                    d = !0;
                    var n = t.getComputedStyle;
                    if (
                        ((p = (function () {
                            var t = n
                                ? function (t) {
                                      return n(t, null);
                                  }
                                : function (t) {
                                      return t.currentStyle;
                                  };
                            return function (e) {
                                var i = t(e);
                                return i || r("Style returned " + i + ". Are you running this code in a hidden iframe on Firefox? " + "See http://bit.ly/getsizebug1"), i;
                            };
                        })()),
                        (u = i("boxSizing")))
                    ) {
                        var o = document.createElement("div");
                        (o.style.width = "200px"), (o.style.padding = "1px 2px 3px 4px"), (o.style.borderStyle = "solid"), (o.style.borderWidth = "1px 2px 3px 4px"), (o.style[u] = "border-box");
                        var s = document.body || document.documentElement;
                        s.appendChild(o);
                        var a = p(o);
                        (c = 200 === e(a.width)), s.removeChild(o);
                    }
                }
            }
            function a(t) {
                if ((o(), "string" == typeof t && (t = document.querySelector(t)), t && "object" == typeof t && t.nodeType)) {
                    var i = p(t);
                    if ("none" === i.display) return n();
                    var r = {};
                    (r.width = t.offsetWidth), (r.height = t.offsetHeight);
                    for (var a = (r.isBorderBox = !(!u || !i[u] || "border-box" !== i[u])), d = 0, l = s.length; l > d; d++) {
                        var f = s[d],
                            y = i[f];
                        y = h(t, y);
                        var m = parseFloat(y);
                        r[f] = isNaN(m) ? 0 : m;
                    }
                    var g = r.paddingLeft + r.paddingRight,
                        v = r.paddingTop + r.paddingBottom,
                        x = r.marginLeft + r.marginRight,
                        E = r.marginTop + r.marginBottom,
                        b = r.borderLeftWidth + r.borderRightWidth,
                        w = r.borderTopWidth + r.borderBottomWidth,
                        _ = a && c,
                        T = e(i.width);
                    T !== !1 && (r.width = T + (_ ? 0 : g + b));
                    var z = e(i.height);
                    return z !== !1 && (r.height = z + (_ ? 0 : v + w)), (r.innerWidth = r.width - (g + b)), (r.innerHeight = r.height - (v + w)), (r.outerWidth = r.width + x), (r.outerHeight = r.height + E), r;
                }
            }
            function h(e, i) {
                if (t.getComputedStyle || -1 === i.indexOf("%")) return i;
                var n = e.style,
                    o = n.left,
                    r = e.runtimeStyle,
                    s = r && r.left;
                return s && (r.left = e.currentStyle.left), (n.left = i), (i = n.pixelLeft), (n.left = o), s && (r.left = s), i;
            }
            var p,
                u,
                c,
                d = !1;
            return a;
        }
        var r =
                "undefined" == typeof console
                    ? i
                    : function (t) {
                          console.error(t);
                      },
            s = ["paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"];
        "function" == typeof define && define.amd
            ? define("get-size/get-size", ["get-style-property/get-style-property"], o)
            : "object" == typeof exports
            ? (module.exports = o(require("desandro-get-style-property")))
            : (t.getSize = o(t.getStyleProperty));
    })(window),
    (function (t) {
        function e(e) {
            var i = t.event;
            return (i.target = i.target || i.srcElement || e), i;
        }
        var i = document.documentElement,
            n = function () {};
        i.addEventListener
            ? (n = function (t, e, i) {
                  t.addEventListener(e, i, !1);
              })
            : i.attachEvent &&
              (n = function (t, i, n) {
                  (t[i + n] = n.handleEvent
                      ? function () {
                            var i = e(t);
                            n.handleEvent.call(n, i);
                        }
                      : function () {
                            var i = e(t);
                            n.call(t, i);
                        }),
                      t.attachEvent("on" + i, t[i + n]);
              });
        var o = function () {};
        i.removeEventListener
            ? (o = function (t, e, i) {
                  t.removeEventListener(e, i, !1);
              })
            : i.detachEvent &&
              (o = function (t, e, i) {
                  t.detachEvent("on" + e, t[e + i]);
                  try {
                      delete t[e + i];
                  } catch (n) {
                      t[e + i] = void 0;
                  }
              });
        var r = { bind: n, unbind: o };
        "function" == typeof define && define.amd ? define("eventie/eventie", r) : "object" == typeof exports ? (module.exports = r) : (t.eventie = r);
    })(window),
    function () {
        function t() {}
        function e(t, e) {
            for (var i = t.length; i--; ) if (t[i].listener === e) return i;
            return -1;
        }
        function i(t) {
            return function () {
                return this[t].apply(this, arguments);
            };
        }
        var n = t.prototype,
            o = this,
            r = o.EventEmitter;
        (n.getListeners = function (t) {
            var e,
                i,
                n = this._getEvents();
            if (t instanceof RegExp) {
                e = {};
                for (i in n) n.hasOwnProperty(i) && t.test(i) && (e[i] = n[i]);
            } else e = n[t] || (n[t] = []);
            return e;
        }),
            (n.flattenListeners = function (t) {
                var e,
                    i = [];
                for (e = 0; t.length > e; e += 1) i.push(t[e].listener);
                return i;
            }),
            (n.getListenersAsObject = function (t) {
                var e,
                    i = this.getListeners(t);
                return i instanceof Array && ((e = {}), (e[t] = i)), e || i;
            }),
            (n.addListener = function (t, i) {
                var n,
                    o = this.getListenersAsObject(t),
                    r = "object" == typeof i;
                for (n in o) o.hasOwnProperty(n) && -1 === e(o[n], i) && o[n].push(r ? i : { listener: i, once: !1 });
                return this;
            }),
            (n.on = i("addListener")),
            (n.addOnceListener = function (t, e) {
                return this.addListener(t, { listener: e, once: !0 });
            }),
            (n.once = i("addOnceListener")),
            (n.defineEvent = function (t) {
                return this.getListeners(t), this;
            }),
            (n.defineEvents = function (t) {
                for (var e = 0; t.length > e; e += 1) this.defineEvent(t[e]);
                return this;
            }),
            (n.removeListener = function (t, i) {
                var n,
                    o,
                    r = this.getListenersAsObject(t);
                for (o in r) r.hasOwnProperty(o) && ((n = e(r[o], i)), -1 !== n && r[o].splice(n, 1));
                return this;
            }),
            (n.off = i("removeListener")),
            (n.addListeners = function (t, e) {
                return this.manipulateListeners(!1, t, e);
            }),
            (n.removeListeners = function (t, e) {
                return this.manipulateListeners(!0, t, e);
            }),
            (n.manipulateListeners = function (t, e, i) {
                var n,
                    o,
                    r = t ? this.removeListener : this.addListener,
                    s = t ? this.removeListeners : this.addListeners;
                if ("object" != typeof e || e instanceof RegExp) for (n = i.length; n--; ) r.call(this, e, i[n]);
                else for (n in e) e.hasOwnProperty(n) && (o = e[n]) && ("function" == typeof o ? r.call(this, n, o) : s.call(this, n, o));
                return this;
            }),
            (n.removeEvent = function (t) {
                var e,
                    i = typeof t,
                    n = this._getEvents();
                if ("string" === i) delete n[t];
                else if (t instanceof RegExp) for (e in n) n.hasOwnProperty(e) && t.test(e) && delete n[e];
                else delete this._events;
                return this;
            }),
            (n.removeAllListeners = i("removeEvent")),
            (n.emitEvent = function (t, e) {
                var i,
                    n,
                    o,
                    r,
                    s = this.getListenersAsObject(t);
                for (o in s)
                    if (s.hasOwnProperty(o))
                        for (n = s[o].length; n--; ) (i = s[o][n]), i.once === !0 && this.removeListener(t, i.listener), (r = i.listener.apply(this, e || [])), r === this._getOnceReturnValue() && this.removeListener(t, i.listener);
                return this;
            }),
            (n.trigger = i("emitEvent")),
            (n.emit = function (t) {
                var e = Array.prototype.slice.call(arguments, 1);
                return this.emitEvent(t, e);
            }),
            (n.setOnceReturnValue = function (t) {
                return (this._onceReturnValue = t), this;
            }),
            (n._getOnceReturnValue = function () {
                return this.hasOwnProperty("_onceReturnValue") ? this._onceReturnValue : !0;
            }),
            (n._getEvents = function () {
                return this._events || (this._events = {});
            }),
            (t.noConflict = function () {
                return (o.EventEmitter = r), t;
            }),
            "function" == typeof define && define.amd
                ? define("eventEmitter/EventEmitter", [], function () {
                      return t;
                  })
                : "object" == typeof module && module.exports
                ? (module.exports = t)
                : (o.EventEmitter = t);
    }.call(this),
    (function (t) {
        function e(t) {
            "function" == typeof t && (e.isReady ? t() : s.push(t));
        }
        function i(t) {
            var i = "readystatechange" === t.type && "complete" !== r.readyState;
            e.isReady || i || n();
        }
        function n() {
            e.isReady = !0;
            for (var t = 0, i = s.length; i > t; t++) {
                var n = s[t];
                n();
            }
        }
        function o(o) {
            return "complete" === r.readyState ? n() : (o.bind(r, "DOMContentLoaded", i), o.bind(r, "readystatechange", i), o.bind(t, "load", i)), e;
        }
        var r = t.document,
            s = [];
        (e.isReady = !1), "function" == typeof define && define.amd ? define("doc-ready/doc-ready", ["eventie/eventie"], o) : "object" == typeof exports ? (module.exports = o(require("eventie"))) : (t.docReady = o(t.eventie));
    })(window),
    (function (t) {
        function e(t, e) {
            return t[s](e);
        }
        function i(t) {
            if (!t.parentNode) {
                var e = document.createDocumentFragment();
                e.appendChild(t);
            }
        }
        function n(t, e) {
            i(t);
            for (var n = t.parentNode.querySelectorAll(e), o = 0, r = n.length; r > o; o++) if (n[o] === t) return !0;
            return !1;
        }
        function o(t, n) {
            return i(t), e(t, n);
        }
        var r,
            s = (function () {
                if (t.matches) return "matches";
                if (t.matchesSelector) return "matchesSelector";
                for (var e = ["webkit", "moz", "ms", "o"], i = 0, n = e.length; n > i; i++) {
                    var o = e[i],
                        r = o + "MatchesSelector";
                    if (t[r]) return r;
                }
            })();
        if (s) {
            var a = document.createElement("div"),
                h = e(a, "div");
            r = h ? e : o;
        } else r = n;
        "function" == typeof define && define.amd
            ? define("matches-selector/matches-selector", [], function () {
                  return r;
              })
            : "object" == typeof exports
            ? (module.exports = r)
            : (window.matchesSelector = r);
    })(Element.prototype),
    (function (t, e) {
        "function" == typeof define && define.amd
            ? define("fizzy-ui-utils/utils", ["doc-ready/doc-ready", "matches-selector/matches-selector"], function (i, n) {
                  return e(t, i, n);
              })
            : "object" == typeof exports
            ? (module.exports = e(t, require("doc-ready"), require("desandro-matches-selector")))
            : (t.fizzyUIUtils = e(t, t.docReady, t.matchesSelector));
    })(window, function (t, e, i) {
        var n = {};
        (n.extend = function (t, e) {
            for (var i in e) t[i] = e[i];
            return t;
        }),
            (n.modulo = function (t, e) {
                return ((t % e) + e) % e;
            });
        var o = Object.prototype.toString;
        (n.isArray = function (t) {
            return "[object Array]" == o.call(t);
        }),
            (n.makeArray = function (t) {
                var e = [];
                if (n.isArray(t)) e = t;
                else if (t && "number" == typeof t.length) for (var i = 0, o = t.length; o > i; i++) e.push(t[i]);
                else e.push(t);
                return e;
            }),
            (n.indexOf = Array.prototype.indexOf
                ? function (t, e) {
                      return t.indexOf(e);
                  }
                : function (t, e) {
                      for (var i = 0, n = t.length; n > i; i++) if (t[i] === e) return i;
                      return -1;
                  }),
            (n.removeFrom = function (t, e) {
                var i = n.indexOf(t, e);
                -1 != i && t.splice(i, 1);
            }),
            (n.isElement =
                "function" == typeof HTMLElement || "object" == typeof HTMLElement
                    ? function (t) {
                          return t instanceof HTMLElement;
                      }
                    : function (t) {
                          return t && "object" == typeof t && 1 == t.nodeType && "string" == typeof t.nodeName;
                      }),
            (n.setText = (function () {
                function t(t, i) {
                    (e = e || (void 0 !== document.documentElement.textContent ? "textContent" : "innerText")), (t[e] = i);
                }
                var e;
                return t;
            })()),
            (n.getParent = function (t, e) {
                for (; t != document.body; ) if (((t = t.parentNode), i(t, e))) return t;
            }),
            (n.getQueryElement = function (t) {
                return "string" == typeof t ? document.querySelector(t) : t;
            }),
            (n.handleEvent = function (t) {
                var e = "on" + t.type;
                this[e] && this[e](t);
            }),
            (n.filterFindElements = function (t, e) {
                t = n.makeArray(t);
                for (var o = [], r = 0, s = t.length; s > r; r++) {
                    var a = t[r];
                    if (n.isElement(a))
                        if (e) {
                            i(a, e) && o.push(a);
                            for (var h = a.querySelectorAll(e), p = 0, u = h.length; u > p; p++) o.push(h[p]);
                        } else o.push(a);
                }
                return o;
            }),
            (n.debounceMethod = function (t, e, i) {
                var n = t.prototype[e],
                    o = e + "Timeout";
                t.prototype[e] = function () {
                    var t = this[o];
                    t && clearTimeout(t);
                    var e = arguments,
                        r = this;
                    this[o] = setTimeout(function () {
                        n.apply(r, e), delete r[o];
                    }, i || 100);
                };
            }),
            (n.toDashed = function (t) {
                return t
                    .replace(/(.)([A-Z])/g, function (t, e, i) {
                        return e + "-" + i;
                    })
                    .toLowerCase();
            });
        var r = t.console;
        return (
            (n.htmlInit = function (i, o) {
                e(function () {
                    for (var e = n.toDashed(o), s = document.querySelectorAll(".js-" + e), a = "data-" + e + "-options", h = 0, p = s.length; p > h; h++) {
                        var u,
                            c = s[h],
                            d = c.getAttribute(a);
                        try {
                            u = d && JSON.parse(d);
                        } catch (l) {
                            r && r.error("Error parsing " + a + " on " + c.nodeName.toLowerCase() + (c.id ? "#" + c.id : "") + ": " + l);
                            continue;
                        }
                        var f = new i(c, u),
                            y = t.jQuery;
                        y && y.data(c, o, f);
                    }
                });
            }),
            n
        );
    }),
    (function (t, e) {
        "function" == typeof define && define.amd
            ? define("outlayer/item", ["eventEmitter/EventEmitter", "get-size/get-size", "get-style-property/get-style-property", "fizzy-ui-utils/utils"], function (i, n, o, r) {
                  return e(t, i, n, o, r);
              })
            : "object" == typeof exports
            ? (module.exports = e(t, require("wolfy87-eventemitter"), require("get-size"), require("desandro-get-style-property"), require("fizzy-ui-utils")))
            : ((t.Outlayer = {}), (t.Outlayer.Item = e(t, t.EventEmitter, t.getSize, t.getStyleProperty, t.fizzyUIUtils)));
    })(window, function (t, e, i, n, o) {
        function r(t) {
            for (var e in t) return !1;
            return (e = null), !0;
        }
        function s(t, e) {
            t && ((this.element = t), (this.layout = e), (this.position = { x: 0, y: 0 }), this._create());
        }
        var a = t.getComputedStyle,
            h = a
                ? function (t) {
                      return a(t, null);
                  }
                : function (t) {
                      return t.currentStyle;
                  },
            p = n("transition"),
            u = n("transform"),
            c = p && u,
            d = !!n("perspective"),
            l = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "otransitionend", transition: "transitionend" }[p],
            f = ["transform", "transition", "transitionDuration", "transitionProperty"],
            y = (function () {
                for (var t = {}, e = 0, i = f.length; i > e; e++) {
                    var o = f[e],
                        r = n(o);
                    r && r !== o && (t[o] = r);
                }
                return t;
            })();
        o.extend(s.prototype, e.prototype),
            (s.prototype._create = function () {
                (this._transn = { ingProperties: {}, clean: {}, onEnd: {} }), this.css({ position: "absolute" });
            }),
            (s.prototype.handleEvent = function (t) {
                var e = "on" + t.type;
                this[e] && this[e](t);
            }),
            (s.prototype.getSize = function () {
                this.size = i(this.element);
            }),
            (s.prototype.css = function (t) {
                var e = this.element.style;
                for (var i in t) {
                    var n = y[i] || i;
                    e[n] = t[i];
                }
            }),
            (s.prototype.getPosition = function () {
                var t = h(this.element),
                    e = this.layout.options,
                    i = e.isOriginLeft,
                    n = e.isOriginTop,
                    o = parseInt(t[i ? "left" : "right"], 10),
                    r = parseInt(t[n ? "top" : "bottom"], 10);
                (o = isNaN(o) ? 0 : o), (r = isNaN(r) ? 0 : r);
                var s = this.layout.size;
                (o -= i ? s.paddingLeft : s.paddingRight), (r -= n ? s.paddingTop : s.paddingBottom), (this.position.x = o), (this.position.y = r);
            }),
            (s.prototype.layoutPosition = function () {
                var t = this.layout.size,
                    e = this.layout.options,
                    i = {},
                    n = e.isOriginLeft ? "paddingLeft" : "paddingRight",
                    o = e.isOriginLeft ? "left" : "right",
                    r = e.isOriginLeft ? "right" : "left",
                    s = this.position.x + t[n];
                (s = e.percentPosition && !e.isHorizontal ? 100 * (s / t.width) + "%" : s + "px"), (i[o] = s), (i[r] = "");
                var a = e.isOriginTop ? "paddingTop" : "paddingBottom",
                    h = e.isOriginTop ? "top" : "bottom",
                    p = e.isOriginTop ? "bottom" : "top",
                    u = this.position.y + t[a];
                (u = e.percentPosition && e.isHorizontal ? 100 * (u / t.height) + "%" : u + "px"), (i[h] = u), (i[p] = ""), this.css(i), this.emitEvent("layout", [this]);
            });
        var m = d
            ? function (t, e) {
                  return "translate3d(" + t + "px, " + e + "px, 0)";
              }
            : function (t, e) {
                  return "translate(" + t + "px, " + e + "px)";
              };
        (s.prototype._transitionTo = function (t, e) {
            this.getPosition();
            var i = this.position.x,
                n = this.position.y,
                o = parseInt(t, 10),
                r = parseInt(e, 10),
                s = o === this.position.x && r === this.position.y;
            if ((this.setPosition(t, e), s && !this.isTransitioning)) return this.layoutPosition(), void 0;
            var a = t - i,
                h = e - n,
                p = {},
                u = this.layout.options;
            (a = u.isOriginLeft ? a : -a), (h = u.isOriginTop ? h : -h), (p.transform = m(a, h)), this.transition({ to: p, onTransitionEnd: { transform: this.layoutPosition }, isCleaning: !0 });
        }),
            (s.prototype.goTo = function (t, e) {
                this.setPosition(t, e), this.layoutPosition();
            }),
            (s.prototype.moveTo = c ? s.prototype._transitionTo : s.prototype.goTo),
            (s.prototype.setPosition = function (t, e) {
                (this.position.x = parseInt(t, 10)), (this.position.y = parseInt(e, 10));
            }),
            (s.prototype._nonTransition = function (t) {
                this.css(t.to), t.isCleaning && this._removeStyles(t.to);
                for (var e in t.onTransitionEnd) t.onTransitionEnd[e].call(this);
            }),
            (s.prototype._transition = function (t) {
                if (!parseFloat(this.layout.options.transitionDuration)) return this._nonTransition(t), void 0;
                var e = this._transn;
                for (var i in t.onTransitionEnd) e.onEnd[i] = t.onTransitionEnd[i];
                for (i in t.to) (e.ingProperties[i] = !0), t.isCleaning && (e.clean[i] = !0);
                if (t.from) {
                    this.css(t.from);
                    var n = this.element.offsetHeight;
                    n = null;
                }
                this.enableTransition(t.to), this.css(t.to), (this.isTransitioning = !0);
            });
        var g = u && o.toDashed(u) + ",opacity";
        (s.prototype.enableTransition = function () {
            this.isTransitioning || (this.css({ transitionProperty: g, transitionDuration: this.layout.options.transitionDuration }), this.element.addEventListener(l, this, !1));
        }),
            (s.prototype.transition = s.prototype[p ? "_transition" : "_nonTransition"]),
            (s.prototype.onwebkitTransitionEnd = function (t) {
                this.ontransitionend(t);
            }),
            (s.prototype.onotransitionend = function (t) {
                this.ontransitionend(t);
            });
        var v = { "-webkit-transform": "transform", "-moz-transform": "transform", "-o-transform": "transform" };
        (s.prototype.ontransitionend = function (t) {
            if (t.target === this.element) {
                var e = this._transn,
                    i = v[t.propertyName] || t.propertyName;
                if ((delete e.ingProperties[i], r(e.ingProperties) && this.disableTransition(), i in e.clean && ((this.element.style[t.propertyName] = ""), delete e.clean[i]), i in e.onEnd)) {
                    var n = e.onEnd[i];
                    n.call(this), delete e.onEnd[i];
                }
                this.emitEvent("transitionEnd", [this]);
            }
        }),
            (s.prototype.disableTransition = function () {
                this.removeTransitionStyles(), this.element.removeEventListener(l, this, !1), (this.isTransitioning = !1);
            }),
            (s.prototype._removeStyles = function (t) {
                var e = {};
                for (var i in t) e[i] = "";
                this.css(e);
            });
        var x = { transitionProperty: "", transitionDuration: "" };
        return (
            (s.prototype.removeTransitionStyles = function () {
                this.css(x);
            }),
            (s.prototype.removeElem = function () {
                this.element.parentNode.removeChild(this.element), this.css({ display: "" }), this.emitEvent("remove", [this]);
            }),
            (s.prototype.remove = function () {
                if (!p || !parseFloat(this.layout.options.transitionDuration)) return this.removeElem(), void 0;
                var t = this;
                this.once("transitionEnd", function () {
                    t.removeElem();
                }),
                    this.hide();
            }),
            (s.prototype.reveal = function () {
                delete this.isHidden, this.css({ display: "" });
                var t = this.layout.options,
                    e = {},
                    i = this.getHideRevealTransitionEndProperty("visibleStyle");
                (e[i] = this.onRevealTransitionEnd), this.transition({ from: t.hiddenStyle, to: t.visibleStyle, isCleaning: !0, onTransitionEnd: e });
            }),
            (s.prototype.onRevealTransitionEnd = function () {
                this.isHidden || this.emitEvent("reveal");
            }),
            (s.prototype.getHideRevealTransitionEndProperty = function (t) {
                var e = this.layout.options[t];
                if (e.opacity) return "opacity";
                for (var i in e) return i;
            }),
            (s.prototype.hide = function () {
                (this.isHidden = !0), this.css({ display: "" });
                var t = this.layout.options,
                    e = {},
                    i = this.getHideRevealTransitionEndProperty("hiddenStyle");
                (e[i] = this.onHideTransitionEnd), this.transition({ from: t.visibleStyle, to: t.hiddenStyle, isCleaning: !0, onTransitionEnd: e });
            }),
            (s.prototype.onHideTransitionEnd = function () {
                this.isHidden && (this.css({ display: "none" }), this.emitEvent("hide"));
            }),
            (s.prototype.destroy = function () {
                this.css({ position: "", left: "", right: "", top: "", bottom: "", transition: "", transform: "" });
            }),
            s
        );
    }),
    (function (t, e) {
        "function" == typeof define && define.amd
            ? define("outlayer/outlayer", ["eventie/eventie", "eventEmitter/EventEmitter", "get-size/get-size", "fizzy-ui-utils/utils", "./item"], function (i, n, o, r, s) {
                  return e(t, i, n, o, r, s);
              })
            : "object" == typeof exports
            ? (module.exports = e(t, require("eventie"), require("wolfy87-eventemitter"), require("get-size"), require("fizzy-ui-utils"), require("./item")))
            : (t.Outlayer = e(t, t.eventie, t.EventEmitter, t.getSize, t.fizzyUIUtils, t.Outlayer.Item));
    })(window, function (t, e, i, n, o, r) {
        function s(t, e) {
            var i = o.getQueryElement(t);
            if (!i) return a && a.error("Bad element for " + this.constructor.namespace + ": " + (i || t)), void 0;
            (this.element = i), h && (this.$element = h(this.element)), (this.options = o.extend({}, this.constructor.defaults)), this.option(e);
            var n = ++u;
            (this.element.outlayerGUID = n), (c[n] = this), this._create(), this.options.isInitLayout && this.layout();
        }
        var a = t.console,
            h = t.jQuery,
            p = function () {},
            u = 0,
            c = {};
        return (
            (s.namespace = "outlayer"),
            (s.Item = r),
            (s.defaults = {
                containerStyle: { position: "relative" },
                isInitLayout: !0,
                isOriginLeft: !0,
                isOriginTop: !0,
                isResizeBound: !0,
                isResizingContainer: !0,
                transitionDuration: "0.4s",
                hiddenStyle: { opacity: 0, transform: "scale(0.001)" },
                visibleStyle: { opacity: 1, transform: "scale(1)" },
            }),
            o.extend(s.prototype, i.prototype),
            (s.prototype.option = function (t) {
                o.extend(this.options, t);
            }),
            (s.prototype._create = function () {
                this.reloadItems(), (this.stamps = []), this.stamp(this.options.stamp), o.extend(this.element.style, this.options.containerStyle), this.options.isResizeBound && this.bindResize();
            }),
            (s.prototype.reloadItems = function () {
                this.items = this._itemize(this.element.children);
            }),
            (s.prototype._itemize = function (t) {
                for (var e = this._filterFindItemElements(t), i = this.constructor.Item, n = [], o = 0, r = e.length; r > o; o++) {
                    var s = e[o],
                        a = new i(s, this);
                    n.push(a);
                }
                return n;
            }),
            (s.prototype._filterFindItemElements = function (t) {
                return o.filterFindElements(t, this.options.itemSelector);
            }),
            (s.prototype.getItemElements = function () {
                for (var t = [], e = 0, i = this.items.length; i > e; e++) t.push(this.items[e].element);
                return t;
            }),
            (s.prototype.layout = function () {
                this._resetLayout(), this._manageStamps();
                var t = void 0 !== this.options.isLayoutInstant ? this.options.isLayoutInstant : !this._isLayoutInited;
                this.layoutItems(this.items, t), (this._isLayoutInited = !0);
            }),
            (s.prototype._init = s.prototype.layout),
            (s.prototype._resetLayout = function () {
                this.getSize();
            }),
            (s.prototype.getSize = function () {
                this.size = n(this.element);
            }),
            (s.prototype._getMeasurement = function (t, e) {
                var i,
                    r = this.options[t];
                r ? ("string" == typeof r ? (i = this.element.querySelector(r)) : o.isElement(r) && (i = r), (this[t] = i ? n(i)[e] : r)) : (this[t] = 0);
            }),
            (s.prototype.layoutItems = function (t, e) {
                (t = this._getItemsForLayout(t)), this._layoutItems(t, e), this._postLayout();
            }),
            (s.prototype._getItemsForLayout = function (t) {
                for (var e = [], i = 0, n = t.length; n > i; i++) {
                    var o = t[i];
                    o.isIgnored || e.push(o);
                }
                return e;
            }),
            (s.prototype._layoutItems = function (t, e) {
                if ((this._emitCompleteOnItems("layout", t), t && t.length)) {
                    for (var i = [], n = 0, o = t.length; o > n; n++) {
                        var r = t[n],
                            s = this._getItemLayoutPosition(r);
                        (s.item = r), (s.isInstant = e || r.isLayoutInstant), i.push(s);
                    }
                    this._processLayoutQueue(i);
                }
            }),
            (s.prototype._getItemLayoutPosition = function () {
                return { x: 0, y: 0 };
            }),
            (s.prototype._processLayoutQueue = function (t) {
                for (var e = 0, i = t.length; i > e; e++) {
                    var n = t[e];
                    this._positionItem(n.item, n.x, n.y, n.isInstant);
                }
            }),
            (s.prototype._positionItem = function (t, e, i, n) {
                n ? t.goTo(e, i) : t.moveTo(e, i);
            }),
            (s.prototype._postLayout = function () {
                this.resizeContainer();
            }),
            (s.prototype.resizeContainer = function () {
                if (this.options.isResizingContainer) {
                    var t = this._getContainerSize();
                    t && (this._setContainerMeasure(t.width, !0), this._setContainerMeasure(t.height, !1));
                }
            }),
            (s.prototype._getContainerSize = p),
            (s.prototype._setContainerMeasure = function (t, e) {
                if (void 0 !== t) {
                    var i = this.size;
                    i.isBorderBox && (t += e ? i.paddingLeft + i.paddingRight + i.borderLeftWidth + i.borderRightWidth : i.paddingBottom + i.paddingTop + i.borderTopWidth + i.borderBottomWidth),
                        (t = Math.max(t, 0)),
                        (this.element.style[e ? "width" : "height"] = t + "px");
                }
            }),
            (s.prototype._emitCompleteOnItems = function (t, e) {
                function i() {
                    o.emitEvent(t + "Complete", [e]);
                }
                function n() {
                    s++, s === r && i();
                }
                var o = this,
                    r = e.length;
                if (!e || !r) return i(), void 0;
                for (var s = 0, a = 0, h = e.length; h > a; a++) {
                    var p = e[a];
                    p.once(t, n);
                }
            }),
            (s.prototype.ignore = function (t) {
                var e = this.getItem(t);
                e && (e.isIgnored = !0);
            }),
            (s.prototype.unignore = function (t) {
                var e = this.getItem(t);
                e && delete e.isIgnored;
            }),
            (s.prototype.stamp = function (t) {
                if ((t = this._find(t))) {
                    this.stamps = this.stamps.concat(t);
                    for (var e = 0, i = t.length; i > e; e++) {
                        var n = t[e];
                        this.ignore(n);
                    }
                }
            }),
            (s.prototype.unstamp = function (t) {
                if ((t = this._find(t)))
                    for (var e = 0, i = t.length; i > e; e++) {
                        var n = t[e];
                        o.removeFrom(this.stamps, n), this.unignore(n);
                    }
            }),
            (s.prototype._find = function (t) {
                return t ? ("string" == typeof t && (t = this.element.querySelectorAll(t)), (t = o.makeArray(t))) : void 0;
            }),
            (s.prototype._manageStamps = function () {
                if (this.stamps && this.stamps.length) {
                    this._getBoundingRect();
                    for (var t = 0, e = this.stamps.length; e > t; t++) {
                        var i = this.stamps[t];
                        this._manageStamp(i);
                    }
                }
            }),
            (s.prototype._getBoundingRect = function () {
                var t = this.element.getBoundingClientRect(),
                    e = this.size;
                this._boundingRect = {
                    left: t.left + e.paddingLeft + e.borderLeftWidth,
                    top: t.top + e.paddingTop + e.borderTopWidth,
                    right: t.right - (e.paddingRight + e.borderRightWidth),
                    bottom: t.bottom - (e.paddingBottom + e.borderBottomWidth),
                };
            }),
            (s.prototype._manageStamp = p),
            (s.prototype._getElementOffset = function (t) {
                var e = t.getBoundingClientRect(),
                    i = this._boundingRect,
                    o = n(t),
                    r = { left: e.left - i.left - o.marginLeft, top: e.top - i.top - o.marginTop, right: i.right - e.right - o.marginRight, bottom: i.bottom - e.bottom - o.marginBottom };
                return r;
            }),
            (s.prototype.handleEvent = function (t) {
                var e = "on" + t.type;
                this[e] && this[e](t);
            }),
            (s.prototype.bindResize = function () {
                this.isResizeBound || (e.bind(t, "resize", this), (this.isResizeBound = !0));
            }),
            (s.prototype.unbindResize = function () {
                this.isResizeBound && e.unbind(t, "resize", this), (this.isResizeBound = !1);
            }),
            (s.prototype.onresize = function () {
                function t() {
                    e.resize(), delete e.resizeTimeout;
                }
                this.resizeTimeout && clearTimeout(this.resizeTimeout);
                var e = this;
                this.resizeTimeout = setTimeout(t, 100);
            }),
            (s.prototype.resize = function () {
                this.isResizeBound && this.needsResizeLayout() && this.layout();
            }),
            (s.prototype.needsResizeLayout = function () {
                var t = n(this.element),
                    e = this.size && t;
                return e && t.innerWidth !== this.size.innerWidth;
            }),
            (s.prototype.addItems = function (t) {
                var e = this._itemize(t);
                return e.length && (this.items = this.items.concat(e)), e;
            }),
            (s.prototype.appended = function (t) {
                var e = this.addItems(t);
                e.length && (this.layoutItems(e, !0), this.reveal(e));
            }),
            (s.prototype.prepended = function (t) {
                var e = this._itemize(t);
                if (e.length) {
                    var i = this.items.slice(0);
                    (this.items = e.concat(i)), this._resetLayout(), this._manageStamps(), this.layoutItems(e, !0), this.reveal(e), this.layoutItems(i);
                }
            }),
            (s.prototype.reveal = function (t) {
                this._emitCompleteOnItems("reveal", t);
                for (var e = t && t.length, i = 0; e && e > i; i++) {
                    var n = t[i];
                    n.reveal();
                }
            }),
            (s.prototype.hide = function (t) {
                this._emitCompleteOnItems("hide", t);
                for (var e = t && t.length, i = 0; e && e > i; i++) {
                    var n = t[i];
                    n.hide();
                }
            }),
            (s.prototype.revealItemElements = function (t) {
                var e = this.getItems(t);
                this.reveal(e);
            }),
            (s.prototype.hideItemElements = function (t) {
                var e = this.getItems(t);
                this.hide(e);
            }),
            (s.prototype.getItem = function (t) {
                for (var e = 0, i = this.items.length; i > e; e++) {
                    var n = this.items[e];
                    if (n.element === t) return n;
                }
            }),
            (s.prototype.getItems = function (t) {
                t = o.makeArray(t);
                for (var e = [], i = 0, n = t.length; n > i; i++) {
                    var r = t[i],
                        s = this.getItem(r);
                    s && e.push(s);
                }
                return e;
            }),
            (s.prototype.remove = function (t) {
                var e = this.getItems(t);
                if ((this._emitCompleteOnItems("remove", e), e && e.length))
                    for (var i = 0, n = e.length; n > i; i++) {
                        var r = e[i];
                        r.remove(), o.removeFrom(this.items, r);
                    }
            }),
            (s.prototype.destroy = function () {
                var t = this.element.style;
                (t.height = ""), (t.position = ""), (t.width = "");
                for (var e = 0, i = this.items.length; i > e; e++) {
                    var n = this.items[e];
                    n.destroy();
                }
                this.unbindResize();
                var o = this.element.outlayerGUID;
                delete c[o], delete this.element.outlayerGUID, h && h.removeData(this.element, this.constructor.namespace);
            }),
            (s.data = function (t) {
                t = o.getQueryElement(t);
                var e = t && t.outlayerGUID;
                return e && c[e];
            }),
            (s.create = function (t, e) {
                function i() {
                    s.apply(this, arguments);
                }
                return (
                    Object.create ? (i.prototype = Object.create(s.prototype)) : o.extend(i.prototype, s.prototype),
                    (i.prototype.constructor = i),
                    (i.defaults = o.extend({}, s.defaults)),
                    o.extend(i.defaults, e),
                    (i.prototype.settings = {}),
                    (i.namespace = t),
                    (i.data = s.data),
                    (i.Item = function () {
                        r.apply(this, arguments);
                    }),
                    (i.Item.prototype = new r()),
                    o.htmlInit(i, t),
                    h && h.bridget && h.bridget(t, i),
                    i
                );
            }),
            (s.Item = r),
            s
        );
    }),
    (function (t, e) {
        "function" == typeof define && define.amd ? define("packery/js/rect", e) : "object" == typeof exports ? (module.exports = e()) : ((t.Packery = t.Packery || {}), (t.Packery.Rect = e()));
    })(window, function () {
        function t(e) {
            for (var i in t.defaults) this[i] = t.defaults[i];
            for (i in e) this[i] = e[i];
        }
        var e = (window.Packery = function () {});
        return (
            (e.Rect = t),
            (t.defaults = { x: 0, y: 0, width: 0, height: 0 }),
            (t.prototype.contains = function (t) {
                var e = t.width || 0,
                    i = t.height || 0;
                return this.x <= t.x && this.y <= t.y && this.x + this.width >= t.x + e && this.y + this.height >= t.y + i;
            }),
            (t.prototype.overlaps = function (t) {
                var e = this.x + this.width,
                    i = this.y + this.height,
                    n = t.x + t.width,
                    o = t.y + t.height;
                return n > this.x && e > t.x && o > this.y && i > t.y;
            }),
            (t.prototype.getMaximalFreeRects = function (e) {
                if (!this.overlaps(e)) return !1;
                var i,
                    n = [],
                    o = this.x + this.width,
                    r = this.y + this.height,
                    s = e.x + e.width,
                    a = e.y + e.height;
                return (
                    this.y < e.y && ((i = new t({ x: this.x, y: this.y, width: this.width, height: e.y - this.y })), n.push(i)),
                    o > s && ((i = new t({ x: s, y: this.y, width: o - s, height: this.height })), n.push(i)),
                    r > a && ((i = new t({ x: this.x, y: a, width: this.width, height: r - a })), n.push(i)),
                    this.x < e.x && ((i = new t({ x: this.x, y: this.y, width: e.x - this.x, height: this.height })), n.push(i)),
                    n
                );
            }),
            (t.prototype.canFit = function (t) {
                return this.width >= t.width && this.height >= t.height;
            }),
            t
        );
    }),
    (function (t, e) {
        if ("function" == typeof define && define.amd) define("packery/js/packer", ["./rect"], e);
        else if ("object" == typeof exports) module.exports = e(require("./rect"));
        else {
            var i = (t.Packery = t.Packery || {});
            i.Packer = e(i.Rect);
        }
    })(window, function (t) {
        function e(t, e, i) {
            (this.width = t || 0), (this.height = e || 0), (this.sortDirection = i || "downwardLeftToRight"), this.reset();
        }
        (e.prototype.reset = function () {
            (this.spaces = []), (this.newSpaces = []);
            var e = new t({ x: 0, y: 0, width: this.width, height: this.height });
            this.spaces.push(e), (this.sorter = i[this.sortDirection] || i.downwardLeftToRight);
        }),
            (e.prototype.pack = function (t) {
                for (var e = 0, i = this.spaces.length; i > e; e++) {
                    var n = this.spaces[e];
                    if (n.canFit(t)) {
                        this.placeInSpace(t, n);
                        break;
                    }
                }
            }),
            (e.prototype.placeInSpace = function (t, e) {
                (t.x = e.x), (t.y = e.y), this.placed(t);
            }),
            (e.prototype.placed = function (t) {
                for (var e = [], i = 0, n = this.spaces.length; n > i; i++) {
                    var o = this.spaces[i],
                        r = o.getMaximalFreeRects(t);
                    r ? e.push.apply(e, r) : e.push(o);
                }
                (this.spaces = e), this.mergeSortSpaces();
            }),
            (e.prototype.mergeSortSpaces = function () {
                e.mergeRects(this.spaces), this.spaces.sort(this.sorter);
            }),
            (e.prototype.addSpace = function (t) {
                this.spaces.push(t), this.mergeSortSpaces();
            }),
            (e.mergeRects = function (t) {
                for (var e = 0, i = t.length; i > e; e++) {
                    var n = t[e];
                    if (n) {
                        var o = t.slice(0);
                        o.splice(e, 1);
                        for (var r = 0, s = 0, a = o.length; a > s; s++) {
                            var h = o[s],
                                p = e > s ? 0 : 1;
                            n.contains(h) && (t.splice(s + p - r, 1), r++);
                        }
                    }
                }
                return t;
            });
        var i = {
            downwardLeftToRight: function (t, e) {
                return t.y - e.y || t.x - e.x;
            },
            rightwardTopToBottom: function (t, e) {
                return t.x - e.x || t.y - e.y;
            },
        };
        return e;
    }),
    (function (t, e) {
        "function" == typeof define && define.amd
            ? define("packery/js/item", ["get-style-property/get-style-property", "outlayer/outlayer", "./rect"], e)
            : "object" == typeof exports
            ? (module.exports = e(require("desandro-get-style-property"), require("outlayer"), require("./rect")))
            : (t.Packery.Item = e(t.getStyleProperty, t.Outlayer, t.Packery.Rect));
    })(window, function (t, e, i) {
        var n = t("transform"),
            o = function () {
                e.Item.apply(this, arguments);
            };
        o.prototype = new e.Item();
        var r = o.prototype._create;
        return (
            (o.prototype._create = function () {
                r.call(this), (this.rect = new i()), (this.placeRect = new i());
            }),
            (o.prototype.dragStart = function () {
                this.getPosition(),
                    this.removeTransitionStyles(),
                    this.isTransitioning && n && (this.element.style[n] = "none"),
                    this.getSize(),
                    (this.isPlacing = !0),
                    (this.needsPositioning = !1),
                    this.positionPlaceRect(this.position.x, this.position.y),
                    (this.isTransitioning = !1),
                    (this.didDrag = !1);
            }),
            (o.prototype.dragMove = function (t, e) {
                this.didDrag = !0;
                var i = this.layout.size;
                (t -= i.paddingLeft), (e -= i.paddingTop), this.positionPlaceRect(t, e);
            }),
            (o.prototype.dragStop = function () {
                this.getPosition();
                var t = this.position.x != this.placeRect.x,
                    e = this.position.y != this.placeRect.y;
                (this.needsPositioning = t || e), (this.didDrag = !1);
            }),
            (o.prototype.positionPlaceRect = function (t, e, i) {
                (this.placeRect.x = this.getPlaceRectCoord(t, !0)), (this.placeRect.y = this.getPlaceRectCoord(e, !1, i));
            }),
            (o.prototype.getPlaceRectCoord = function (t, e, i) {
                var n = e ? "Width" : "Height",
                    o = this.size["outer" + n],
                    r = this.layout[e ? "columnWidth" : "rowHeight"],
                    s = this.layout.size["inner" + n];
                e || ((s = Math.max(s, this.layout.maxY)), this.layout.rowHeight || (s -= this.layout.gutter));
                var a;
                if (r) {
                    (r += this.layout.gutter), (s += e ? this.layout.gutter : 0), (t = Math.round(t / r));
                    var h;
                    h = this.layout.options.isHorizontal ? (e ? "ceil" : "floor") : e ? "floor" : "ceil";
                    var p = Math[h](s / r);
                    (p -= Math.ceil(o / r)), (a = p);
                } else a = s - o;
                return (t = i ? t : Math.min(t, a)), (t *= r || 1), Math.max(0, t);
            }),
            (o.prototype.copyPlaceRectPosition = function () {
                (this.rect.x = this.placeRect.x), (this.rect.y = this.placeRect.y);
            }),
            (o.prototype.removeElem = function () {
                this.element.parentNode.removeChild(this.element), this.layout.packer.addSpace(this.rect), this.emitEvent("remove", [this]);
            }),
            o
        );
    }),
    (function (t, e) {
        "function" == typeof define && define.amd
            ? define(["classie/classie", "get-size/get-size", "outlayer/outlayer", "packery/js/rect", "packery/js/packer", "packery/js/item"], e)
            : "object" == typeof exports
            ? (module.exports = e(require("desandro-classie"), require("get-size"), require("outlayer"), require("./rect"), require("./packer"), require("./item")))
            : (t.Packery = e(t.classie, t.getSize, t.Outlayer, t.Packery.Rect, t.Packery.Packer, t.Packery.Item));
    })(window, function (t, e, i, n, o, r) {
        function s(t, e) {
            return t.position.y - e.position.y || t.position.x - e.position.x;
        }
        function a(t, e) {
            return t.position.x - e.position.x || t.position.y - e.position.y;
        }
        n.prototype.canFit = function (t) {
            return this.width >= t.width - 1 && this.height >= t.height - 1;
        };
        var h = i.create("packery");
        return (
            (h.Item = r),
            (h.prototype._create = function () {
                i.prototype._create.call(this), (this.packer = new o()), this.stamp(this.options.stamped);
                var t = this;
                (this.handleDraggabilly = {
                    dragStart: function () {
                        t.itemDragStart(this.element);
                    },
                    dragMove: function () {
                        t.itemDragMove(this.element, this.position.x, this.position.y);
                    },
                    dragEnd: function () {
                        t.itemDragEnd(this.element);
                    },
                }),
                    (this.handleUIDraggable = {
                        start: function (e) {
                            t.itemDragStart(e.currentTarget);
                        },
                        drag: function (e, i) {
                            t.itemDragMove(e.currentTarget, i.position.left, i.position.top);
                        },
                        stop: function (e) {
                            t.itemDragEnd(e.currentTarget);
                        },
                    });
            }),
            (h.prototype._resetLayout = function () {
                this.getSize(), this._getMeasurements();
                var t = this.packer;
                this.options.isHorizontal
                    ? ((t.width = Number.POSITIVE_INFINITY), (t.height = this.size.innerHeight + this.gutter), (t.sortDirection = "rightwardTopToBottom"))
                    : ((t.width = this.size.innerWidth + this.gutter), (t.height = Number.POSITIVE_INFINITY), (t.sortDirection = "downwardLeftToRight")),
                    t.reset(),
                    (this.maxY = 0),
                    (this.maxX = 0);
            }),
            (h.prototype._getMeasurements = function () {
                this._getMeasurement("columnWidth", "width"), this._getMeasurement("rowHeight", "height"), this._getMeasurement("gutter", "width");
            }),
            (h.prototype._getItemLayoutPosition = function (t) {
                return this._packItem(t), t.rect;
            }),
            (h.prototype._packItem = function (t) {
                this._setRectSize(t.element, t.rect), this.packer.pack(t.rect), this._setMaxXY(t.rect);
            }),
            (h.prototype._setMaxXY = function (t) {
                (this.maxX = Math.max(t.x + t.width, this.maxX)), (this.maxY = Math.max(t.y + t.height, this.maxY));
            }),
            (h.prototype._setRectSize = function (t, i) {
                var n = e(t),
                    o = n.outerWidth,
                    r = n.outerHeight;
                (o || r) && ((o = this._applyGridGutter(o, this.columnWidth)), (r = this._applyGridGutter(r, this.rowHeight))), (i.width = Math.min(o, this.packer.width)), (i.height = Math.min(r, this.packer.height));
            }),
            (h.prototype._applyGridGutter = function (t, e) {
                if (!e) return t + this.gutter;
                e += this.gutter;
                var i = t % e,
                    n = i && 1 > i ? "round" : "ceil";
                return (t = Math[n](t / e) * e);
            }),
            (h.prototype._getContainerSize = function () {
                return this.options.isHorizontal ? { width: this.maxX - this.gutter } : { height: this.maxY - this.gutter };
            }),
            (h.prototype._manageStamp = function (t) {
                var e,
                    i = this.getItem(t);
                if (i && i.isPlacing) e = i.placeRect;
                else {
                    var o = this._getElementOffset(t);
                    e = new n({ x: this.options.isOriginLeft ? o.left : o.right, y: this.options.isOriginTop ? o.top : o.bottom });
                }
                this._setRectSize(t, e), this.packer.placed(e), this._setMaxXY(e);
            }),
            (h.prototype.sortItemsByPosition = function () {
                var t = this.options.isHorizontal ? a : s;
                this.items.sort(t);
            }),
            (h.prototype.fit = function (t, e, i) {
                var n = this.getItem(t);
                n &&
                    (this._getMeasurements(),
                    this.stamp(n.element),
                    n.getSize(),
                    (n.isPlacing = !0),
                    (e = void 0 === e ? n.rect.x : e),
                    (i = void 0 === i ? n.rect.y : i),
                    n.positionPlaceRect(e, i, !0),
                    this._bindFitEvents(n),
                    n.moveTo(n.placeRect.x, n.placeRect.y),
                    this.layout(),
                    this.unstamp(n.element),
                    this.sortItemsByPosition(),
                    (n.isPlacing = !1),
                    n.copyPlaceRectPosition());
            }),
            (h.prototype._bindFitEvents = function (t) {
                function e() {
                    n++, 2 == n && i.emitEvent("fitComplete", [t]);
                }
                var i = this,
                    n = 0;
                t.on("layout", function () {
                    return e(), !0;
                }),
                    this.on("layoutComplete", function () {
                        return e(), !0;
                    });
            }),
            (h.prototype.resize = function () {
                var t = e(this.element),
                    i = this.size && t,
                    n = this.options.isHorizontal ? "innerHeight" : "innerWidth";
                (i && t[n] == this.size[n]) || this.layout();
            }),
            (h.prototype.itemDragStart = function (t) {
                this.stamp(t);
                var e = this.getItem(t);
                e && e.dragStart();
            }),
            (h.prototype.itemDragMove = function (t, e, i) {
                function n() {
                    r.layout(), delete r.dragTimeout;
                }
                var o = this.getItem(t);
                o && o.dragMove(e, i);
                var r = this;
                this.clearDragTimeout(), (this.dragTimeout = setTimeout(n, 40));
            }),
            (h.prototype.clearDragTimeout = function () {
                this.dragTimeout && clearTimeout(this.dragTimeout);
            }),
            (h.prototype.itemDragEnd = function (e) {
                var i,
                    n = this.getItem(e);
                if ((n && ((i = n.didDrag), n.dragStop()), !n || (!i && !n.needsPositioning))) return this.unstamp(e), void 0;
                t.add(n.element, "is-positioning-post-drag");
                var o = this._getDragEndLayoutComplete(e, n);
                n.needsPositioning ? (n.on("layout", o), n.moveTo(n.placeRect.x, n.placeRect.y)) : n && n.copyPlaceRectPosition(), this.clearDragTimeout(), this.on("layoutComplete", o), this.layout();
            }),
            (h.prototype._getDragEndLayoutComplete = function (e, i) {
                var n = i && i.needsPositioning,
                    o = 0,
                    r = n ? 2 : 1,
                    s = this;
                return function () {
                    return o++, o != r ? !0 : (i && (t.remove(i.element, "is-positioning-post-drag"), (i.isPlacing = !1), i.copyPlaceRectPosition()), s.unstamp(e), s.sortItemsByPosition(), n && s.emitEvent("dragItemPositioned", [i]), !0);
                };
            }),
            (h.prototype.bindDraggabillyEvents = function (t) {
                t.on("dragStart", this.handleDraggabilly.dragStart), t.on("dragMove", this.handleDraggabilly.dragMove), t.on("dragEnd", this.handleDraggabilly.dragEnd);
            }),
            (h.prototype.bindUIDraggableEvents = function (t) {
                t.on("dragstart", this.handleUIDraggable.start).on("drag", this.handleUIDraggable.drag).on("dragstop", this.handleUIDraggable.stop);
            }),
            (h.Rect = n),
            (h.Packer = o),
            h
        );
    });

// threejs.org/license
("use strict");
var THREE = { REVISION: "71" };
"object" === typeof module && (module.exports = THREE);
void 0 === Math.sign &&
    (Math.sign = function (a) {
        return 0 > a ? -1 : 0 < a ? 1 : +a;
    });
THREE.log = function () {
    console.log.apply(console, arguments);
};
THREE.warn = function () {
    console.warn.apply(console, arguments);
};
THREE.error = function () {
    console.error.apply(console, arguments);
};
THREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
THREE.CullFaceNone = 0;
THREE.CullFaceBack = 1;
THREE.CullFaceFront = 2;
THREE.CullFaceFrontBack = 3;
THREE.FrontFaceDirectionCW = 0;
THREE.FrontFaceDirectionCCW = 1;
THREE.BasicShadowMap = 0;
THREE.PCFShadowMap = 1;
THREE.PCFSoftShadowMap = 2;
THREE.FrontSide = 0;
THREE.BackSide = 1;
THREE.DoubleSide = 2;
THREE.NoShading = 0;
THREE.FlatShading = 1;
THREE.SmoothShading = 2;
THREE.NoColors = 0;
THREE.FaceColors = 1;
THREE.VertexColors = 2;
THREE.NoBlending = 0;
THREE.NormalBlending = 1;
THREE.AdditiveBlending = 2;
THREE.SubtractiveBlending = 3;
THREE.MultiplyBlending = 4;
THREE.CustomBlending = 5;
THREE.AddEquation = 100;
THREE.SubtractEquation = 101;
THREE.ReverseSubtractEquation = 102;
THREE.MinEquation = 103;
THREE.MaxEquation = 104;
THREE.ZeroFactor = 200;
THREE.OneFactor = 201;
THREE.SrcColorFactor = 202;
THREE.OneMinusSrcColorFactor = 203;
THREE.SrcAlphaFactor = 204;
THREE.OneMinusSrcAlphaFactor = 205;
THREE.DstAlphaFactor = 206;
THREE.OneMinusDstAlphaFactor = 207;
THREE.DstColorFactor = 208;
THREE.OneMinusDstColorFactor = 209;
THREE.SrcAlphaSaturateFactor = 210;
THREE.MultiplyOperation = 0;
THREE.MixOperation = 1;
THREE.AddOperation = 2;
THREE.UVMapping = 300;
THREE.CubeReflectionMapping = 301;
THREE.CubeRefractionMapping = 302;
THREE.EquirectangularReflectionMapping = 303;
THREE.EquirectangularRefractionMapping = 304;
THREE.SphericalReflectionMapping = 305;
THREE.RepeatWrapping = 1e3;
THREE.ClampToEdgeWrapping = 1001;
THREE.MirroredRepeatWrapping = 1002;
THREE.NearestFilter = 1003;
THREE.NearestMipMapNearestFilter = 1004;
THREE.NearestMipMapLinearFilter = 1005;
THREE.LinearFilter = 1006;
THREE.LinearMipMapNearestFilter = 1007;
THREE.LinearMipMapLinearFilter = 1008;
THREE.UnsignedByteType = 1009;
THREE.ByteType = 1010;
THREE.ShortType = 1011;
THREE.UnsignedShortType = 1012;
THREE.IntType = 1013;
THREE.UnsignedIntType = 1014;
THREE.FloatType = 1015;
THREE.HalfFloatType = 1025;
THREE.UnsignedShort4444Type = 1016;
THREE.UnsignedShort5551Type = 1017;
THREE.UnsignedShort565Type = 1018;
THREE.AlphaFormat = 1019;
THREE.RGBFormat = 1020;
THREE.RGBAFormat = 1021;
THREE.LuminanceFormat = 1022;
THREE.LuminanceAlphaFormat = 1023;
THREE.RGBEFormat = THREE.RGBAFormat;
THREE.RGB_S3TC_DXT1_Format = 2001;
THREE.RGBA_S3TC_DXT1_Format = 2002;
THREE.RGBA_S3TC_DXT3_Format = 2003;
THREE.RGBA_S3TC_DXT5_Format = 2004;
THREE.RGB_PVRTC_4BPPV1_Format = 2100;
THREE.RGB_PVRTC_2BPPV1_Format = 2101;
THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
THREE.RGBA_PVRTC_2BPPV1_Format = 2103;
THREE.Projector = function () {
    THREE.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");
    this.projectVector = function (a, b) {
        THREE.warn("THREE.Projector: .projectVector() is now vector.project().");
        a.project(b);
    };
    this.unprojectVector = function (a, b) {
        THREE.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");
        a.unproject(b);
    };
    this.pickingRay = function (a, b) {
        THREE.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().");
    };
};
THREE.CanvasRenderer = function () {
    THREE.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");
    this.domElement = document.createElement("canvas");
    this.clear = function () {};
    this.render = function () {};
    this.setClearColor = function () {};
    this.setSize = function () {};
};
THREE.Color = function (a) {
    return 3 === arguments.length ? this.setRGB(arguments[0], arguments[1], arguments[2]) : this.set(a);
};
THREE.Color.prototype = {
    constructor: THREE.Color,
    r: 1,
    g: 1,
    b: 1,
    set: function (a) {
        a instanceof THREE.Color ? this.copy(a) : "number" === typeof a ? this.setHex(a) : "string" === typeof a && this.setStyle(a);
        return this;
    },
    setHex: function (a) {
        a = Math.floor(a);
        this.r = ((a >> 16) & 255) / 255;
        this.g = ((a >> 8) & 255) / 255;
        this.b = (a & 255) / 255;
        return this;
    },
    setRGB: function (a, b, c) {
        this.r = a;
        this.g = b;
        this.b = c;
        return this;
    },
    setHSL: function (a, b, c) {
        if (0 === b) this.r = this.g = this.b = c;
        else {
            var d = function (a, b, c) {
                0 > c && (c += 1);
                1 < c && (c -= 1);
                return c < 1 / 6 ? a + 6 * (b - a) * c : 0.5 > c ? b : c < 2 / 3 ? a + 6 * (b - a) * (2 / 3 - c) : a;
            };
            b = 0.5 >= c ? c * (1 + b) : c + b - c * b;
            c = 2 * c - b;
            this.r = d(c, b, a + 1 / 3);
            this.g = d(c, b, a);
            this.b = d(c, b, a - 1 / 3);
        }
        return this;
    },
    setStyle: function (a) {
        if (/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test(a))
            return (a = /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec(a)), (this.r = Math.min(255, parseInt(a[1], 10)) / 255), (this.g = Math.min(255, parseInt(a[2], 10)) / 255), (this.b = Math.min(255, parseInt(a[3], 10)) / 255), this;
        if (/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test(a))
            return (a = /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec(a)), (this.r = Math.min(100, parseInt(a[1], 10)) / 100), (this.g = Math.min(100, parseInt(a[2], 10)) / 100), (this.b = Math.min(100, parseInt(a[3], 10)) / 100), this;
        if (/^\#([0-9a-f]{6})$/i.test(a)) return (a = /^\#([0-9a-f]{6})$/i.exec(a)), this.setHex(parseInt(a[1], 16)), this;
        if (/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a)) return (a = /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a)), this.setHex(parseInt(a[1] + a[1] + a[2] + a[2] + a[3] + a[3], 16)), this;
        if (/^(\w+)$/i.test(a)) return this.setHex(THREE.ColorKeywords[a]), this;
    },
    copy: function (a) {
        this.r = a.r;
        this.g = a.g;
        this.b = a.b;
        return this;
    },
    copyGammaToLinear: function (a, b) {
        void 0 === b && (b = 2);
        this.r = Math.pow(a.r, b);
        this.g = Math.pow(a.g, b);
        this.b = Math.pow(a.b, b);
        return this;
    },
    copyLinearToGamma: function (a, b) {
        void 0 === b && (b = 2);
        var c = 0 < b ? 1 / b : 1;
        this.r = Math.pow(a.r, c);
        this.g = Math.pow(a.g, c);
        this.b = Math.pow(a.b, c);
        return this;
    },
    convertGammaToLinear: function () {
        var a = this.r,
            b = this.g,
            c = this.b;
        this.r = a * a;
        this.g = b * b;
        this.b = c * c;
        return this;
    },
    convertLinearToGamma: function () {
        this.r = Math.sqrt(this.r);
        this.g = Math.sqrt(this.g);
        this.b = Math.sqrt(this.b);
        return this;
    },
    getHex: function () {
        return ((255 * this.r) << 16) ^ ((255 * this.g) << 8) ^ ((255 * this.b) << 0);
    },
    getHexString: function () {
        return ("000000" + this.getHex().toString(16)).slice(-6);
    },
    getHSL: function (a) {
        a = a || { h: 0, s: 0, l: 0 };
        var b = this.r,
            c = this.g,
            d = this.b,
            e = Math.max(b, c, d),
            f = Math.min(b, c, d),
            g,
            h = (f + e) / 2;
        if (f === e) f = g = 0;
        else {
            var k = e - f,
                f = 0.5 >= h ? k / (e + f) : k / (2 - e - f);
            switch (e) {
                case b:
                    g = (c - d) / k + (c < d ? 6 : 0);
                    break;
                case c:
                    g = (d - b) / k + 2;
                    break;
                case d:
                    g = (b - c) / k + 4;
            }
            g /= 6;
        }
        a.h = g;
        a.s = f;
        a.l = h;
        return a;
    },
    getStyle: function () {
        return "rgb(" + ((255 * this.r) | 0) + "," + ((255 * this.g) | 0) + "," + ((255 * this.b) | 0) + ")";
    },
    offsetHSL: function (a, b, c) {
        var d = this.getHSL();
        d.h += a;
        d.s += b;
        d.l += c;
        this.setHSL(d.h, d.s, d.l);
        return this;
    },
    add: function (a) {
        this.r += a.r;
        this.g += a.g;
        this.b += a.b;
        return this;
    },
    addColors: function (a, b) {
        this.r = a.r + b.r;
        this.g = a.g + b.g;
        this.b = a.b + b.b;
        return this;
    },
    addScalar: function (a) {
        this.r += a;
        this.g += a;
        this.b += a;
        return this;
    },
    multiply: function (a) {
        this.r *= a.r;
        this.g *= a.g;
        this.b *= a.b;
        return this;
    },
    multiplyScalar: function (a) {
        this.r *= a;
        this.g *= a;
        this.b *= a;
        return this;
    },
    lerp: function (a, b) {
        this.r += (a.r - this.r) * b;
        this.g += (a.g - this.g) * b;
        this.b += (a.b - this.b) * b;
        return this;
    },
    equals: function (a) {
        return a.r === this.r && a.g === this.g && a.b === this.b;
    },
    fromArray: function (a) {
        this.r = a[0];
        this.g = a[1];
        this.b = a[2];
        return this;
    },
    toArray: function (a, b) {
        void 0 === a && (a = []);
        void 0 === b && (b = 0);
        a[b] = this.r;
        a[b + 1] = this.g;
        a[b + 2] = this.b;
        return a;
    },
    clone: function () {
        return new THREE.Color().setRGB(this.r, this.g, this.b);
    },
};
THREE.ColorKeywords = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074,
};
THREE.Quaternion = function (a, b, c, d) {
    this._x = a || 0;
    this._y = b || 0;
    this._z = c || 0;
    this._w = void 0 !== d ? d : 1;
};
THREE.Quaternion.prototype = {
    constructor: THREE.Quaternion,
    _x: 0,
    _y: 0,
    _z: 0,
    _w: 0,
    get x() {
        return this._x;
    },
    set x(a) {
        this._x = a;
        this.onChangeCallback();
    },
    get y() {
        return this._y;
    },
    set y(a) {
        this._y = a;
        this.onChangeCallback();
    },
    get z() {
        return this._z;
    },
    set z(a) {
        this._z = a;
        this.onChangeCallback();
    },
    get w() {
        return this._w;
    },
    set w(a) {
        this._w = a;
        this.onChangeCallback();
    },
    set: function (a, b, c, d) {
        this._x = a;
        this._y = b;
        this._z = c;
        this._w = d;
        this.onChangeCallback();
        return this;
    },
    copy: function (a) {
        this._x = a.x;
        this._y = a.y;
        this._z = a.z;
        this._w = a.w;
        this.onChangeCallback();
        return this;
    },
    setFromEuler: function (a, b) {
        if (!1 === a instanceof THREE.Euler) throw Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
        var c = Math.cos(a._x / 2),
            d = Math.cos(a._y / 2),
            e = Math.cos(a._z / 2),
            f = Math.sin(a._x / 2),
            g = Math.sin(a._y / 2),
            h = Math.sin(a._z / 2);
        "XYZ" === a.order
            ? ((this._x = f * d * e + c * g * h), (this._y = c * g * e - f * d * h), (this._z = c * d * h + f * g * e), (this._w = c * d * e - f * g * h))
            : "YXZ" === a.order
            ? ((this._x = f * d * e + c * g * h), (this._y = c * g * e - f * d * h), (this._z = c * d * h - f * g * e), (this._w = c * d * e + f * g * h))
            : "ZXY" === a.order
            ? ((this._x = f * d * e - c * g * h), (this._y = c * g * e + f * d * h), (this._z = c * d * h + f * g * e), (this._w = c * d * e - f * g * h))
            : "ZYX" === a.order
            ? ((this._x = f * d * e - c * g * h), (this._y = c * g * e + f * d * h), (this._z = c * d * h - f * g * e), (this._w = c * d * e + f * g * h))
            : "YZX" === a.order
            ? ((this._x = f * d * e + c * g * h), (this._y = c * g * e + f * d * h), (this._z = c * d * h - f * g * e), (this._w = c * d * e - f * g * h))
            : "XZY" === a.order && ((this._x = f * d * e - c * g * h), (this._y = c * g * e - f * d * h), (this._z = c * d * h + f * g * e), (this._w = c * d * e + f * g * h));
        if (!1 !== b) this.onChangeCallback();
        return this;
    },
    setFromAxisAngle: function (a, b) {
        var c = b / 2,
            d = Math.sin(c);
        this._x = a.x * d;
        this._y = a.y * d;
        this._z = a.z * d;
        this._w = Math.cos(c);
        this.onChangeCallback();
        return this;
    },
    setFromRotationMatrix: function (a) {
        var b = a.elements,
            c = b[0];
        a = b[4];
        var d = b[8],
            e = b[1],
            f = b[5],
            g = b[9],
            h = b[2],
            k = b[6],
            b = b[10],
            l = c + f + b;
        0 < l
            ? ((c = 0.5 / Math.sqrt(l + 1)), (this._w = 0.25 / c), (this._x = (k - g) * c), (this._y = (d - h) * c), (this._z = (e - a) * c))
            : c > f && c > b
            ? ((c = 2 * Math.sqrt(1 + c - f - b)), (this._w = (k - g) / c), (this._x = 0.25 * c), (this._y = (a + e) / c), (this._z = (d + h) / c))
            : f > b
            ? ((c = 2 * Math.sqrt(1 + f - c - b)), (this._w = (d - h) / c), (this._x = (a + e) / c), (this._y = 0.25 * c), (this._z = (g + k) / c))
            : ((c = 2 * Math.sqrt(1 + b - c - f)), (this._w = (e - a) / c), (this._x = (d + h) / c), (this._y = (g + k) / c), (this._z = 0.25 * c));
        this.onChangeCallback();
        return this;
    },
    setFromUnitVectors: (function () {
        var a, b;
        return function (c, d) {
            void 0 === a && (a = new THREE.Vector3());
            b = c.dot(d) + 1;
            1e-6 > b ? ((b = 0), Math.abs(c.x) > Math.abs(c.z) ? a.set(-c.y, c.x, 0) : a.set(0, -c.z, c.y)) : a.crossVectors(c, d);
            this._x = a.x;
            this._y = a.y;
            this._z = a.z;
            this._w = b;
            this.normalize();
            return this;
        };
    })(),
    inverse: function () {
        this.conjugate().normalize();
        return this;
    },
    conjugate: function () {
        this._x *= -1;
        this._y *= -1;
        this._z *= -1;
        this.onChangeCallback();
        return this;
    },
    dot: function (a) {
        return this._x * a._x + this._y * a._y + this._z * a._z + this._w * a._w;
    },
    lengthSq: function () {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    },
    length: function () {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    },
    normalize: function () {
        var a = this.length();
        0 === a ? ((this._z = this._y = this._x = 0), (this._w = 1)) : ((a = 1 / a), (this._x *= a), (this._y *= a), (this._z *= a), (this._w *= a));
        this.onChangeCallback();
        return this;
    },
    multiply: function (a, b) {
        return void 0 !== b ? (THREE.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(a, b)) : this.multiplyQuaternions(this, a);
    },
    multiplyQuaternions: function (a, b) {
        var c = a._x,
            d = a._y,
            e = a._z,
            f = a._w,
            g = b._x,
            h = b._y,
            k = b._z,
            l = b._w;
        this._x = c * l + f * g + d * k - e * h;
        this._y = d * l + f * h + e * g - c * k;
        this._z = e * l + f * k + c * h - d * g;
        this._w = f * l - c * g - d * h - e * k;
        this.onChangeCallback();
        return this;
    },
    multiplyVector3: function (a) {
        THREE.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
        return a.applyQuaternion(this);
    },
    slerp: function (a, b) {
        if (0 === b) return this;
        if (1 === b) return this.copy(a);
        var c = this._x,
            d = this._y,
            e = this._z,
            f = this._w,
            g = f * a._w + c * a._x + d * a._y + e * a._z;
        0 > g ? ((this._w = -a._w), (this._x = -a._x), (this._y = -a._y), (this._z = -a._z), (g = -g)) : this.copy(a);
        if (1 <= g) return (this._w = f), (this._x = c), (this._y = d), (this._z = e), this;
        var h = Math.acos(g),
            k = Math.sqrt(1 - g * g);
        if (0.001 > Math.abs(k)) return (this._w = 0.5 * (f + this._w)), (this._x = 0.5 * (c + this._x)), (this._y = 0.5 * (d + this._y)), (this._z = 0.5 * (e + this._z)), this;
        g = Math.sin((1 - b) * h) / k;
        h = Math.sin(b * h) / k;
        this._w = f * g + this._w * h;
        this._x = c * g + this._x * h;
        this._y = d * g + this._y * h;
        this._z = e * g + this._z * h;
        this.onChangeCallback();
        return this;
    },
    equals: function (a) {
        return a._x === this._x && a._y === this._y && a._z === this._z && a._w === this._w;
    },
    fromArray: function (a, b) {
        void 0 === b && (b = 0);
        this._x = a[b];
        this._y = a[b + 1];
        this._z = a[b + 2];
        this._w = a[b + 3];
        this.onChangeCallback();
        return this;
    },
    toArray: function (a, b) {
        void 0 === a && (a = []);
        void 0 === b && (b = 0);
        a[b] = this._x;
        a[b + 1] = this._y;
        a[b + 2] = this._z;
        a[b + 3] = this._w;
        return a;
    },
    onChange: function (a) {
        this.onChangeCallback = a;
        return this;
    },
    onChangeCallback: function () {},
    clone: function () {
        return new THREE.Quaternion(this._x, this._y, this._z, this._w);
    },
};
THREE.Quaternion.slerp = function (a, b, c, d) {
    return c.copy(a).slerp(b, d);
};
THREE.Vector2 = function (a, b) {
    this.x = a || 0;
    this.y = b || 0;
};
THREE.Vector2.prototype = {
    constructor: THREE.Vector2,
    set: function (a, b) {
        this.x = a;
        this.y = b;
        return this;
    },
    setX: function (a) {
        this.x = a;
        return this;
    },
    setY: function (a) {
        this.y = a;
        return this;
    },
    setComponent: function (a, b) {
        switch (a) {
            case 0:
                this.x = b;
                break;
            case 1:
                this.y = b;
                break;
            default:
                throw Error("index is out of range: " + a);
        }
    },
    getComponent: function (a) {
        switch (a) {
            case 0:
                return this.x;
            case 1:
                return this.y;
            default:
                throw Error("index is out of range: " + a);
        }
    },
    copy: function (a) {
        this.x = a.x;
        this.y = a.y;
        return this;
    },
    add: function (a, b) {
        if (void 0 !== b) return THREE.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
        this.x += a.x;
        this.y += a.y;
        return this;
    },
    addScalar: function (a) {
        this.x += a;
        this.y += a;
        return this;
    },
    addVectors: function (a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        return this;
    },
    sub: function (a, b) {
        if (void 0 !== b) return THREE.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
        this.x -= a.x;
        this.y -= a.y;
        return this;
    },
    subScalar: function (a) {
        this.x -= a;
        this.y -= a;
        return this;
    },
    subVectors: function (a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        return this;
    },
    multiply: function (a) {
        this.x *= a.x;
        this.y *= a.y;
        return this;
    },
    multiplyScalar: function (a) {
        this.x *= a;
        this.y *= a;
        return this;
    },
    divide: function (a) {
        this.x /= a.x;
        this.y /= a.y;
        return this;
    },
    divideScalar: function (a) {
        0 !== a ? ((a = 1 / a), (this.x *= a), (this.y *= a)) : (this.y = this.x = 0);
        return this;
    },
    min: function (a) {
        this.x > a.x && (this.x = a.x);
        this.y > a.y && (this.y = a.y);
        return this;
    },
    max: function (a) {
        this.x < a.x && (this.x = a.x);
        this.y < a.y && (this.y = a.y);
        return this;
    },
    clamp: function (a, b) {
        this.x < a.x ? (this.x = a.x) : this.x > b.x && (this.x = b.x);
        this.y < a.y ? (this.y = a.y) : this.y > b.y && (this.y = b.y);
        return this;
    },
    clampScalar: (function () {
        var a, b;
        return function (c, d) {
            void 0 === a && ((a = new THREE.Vector2()), (b = new THREE.Vector2()));
            a.set(c, c);
            b.set(d, d);
            return this.clamp(a, b);
        };
    })(),
    floor: function () {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        return this;
    },
    ceil: function () {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        return this;
    },
    round: function () {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this;
    },
    roundToZero: function () {
        this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
        return this;
    },
    negate: function () {
        this.x = -this.x;
        this.y = -this.y;
        return this;
    },
    dot: function (a) {
        return this.x * a.x + this.y * a.y;
    },
    lengthSq: function () {
        return this.x * this.x + this.y * this.y;
    },
    length: function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    },
    normalize: function () {
        return this.divideScalar(this.length());
    },
    distanceTo: function (a) {
        return Math.sqrt(this.distanceToSquared(a));
    },
    distanceToSquared: function (a) {
        var b = this.x - a.x;
        a = this.y - a.y;
        return b * b + a * a;
    },
    setLength: function (a) {
        var b = this.length();
        0 !== b && a !== b && this.multiplyScalar(a / b);
        return this;
    },
    lerp: function (a, b) {
        this.x += (a.x - this.x) * b;
        this.y += (a.y - this.y) * b;
        return this;
    },
    lerpVectors: function (a, b, c) {
        this.subVectors(b, a).multiplyScalar(c).add(a);
        return this;
    },
    equals: function (a) {
        return a.x === this.x && a.y === this.y;
    },
    fromArray: function (a, b) {
        void 0 === b && (b = 0);
        this.x = a[b];
        this.y = a[b + 1];
        return this;
    },
    toArray: function (a, b) {
        void 0 === a && (a = []);
        void 0 === b && (b = 0);
        a[b] = this.x;
        a[b + 1] = this.y;
        return a;
    },
    fromAttribute: function (a, b, c) {
        void 0 === c && (c = 0);
        b = b * a.itemSize + c;
        this.x = a.array[b];
        this.y = a.array[b + 1];
        return this;
    },
    clone: function () {
        return new THREE.Vector2(this.x, this.y);
    },
};
THREE.Vector3 = function (a, b, c) {
    this.x = a || 0;
    this.y = b || 0;
    this.z = c || 0;
};
THREE.Vector3.prototype = {
    constructor: THREE.Vector3,
    set: function (a, b, c) {
        this.x = a;
        this.y = b;
        this.z = c;
        return this;
    },
    setX: function (a) {
        this.x = a;
        return this;
    },
    setY: function (a) {
        this.y = a;
        return this;
    },
    setZ: function (a) {
        this.z = a;
        return this;
    },
    setComponent: function (a, b) {
        switch (a) {
            case 0:
                this.x = b;
                break;
            case 1:
                this.y = b;
                break;
            case 2:
                this.z = b;
                break;
            default:
                throw Error("index is out of range: " + a);
        }
    },
    getComponent: function (a) {
        switch (a) {
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            default:
                throw Error("index is out of range: " + a);
        }
    },
    copy: function (a) {
        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        return this;
    },
    add: function (a, b) {
        if (void 0 !== b) return THREE.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
        this.x += a.x;
        this.y += a.y;
        this.z += a.z;
        return this;
    },
    addScalar: function (a) {
        this.x += a;
        this.y += a;
        this.z += a;
        return this;
    },
    addVectors: function (a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        return this;
    },
    sub: function (a, b) {
        if (void 0 !== b) return THREE.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
        this.x -= a.x;
        this.y -= a.y;
        this.z -= a.z;
        return this;
    },
    subScalar: function (a) {
        this.x -= a;
        this.y -= a;
        this.z -= a;
        return this;
    },
    subVectors: function (a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        return this;
    },
    multiply: function (a, b) {
        if (void 0 !== b) return THREE.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(a, b);
        this.x *= a.x;
        this.y *= a.y;
        this.z *= a.z;
        return this;
    },
    multiplyScalar: function (a) {
        this.x *= a;
        this.y *= a;
        this.z *= a;
        return this;
    },
    multiplyVectors: function (a, b) {
        this.x = a.x * b.x;
        this.y = a.y * b.y;
        this.z = a.z * b.z;
        return this;
    },
    applyEuler: (function () {
        var a;
        return function (b) {
            !1 === b instanceof THREE.Euler && THREE.error("THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.");
            void 0 === a && (a = new THREE.Quaternion());
            this.applyQuaternion(a.setFromEuler(b));
            return this;
        };
    })(),
    applyAxisAngle: (function () {
        var a;
        return function (b, c) {
            void 0 === a && (a = new THREE.Quaternion());
            this.applyQuaternion(a.setFromAxisAngle(b, c));
            return this;
        };
    })(),
    applyMatrix3: function (a) {
        var b = this.x,
            c = this.y,
            d = this.z;
        a = a.elements;
        this.x = a[0] * b + a[3] * c + a[6] * d;
        this.y = a[1] * b + a[4] * c + a[7] * d;
        this.z = a[2] * b + a[5] * c + a[8] * d;
        return this;
    },
    applyMatrix4: function (a) {
        var b = this.x,
            c = this.y,
            d = this.z;
        a = a.elements;
        this.x = a[0] * b + a[4] * c + a[8] * d + a[12];
        this.y = a[1] * b + a[5] * c + a[9] * d + a[13];
        this.z = a[2] * b + a[6] * c + a[10] * d + a[14];
        return this;
    },
    applyProjection: function (a) {
        var b = this.x,
            c = this.y,
            d = this.z;
        a = a.elements;
        var e = 1 / (a[3] * b + a[7] * c + a[11] * d + a[15]);
        this.x = (a[0] * b + a[4] * c + a[8] * d + a[12]) * e;
        this.y = (a[1] * b + a[5] * c + a[9] * d + a[13]) * e;
        this.z = (a[2] * b + a[6] * c + a[10] * d + a[14]) * e;
        return this;
    },
    applyQuaternion: function (a) {
        var b = this.x,
            c = this.y,
            d = this.z,
            e = a.x,
            f = a.y,
            g = a.z;
        a = a.w;
        var h = a * b + f * d - g * c,
            k = a * c + g * b - e * d,
            l = a * d + e * c - f * b,
            b = -e * b - f * c - g * d;
        this.x = h * a + b * -e + k * -g - l * -f;
        this.y = k * a + b * -f + l * -e - h * -g;
        this.z = l * a + b * -g + h * -f - k * -e;
        return this;
    },
    project: (function () {
        var a;
        return function (b) {
            void 0 === a && (a = new THREE.Matrix4());
            a.multiplyMatrices(b.projectionMatrix, a.getInverse(b.matrixWorld));
            return this.applyProjection(a);
        };
    })(),
    unproject: (function () {
        var a;
        return function (b) {
            void 0 === a && (a = new THREE.Matrix4());
            a.multiplyMatrices(b.matrixWorld, a.getInverse(b.projectionMatrix));
            return this.applyProjection(a);
        };
    })(),
    transformDirection: function (a) {
        var b = this.x,
            c = this.y,
            d = this.z;
        a = a.elements;
        this.x = a[0] * b + a[4] * c + a[8] * d;
        this.y = a[1] * b + a[5] * c + a[9] * d;
        this.z = a[2] * b + a[6] * c + a[10] * d;
        this.normalize();
        return this;
    },
    divide: function (a) {
        this.x /= a.x;
        this.y /= a.y;
        this.z /= a.z;
        return this;
    },
    divideScalar: function (a) {
        0 !== a ? ((a = 1 / a), (this.x *= a), (this.y *= a), (this.z *= a)) : (this.z = this.y = this.x = 0);
        return this;
    },
    min: function (a) {
        this.x > a.x && (this.x = a.x);
        this.y > a.y && (this.y = a.y);
        this.z > a.z && (this.z = a.z);
        return this;
    },
    max: function (a) {
        this.x < a.x && (this.x = a.x);
        this.y < a.y && (this.y = a.y);
        this.z < a.z && (this.z = a.z);
        return this;
    },
    clamp: function (a, b) {
        this.x < a.x ? (this.x = a.x) : this.x > b.x && (this.x = b.x);
        this.y < a.y ? (this.y = a.y) : this.y > b.y && (this.y = b.y);
        this.z < a.z ? (this.z = a.z) : this.z > b.z && (this.z = b.z);
        return this;
    },
    clampScalar: (function () {
        var a, b;
        return function (c, d) {
            void 0 === a && ((a = new THREE.Vector3()), (b = new THREE.Vector3()));
            a.set(c, c, c);
            b.set(d, d, d);
            return this.clamp(a, b);
        };
    })(),
    floor: function () {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        return this;
    },
    ceil: function () {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        return this;
    },
    round: function () {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        return this;
    },
    roundToZero: function () {
        this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
        this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
        return this;
    },
    negate: function () {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
    },
    dot: function (a) {
        return this.x * a.x + this.y * a.y + this.z * a.z;
    },
    lengthSq: function () {
        return this.x * this.x + this.y * this.y + this.z * this.z;
    },
    length: function () {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    },
    lengthManhattan: function () {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    },
    normalize: function () {
        return this.divideScalar(this.length());
    },
    setLength: function (a) {
        var b = this.length();
        0 !== b && a !== b && this.multiplyScalar(a / b);
        return this;
    },
    lerp: function (a, b) {
        this.x += (a.x - this.x) * b;
        this.y += (a.y - this.y) * b;
        this.z += (a.z - this.z) * b;
        return this;
    },
    lerpVectors: function (a, b, c) {
        this.subVectors(b, a).multiplyScalar(c).add(a);
        return this;
    },
    cross: function (a, b) {
        if (void 0 !== b) return THREE.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(a, b);
        var c = this.x,
            d = this.y,
            e = this.z;
        this.x = d * a.z - e * a.y;
        this.y = e * a.x - c * a.z;
        this.z = c * a.y - d * a.x;
        return this;
    },
    crossVectors: function (a, b) {
        var c = a.x,
            d = a.y,
            e = a.z,
            f = b.x,
            g = b.y,
            h = b.z;
        this.x = d * h - e * g;
        this.y = e * f - c * h;
        this.z = c * g - d * f;
        return this;
    },
    projectOnVector: (function () {
        var a, b;
        return function (c) {
            void 0 === a && (a = new THREE.Vector3());
            a.copy(c).normalize();
            b = this.dot(a);
            return this.copy(a).multiplyScalar(b);
        };
    })(),
    projectOnPlane: (function () {
        var a;
        return function (b) {
            void 0 === a && (a = new THREE.Vector3());
            a.copy(this).projectOnVector(b);
            return this.sub(a);
        };
    })(),
    reflect: (function () {
        var a;
        return function (b) {
            void 0 === a && (a = new THREE.Vector3());
            return this.sub(a.copy(b).multiplyScalar(2 * this.dot(b)));
        };
    })(),
    angleTo: function (a) {
        a = this.dot(a) / (this.length() * a.length());
        return Math.acos(THREE.Math.clamp(a, -1, 1));
    },
    distanceTo: function (a) {
        return Math.sqrt(this.distanceToSquared(a));
    },
    distanceToSquared: function (a) {
        var b = this.x - a.x,
            c = this.y - a.y;
        a = this.z - a.z;
        return b * b + c * c + a * a;
    },
    setEulerFromRotationMatrix: function (a, b) {
        THREE.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
    },
    setEulerFromQuaternion: function (a, b) {
        THREE.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
    },
    getPositionFromMatrix: function (a) {
        THREE.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
        return this.setFromMatrixPosition(a);
    },
    getScaleFromMatrix: function (a) {
        THREE.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
        return this.setFromMatrixScale(a);
    },
    getColumnFromMatrix: function (a, b) {
        THREE.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
        return this.setFromMatrixColumn(a, b);
    },
    setFromMatrixPosition: function (a) {
        this.x = a.elements[12];
        this.y = a.elements[13];
        this.z = a.elements[14];
        return this;
    },
    setFromMatrixScale: function (a) {
        var b = this.set(a.elements[0], a.elements[1], a.elements[2]).length(),
            c = this.set(a.elements[4], a.elements[5], a.elements[6]).length();
        a = this.set(a.elements[8], a.elements[9], a.elements[10]).length();
        this.x = b;
        this.y = c;
        this.z = a;
        return this;
    },
    setFromMatrixColumn: function (a, b) {
        var c = 4 * a,
            d = b.elements;
        this.x = d[c];
        this.y = d[c + 1];
        this.z = d[c + 2];
        return this;
    },
    equals: function (a) {
        return a.x === this.x && a.y === this.y && a.z === this.z;
    },
    fromArray: function (a, b) {
        void 0 === b && (b = 0);
        this.x = a[b];
        this.y = a[b + 1];
        this.z = a[b + 2];
        return this;
    },
    toArray: function (a, b) {
        void 0 === a && (a = []);
        void 0 === b && (b = 0);
        a[b] = this.x;
        a[b + 1] = this.y;
        a[b + 2] = this.z;
        return a;
    },
    fromAttribute: function (a, b, c) {
        void 0 === c && (c = 0);
        b = b * a.itemSize + c;
        this.x = a.array[b];
        this.y = a.array[b + 1];
        this.z = a.array[b + 2];
        return this;
    },
    clone: function () {
        return new THREE.Vector3(this.x, this.y, this.z);
    },
};
THREE.Vector4 = function (a, b, c, d) {
    this.x = a || 0;
    this.y = b || 0;
    this.z = c || 0;
    this.w = void 0 !== d ? d : 1;
};
THREE.Vector4.prototype = {
    constructor: THREE.Vector4,
    set: function (a, b, c, d) {
        this.x = a;
        this.y = b;
        this.z = c;
        this.w = d;
        return this;
    },
    setX: function (a) {
        this.x = a;
        return this;
    },
    setY: function (a) {
        this.y = a;
        return this;
    },
    setZ: function (a) {
        this.z = a;
        return this;
    },
    setW: function (a) {
        this.w = a;
        return this;
    },
    setComponent: function (a, b) {
        switch (a) {
            case 0:
                this.x = b;
                break;
            case 1:
                this.y = b;
                break;
            case 2:
                this.z = b;
                break;
            case 3:
                this.w = b;
                break;
            default:
                throw Error("index is out of range: " + a);
        }
    },
    getComponent: function (a) {
        switch (a) {
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            case 3:
                return this.w;
            default:
                throw Error("index is out of range: " + a);
        }
    },
    copy: function (a) {
        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        this.w = void 0 !== a.w ? a.w : 1;
        return this;
    },
    add: function (a, b) {
        if (void 0 !== b) return THREE.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(a, b);
        this.x += a.x;
        this.y += a.y;
        this.z += a.z;
        this.w += a.w;
        return this;
    },
    addScalar: function (a) {
        this.x += a;
        this.y += a;
        this.z += a;
        this.w += a;
        return this;
    },
    addVectors: function (a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        this.w = a.w + b.w;
        return this;
    },
    sub: function (a, b) {
        if (void 0 !== b) return THREE.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(a, b);
        this.x -= a.x;
        this.y -= a.y;
        this.z -= a.z;
        this.w -= a.w;
        return this;
    },
    subScalar: function (a) {
        this.x -= a;
        this.y -= a;
        this.z -= a;
        this.w -= a;
        return this;
    },
    subVectors: function (a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        this.w = a.w - b.w;
        return this;
    },
    multiplyScalar: function (a) {
        this.x *= a;
        this.y *= a;
        this.z *= a;
        this.w *= a;
        return this;
    },
    applyMatrix4: function (a) {
        var b = this.x,
            c = this.y,
            d = this.z,
            e = this.w;
        a = a.elements;
        this.x = a[0] * b + a[4] * c + a[8] * d + a[12] * e;
        this.y = a[1] * b + a[5] * c + a[9] * d + a[13] * e;
        this.z = a[2] * b + a[6] * c + a[10] * d + a[14] * e;
        this.w = a[3] * b + a[7] * c + a[11] * d + a[15] * e;
        return this;
    },
    divideScalar: function (a) {
        0 !== a ? ((a = 1 / a), (this.x *= a), (this.y *= a), (this.z *= a), (this.w *= a)) : ((this.z = this.y = this.x = 0), (this.w = 1));
        return this;
    },
    setAxisAngleFromQuaternion: function (a) {
        this.w = 2 * Math.acos(a.w);
        var b = Math.sqrt(1 - a.w * a.w);
        1e-4 > b ? ((this.x = 1), (this.z = this.y = 0)) : ((this.x = a.x / b), (this.y = a.y / b), (this.z = a.z / b));
        return this;
    },
    setAxisAngleFromRotationMatrix: function (a) {
        var b, c, d;
        a = a.elements;
        var e = a[0];
        d = a[4];
        var f = a[8],
            g = a[1],
            h = a[5],
            k = a[9];
        c = a[2];
        b = a[6];
        var l = a[10];
        if (0.01 > Math.abs(d - g) && 0.01 > Math.abs(f - c) && 0.01 > Math.abs(k - b)) {
            if (0.1 > Math.abs(d + g) && 0.1 > Math.abs(f + c) && 0.1 > Math.abs(k + b) && 0.1 > Math.abs(e + h + l - 3)) return this.set(1, 0, 0, 0), this;
            a = Math.PI;
            e = (e + 1) / 2;
            h = (h + 1) / 2;
            l = (l + 1) / 2;
            d = (d + g) / 4;
            f = (f + c) / 4;
            k = (k + b) / 4;
            e > h && e > l
                ? 0.01 > e
                    ? ((b = 0), (d = c = 0.707106781))
                    : ((b = Math.sqrt(e)), (c = d / b), (d = f / b))
                : h > l
                ? 0.01 > h
                    ? ((b = 0.707106781), (c = 0), (d = 0.707106781))
                    : ((c = Math.sqrt(h)), (b = d / c), (d = k / c))
                : 0.01 > l
                ? ((c = b = 0.707106781), (d = 0))
                : ((d = Math.sqrt(l)), (b = f / d), (c = k / d));
            this.set(b, c, d, a);
            return this;
        }
        a = Math.sqrt((b - k) * (b - k) + (f - c) * (f - c) + (g - d) * (g - d));
        0.001 > Math.abs(a) && (a = 1);
        this.x = (b - k) / a;
        this.y = (f - c) / a;
        this.z = (g - d) / a;
        this.w = Math.acos((e + h + l - 1) / 2);
        return this;
    },
    min: function (a) {
        this.x > a.x && (this.x = a.x);
        this.y > a.y && (this.y = a.y);
        this.z > a.z && (this.z = a.z);
        this.w > a.w && (this.w = a.w);
        return this;
    },
    max: function (a) {
        this.x < a.x && (this.x = a.x);
        this.y < a.y && (this.y = a.y);
        this.z < a.z && (this.z = a.z);
        this.w < a.w && (this.w = a.w);
        return this;
    },
    clamp: function (a, b) {
        this.x < a.x ? (this.x = a.x) : this.x > b.x && (this.x = b.x);
        this.y < a.y ? (this.y = a.y) : this.y > b.y && (this.y = b.y);
        this.z < a.z ? (this.z = a.z) : this.z > b.z && (this.z = b.z);
        this.w < a.w ? (this.w = a.w) : this.w > b.w && (this.w = b.w);
        return this;
    },
    clampScalar: (function () {
        var a, b;
        return function (c, d) {
            void 0 === a && ((a = new THREE.Vector4()), (b = new THREE.Vector4()));
            a.set(c, c, c, c);
            b.set(d, d, d, d);
            return this.clamp(a, b);
        };
    })(),
    floor: function () {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        this.w = Math.floor(this.w);
        return this;
    },
    ceil: function () {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        this.w = Math.ceil(this.w);
        return this;
    },
    round: function () {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        this.w = Math.round(this.w);
        return this;
    },
    roundToZero: function () {
        this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y);
        this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z);
        this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w);
        return this;
    },
    negate: function () {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        this.w = -this.w;
        return this;
    },
    dot: function (a) {
        return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
    },
    lengthSq: function () {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    },
    length: function () {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    },
    lengthManhattan: function () {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    },
    normalize: function () {
        return this.divideScalar(this.length());
    },
    setLength: function (a) {
        var b = this.length();
        0 !== b && a !== b && this.multiplyScalar(a / b);
        return this;
    },
    lerp: function (a, b) {
        this.x += (a.x - this.x) * b;
        this.y += (a.y - this.y) * b;
        this.z += (a.z - this.z) * b;
        this.w += (a.w - this.w) * b;
        return this;
    },
    lerpVectors: function (a, b, c) {
        this.subVectors(b, a).multiplyScalar(c).add(a);
        return this;
    },
    equals: function (a) {
        return a.x === this.x && a.y === this.y && a.z === this.z && a.w === this.w;
    },
    fromArray: function (a, b) {
        void 0 === b && (b = 0);
        this.x = a[b];
        this.y = a[b + 1];
        this.z = a[b + 2];
        this.w = a[b + 3];
        return this;
    },
    toArray: function (a, b) {
        void 0 === a && (a = []);
        void 0 === b && (b = 0);
        a[b] = this.x;
        a[b + 1] = this.y;
        a[b + 2] = this.z;
        a[b + 3] = this.w;
        return a;
    },
    fromAttribute: function (a, b, c) {
        void 0 === c && (c = 0);
        b = b * a.itemSize + c;
        this.x = a.array[b];
        this.y = a.array[b + 1];
        this.z = a.array[b + 2];
        this.w = a.array[b + 3];
        return this;
    },
    clone: function () {
        return new THREE.Vector4(this.x, this.y, this.z, this.w);
    },
};
THREE.Euler = function (a, b, c, d) {
    this._x = a || 0;
    this._y = b || 0;
    this._z = c || 0;
    this._order = d || THREE.Euler.DefaultOrder;
};
THREE.Euler.RotationOrders = "XYZ YZX ZXY XZY YXZ ZYX".split(" ");
THREE.Euler.DefaultOrder = "XYZ";
THREE.Euler.prototype = {
    constructor: THREE.Euler,
    _x: 0,
    _y: 0,
    _z: 0,
    _order: THREE.Euler.DefaultOrder,
    get x() {
        return this._x;
    },
    set x(a) {
        this._x = a;
        this.onChangeCallback();
    },
    get y() {
        return this._y;
    },
    set y(a) {
        this._y = a;
        this.onChangeCallback();
    },
    get z() {
        return this._z;
    },
    set z(a) {
        this._z = a;
        this.onChangeCallback();
    },
    get order() {
        return this._order;
    },
    set order(a) {
        this._order = a;
        this.onChangeCallback();
    },
    set: function (a, b, c, d) {
        this._x = a;
        this._y = b;
        this._z = c;
        this._order = d || this._order;
        this.onChangeCallback();
        return this;
    },
    copy: function (a) {
        this._x = a._x;
        this._y = a._y;
        this._z = a._z;
        this._order = a._order;
        this.onChangeCallback();
        return this;
    },
    setFromRotationMatrix: function (a, b, c) {
        var d = THREE.Math.clamp,
            e = a.elements;
        a = e[0];
        var f = e[4],
            g = e[8],
            h = e[1],
            k = e[5],
            l = e[9],
            p = e[2],
            q = e[6],
            e = e[10];
        b = b || this._order;
        "XYZ" === b
            ? ((this._y = Math.asin(d(g, -1, 1))), 0.99999 > Math.abs(g) ? ((this._x = Math.atan2(-l, e)), (this._z = Math.atan2(-f, a))) : ((this._x = Math.atan2(q, k)), (this._z = 0)))
            : "YXZ" === b
            ? ((this._x = Math.asin(-d(l, -1, 1))), 0.99999 > Math.abs(l) ? ((this._y = Math.atan2(g, e)), (this._z = Math.atan2(h, k))) : ((this._y = Math.atan2(-p, a)), (this._z = 0)))
            : "ZXY" === b
            ? ((this._x = Math.asin(d(q, -1, 1))), 0.99999 > Math.abs(q) ? ((this._y = Math.atan2(-p, e)), (this._z = Math.atan2(-f, k))) : ((this._y = 0), (this._z = Math.atan2(h, a))))
            : "ZYX" === b
            ? ((this._y = Math.asin(-d(p, -1, 1))), 0.99999 > Math.abs(p) ? ((this._x = Math.atan2(q, e)), (this._z = Math.atan2(h, a))) : ((this._x = 0), (this._z = Math.atan2(-f, k))))
            : "YZX" === b
            ? ((this._z = Math.asin(d(h, -1, 1))), 0.99999 > Math.abs(h) ? ((this._x = Math.atan2(-l, k)), (this._y = Math.atan2(-p, a))) : ((this._x = 0), (this._y = Math.atan2(g, e))))
            : "XZY" === b
            ? ((this._z = Math.asin(-d(f, -1, 1))), 0.99999 > Math.abs(f) ? ((this._x = Math.atan2(q, k)), (this._y = Math.atan2(g, a))) : ((this._x = Math.atan2(-l, e)), (this._y = 0)))
            : THREE.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + b);
        this._order = b;
        if (!1 !== c) this.onChangeCallback();
        return this;
    },
    setFromQuaternion: (function () {
        var a;
        return function (b, c, d) {
            void 0 === a && (a = new THREE.Matrix4());
            a.makeRotationFromQuaternion(b);
            this.setFromRotationMatrix(a, c, d);
            return this;
        };
    })(),
    setFromVector3: function (a, b) {
        return this.set(a.x, a.y, a.z, b || this._order);
    },
    reorder: (function () {
        var a = new THREE.Quaternion();
        return function (b) {
            a.setFromEuler(this);
            this.setFromQuaternion(a, b);
        };
    })(),
    equals: function (a) {
        return a._x === this._x && a._y === this._y && a._z === this._z && a._order === this._order;
    },
    fromArray: function (a) {
        this._x = a[0];
        this._y = a[1];
        this._z = a[2];
        void 0 !== a[3] && (this._order = a[3]);
        this.onChangeCallback();
        return this;
    },
    toArray: function (a, b) {
        void 0 === a && (a = []);
        void 0 === b && (b = 0);
        a[b] = this._x;
        a[b + 1] = this._y;
        a[b + 2] = this._z;
        a[b + 3] = this._order;
        return a;
    },
    toVector3: function (a) {
        return a ? a.set(this._x, this._y, this._z) : new THREE.Vector3(this._x, this._y, this._z);
    },
    onChange: function (a) {
        this.onChangeCallback = a;
        return this;
    },
    onChangeCallback: function () {},
    clone: function () {
        return new THREE.Euler(this._x, this._y, this._z, this._order);
    },
};
THREE.Line3 = function (a, b) {
    this.start = void 0 !== a ? a : new THREE.Vector3();
    this.end = void 0 !== b ? b : new THREE.Vector3();
};
THREE.Line3.prototype = {
    constructor: THREE.Line3,
    set: function (a, b) {
        this.start.copy(a);
        this.end.copy(b);
        return this;
    },
    copy: function (a) {
        this.start.copy(a.start);
        this.end.copy(a.end);
        return this;
    },
    center: function (a) {
        return (a || new THREE.Vector3()).addVectors(this.start, this.end).multiplyScalar(0.5);
    },
    delta: function (a) {
        return (a || new THREE.Vector3()).subVectors(this.end, this.start);
    },
    distanceSq: function () {
        return this.start.distanceToSquared(this.end);
    },
    distance: function () {
        return this.start.distanceTo(this.end);
    },
    at: function (a, b) {
        var c = b || new THREE.Vector3();
        return this.delta(c).multiplyScalar(a).add(this.start);
    },
    closestPointToPointParameter: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Vector3();
        return function (c, d) {
            a.subVectors(c, this.start);
            b.subVectors(this.end, this.start);
            var e = b.dot(b),
                e = b.dot(a) / e;
            d && (e = THREE.Math.clamp(e, 0, 1));
            return e;
        };
    })(),
    closestPointToPoint: function (a, b, c) {
        a = this.closestPointToPointParameter(a, b);
        c = c || new THREE.Vector3();
        return this.delta(c).multiplyScalar(a).add(this.start);
    },
    applyMatrix4: function (a) {
        this.start.applyMatrix4(a);
        this.end.applyMatrix4(a);
        return this;
    },
    equals: function (a) {
        return a.start.equals(this.start) && a.end.equals(this.end);
    },
    clone: function () {
        return new THREE.Line3().copy(this);
    },
};
THREE.Box2 = function (a, b) {
    this.min = void 0 !== a ? a : new THREE.Vector2(Infinity, Infinity);
    this.max = void 0 !== b ? b : new THREE.Vector2(-Infinity, -Infinity);
};
THREE.Box2.prototype = {
    constructor: THREE.Box2,
    set: function (a, b) {
        this.min.copy(a);
        this.max.copy(b);
        return this;
    },
    setFromPoints: function (a) {
        this.makeEmpty();
        for (var b = 0, c = a.length; b < c; b++) this.expandByPoint(a[b]);
        return this;
    },
    setFromCenterAndSize: (function () {
        var a = new THREE.Vector2();
        return function (b, c) {
            var d = a.copy(c).multiplyScalar(0.5);
            this.min.copy(b).sub(d);
            this.max.copy(b).add(d);
            return this;
        };
    })(),
    copy: function (a) {
        this.min.copy(a.min);
        this.max.copy(a.max);
        return this;
    },
    makeEmpty: function () {
        this.min.x = this.min.y = Infinity;
        this.max.x = this.max.y = -Infinity;
        return this;
    },
    empty: function () {
        return this.max.x < this.min.x || this.max.y < this.min.y;
    },
    center: function (a) {
        return (a || new THREE.Vector2()).addVectors(this.min, this.max).multiplyScalar(0.5);
    },
    size: function (a) {
        return (a || new THREE.Vector2()).subVectors(this.max, this.min);
    },
    expandByPoint: function (a) {
        this.min.min(a);
        this.max.max(a);
        return this;
    },
    expandByVector: function (a) {
        this.min.sub(a);
        this.max.add(a);
        return this;
    },
    expandByScalar: function (a) {
        this.min.addScalar(-a);
        this.max.addScalar(a);
        return this;
    },
    containsPoint: function (a) {
        return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y ? !1 : !0;
    },
    containsBox: function (a) {
        return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y ? !0 : !1;
    },
    getParameter: function (a, b) {
        return (b || new THREE.Vector2()).set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y));
    },
    isIntersectionBox: function (a) {
        return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y ? !1 : !0;
    },
    clampPoint: function (a, b) {
        return (b || new THREE.Vector2()).copy(a).clamp(this.min, this.max);
    },
    distanceToPoint: (function () {
        var a = new THREE.Vector2();
        return function (b) {
            return a.copy(b).clamp(this.min, this.max).sub(b).length();
        };
    })(),
    intersect: function (a) {
        this.min.max(a.min);
        this.max.min(a.max);
        return this;
    },
    union: function (a) {
        this.min.min(a.min);
        this.max.max(a.max);
        return this;
    },
    translate: function (a) {
        this.min.add(a);
        this.max.add(a);
        return this;
    },
    equals: function (a) {
        return a.min.equals(this.min) && a.max.equals(this.max);
    },
    clone: function () {
        return new THREE.Box2().copy(this);
    },
};
THREE.Box3 = function (a, b) {
    this.min = void 0 !== a ? a : new THREE.Vector3(Infinity, Infinity, Infinity);
    this.max = void 0 !== b ? b : new THREE.Vector3(-Infinity, -Infinity, -Infinity);
};
THREE.Box3.prototype = {
    constructor: THREE.Box3,
    set: function (a, b) {
        this.min.copy(a);
        this.max.copy(b);
        return this;
    },
    setFromPoints: function (a) {
        this.makeEmpty();
        for (var b = 0, c = a.length; b < c; b++) this.expandByPoint(a[b]);
        return this;
    },
    setFromCenterAndSize: (function () {
        var a = new THREE.Vector3();
        return function (b, c) {
            var d = a.copy(c).multiplyScalar(0.5);
            this.min.copy(b).sub(d);
            this.max.copy(b).add(d);
            return this;
        };
    })(),
    setFromObject: (function () {
        var a = new THREE.Vector3();
        return function (b) {
            var c = this;
            b.updateMatrixWorld(!0);
            this.makeEmpty();
            b.traverse(function (b) {
                var e = b.geometry;
                if (void 0 !== e)
                    if (e instanceof THREE.Geometry) for (var f = e.vertices, e = 0, g = f.length; e < g; e++) a.copy(f[e]), a.applyMatrix4(b.matrixWorld), c.expandByPoint(a);
                    else if (e instanceof THREE.BufferGeometry && void 0 !== e.attributes.position)
                        for (f = e.attributes.position.array, e = 0, g = f.length; e < g; e += 3) a.set(f[e], f[e + 1], f[e + 2]), a.applyMatrix4(b.matrixWorld), c.expandByPoint(a);
            });
            return this;
        };
    })(),
    copy: function (a) {
        this.min.copy(a.min);
        this.max.copy(a.max);
        return this;
    },
    makeEmpty: function () {
        this.min.x = this.min.y = this.min.z = Infinity;
        this.max.x = this.max.y = this.max.z = -Infinity;
        return this;
    },
    empty: function () {
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    },
    center: function (a) {
        return (a || new THREE.Vector3()).addVectors(this.min, this.max).multiplyScalar(0.5);
    },
    size: function (a) {
        return (a || new THREE.Vector3()).subVectors(this.max, this.min);
    },
    expandByPoint: function (a) {
        this.min.min(a);
        this.max.max(a);
        return this;
    },
    expandByVector: function (a) {
        this.min.sub(a);
        this.max.add(a);
        return this;
    },
    expandByScalar: function (a) {
        this.min.addScalar(-a);
        this.max.addScalar(a);
        return this;
    },
    containsPoint: function (a) {
        return a.x < this.min.x || a.x > this.max.x || a.y < this.min.y || a.y > this.max.y || a.z < this.min.z || a.z > this.max.z ? !1 : !0;
    },
    containsBox: function (a) {
        return this.min.x <= a.min.x && a.max.x <= this.max.x && this.min.y <= a.min.y && a.max.y <= this.max.y && this.min.z <= a.min.z && a.max.z <= this.max.z ? !0 : !1;
    },
    getParameter: function (a, b) {
        return (b || new THREE.Vector3()).set((a.x - this.min.x) / (this.max.x - this.min.x), (a.y - this.min.y) / (this.max.y - this.min.y), (a.z - this.min.z) / (this.max.z - this.min.z));
    },
    isIntersectionBox: function (a) {
        return a.max.x < this.min.x || a.min.x > this.max.x || a.max.y < this.min.y || a.min.y > this.max.y || a.max.z < this.min.z || a.min.z > this.max.z ? !1 : !0;
    },
    clampPoint: function (a, b) {
        return (b || new THREE.Vector3()).copy(a).clamp(this.min, this.max);
    },
    distanceToPoint: (function () {
        var a = new THREE.Vector3();
        return function (b) {
            return a.copy(b).clamp(this.min, this.max).sub(b).length();
        };
    })(),
    getBoundingSphere: (function () {
        var a = new THREE.Vector3();
        return function (b) {
            b = b || new THREE.Sphere();
            b.center = this.center();
            b.radius = 0.5 * this.size(a).length();
            return b;
        };
    })(),
    intersect: function (a) {
        this.min.max(a.min);
        this.max.min(a.max);
        return this;
    },
    union: function (a) {
        this.min.min(a.min);
        this.max.max(a.max);
        return this;
    },
    applyMatrix4: (function () {
        var a = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];
        return function (b) {
            a[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(b);
            a[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(b);
            a[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(b);
            a[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(b);
            a[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(b);
            a[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(b);
            a[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(b);
            a[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(b);
            this.makeEmpty();
            this.setFromPoints(a);
            return this;
        };
    })(),
    translate: function (a) {
        this.min.add(a);
        this.max.add(a);
        return this;
    },
    equals: function (a) {
        return a.min.equals(this.min) && a.max.equals(this.max);
    },
    clone: function () {
        return new THREE.Box3().copy(this);
    },
};
THREE.Matrix3 = function () {
    this.elements = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
    0 < arguments.length && THREE.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
};
THREE.Matrix3.prototype = {
    constructor: THREE.Matrix3,
    set: function (a, b, c, d, e, f, g, h, k) {
        var l = this.elements;
        l[0] = a;
        l[3] = b;
        l[6] = c;
        l[1] = d;
        l[4] = e;
        l[7] = f;
        l[2] = g;
        l[5] = h;
        l[8] = k;
        return this;
    },
    identity: function () {
        this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
        return this;
    },
    copy: function (a) {
        a = a.elements;
        this.set(a[0], a[3], a[6], a[1], a[4], a[7], a[2], a[5], a[8]);
        return this;
    },
    multiplyVector3: function (a) {
        THREE.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
        return a.applyMatrix3(this);
    },
    multiplyVector3Array: function (a) {
        THREE.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
        return this.applyToVector3Array(a);
    },
    applyToVector3Array: (function () {
        var a = new THREE.Vector3();
        return function (b, c, d) {
            void 0 === c && (c = 0);
            void 0 === d && (d = b.length);
            for (var e = 0; e < d; e += 3, c += 3) (a.x = b[c]), (a.y = b[c + 1]), (a.z = b[c + 2]), a.applyMatrix3(this), (b[c] = a.x), (b[c + 1] = a.y), (b[c + 2] = a.z);
            return b;
        };
    })(),
    multiplyScalar: function (a) {
        var b = this.elements;
        b[0] *= a;
        b[3] *= a;
        b[6] *= a;
        b[1] *= a;
        b[4] *= a;
        b[7] *= a;
        b[2] *= a;
        b[5] *= a;
        b[8] *= a;
        return this;
    },
    determinant: function () {
        var a = this.elements,
            b = a[0],
            c = a[1],
            d = a[2],
            e = a[3],
            f = a[4],
            g = a[5],
            h = a[6],
            k = a[7],
            a = a[8];
        return b * f * a - b * g * k - c * e * a + c * g * h + d * e * k - d * f * h;
    },
    getInverse: function (a, b) {
        var c = a.elements,
            d = this.elements;
        d[0] = c[10] * c[5] - c[6] * c[9];
        d[1] = -c[10] * c[1] + c[2] * c[9];
        d[2] = c[6] * c[1] - c[2] * c[5];
        d[3] = -c[10] * c[4] + c[6] * c[8];
        d[4] = c[10] * c[0] - c[2] * c[8];
        d[5] = -c[6] * c[0] + c[2] * c[4];
        d[6] = c[9] * c[4] - c[5] * c[8];
        d[7] = -c[9] * c[0] + c[1] * c[8];
        d[8] = c[5] * c[0] - c[1] * c[4];
        c = c[0] * d[0] + c[1] * d[3] + c[2] * d[6];
        if (0 === c) {
            if (b) throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");
            THREE.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");
            this.identity();
            return this;
        }
        this.multiplyScalar(1 / c);
        return this;
    },
    transpose: function () {
        var a,
            b = this.elements;
        a = b[1];
        b[1] = b[3];
        b[3] = a;
        a = b[2];
        b[2] = b[6];
        b[6] = a;
        a = b[5];
        b[5] = b[7];
        b[7] = a;
        return this;
    },
    flattenToArrayOffset: function (a, b) {
        var c = this.elements;
        a[b] = c[0];
        a[b + 1] = c[1];
        a[b + 2] = c[2];
        a[b + 3] = c[3];
        a[b + 4] = c[4];
        a[b + 5] = c[5];
        a[b + 6] = c[6];
        a[b + 7] = c[7];
        a[b + 8] = c[8];
        return a;
    },
    getNormalMatrix: function (a) {
        this.getInverse(a).transpose();
        return this;
    },
    transposeIntoArray: function (a) {
        var b = this.elements;
        a[0] = b[0];
        a[1] = b[3];
        a[2] = b[6];
        a[3] = b[1];
        a[4] = b[4];
        a[5] = b[7];
        a[6] = b[2];
        a[7] = b[5];
        a[8] = b[8];
        return this;
    },
    fromArray: function (a) {
        this.elements.set(a);
        return this;
    },
    toArray: function () {
        var a = this.elements;
        return [a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]];
    },
    clone: function () {
        return new THREE.Matrix3().fromArray(this.elements);
    },
};
THREE.Matrix4 = function () {
    this.elements = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
    0 < arguments.length && THREE.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
};
THREE.Matrix4.prototype = {
    constructor: THREE.Matrix4,
    set: function (a, b, c, d, e, f, g, h, k, l, p, q, n, t, r, s) {
        var u = this.elements;
        u[0] = a;
        u[4] = b;
        u[8] = c;
        u[12] = d;
        u[1] = e;
        u[5] = f;
        u[9] = g;
        u[13] = h;
        u[2] = k;
        u[6] = l;
        u[10] = p;
        u[14] = q;
        u[3] = n;
        u[7] = t;
        u[11] = r;
        u[15] = s;
        return this;
    },
    identity: function () {
        this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this;
    },
    copy: function (a) {
        this.elements.set(a.elements);
        return this;
    },
    extractPosition: function (a) {
        THREE.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
        return this.copyPosition(a);
    },
    copyPosition: function (a) {
        var b = this.elements;
        a = a.elements;
        b[12] = a[12];
        b[13] = a[13];
        b[14] = a[14];
        return this;
    },
    extractBasis: function (a, b, c) {
        var d = this.elements;
        a.set(d[0], d[1], d[2]);
        b.set(d[4], d[5], d[6]);
        c.set(d[8], d[9], d[10]);
        return this;
    },
    makeBasis: function (a, b, c) {
        this.set(a.x, b.x, c.x, 0, a.y, b.y, c.y, 0, a.z, b.z, c.z, 0, 0, 0, 0, 1);
        return this;
    },
    extractRotation: (function () {
        var a = new THREE.Vector3();
        return function (b) {
            var c = this.elements;
            b = b.elements;
            var d = 1 / a.set(b[0], b[1], b[2]).length(),
                e = 1 / a.set(b[4], b[5], b[6]).length(),
                f = 1 / a.set(b[8], b[9], b[10]).length();
            c[0] = b[0] * d;
            c[1] = b[1] * d;
            c[2] = b[2] * d;
            c[4] = b[4] * e;
            c[5] = b[5] * e;
            c[6] = b[6] * e;
            c[8] = b[8] * f;
            c[9] = b[9] * f;
            c[10] = b[10] * f;
            return this;
        };
    })(),
    makeRotationFromEuler: function (a) {
        !1 === a instanceof THREE.Euler && THREE.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
        var b = this.elements,
            c = a.x,
            d = a.y,
            e = a.z,
            f = Math.cos(c),
            c = Math.sin(c),
            g = Math.cos(d),
            d = Math.sin(d),
            h = Math.cos(e),
            e = Math.sin(e);
        if ("XYZ" === a.order) {
            a = f * h;
            var k = f * e,
                l = c * h,
                p = c * e;
            b[0] = g * h;
            b[4] = -g * e;
            b[8] = d;
            b[1] = k + l * d;
            b[5] = a - p * d;
            b[9] = -c * g;
            b[2] = p - a * d;
            b[6] = l + k * d;
            b[10] = f * g;
        } else
            "YXZ" === a.order
                ? ((a = g * h), (k = g * e), (l = d * h), (p = d * e), (b[0] = a + p * c), (b[4] = l * c - k), (b[8] = f * d), (b[1] = f * e), (b[5] = f * h), (b[9] = -c), (b[2] = k * c - l), (b[6] = p + a * c), (b[10] = f * g))
                : "ZXY" === a.order
                ? ((a = g * h), (k = g * e), (l = d * h), (p = d * e), (b[0] = a - p * c), (b[4] = -f * e), (b[8] = l + k * c), (b[1] = k + l * c), (b[5] = f * h), (b[9] = p - a * c), (b[2] = -f * d), (b[6] = c), (b[10] = f * g))
                : "ZYX" === a.order
                ? ((a = f * h), (k = f * e), (l = c * h), (p = c * e), (b[0] = g * h), (b[4] = l * d - k), (b[8] = a * d + p), (b[1] = g * e), (b[5] = p * d + a), (b[9] = k * d - l), (b[2] = -d), (b[6] = c * g), (b[10] = f * g))
                : "YZX" === a.order
                ? ((a = f * g), (k = f * d), (l = c * g), (p = c * d), (b[0] = g * h), (b[4] = p - a * e), (b[8] = l * e + k), (b[1] = e), (b[5] = f * h), (b[9] = -c * h), (b[2] = -d * h), (b[6] = k * e + l), (b[10] = a - p * e))
                : "XZY" === a.order &&
                  ((a = f * g), (k = f * d), (l = c * g), (p = c * d), (b[0] = g * h), (b[4] = -e), (b[8] = d * h), (b[1] = a * e + p), (b[5] = f * h), (b[9] = k * e - l), (b[2] = l * e - k), (b[6] = c * h), (b[10] = p * e + a));
        b[3] = 0;
        b[7] = 0;
        b[11] = 0;
        b[12] = 0;
        b[13] = 0;
        b[14] = 0;
        b[15] = 1;
        return this;
    },
    setRotationFromQuaternion: function (a) {
        THREE.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
        return this.makeRotationFromQuaternion(a);
    },
    makeRotationFromQuaternion: function (a) {
        var b = this.elements,
            c = a.x,
            d = a.y,
            e = a.z,
            f = a.w,
            g = c + c,
            h = d + d,
            k = e + e;
        a = c * g;
        var l = c * h,
            c = c * k,
            p = d * h,
            d = d * k,
            e = e * k,
            g = f * g,
            h = f * h,
            f = f * k;
        b[0] = 1 - (p + e);
        b[4] = l - f;
        b[8] = c + h;
        b[1] = l + f;
        b[5] = 1 - (a + e);
        b[9] = d - g;
        b[2] = c - h;
        b[6] = d + g;
        b[10] = 1 - (a + p);
        b[3] = 0;
        b[7] = 0;
        b[11] = 0;
        b[12] = 0;
        b[13] = 0;
        b[14] = 0;
        b[15] = 1;
        return this;
    },
    lookAt: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Vector3(),
            c = new THREE.Vector3();
        return function (d, e, f) {
            var g = this.elements;
            c.subVectors(d, e).normalize();
            0 === c.length() && (c.z = 1);
            a.crossVectors(f, c).normalize();
            0 === a.length() && ((c.x += 1e-4), a.crossVectors(f, c).normalize());
            b.crossVectors(c, a);
            g[0] = a.x;
            g[4] = b.x;
            g[8] = c.x;
            g[1] = a.y;
            g[5] = b.y;
            g[9] = c.y;
            g[2] = a.z;
            g[6] = b.z;
            g[10] = c.z;
            return this;
        };
    })(),
    multiply: function (a, b) {
        return void 0 !== b ? (THREE.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(a, b)) : this.multiplyMatrices(this, a);
    },
    multiplyMatrices: function (a, b) {
        var c = a.elements,
            d = b.elements,
            e = this.elements,
            f = c[0],
            g = c[4],
            h = c[8],
            k = c[12],
            l = c[1],
            p = c[5],
            q = c[9],
            n = c[13],
            t = c[2],
            r = c[6],
            s = c[10],
            u = c[14],
            v = c[3],
            x = c[7],
            D = c[11],
            c = c[15],
            w = d[0],
            y = d[4],
            A = d[8],
            E = d[12],
            G = d[1],
            F = d[5],
            z = d[9],
            I = d[13],
            U = d[2],
            M = d[6],
            H = d[10],
            L = d[14],
            P = d[3],
            N = d[7],
            R = d[11],
            d = d[15];
        e[0] = f * w + g * G + h * U + k * P;
        e[4] = f * y + g * F + h * M + k * N;
        e[8] = f * A + g * z + h * H + k * R;
        e[12] = f * E + g * I + h * L + k * d;
        e[1] = l * w + p * G + q * U + n * P;
        e[5] = l * y + p * F + q * M + n * N;
        e[9] = l * A + p * z + q * H + n * R;
        e[13] = l * E + p * I + q * L + n * d;
        e[2] = t * w + r * G + s * U + u * P;
        e[6] = t * y + r * F + s * M + u * N;
        e[10] = t * A + r * z + s * H + u * R;
        e[14] = t * E + r * I + s * L + u * d;
        e[3] = v * w + x * G + D * U + c * P;
        e[7] = v * y + x * F + D * M + c * N;
        e[11] = v * A + x * z + D * H + c * R;
        e[15] = v * E + x * I + D * L + c * d;
        return this;
    },
    multiplyToArray: function (a, b, c) {
        var d = this.elements;
        this.multiplyMatrices(a, b);
        c[0] = d[0];
        c[1] = d[1];
        c[2] = d[2];
        c[3] = d[3];
        c[4] = d[4];
        c[5] = d[5];
        c[6] = d[6];
        c[7] = d[7];
        c[8] = d[8];
        c[9] = d[9];
        c[10] = d[10];
        c[11] = d[11];
        c[12] = d[12];
        c[13] = d[13];
        c[14] = d[14];
        c[15] = d[15];
        return this;
    },
    multiplyScalar: function (a) {
        var b = this.elements;
        b[0] *= a;
        b[4] *= a;
        b[8] *= a;
        b[12] *= a;
        b[1] *= a;
        b[5] *= a;
        b[9] *= a;
        b[13] *= a;
        b[2] *= a;
        b[6] *= a;
        b[10] *= a;
        b[14] *= a;
        b[3] *= a;
        b[7] *= a;
        b[11] *= a;
        b[15] *= a;
        return this;
    },
    multiplyVector3: function (a) {
        THREE.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
        return a.applyProjection(this);
    },
    multiplyVector4: function (a) {
        THREE.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
        return a.applyMatrix4(this);
    },
    multiplyVector3Array: function (a) {
        THREE.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.");
        return this.applyToVector3Array(a);
    },
    applyToVector3Array: (function () {
        var a = new THREE.Vector3();
        return function (b, c, d) {
            void 0 === c && (c = 0);
            void 0 === d && (d = b.length);
            for (var e = 0; e < d; e += 3, c += 3) (a.x = b[c]), (a.y = b[c + 1]), (a.z = b[c + 2]), a.applyMatrix4(this), (b[c] = a.x), (b[c + 1] = a.y), (b[c + 2] = a.z);
            return b;
        };
    })(),
    rotateAxis: function (a) {
        THREE.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
        a.transformDirection(this);
    },
    crossVector: function (a) {
        THREE.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
        return a.applyMatrix4(this);
    },
    determinant: function () {
        var a = this.elements,
            b = a[0],
            c = a[4],
            d = a[8],
            e = a[12],
            f = a[1],
            g = a[5],
            h = a[9],
            k = a[13],
            l = a[2],
            p = a[6],
            q = a[10],
            n = a[14];
        return (
            a[3] * (+e * h * p - d * k * p - e * g * q + c * k * q + d * g * n - c * h * n) +
            a[7] * (+b * h * n - b * k * q + e * f * q - d * f * n + d * k * l - e * h * l) +
            a[11] * (+b * k * p - b * g * n - e * f * p + c * f * n + e * g * l - c * k * l) +
            a[15] * (-d * g * l - b * h * p + b * g * q + d * f * p - c * f * q + c * h * l)
        );
    },
    transpose: function () {
        var a = this.elements,
            b;
        b = a[1];
        a[1] = a[4];
        a[4] = b;
        b = a[2];
        a[2] = a[8];
        a[8] = b;
        b = a[6];
        a[6] = a[9];
        a[9] = b;
        b = a[3];
        a[3] = a[12];
        a[12] = b;
        b = a[7];
        a[7] = a[13];
        a[13] = b;
        b = a[11];
        a[11] = a[14];
        a[14] = b;
        return this;
    },
    flattenToArrayOffset: function (a, b) {
        var c = this.elements;
        a[b] = c[0];
        a[b + 1] = c[1];
        a[b + 2] = c[2];
        a[b + 3] = c[3];
        a[b + 4] = c[4];
        a[b + 5] = c[5];
        a[b + 6] = c[6];
        a[b + 7] = c[7];
        a[b + 8] = c[8];
        a[b + 9] = c[9];
        a[b + 10] = c[10];
        a[b + 11] = c[11];
        a[b + 12] = c[12];
        a[b + 13] = c[13];
        a[b + 14] = c[14];
        a[b + 15] = c[15];
        return a;
    },
    getPosition: (function () {
        var a = new THREE.Vector3();
        return function () {
            THREE.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
            var b = this.elements;
            return a.set(b[12], b[13], b[14]);
        };
    })(),
    setPosition: function (a) {
        var b = this.elements;
        b[12] = a.x;
        b[13] = a.y;
        b[14] = a.z;
        return this;
    },
    getInverse: function (a, b) {
        var c = this.elements,
            d = a.elements,
            e = d[0],
            f = d[4],
            g = d[8],
            h = d[12],
            k = d[1],
            l = d[5],
            p = d[9],
            q = d[13],
            n = d[2],
            t = d[6],
            r = d[10],
            s = d[14],
            u = d[3],
            v = d[7],
            x = d[11],
            d = d[15];
        c[0] = p * s * v - q * r * v + q * t * x - l * s * x - p * t * d + l * r * d;
        c[4] = h * r * v - g * s * v - h * t * x + f * s * x + g * t * d - f * r * d;
        c[8] = g * q * v - h * p * v + h * l * x - f * q * x - g * l * d + f * p * d;
        c[12] = h * p * t - g * q * t - h * l * r + f * q * r + g * l * s - f * p * s;
        c[1] = q * r * u - p * s * u - q * n * x + k * s * x + p * n * d - k * r * d;
        c[5] = g * s * u - h * r * u + h * n * x - e * s * x - g * n * d + e * r * d;
        c[9] = h * p * u - g * q * u - h * k * x + e * q * x + g * k * d - e * p * d;
        c[13] = g * q * n - h * p * n + h * k * r - e * q * r - g * k * s + e * p * s;
        c[2] = l * s * u - q * t * u + q * n * v - k * s * v - l * n * d + k * t * d;
        c[6] = h * t * u - f * s * u - h * n * v + e * s * v + f * n * d - e * t * d;
        c[10] = f * q * u - h * l * u + h * k * v - e * q * v - f * k * d + e * l * d;
        c[14] = h * l * n - f * q * n - h * k * t + e * q * t + f * k * s - e * l * s;
        c[3] = p * t * u - l * r * u - p * n * v + k * r * v + l * n * x - k * t * x;
        c[7] = f * r * u - g * t * u + g * n * v - e * r * v - f * n * x + e * t * x;
        c[11] = g * l * u - f * p * u - g * k * v + e * p * v + f * k * x - e * l * x;
        c[15] = f * p * n - g * l * n + g * k * t - e * p * t - f * k * r + e * l * r;
        c = e * c[0] + k * c[4] + n * c[8] + u * c[12];
        if (0 == c) {
            if (b) throw Error("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");
            THREE.warn("THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0");
            this.identity();
            return this;
        }
        this.multiplyScalar(1 / c);
        return this;
    },
    translate: function (a) {
        THREE.error("THREE.Matrix4: .translate() has been removed.");
    },
    rotateX: function (a) {
        THREE.error("THREE.Matrix4: .rotateX() has been removed.");
    },
    rotateY: function (a) {
        THREE.error("THREE.Matrix4: .rotateY() has been removed.");
    },
    rotateZ: function (a) {
        THREE.error("THREE.Matrix4: .rotateZ() has been removed.");
    },
    rotateByAxis: function (a, b) {
        THREE.error("THREE.Matrix4: .rotateByAxis() has been removed.");
    },
    scale: function (a) {
        var b = this.elements,
            c = a.x,
            d = a.y;
        a = a.z;
        b[0] *= c;
        b[4] *= d;
        b[8] *= a;
        b[1] *= c;
        b[5] *= d;
        b[9] *= a;
        b[2] *= c;
        b[6] *= d;
        b[10] *= a;
        b[3] *= c;
        b[7] *= d;
        b[11] *= a;
        return this;
    },
    getMaxScaleOnAxis: function () {
        var a = this.elements;
        return Math.sqrt(Math.max(a[0] * a[0] + a[1] * a[1] + a[2] * a[2], Math.max(a[4] * a[4] + a[5] * a[5] + a[6] * a[6], a[8] * a[8] + a[9] * a[9] + a[10] * a[10])));
    },
    makeTranslation: function (a, b, c) {
        this.set(1, 0, 0, a, 0, 1, 0, b, 0, 0, 1, c, 0, 0, 0, 1);
        return this;
    },
    makeRotationX: function (a) {
        var b = Math.cos(a);
        a = Math.sin(a);
        this.set(1, 0, 0, 0, 0, b, -a, 0, 0, a, b, 0, 0, 0, 0, 1);
        return this;
    },
    makeRotationY: function (a) {
        var b = Math.cos(a);
        a = Math.sin(a);
        this.set(b, 0, a, 0, 0, 1, 0, 0, -a, 0, b, 0, 0, 0, 0, 1);
        return this;
    },
    makeRotationZ: function (a) {
        var b = Math.cos(a);
        a = Math.sin(a);
        this.set(b, -a, 0, 0, a, b, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this;
    },
    makeRotationAxis: function (a, b) {
        var c = Math.cos(b),
            d = Math.sin(b),
            e = 1 - c,
            f = a.x,
            g = a.y,
            h = a.z,
            k = e * f,
            l = e * g;
        this.set(k * f + c, k * g - d * h, k * h + d * g, 0, k * g + d * h, l * g + c, l * h - d * f, 0, k * h - d * g, l * h + d * f, e * h * h + c, 0, 0, 0, 0, 1);
        return this;
    },
    makeScale: function (a, b, c) {
        this.set(a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, 0, 0, 0, 1);
        return this;
    },
    compose: function (a, b, c) {
        this.makeRotationFromQuaternion(b);
        this.scale(c);
        this.setPosition(a);
        return this;
    },
    decompose: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Matrix4();
        return function (c, d, e) {
            var f = this.elements,
                g = a.set(f[0], f[1], f[2]).length(),
                h = a.set(f[4], f[5], f[6]).length(),
                k = a.set(f[8], f[9], f[10]).length();
            0 > this.determinant() && (g = -g);
            c.x = f[12];
            c.y = f[13];
            c.z = f[14];
            b.elements.set(this.elements);
            c = 1 / g;
            var f = 1 / h,
                l = 1 / k;
            b.elements[0] *= c;
            b.elements[1] *= c;
            b.elements[2] *= c;
            b.elements[4] *= f;
            b.elements[5] *= f;
            b.elements[6] *= f;
            b.elements[8] *= l;
            b.elements[9] *= l;
            b.elements[10] *= l;
            d.setFromRotationMatrix(b);
            e.x = g;
            e.y = h;
            e.z = k;
            return this;
        };
    })(),
    makeFrustum: function (a, b, c, d, e, f) {
        var g = this.elements;
        g[0] = (2 * e) / (b - a);
        g[4] = 0;
        g[8] = (b + a) / (b - a);
        g[12] = 0;
        g[1] = 0;
        g[5] = (2 * e) / (d - c);
        g[9] = (d + c) / (d - c);
        g[13] = 0;
        g[2] = 0;
        g[6] = 0;
        g[10] = -(f + e) / (f - e);
        g[14] = (-2 * f * e) / (f - e);
        g[3] = 0;
        g[7] = 0;
        g[11] = -1;
        g[15] = 0;
        return this;
    },
    makePerspective: function (a, b, c, d) {
        a = c * Math.tan(THREE.Math.degToRad(0.5 * a));
        var e = -a;
        return this.makeFrustum(e * b, a * b, e, a, c, d);
    },
    makeOrthographic: function (a, b, c, d, e, f) {
        var g = this.elements,
            h = b - a,
            k = c - d,
            l = f - e;
        g[0] = 2 / h;
        g[4] = 0;
        g[8] = 0;
        g[12] = -((b + a) / h);
        g[1] = 0;
        g[5] = 2 / k;
        g[9] = 0;
        g[13] = -((c + d) / k);
        g[2] = 0;
        g[6] = 0;
        g[10] = -2 / l;
        g[14] = -((f + e) / l);
        g[3] = 0;
        g[7] = 0;
        g[11] = 0;
        g[15] = 1;
        return this;
    },
    fromArray: function (a) {
        this.elements.set(a);
        return this;
    },
    toArray: function () {
        var a = this.elements;
        return [a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]];
    },
    clone: function () {
        return new THREE.Matrix4().fromArray(this.elements);
    },
};
THREE.Ray = function (a, b) {
    this.origin = void 0 !== a ? a : new THREE.Vector3();
    this.direction = void 0 !== b ? b : new THREE.Vector3();
};
THREE.Ray.prototype = {
    constructor: THREE.Ray,
    set: function (a, b) {
        this.origin.copy(a);
        this.direction.copy(b);
        return this;
    },
    copy: function (a) {
        this.origin.copy(a.origin);
        this.direction.copy(a.direction);
        return this;
    },
    at: function (a, b) {
        return (b || new THREE.Vector3()).copy(this.direction).multiplyScalar(a).add(this.origin);
    },
    recast: (function () {
        var a = new THREE.Vector3();
        return function (b) {
            this.origin.copy(this.at(b, a));
            return this;
        };
    })(),
    closestPointToPoint: function (a, b) {
        var c = b || new THREE.Vector3();
        c.subVectors(a, this.origin);
        var d = c.dot(this.direction);
        return 0 > d ? c.copy(this.origin) : c.copy(this.direction).multiplyScalar(d).add(this.origin);
    },
    distanceToPoint: (function () {
        var a = new THREE.Vector3();
        return function (b) {
            var c = a.subVectors(b, this.origin).dot(this.direction);
            if (0 > c) return this.origin.distanceTo(b);
            a.copy(this.direction).multiplyScalar(c).add(this.origin);
            return a.distanceTo(b);
        };
    })(),
    distanceSqToSegment: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Vector3(),
            c = new THREE.Vector3();
        return function (d, e, f, g) {
            a.copy(d).add(e).multiplyScalar(0.5);
            b.copy(e).sub(d).normalize();
            c.copy(this.origin).sub(a);
            var h = 0.5 * d.distanceTo(e),
                k = -this.direction.dot(b),
                l = c.dot(this.direction),
                p = -c.dot(b),
                q = c.lengthSq(),
                n = Math.abs(1 - k * k),
                t;
            0 < n
                ? ((d = k * p - l),
                  (e = k * l - p),
                  (t = h * n),
                  0 <= d
                      ? e >= -t
                          ? e <= t
                              ? ((h = 1 / n), (d *= h), (e *= h), (k = d * (d + k * e + 2 * l) + e * (k * d + e + 2 * p) + q))
                              : ((e = h), (d = Math.max(0, -(k * e + l))), (k = -d * d + e * (e + 2 * p) + q))
                          : ((e = -h), (d = Math.max(0, -(k * e + l))), (k = -d * d + e * (e + 2 * p) + q))
                      : e <= -t
                      ? ((d = Math.max(0, -(-k * h + l))), (e = 0 < d ? -h : Math.min(Math.max(-h, -p), h)), (k = -d * d + e * (e + 2 * p) + q))
                      : e <= t
                      ? ((d = 0), (e = Math.min(Math.max(-h, -p), h)), (k = e * (e + 2 * p) + q))
                      : ((d = Math.max(0, -(k * h + l))), (e = 0 < d ? h : Math.min(Math.max(-h, -p), h)), (k = -d * d + e * (e + 2 * p) + q)))
                : ((e = 0 < k ? -h : h), (d = Math.max(0, -(k * e + l))), (k = -d * d + e * (e + 2 * p) + q));
            f && f.copy(this.direction).multiplyScalar(d).add(this.origin);
            g && g.copy(b).multiplyScalar(e).add(a);
            return k;
        };
    })(),
    isIntersectionSphere: function (a) {
        return this.distanceToPoint(a.center) <= a.radius;
    },
    intersectSphere: (function () {
        var a = new THREE.Vector3();
        return function (b, c) {
            a.subVectors(b.center, this.origin);
            var d = a.dot(this.direction),
                e = a.dot(a) - d * d,
                f = b.radius * b.radius;
            if (e > f) return null;
            f = Math.sqrt(f - e);
            e = d - f;
            d += f;
            return 0 > e && 0 > d ? null : 0 > e ? this.at(d, c) : this.at(e, c);
        };
    })(),
    isIntersectionPlane: function (a) {
        var b = a.distanceToPoint(this.origin);
        return 0 === b || 0 > a.normal.dot(this.direction) * b ? !0 : !1;
    },
    distanceToPlane: function (a) {
        var b = a.normal.dot(this.direction);
        if (0 == b) return 0 == a.distanceToPoint(this.origin) ? 0 : null;
        a = -(this.origin.dot(a.normal) + a.constant) / b;
        return 0 <= a ? a : null;
    },
    intersectPlane: function (a, b) {
        var c = this.distanceToPlane(a);
        return null === c ? null : this.at(c, b);
    },
    isIntersectionBox: (function () {
        var a = new THREE.Vector3();
        return function (b) {
            return null !== this.intersectBox(b, a);
        };
    })(),
    intersectBox: function (a, b) {
        var c, d, e, f, g;
        d = 1 / this.direction.x;
        f = 1 / this.direction.y;
        g = 1 / this.direction.z;
        var h = this.origin;
        0 <= d ? ((c = (a.min.x - h.x) * d), (d *= a.max.x - h.x)) : ((c = (a.max.x - h.x) * d), (d *= a.min.x - h.x));
        0 <= f ? ((e = (a.min.y - h.y) * f), (f *= a.max.y - h.y)) : ((e = (a.max.y - h.y) * f), (f *= a.min.y - h.y));
        if (c > f || e > d) return null;
        if (e > c || c !== c) c = e;
        if (f < d || d !== d) d = f;
        0 <= g ? ((e = (a.min.z - h.z) * g), (g *= a.max.z - h.z)) : ((e = (a.max.z - h.z) * g), (g *= a.min.z - h.z));
        if (c > g || e > d) return null;
        if (e > c || c !== c) c = e;
        if (g < d || d !== d) d = g;
        return 0 > d ? null : this.at(0 <= c ? c : d, b);
    },
    intersectTriangle: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Vector3(),
            c = new THREE.Vector3(),
            d = new THREE.Vector3();
        return function (e, f, g, h, k) {
            b.subVectors(f, e);
            c.subVectors(g, e);
            d.crossVectors(b, c);
            f = this.direction.dot(d);
            if (0 < f) {
                if (h) return null;
                h = 1;
            } else if (0 > f) (h = -1), (f = -f);
            else return null;
            a.subVectors(this.origin, e);
            e = h * this.direction.dot(c.crossVectors(a, c));
            if (0 > e) return null;
            g = h * this.direction.dot(b.cross(a));
            if (0 > g || e + g > f) return null;
            e = -h * a.dot(d);
            return 0 > e ? null : this.at(e / f, k);
        };
    })(),
    applyMatrix4: function (a) {
        this.direction.add(this.origin).applyMatrix4(a);
        this.origin.applyMatrix4(a);
        this.direction.sub(this.origin);
        this.direction.normalize();
        return this;
    },
    equals: function (a) {
        return a.origin.equals(this.origin) && a.direction.equals(this.direction);
    },
    clone: function () {
        return new THREE.Ray().copy(this);
    },
};
THREE.Sphere = function (a, b) {
    this.center = void 0 !== a ? a : new THREE.Vector3();
    this.radius = void 0 !== b ? b : 0;
};
THREE.Sphere.prototype = {
    constructor: THREE.Sphere,
    set: function (a, b) {
        this.center.copy(a);
        this.radius = b;
        return this;
    },
    setFromPoints: (function () {
        var a = new THREE.Box3();
        return function (b, c) {
            var d = this.center;
            void 0 !== c ? d.copy(c) : a.setFromPoints(b).center(d);
            for (var e = 0, f = 0, g = b.length; f < g; f++) e = Math.max(e, d.distanceToSquared(b[f]));
            this.radius = Math.sqrt(e);
            return this;
        };
    })(),
    copy: function (a) {
        this.center.copy(a.center);
        this.radius = a.radius;
        return this;
    },
    empty: function () {
        return 0 >= this.radius;
    },
    containsPoint: function (a) {
        return a.distanceToSquared(this.center) <= this.radius * this.radius;
    },
    distanceToPoint: function (a) {
        return a.distanceTo(this.center) - this.radius;
    },
    intersectsSphere: function (a) {
        var b = this.radius + a.radius;
        return a.center.distanceToSquared(this.center) <= b * b;
    },
    clampPoint: function (a, b) {
        var c = this.center.distanceToSquared(a),
            d = b || new THREE.Vector3();
        d.copy(a);
        c > this.radius * this.radius && (d.sub(this.center).normalize(), d.multiplyScalar(this.radius).add(this.center));
        return d;
    },
    getBoundingBox: function (a) {
        a = a || new THREE.Box3();
        a.set(this.center, this.center);
        a.expandByScalar(this.radius);
        return a;
    },
    applyMatrix4: function (a) {
        this.center.applyMatrix4(a);
        this.radius *= a.getMaxScaleOnAxis();
        return this;
    },
    translate: function (a) {
        this.center.add(a);
        return this;
    },
    equals: function (a) {
        return a.center.equals(this.center) && a.radius === this.radius;
    },
    clone: function () {
        return new THREE.Sphere().copy(this);
    },
};
THREE.Frustum = function (a, b, c, d, e, f) {
    this.planes = [
        void 0 !== a ? a : new THREE.Plane(),
        void 0 !== b ? b : new THREE.Plane(),
        void 0 !== c ? c : new THREE.Plane(),
        void 0 !== d ? d : new THREE.Plane(),
        void 0 !== e ? e : new THREE.Plane(),
        void 0 !== f ? f : new THREE.Plane(),
    ];
};
THREE.Frustum.prototype = {
    constructor: THREE.Frustum,
    set: function (a, b, c, d, e, f) {
        var g = this.planes;
        g[0].copy(a);
        g[1].copy(b);
        g[2].copy(c);
        g[3].copy(d);
        g[4].copy(e);
        g[5].copy(f);
        return this;
    },
    copy: function (a) {
        for (var b = this.planes, c = 0; 6 > c; c++) b[c].copy(a.planes[c]);
        return this;
    },
    setFromMatrix: function (a) {
        var b = this.planes,
            c = a.elements;
        a = c[0];
        var d = c[1],
            e = c[2],
            f = c[3],
            g = c[4],
            h = c[5],
            k = c[6],
            l = c[7],
            p = c[8],
            q = c[9],
            n = c[10],
            t = c[11],
            r = c[12],
            s = c[13],
            u = c[14],
            c = c[15];
        b[0].setComponents(f - a, l - g, t - p, c - r).normalize();
        b[1].setComponents(f + a, l + g, t + p, c + r).normalize();
        b[2].setComponents(f + d, l + h, t + q, c + s).normalize();
        b[3].setComponents(f - d, l - h, t - q, c - s).normalize();
        b[4].setComponents(f - e, l - k, t - n, c - u).normalize();
        b[5].setComponents(f + e, l + k, t + n, c + u).normalize();
        return this;
    },
    intersectsObject: (function () {
        var a = new THREE.Sphere();
        return function (b) {
            var c = b.geometry;
            null === c.boundingSphere && c.computeBoundingSphere();
            a.copy(c.boundingSphere);
            a.applyMatrix4(b.matrixWorld);
            return this.intersectsSphere(a);
        };
    })(),
    intersectsSphere: function (a) {
        var b = this.planes,
            c = a.center;
        a = -a.radius;
        for (var d = 0; 6 > d; d++) if (b[d].distanceToPoint(c) < a) return !1;
        return !0;
    },
    intersectsBox: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Vector3();
        return function (c) {
            for (var d = this.planes, e = 0; 6 > e; e++) {
                var f = d[e];
                a.x = 0 < f.normal.x ? c.min.x : c.max.x;
                b.x = 0 < f.normal.x ? c.max.x : c.min.x;
                a.y = 0 < f.normal.y ? c.min.y : c.max.y;
                b.y = 0 < f.normal.y ? c.max.y : c.min.y;
                a.z = 0 < f.normal.z ? c.min.z : c.max.z;
                b.z = 0 < f.normal.z ? c.max.z : c.min.z;
                var g = f.distanceToPoint(a),
                    f = f.distanceToPoint(b);
                if (0 > g && 0 > f) return !1;
            }
            return !0;
        };
    })(),
    containsPoint: function (a) {
        for (var b = this.planes, c = 0; 6 > c; c++) if (0 > b[c].distanceToPoint(a)) return !1;
        return !0;
    },
    clone: function () {
        return new THREE.Frustum().copy(this);
    },
};
THREE.Plane = function (a, b) {
    this.normal = void 0 !== a ? a : new THREE.Vector3(1, 0, 0);
    this.constant = void 0 !== b ? b : 0;
};
THREE.Plane.prototype = {
    constructor: THREE.Plane,
    set: function (a, b) {
        this.normal.copy(a);
        this.constant = b;
        return this;
    },
    setComponents: function (a, b, c, d) {
        this.normal.set(a, b, c);
        this.constant = d;
        return this;
    },
    setFromNormalAndCoplanarPoint: function (a, b) {
        this.normal.copy(a);
        this.constant = -b.dot(this.normal);
        return this;
    },
    setFromCoplanarPoints: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Vector3();
        return function (c, d, e) {
            d = a.subVectors(e, d).cross(b.subVectors(c, d)).normalize();
            this.setFromNormalAndCoplanarPoint(d, c);
            return this;
        };
    })(),
    copy: function (a) {
        this.normal.copy(a.normal);
        this.constant = a.constant;
        return this;
    },
    normalize: function () {
        var a = 1 / this.normal.length();
        this.normal.multiplyScalar(a);
        this.constant *= a;
        return this;
    },
    negate: function () {
        this.constant *= -1;
        this.normal.negate();
        return this;
    },
    distanceToPoint: function (a) {
        return this.normal.dot(a) + this.constant;
    },
    distanceToSphere: function (a) {
        return this.distanceToPoint(a.center) - a.radius;
    },
    projectPoint: function (a, b) {
        return this.orthoPoint(a, b).sub(a).negate();
    },
    orthoPoint: function (a, b) {
        var c = this.distanceToPoint(a);
        return (b || new THREE.Vector3()).copy(this.normal).multiplyScalar(c);
    },
    isIntersectionLine: function (a) {
        var b = this.distanceToPoint(a.start);
        a = this.distanceToPoint(a.end);
        return (0 > b && 0 < a) || (0 > a && 0 < b);
    },
    intersectLine: (function () {
        var a = new THREE.Vector3();
        return function (b, c) {
            var d = c || new THREE.Vector3(),
                e = b.delta(a),
                f = this.normal.dot(e);
            if (0 == f) {
                if (0 == this.distanceToPoint(b.start)) return d.copy(b.start);
            } else return (f = -(b.start.dot(this.normal) + this.constant) / f), 0 > f || 1 < f ? void 0 : d.copy(e).multiplyScalar(f).add(b.start);
        };
    })(),
    coplanarPoint: function (a) {
        return (a || new THREE.Vector3()).copy(this.normal).multiplyScalar(-this.constant);
    },
    applyMatrix4: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Vector3(),
            c = new THREE.Matrix3();
        return function (d, e) {
            var f = e || c.getNormalMatrix(d),
                f = a.copy(this.normal).applyMatrix3(f),
                g = this.coplanarPoint(b);
            g.applyMatrix4(d);
            this.setFromNormalAndCoplanarPoint(f, g);
            return this;
        };
    })(),
    translate: function (a) {
        this.constant -= a.dot(this.normal);
        return this;
    },
    equals: function (a) {
        return a.normal.equals(this.normal) && a.constant == this.constant;
    },
    clone: function () {
        return new THREE.Plane().copy(this);
    },
};
THREE.Math = {
    generateUUID: (function () {
        var a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),
            b = Array(36),
            c = 0,
            d;
        return function () {
            for (var e = 0; 36 > e; e++)
                8 == e || 13 == e || 18 == e || 23 == e ? (b[e] = "-") : 14 == e ? (b[e] = "4") : (2 >= c && (c = (33554432 + 16777216 * Math.random()) | 0), (d = c & 15), (c >>= 4), (b[e] = a[19 == e ? (d & 3) | 8 : d]));
            return b.join("");
        };
    })(),
    clamp: function (a, b, c) {
        return a < b ? b : a > c ? c : a;
    },
    clampBottom: function (a, b) {
        return a < b ? b : a;
    },
    mapLinear: function (a, b, c, d, e) {
        return d + ((a - b) * (e - d)) / (c - b);
    },
    smoothstep: function (a, b, c) {
        if (a <= b) return 0;
        if (a >= c) return 1;
        a = (a - b) / (c - b);
        return a * a * (3 - 2 * a);
    },
    smootherstep: function (a, b, c) {
        if (a <= b) return 0;
        if (a >= c) return 1;
        a = (a - b) / (c - b);
        return a * a * a * (a * (6 * a - 15) + 10);
    },
    random16: function () {
        return (65280 * Math.random() + 255 * Math.random()) / 65535;
    },
    randInt: function (a, b) {
        return Math.floor(this.randFloat(a, b));
    },
    randFloat: function (a, b) {
        return a + Math.random() * (b - a);
    },
    randFloatSpread: function (a) {
        return a * (0.5 - Math.random());
    },
    degToRad: (function () {
        var a = Math.PI / 180;
        return function (b) {
            return b * a;
        };
    })(),
    radToDeg: (function () {
        var a = 180 / Math.PI;
        return function (b) {
            return b * a;
        };
    })(),
    isPowerOfTwo: function (a) {
        return 0 === (a & (a - 1)) && 0 !== a;
    },
    nextPowerOfTwo: function (a) {
        a--;
        a |= a >> 1;
        a |= a >> 2;
        a |= a >> 4;
        a |= a >> 8;
        a |= a >> 16;
        a++;
        return a;
    },
};
THREE.Spline = function (a) {
    function b(a, b, c, d, e, f, g) {
        a = 0.5 * (c - a);
        d = 0.5 * (d - b);
        return (2 * (b - c) + a + d) * g + (-3 * (b - c) - 2 * a - d) * f + a * e + b;
    }
    this.points = a;
    var c = [],
        d = { x: 0, y: 0, z: 0 },
        e,
        f,
        g,
        h,
        k,
        l,
        p,
        q,
        n;
    this.initFromArray = function (a) {
        this.points = [];
        for (var b = 0; b < a.length; b++) this.points[b] = { x: a[b][0], y: a[b][1], z: a[b][2] };
    };
    this.getPoint = function (a) {
        e = (this.points.length - 1) * a;
        f = Math.floor(e);
        g = e - f;
        c[0] = 0 === f ? f : f - 1;
        c[1] = f;
        c[2] = f > this.points.length - 2 ? this.points.length - 1 : f + 1;
        c[3] = f > this.points.length - 3 ? this.points.length - 1 : f + 2;
        l = this.points[c[0]];
        p = this.points[c[1]];
        q = this.points[c[2]];
        n = this.points[c[3]];
        h = g * g;
        k = g * h;
        d.x = b(l.x, p.x, q.x, n.x, g, h, k);
        d.y = b(l.y, p.y, q.y, n.y, g, h, k);
        d.z = b(l.z, p.z, q.z, n.z, g, h, k);
        return d;
    };
    this.getControlPointsArray = function () {
        var a,
            b,
            c = this.points.length,
            d = [];
        for (a = 0; a < c; a++) (b = this.points[a]), (d[a] = [b.x, b.y, b.z]);
        return d;
    };
    this.getLength = function (a) {
        var b,
            c,
            d,
            e = (b = b = 0),
            f = new THREE.Vector3(),
            g = new THREE.Vector3(),
            h = [],
            k = 0;
        h[0] = 0;
        a || (a = 100);
        c = this.points.length * a;
        f.copy(this.points[0]);
        for (a = 1; a < c; a++) (b = a / c), (d = this.getPoint(b)), g.copy(d), (k += g.distanceTo(f)), f.copy(d), (b *= this.points.length - 1), (b = Math.floor(b)), b != e && ((h[b] = k), (e = b));
        h[h.length] = k;
        return { chunks: h, total: k };
    };
    this.reparametrizeByArcLength = function (a) {
        var b,
            c,
            d,
            e,
            f,
            g,
            h = [],
            k = new THREE.Vector3(),
            n = this.getLength();
        h.push(k.copy(this.points[0]).clone());
        for (b = 1; b < this.points.length; b++) {
            c = n.chunks[b] - n.chunks[b - 1];
            g = Math.ceil((a * c) / n.total);
            e = (b - 1) / (this.points.length - 1);
            f = b / (this.points.length - 1);
            for (c = 1; c < g - 1; c++) (d = e + (1 / g) * c * (f - e)), (d = this.getPoint(d)), h.push(k.copy(d).clone());
            h.push(k.copy(this.points[b]).clone());
        }
        this.points = h;
    };
};
THREE.Triangle = function (a, b, c) {
    this.a = void 0 !== a ? a : new THREE.Vector3();
    this.b = void 0 !== b ? b : new THREE.Vector3();
    this.c = void 0 !== c ? c : new THREE.Vector3();
};
THREE.Triangle.normal = (function () {
    var a = new THREE.Vector3();
    return function (b, c, d, e) {
        e = e || new THREE.Vector3();
        e.subVectors(d, c);
        a.subVectors(b, c);
        e.cross(a);
        b = e.lengthSq();
        return 0 < b ? e.multiplyScalar(1 / Math.sqrt(b)) : e.set(0, 0, 0);
    };
})();
THREE.Triangle.barycoordFromPoint = (function () {
    var a = new THREE.Vector3(),
        b = new THREE.Vector3(),
        c = new THREE.Vector3();
    return function (d, e, f, g, h) {
        a.subVectors(g, e);
        b.subVectors(f, e);
        c.subVectors(d, e);
        d = a.dot(a);
        e = a.dot(b);
        f = a.dot(c);
        var k = b.dot(b);
        g = b.dot(c);
        var l = d * k - e * e;
        h = h || new THREE.Vector3();
        if (0 == l) return h.set(-2, -1, -1);
        l = 1 / l;
        k = (k * f - e * g) * l;
        d = (d * g - e * f) * l;
        return h.set(1 - k - d, d, k);
    };
})();
THREE.Triangle.containsPoint = (function () {
    var a = new THREE.Vector3();
    return function (b, c, d, e) {
        b = THREE.Triangle.barycoordFromPoint(b, c, d, e, a);
        return 0 <= b.x && 0 <= b.y && 1 >= b.x + b.y;
    };
})();
THREE.Triangle.prototype = {
    constructor: THREE.Triangle,
    set: function (a, b, c) {
        this.a.copy(a);
        this.b.copy(b);
        this.c.copy(c);
        return this;
    },
    setFromPointsAndIndices: function (a, b, c, d) {
        this.a.copy(a[b]);
        this.b.copy(a[c]);
        this.c.copy(a[d]);
        return this;
    },
    copy: function (a) {
        this.a.copy(a.a);
        this.b.copy(a.b);
        this.c.copy(a.c);
        return this;
    },
    area: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Vector3();
        return function () {
            a.subVectors(this.c, this.b);
            b.subVectors(this.a, this.b);
            return 0.5 * a.cross(b).length();
        };
    })(),
    midpoint: function (a) {
        return (a || new THREE.Vector3())
            .addVectors(this.a, this.b)
            .add(this.c)
            .multiplyScalar(1 / 3);
    },
    normal: function (a) {
        return THREE.Triangle.normal(this.a, this.b, this.c, a);
    },
    plane: function (a) {
        return (a || new THREE.Plane()).setFromCoplanarPoints(this.a, this.b, this.c);
    },
    barycoordFromPoint: function (a, b) {
        return THREE.Triangle.barycoordFromPoint(a, this.a, this.b, this.c, b);
    },
    containsPoint: function (a) {
        return THREE.Triangle.containsPoint(a, this.a, this.b, this.c);
    },
    equals: function (a) {
        return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c);
    },
    clone: function () {
        return new THREE.Triangle().copy(this);
    },
};
THREE.Clock = function (a) {
    this.autoStart = void 0 !== a ? a : !0;
    this.elapsedTime = this.oldTime = this.startTime = 0;
    this.running = !1;
};
THREE.Clock.prototype = {
    constructor: THREE.Clock,
    start: function () {
        this.oldTime = this.startTime = void 0 !== self.performance && void 0 !== self.performance.now ? self.performance.now() : Date.now();
        this.running = !0;
    },
    stop: function () {
        this.getElapsedTime();
        this.running = !1;
    },
    getElapsedTime: function () {
        this.getDelta();
        return this.elapsedTime;
    },
    getDelta: function () {
        var a = 0;
        this.autoStart && !this.running && this.start();
        if (this.running) {
            var b = void 0 !== self.performance && void 0 !== self.performance.now ? self.performance.now() : Date.now(),
                a = 0.001 * (b - this.oldTime);
            this.oldTime = b;
            this.elapsedTime += a;
        }
        return a;
    },
};
THREE.EventDispatcher = function () {};
THREE.EventDispatcher.prototype = {
    constructor: THREE.EventDispatcher,
    apply: function (a) {
        a.addEventListener = THREE.EventDispatcher.prototype.addEventListener;
        a.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;
        a.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;
        a.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;
    },
    addEventListener: function (a, b) {
        void 0 === this._listeners && (this._listeners = {});
        var c = this._listeners;
        void 0 === c[a] && (c[a] = []);
        -1 === c[a].indexOf(b) && c[a].push(b);
    },
    hasEventListener: function (a, b) {
        if (void 0 === this._listeners) return !1;
        var c = this._listeners;
        return void 0 !== c[a] && -1 !== c[a].indexOf(b) ? !0 : !1;
    },
    removeEventListener: function (a, b) {
        if (void 0 !== this._listeners) {
            var c = this._listeners[a];
            if (void 0 !== c) {
                var d = c.indexOf(b);
                -1 !== d && c.splice(d, 1);
            }
        }
    },
    dispatchEvent: function (a) {
        if (void 0 !== this._listeners) {
            var b = this._listeners[a.type];
            if (void 0 !== b) {
                a.target = this;
                for (var c = [], d = b.length, e = 0; e < d; e++) c[e] = b[e];
                for (e = 0; e < d; e++) c[e].call(this, a);
            }
        }
    },
};
(function (a) {
    a.Raycaster = function (b, c, f, g) {
        this.ray = new a.Ray(b, c);
        this.near = f || 0;
        this.far = g || Infinity;
        this.params = { Sprite: {}, Mesh: {}, PointCloud: { threshold: 1 }, LOD: {}, Line: {} };
    };
    var b = function (a, b) {
            return a.distance - b.distance;
        },
        c = function (a, b, f, g) {
            a.raycast(b, f);
            if (!0 === g) {
                a = a.children;
                g = 0;
                for (var h = a.length; g < h; g++) c(a[g], b, f, !0);
            }
        };
    a.Raycaster.prototype = {
        constructor: a.Raycaster,
        precision: 1e-4,
        linePrecision: 1,
        set: function (a, b) {
            this.ray.set(a, b);
        },
        setFromCamera: function (b, c) {
            c instanceof a.PerspectiveCamera
                ? (this.ray.origin.copy(c.position), this.ray.direction.set(b.x, b.y, 0.5).unproject(c).sub(c.position).normalize())
                : c instanceof a.OrthographicCamera
                ? (this.ray.origin.set(b.x, b.y, -1).unproject(c), this.ray.direction.set(0, 0, -1).transformDirection(c.matrixWorld))
                : a.error("THREE.Raycaster: Unsupported camera type.");
        },
        intersectObject: function (a, e) {
            var f = [];
            c(a, this, f, e);
            f.sort(b);
            return f;
        },
        intersectObjects: function (d, e) {
            var f = [];
            if (!1 === d instanceof Array) return a.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), f;
            for (var g = 0, h = d.length; g < h; g++) c(d[g], this, f, e);
            f.sort(b);
            return f;
        },
    };
})(THREE);
THREE.Object3D = function () {
    Object.defineProperty(this, "id", { value: THREE.Object3DIdCount++ });
    this.uuid = THREE.Math.generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = void 0;
    this.children = [];
    this.up = THREE.Object3D.DefaultUp.clone();
    var a = new THREE.Vector3(),
        b = new THREE.Euler(),
        c = new THREE.Quaternion(),
        d = new THREE.Vector3(1, 1, 1);
    b.onChange(function () {
        c.setFromEuler(b, !1);
    });
    c.onChange(function () {
        b.setFromQuaternion(c, void 0, !1);
    });
    Object.defineProperties(this, { position: { enumerable: !0, value: a }, rotation: { enumerable: !0, value: b }, quaternion: { enumerable: !0, value: c }, scale: { enumerable: !0, value: d } });
    this.rotationAutoUpdate = !0;
    this.matrix = new THREE.Matrix4();
    this.matrixWorld = new THREE.Matrix4();
    this.matrixAutoUpdate = !0;
    this.matrixWorldNeedsUpdate = !1;
    this.visible = !0;
    this.receiveShadow = this.castShadow = !1;
    this.frustumCulled = !0;
    this.renderOrder = 0;
    this.userData = {};
};
THREE.Object3D.DefaultUp = new THREE.Vector3(0, 1, 0);
THREE.Object3D.prototype = {
    constructor: THREE.Object3D,
    get eulerOrder() {
        THREE.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order.");
        return this.rotation.order;
    },
    set eulerOrder(a) {
        THREE.warn("THREE.Object3D: .eulerOrder has been moved to .rotation.order.");
        this.rotation.order = a;
    },
    get useQuaternion() {
        THREE.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
    },
    set useQuaternion(a) {
        THREE.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
    },
    applyMatrix: function (a) {
        this.matrix.multiplyMatrices(a, this.matrix);
        this.matrix.decompose(this.position, this.quaternion, this.scale);
    },
    setRotationFromAxisAngle: function (a, b) {
        this.quaternion.setFromAxisAngle(a, b);
    },
    setRotationFromEuler: function (a) {
        this.quaternion.setFromEuler(a, !0);
    },
    setRotationFromMatrix: function (a) {
        this.quaternion.setFromRotationMatrix(a);
    },
    setRotationFromQuaternion: function (a) {
        this.quaternion.copy(a);
    },
    rotateOnAxis: (function () {
        var a = new THREE.Quaternion();
        return function (b, c) {
            a.setFromAxisAngle(b, c);
            this.quaternion.multiply(a);
            return this;
        };
    })(),
    rotateX: (function () {
        var a = new THREE.Vector3(1, 0, 0);
        return function (b) {
            return this.rotateOnAxis(a, b);
        };
    })(),
    rotateY: (function () {
        var a = new THREE.Vector3(0, 1, 0);
        return function (b) {
            return this.rotateOnAxis(a, b);
        };
    })(),
    rotateZ: (function () {
        var a = new THREE.Vector3(0, 0, 1);
        return function (b) {
            return this.rotateOnAxis(a, b);
        };
    })(),
    translateOnAxis: (function () {
        var a = new THREE.Vector3();
        return function (b, c) {
            a.copy(b).applyQuaternion(this.quaternion);
            this.position.add(a.multiplyScalar(c));
            return this;
        };
    })(),
    translate: function (a, b) {
        THREE.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
        return this.translateOnAxis(b, a);
    },
    translateX: (function () {
        var a = new THREE.Vector3(1, 0, 0);
        return function (b) {
            return this.translateOnAxis(a, b);
        };
    })(),
    translateY: (function () {
        var a = new THREE.Vector3(0, 1, 0);
        return function (b) {
            return this.translateOnAxis(a, b);
        };
    })(),
    translateZ: (function () {
        var a = new THREE.Vector3(0, 0, 1);
        return function (b) {
            return this.translateOnAxis(a, b);
        };
    })(),
    localToWorld: function (a) {
        return a.applyMatrix4(this.matrixWorld);
    },
    worldToLocal: (function () {
        var a = new THREE.Matrix4();
        return function (b) {
            return b.applyMatrix4(a.getInverse(this.matrixWorld));
        };
    })(),
    lookAt: (function () {
        var a = new THREE.Matrix4();
        return function (b) {
            a.lookAt(b, this.position, this.up);
            this.quaternion.setFromRotationMatrix(a);
        };
    })(),
    add: function (a) {
        if (1 < arguments.length) {
            for (var b = 0; b < arguments.length; b++) this.add(arguments[b]);
            return this;
        }
        if (a === this) return THREE.error("THREE.Object3D.add: object can't be added as a child of itself.", a), this;
        a instanceof THREE.Object3D
            ? (void 0 !== a.parent && a.parent.remove(a), (a.parent = this), a.dispatchEvent({ type: "added" }), this.children.push(a))
            : THREE.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", a);
        return this;
    },
    remove: function (a) {
        if (1 < arguments.length) for (var b = 0; b < arguments.length; b++) this.remove(arguments[b]);
        b = this.children.indexOf(a);
        -1 !== b && ((a.parent = void 0), a.dispatchEvent({ type: "removed" }), this.children.splice(b, 1));
    },
    getChildByName: function (a) {
        THREE.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
        return this.getObjectByName(a);
    },
    getObjectById: function (a) {
        return this.getObjectByProperty("id", a);
    },
    getObjectByName: function (a) {
        return this.getObjectByProperty("name", a);
    },
    getObjectByProperty: function (a, b) {
        if (this[a] === b) return this;
        for (var c = 0, d = this.children.length; c < d; c++) {
            var e = this.children[c].getObjectByProperty(a, b);
            if (void 0 !== e) return e;
        }
    },
    getWorldPosition: function (a) {
        a = a || new THREE.Vector3();
        this.updateMatrixWorld(!0);
        return a.setFromMatrixPosition(this.matrixWorld);
    },
    getWorldQuaternion: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Vector3();
        return function (c) {
            c = c || new THREE.Quaternion();
            this.updateMatrixWorld(!0);
            this.matrixWorld.decompose(a, c, b);
            return c;
        };
    })(),
    getWorldRotation: (function () {
        var a = new THREE.Quaternion();
        return function (b) {
            b = b || new THREE.Euler();
            this.getWorldQuaternion(a);
            return b.setFromQuaternion(a, this.rotation.order, !1);
        };
    })(),
    getWorldScale: (function () {
        var a = new THREE.Vector3(),
            b = new THREE.Quaternion();
        return function (c) {
            c = c || new THREE.Vector3();
            this.updateMatrixWorld(!0);
            this.matrixWorld.decompose(a, b, c);
            return c;
        };
    })(),
    getWorldDirection: (function () {
        var a = new THREE.Quaternion();
        return function (b) {
            b = b || new THREE.Vector3();
            this.getWorldQuaternion(a);
            return b.set(0, 0, 1).applyQuaternion(a);
        };
    })(),
    raycast: function () {},
    traverse: function (a) {
        a(this);
        for (var b = 0, c = this.children.length; b < c; b++) this.children[b].traverse(a);
    },
    traverseVisible: function (a) {
        if (!1 !== this.visible) {
            a(this);
            for (var b = 0, c = this.children.length; b < c; b++) this.children[b].traverseVisible(a);
        }
    },
    traverseAncestors: function (a) {
        this.parent && (a(this.parent), this.parent.traverseAncestors(a));
    },
    updateMatrix: function () {
        this.matrix.compose(this.position, this.quaternion, this.scale);
        this.matrixWorldNeedsUpdate = !0;
    },
    updateMatrixWorld: function (a) {
        !0 === this.matrixAutoUpdate && this.updateMatrix();
        if (!0 === this.matrixWorldNeedsUpdate || !0 === a) void 0 === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), (this.matrixWorldNeedsUpdate = !1), (a = !0);
        for (var b = 0, c = this.children.length; b < c; b++) this.children[b].updateMatrixWorld(a);
    },
    toJSON: function () {
        var a = { metadata: { version: 4.3, type: "Object", generator: "ObjectExporter" } },
            b = {},
            c = {},
            d = function (b) {
                void 0 === a.materials && (a.materials = []);
                if (void 0 === c[b.uuid]) {
                    var d = b.toJSON();
                    delete d.metadata;
                    c[b.uuid] = d;
                    a.materials.push(d);
                }
                return b.uuid;
            },
            e = function (c) {
                var g = {};
                g.uuid = c.uuid;
                g.type = c.type;
                "" !== c.name && (g.name = c.name);
                "{}" !== JSON.stringify(c.userData) && (g.userData = c.userData);
                !0 !== c.visible && (g.visible = c.visible);
                if (c instanceof THREE.PerspectiveCamera) (g.fov = c.fov), (g.aspect = c.aspect), (g.near = c.near), (g.far = c.far);
                else if (c instanceof THREE.OrthographicCamera) (g.left = c.left), (g.right = c.right), (g.top = c.top), (g.bottom = c.bottom), (g.near = c.near), (g.far = c.far);
                else if (c instanceof THREE.AmbientLight) g.color = c.color.getHex();
                else if (c instanceof THREE.DirectionalLight) (g.color = c.color.getHex()), (g.intensity = c.intensity);
                else if (c instanceof THREE.PointLight) (g.color = c.color.getHex()), (g.intensity = c.intensity), (g.distance = c.distance), (g.decay = c.decay);
                else if (c instanceof THREE.SpotLight) (g.color = c.color.getHex()), (g.intensity = c.intensity), (g.distance = c.distance), (g.angle = c.angle), (g.exponent = c.exponent), (g.decay = c.decay);
                else if (c instanceof THREE.HemisphereLight) (g.color = c.color.getHex()), (g.groundColor = c.groundColor.getHex());
                else if (c instanceof THREE.Mesh || c instanceof THREE.Line || c instanceof THREE.PointCloud) {
                    var h = c.geometry;
                    void 0 === a.geometries && (a.geometries = []);
                    if (void 0 === b[h.uuid]) {
                        var k = h.toJSON();
                        delete k.metadata;
                        b[h.uuid] = k;
                        a.geometries.push(k);
                    }
                    g.geometry = h.uuid;
                    g.material = d(c.material);
                    c instanceof THREE.Line && (g.mode = c.mode);
                } else c instanceof THREE.Sprite && (g.material = d(c.material));
                g.matrix = c.matrix.toArray();
                if (0 < c.children.length) for (g.children = [], h = 0; h < c.children.length; h++) g.children.push(e(c.children[h]));
                return g;
            };
        a.object = e(this);
        return a;
    },
    clone: function (a, b) {
        void 0 === a && (a = new THREE.Object3D());
        void 0 === b && (b = !0);
        a.name = this.name;
        a.up.copy(this.up);
        a.position.copy(this.position);
        a.quaternion.copy(this.quaternion);
        a.scale.copy(this.scale);
        a.rotationAutoUpdate = this.rotationAutoUpdate;
        a.matrix.copy(this.matrix);
        a.matrixWorld.copy(this.matrixWorld);
        a.matrixAutoUpdate = this.matrixAutoUpdate;
        a.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;
        a.visible = this.visible;
        a.castShadow = this.castShadow;
        a.receiveShadow = this.receiveShadow;
        a.frustumCulled = this.frustumCulled;
        a.userData = JSON.parse(JSON.stringify(this.userData));
        if (!0 === b) for (var c = 0; c < this.children.length; c++) a.add(this.children[c].clone());
        return a;
    },
};
THREE.EventDispatcher.prototype.apply(THREE.Object3D.prototype);
THREE.Object3DIdCount = 0;
THREE.Face3 = function (a, b, c, d, e, f) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.normal = d instanceof THREE.Vector3 ? d : new THREE.Vector3();
    this.vertexNormals = d instanceof Array ? d : [];
    this.color = e instanceof THREE.Color ? e : new THREE.Color();
    this.vertexColors = e instanceof Array ? e : [];
    this.vertexTangents = [];
    this.materialIndex = void 0 !== f ? f : 0;
};
THREE.Face3.prototype = {
    constructor: THREE.Face3,
    clone: function () {
        var a = new THREE.Face3(this.a, this.b, this.c);
        a.normal.copy(this.normal);
        a.color.copy(this.color);
        a.materialIndex = this.materialIndex;
        for (var b = 0, c = this.vertexNormals.length; b < c; b++) a.vertexNormals[b] = this.vertexNormals[b].clone();
        b = 0;
        for (c = this.vertexColors.length; b < c; b++) a.vertexColors[b] = this.vertexColors[b].clone();
        b = 0;
        for (c = this.vertexTangents.length; b < c; b++) a.vertexTangents[b] = this.vertexTangents[b].clone();
        return a;
    },
};
THREE.Face4 = function (a, b, c, d, e, f, g) {
    THREE.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
    return new THREE.Face3(a, b, c, e, f, g);
};
THREE.BufferAttribute = function (a, b) {
    this.array = a;
    this.itemSize = b;
    this.needsUpdate = !1;
};
THREE.BufferAttribute.prototype = {
    constructor: THREE.BufferAttribute,
    get length() {
        return this.array.length;
    },
    copyAt: function (a, b, c) {
        a *= this.itemSize;
        c *= b.itemSize;
        for (var d = 0, e = this.itemSize; d < e; d++) this.array[a + d] = b.array[c + d];
        return this;
    },
    set: function (a, b) {
        void 0 === b && (b = 0);
        this.array.set(a, b);
        return this;
    },
    setX: function (a, b) {
        this.array[a * this.itemSize] = b;
        return this;
    },
    setY: function (a, b) {
        this.array[a * this.itemSize + 1] = b;
        return this;
    },
    setZ: function (a, b) {
        this.array[a * this.itemSize + 2] = b;
        return this;
    },
    setXY: function (a, b, c) {
        a *= this.itemSize;
        this.array[a] = b;
        this.array[a + 1] = c;
        return this;
    },
    setXYZ: function (a, b, c, d) {
        a *= this.itemSize;
        this.array[a] = b;
        this.array[a + 1] = c;
        this.array[a + 2] = d;
        return this;
    },
    setXYZW: function (a, b, c, d, e) {
        a *= this.itemSize;
        this.array[a] = b;
        this.array[a + 1] = c;
        this.array[a + 2] = d;
        this.array[a + 3] = e;
        return this;
    },
    clone: function () {
        return new THREE.BufferAttribute(new this.array.constructor(this.array), this.itemSize);
    },
};
THREE.Int8Attribute = function (a, b) {
    THREE.warn("THREE.Int8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
    return new THREE.BufferAttribute(a, b);
};
THREE.Uint8Attribute = function (a, b) {
    THREE.warn("THREE.Uint8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
    return new THREE.BufferAttribute(a, b);
};
THREE.Uint8ClampedAttribute = function (a, b) {
    THREE.warn("THREE.Uint8ClampedAttribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
    return new THREE.BufferAttribute(a, b);
};
THREE.Int16Attribute = function (a, b) {
    THREE.warn("THREE.Int16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
    return new THREE.BufferAttribute(a, b);
};
THREE.Uint16Attribute = function (a, b) {
    THREE.warn("THREE.Uint16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
    return new THREE.BufferAttribute(a, b);
};
THREE.Int32Attribute = function (a, b) {
    THREE.warn("THREE.Int32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
    return new THREE.BufferAttribute(a, b);
};
THREE.Uint32Attribute = function (a, b) {
    THREE.warn("THREE.Uint32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
    return new THREE.BufferAttribute(a, b);
};
THREE.Float32Attribute = function (a, b) {
    THREE.warn("THREE.Float32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
    return new THREE.BufferAttribute(a, b);
};
THREE.Float64Attribute = function (a, b) {
    THREE.warn("THREE.Float64Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.");
    return new THREE.BufferAttribute(a, b);
};
THREE.DynamicBufferAttribute = function (a, b) {
    THREE.BufferAttribute.call(this, a, b);
    this.updateRange = { offset: 0, count: -1 };
};
THREE.DynamicBufferAttribute.prototype = Object.create(THREE.BufferAttribute.prototype);
THREE.DynamicBufferAttribute.prototype.constructor = THREE.DynamicBufferAttribute;
THREE.DynamicBufferAttribute.prototype.clone = function () {
    return new THREE.DynamicBufferAttribute(new this.array.constructor(this.array), this.itemSize);
};
THREE.BufferGeometry = function () {
    Object.defineProperty(this, "id", { value: THREE.GeometryIdCount++ });
    this.uuid = THREE.Math.generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.attributes = {};
    this.attributesKeys = [];
    this.offsets = this.drawcalls = [];
    this.boundingSphere = this.boundingBox = null;
};
THREE.BufferGeometry.prototype = {
    constructor: THREE.BufferGeometry,
    addAttribute: function (a, b, c) {
        !1 === b instanceof THREE.BufferAttribute
            ? (THREE.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), (this.attributes[a] = { array: b, itemSize: c }))
            : ((this.attributes[a] = b), (this.attributesKeys = Object.keys(this.attributes)));
    },
    getAttribute: function (a) {
        return this.attributes[a];
    },
    addDrawCall: function (a, b, c) {
        this.drawcalls.push({ start: a, count: b, index: void 0 !== c ? c : 0 });
    },
    applyMatrix: function (a) {
        var b = this.attributes.position;
        void 0 !== b && (a.applyToVector3Array(b.array), (b.needsUpdate = !0));
        b = this.attributes.normal;
        void 0 !== b && (new THREE.Matrix3().getNormalMatrix(a).applyToVector3Array(b.array), (b.needsUpdate = !0));
        null !== this.boundingBox && this.computeBoundingBox();
        null !== this.boundingSphere && this.computeBoundingSphere();
    },
    center: function () {
        this.computeBoundingBox();
        var a = this.boundingBox.center().negate();
        this.applyMatrix(new THREE.Matrix4().setPosition(a));
        return a;
    },
    fromGeometry: function (a, b) {
        b = b || { vertexColors: THREE.NoColors };
        var c = a.vertices,
            d = a.faces,
            e = a.faceVertexUvs,
            f = b.vertexColors,
            g = 0 < e[0].length,
            h = 3 == d[0].vertexNormals.length,
            k = new Float32Array(9 * d.length);
        this.addAttribute("position", new THREE.BufferAttribute(k, 3));
        var l = new Float32Array(9 * d.length);
        this.addAttribute("normal", new THREE.BufferAttribute(l, 3));
        if (f !== THREE.NoColors) {
            var p = new Float32Array(9 * d.length);
            this.addAttribute("color", new THREE.BufferAttribute(p, 3));
        }
        if (!0 === g) {
            var q = new Float32Array(6 * d.length);
            this.addAttribute("uv", new THREE.BufferAttribute(q, 2));
        }
        for (var n = 0, t = 0, r = 0; n < d.length; n++, t += 6, r += 9) {
            var s = d[n],
                u = c[s.a],
                v = c[s.b],
                x = c[s.c];
            k[r] = u.x;
            k[r + 1] = u.y;
            k[r + 2] = u.z;
            k[r + 3] = v.x;
            k[r + 4] = v.y;
            k[r + 5] = v.z;
            k[r + 6] = x.x;
            k[r + 7] = x.y;
            k[r + 8] = x.z;
            !0 === h
                ? ((u = s.vertexNormals[0]),
                  (v = s.vertexNormals[1]),
                  (x = s.vertexNormals[2]),
                  (l[r] = u.x),
                  (l[r + 1] = u.y),
                  (l[r + 2] = u.z),
                  (l[r + 3] = v.x),
                  (l[r + 4] = v.y),
                  (l[r + 5] = v.z),
                  (l[r + 6] = x.x),
                  (l[r + 7] = x.y),
                  (l[r + 8] = x.z))
                : ((u = s.normal), (l[r] = u.x), (l[r + 1] = u.y), (l[r + 2] = u.z), (l[r + 3] = u.x), (l[r + 4] = u.y), (l[r + 5] = u.z), (l[r + 6] = u.x), (l[r + 7] = u.y), (l[r + 8] = u.z));
            f === THREE.FaceColors
                ? ((s = s.color), (p[r] = s.r), (p[r + 1] = s.g), (p[r + 2] = s.b), (p[r + 3] = s.r), (p[r + 4] = s.g), (p[r + 5] = s.b), (p[r + 6] = s.r), (p[r + 7] = s.g), (p[r + 8] = s.b))
                : f === THREE.VertexColors &&
                  ((u = s.vertexColors[0]),
                  (v = s.vertexColors[1]),
                  (s = s.vertexColors[2]),
                  (p[r] = u.r),
                  (p[r + 1] = u.g),
                  (p[r + 2] = u.b),
                  (p[r + 3] = v.r),
                  (p[r + 4] = v.g),
                  (p[r + 5] = v.b),
                  (p[r + 6] = s.r),
                  (p[r + 7] = s.g),
                  (p[r + 8] = s.b));
            !0 === g && ((s = e[0][n][0]), (u = e[0][n][1]), (v = e[0][n][2]), (q[t] = s.x), (q[t + 1] = s.y), (q[t + 2] = u.x), (q[t + 3] = u.y), (q[t + 4] = v.x), (q[t + 5] = v.y));
        }
        this.computeBoundingSphere();
        return this;
    },
    computeBoundingBox: (function () {
        var a = new THREE.Vector3();
        return function () {
            null === this.boundingBox && (this.boundingBox = new THREE.Box3());
            var b = this.attributes.position.array;
            if (b) {
                var c = this.boundingBox;
                c.makeEmpty();
                for (var d = 0, e = b.length; d < e; d += 3) a.set(b[d], b[d + 1], b[d + 2]), c.expandByPoint(a);
            }
            if (void 0 === b || 0 === b.length) this.boundingBox.min.set(0, 0, 0), this.boundingBox.max.set(0, 0, 0);
            (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) &&
                THREE.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.');
        };
    })(),
    computeBoundingSphere: (function () {
        var a = new THREE.Box3(),
            b = new THREE.Vector3();
        return function () {
            null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere());
            var c = this.attributes.position.array;
            if (c) {
                a.makeEmpty();
                for (var d = this.boundingSphere.center, e = 0, f = c.length; e < f; e += 3) b.set(c[e], c[e + 1], c[e + 2]), a.expandByPoint(b);
                a.center(d);
                for (var g = 0, e = 0, f = c.length; e < f; e += 3) b.set(c[e], c[e + 1], c[e + 2]), (g = Math.max(g, d.distanceToSquared(b)));
                this.boundingSphere.radius = Math.sqrt(g);
                isNaN(this.boundingSphere.radius) && THREE.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.');
            }
        };
    })(),
    computeFaceNormals: function () {},
    computeVertexNormals: function () {
        var a = this.attributes;
        if (a.position) {
            var b = a.position.array;
            if (void 0 === a.normal) this.addAttribute("normal", new THREE.BufferAttribute(new Float32Array(b.length), 3));
            else for (var c = a.normal.array, d = 0, e = c.length; d < e; d++) c[d] = 0;
            var c = a.normal.array,
                f,
                g,
                h,
                k = new THREE.Vector3(),
                l = new THREE.Vector3(),
                p = new THREE.Vector3(),
                q = new THREE.Vector3(),
                n = new THREE.Vector3();
            if (a.index)
                for (var t = a.index.array, r = 0 < this.offsets.length ? this.offsets : [{ start: 0, count: t.length, index: 0 }], s = 0, u = r.length; s < u; ++s) {
                    e = r[s].start;
                    f = r[s].count;
                    for (var v = r[s].index, d = e, e = e + f; d < e; d += 3)
                        (f = 3 * (v + t[d])),
                            (g = 3 * (v + t[d + 1])),
                            (h = 3 * (v + t[d + 2])),
                            k.fromArray(b, f),
                            l.fromArray(b, g),
                            p.fromArray(b, h),
                            q.subVectors(p, l),
                            n.subVectors(k, l),
                            q.cross(n),
                            (c[f] += q.x),
                            (c[f + 1] += q.y),
                            (c[f + 2] += q.z),
                            (c[g] += q.x),
                            (c[g + 1] += q.y),
                            (c[g + 2] += q.z),
                            (c[h] += q.x),
                            (c[h + 1] += q.y),
                            (c[h + 2] += q.z);
                }
            else
                for (d = 0, e = b.length; d < e; d += 9)
                    k.fromArray(b, d),
                        l.fromArray(b, d + 3),
                        p.fromArray(b, d + 6),
                        q.subVectors(p, l),
                        n.subVectors(k, l),
                        q.cross(n),
                        (c[d] = q.x),
                        (c[d + 1] = q.y),
                        (c[d + 2] = q.z),
                        (c[d + 3] = q.x),
                        (c[d + 4] = q.y),
                        (c[d + 5] = q.z),
                        (c[d + 6] = q.x),
                        (c[d + 7] = q.y),
                        (c[d + 8] = q.z);
            this.normalizeNormals();
            a.normal.needsUpdate = !0;
        }
    },
    computeTangents: function () {
        function a(a, b, c) {
            q.fromArray(d, 3 * a);
            n.fromArray(d, 3 * b);
            t.fromArray(d, 3 * c);
            r.fromArray(f, 2 * a);
            s.fromArray(f, 2 * b);
            u.fromArray(f, 2 * c);
            v = n.x - q.x;
            x = t.x - q.x;
            D = n.y - q.y;
            w = t.y - q.y;
            y = n.z - q.z;
            A = t.z - q.z;
            E = s.x - r.x;
            G = u.x - r.x;
            F = s.y - r.y;
            z = u.y - r.y;
            I = 1 / (E * z - G * F);
            U.set((z * v - F * x) * I, (z * D - F * w) * I, (z * y - F * A) * I);
            M.set((E * x - G * v) * I, (E * w - G * D) * I, (E * A - G * y) * I);
            k[a].add(U);
            k[b].add(U);
            k[c].add(U);
            l[a].add(M);
            l[b].add(M);
            l[c].add(M);
        }
        function b(a) {
            ha.fromArray(e, 3 * a);
            O.copy(ha);
            ba = k[a];
            oa.copy(ba);
            oa.sub(ha.multiplyScalar(ha.dot(ba))).normalize();
            ja.crossVectors(O, ba);
            qa = ja.dot(l[a]);
            ca = 0 > qa ? -1 : 1;
            h[4 * a] = oa.x;
            h[4 * a + 1] = oa.y;
            h[4 * a + 2] = oa.z;
            h[4 * a + 3] = ca;
        }
        if (void 0 === this.attributes.index || void 0 === this.attributes.position || void 0 === this.attributes.normal || void 0 === this.attributes.uv)
            THREE.warn("THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");
        else {
            var c = this.attributes.index.array,
                d = this.attributes.position.array,
                e = this.attributes.normal.array,
                f = this.attributes.uv.array,
                g = d.length / 3;
            void 0 === this.attributes.tangent && this.addAttribute("tangent", new THREE.BufferAttribute(new Float32Array(4 * g), 4));
            for (var h = this.attributes.tangent.array, k = [], l = [], p = 0; p < g; p++) (k[p] = new THREE.Vector3()), (l[p] = new THREE.Vector3());
            var q = new THREE.Vector3(),
                n = new THREE.Vector3(),
                t = new THREE.Vector3(),
                r = new THREE.Vector2(),
                s = new THREE.Vector2(),
                u = new THREE.Vector2(),
                v,
                x,
                D,
                w,
                y,
                A,
                E,
                G,
                F,
                z,
                I,
                U = new THREE.Vector3(),
                M = new THREE.Vector3(),
                H,
                L,
                P,
                N,
                R;
            0 === this.drawcalls.length && this.addDrawCall(0, c.length, 0);
            var V = this.drawcalls,
                p = 0;
            for (L = V.length; p < L; ++p) {
                H = V[p].start;
                P = V[p].count;
                var J = V[p].index,
                    g = H;
                for (H += P; g < H; g += 3) (P = J + c[g]), (N = J + c[g + 1]), (R = J + c[g + 2]), a(P, N, R);
            }
            var oa = new THREE.Vector3(),
                ja = new THREE.Vector3(),
                ha = new THREE.Vector3(),
                O = new THREE.Vector3(),
                ca,
                ba,
                qa,
                p = 0;
            for (L = V.length; p < L; ++p) for (H = V[p].start, P = V[p].count, J = V[p].index, g = H, H += P; g < H; g += 3) (P = J + c[g]), (N = J + c[g + 1]), (R = J + c[g + 2]), b(P), b(N), b(R);
        }
    },
    computeOffsets: function (a) {
        void 0 === a && (a = 65535);
        for (
            var b = this.attributes.index.array,
                c = this.attributes.position.array,
                d = b.length / 3,
                e = new Uint16Array(b.length),
                f = 0,
                g = 0,
                h = [{ start: 0, count: 0, index: 0 }],
                k = h[0],
                l = 0,
                p = 0,
                q = new Int32Array(6),
                n = new Int32Array(c.length),
                t = new Int32Array(c.length),
                r = 0;
            r < c.length;
            r++
        )
            (n[r] = -1), (t[r] = -1);
        for (c = 0; c < d; c++) {
            for (var s = (p = 0); 3 > s; s++) (r = b[3 * c + s]), -1 == n[r] ? ((q[2 * s] = r), (q[2 * s + 1] = -1), p++) : n[r] < k.index ? ((q[2 * s] = r), (q[2 * s + 1] = -1), l++) : ((q[2 * s] = r), (q[2 * s + 1] = n[r]));
            if (g + p > k.index + a) for (k = { start: f, count: 0, index: g }, h.push(k), p = 0; 6 > p; p += 2) (s = q[p + 1]), -1 < s && s < k.index && (q[p + 1] = -1);
            for (p = 0; 6 > p; p += 2) (r = q[p]), (s = q[p + 1]), -1 === s && (s = g++), (n[r] = s), (t[s] = r), (e[f++] = s - k.index), k.count++;
        }
        this.reorderBuffers(e, t, g);
        return (this.drawcalls = this.offsets = h);
    },
    merge: function (a, b) {
        if (!1 === a instanceof THREE.BufferGeometry) THREE.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", a);
        else {
            void 0 === b && (b = 0);
            var c = this.attributes,
                d;
            for (d in c) if (void 0 !== a.attributes[d]) for (var e = c[d].array, f = a.attributes[d], g = f.array, h = 0, f = f.itemSize * b; h < g.length; h++, f++) e[f] = g[h];
            return this;
        }
    },
    normalizeNormals: function () {
        for (var a = this.attributes.normal.array, b, c, d, e = 0, f = a.length; e < f; e += 3) (b = a[e]), (c = a[e + 1]), (d = a[e + 2]), (b = 1 / Math.sqrt(b * b + c * c + d * d)), (a[e] *= b), (a[e + 1] *= b), (a[e + 2] *= b);
    },
    reorderBuffers: function (a, b, c) {
        var d = {},
            e;
        for (e in this.attributes) "index" != e && (d[e] = new this.attributes[e].array.constructor(this.attributes[e].itemSize * c));
        for (var f = 0; f < c; f++) {
            var g = b[f];
            for (e in this.attributes) if ("index" != e) for (var h = this.attributes[e].array, k = this.attributes[e].itemSize, l = d[e], p = 0; p < k; p++) l[f * k + p] = h[g * k + p];
        }
        this.attributes.index.array = a;
        for (e in this.attributes) "index" != e && ((this.attributes[e].array = d[e]), (this.attributes[e].numItems = this.attributes[e].itemSize * c));
    },
    toJSON: function () {
        var a = { metadata: { version: 4, type: "BufferGeometry", generator: "BufferGeometryExporter" }, uuid: this.uuid, type: this.type, data: { attributes: {} } },
            b = this.attributes,
            c = this.offsets,
            d = this.boundingSphere,
            e;
        for (e in b) {
            var f = b[e],
                g = Array.prototype.slice.call(f.array);
            a.data.attributes[e] = { itemSize: f.itemSize, type: f.array.constructor.name, array: g };
        }
        0 < c.length && (a.data.offsets = JSON.parse(JSON.stringify(c)));
        null !== d && (a.data.boundingSphere = { center: d.center.toArray(), radius: d.radius });
        return a;
    },
    clone: function () {
        var a = new THREE.BufferGeometry(),
            b;
        for (b in this.attributes) a.addAttribute(b, this.attributes[b].clone());
        b = 0;
        for (var c = this.offsets.length; b < c; b++) {
            var d = this.offsets[b];
            a.offsets.push({ start: d.start, index: d.index, count: d.count });
        }
        return a;
    },
    dispose: function () {
        this.dispatchEvent({ type: "dispose" });
    },
};
THREE.EventDispatcher.prototype.apply(THREE.BufferGeometry.prototype);
THREE.Geometry = function () {
    Object.defineProperty(this, "id", { value: THREE.GeometryIdCount++ });
    this.uuid = THREE.Math.generateUUID();
    this.name = "";
    this.type = "Geometry";
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphColors = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingSphere = this.boundingBox = null;
    this.hasTangents = !1;
    this.dynamic = !0;
    this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.tangentsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.elementsNeedUpdate = this.verticesNeedUpdate = !1;
};
THREE.Geometry.prototype = {
    constructor: THREE.Geometry,
    applyMatrix: function (a) {
        for (var b = new THREE.Matrix3().getNormalMatrix(a), c = 0, d = this.vertices.length; c < d; c++) this.vertices[c].applyMatrix4(a);
        c = 0;
        for (d = this.faces.length; c < d; c++) {
            a = this.faces[c];
            a.normal.applyMatrix3(b).normalize();
            for (var e = 0, f = a.vertexNormals.length; e < f; e++) a.vertexNormals[e].applyMatrix3(b).normalize();
        }
        null !== this.boundingBox && this.computeBoundingBox();
        null !== this.boundingSphere && this.computeBoundingSphere();
        this.normalsNeedUpdate = this.verticesNeedUpdate = !0;
    },
    fromBufferGeometry: function (a) {
        for (
            var b = this,
                c = a.attributes,
                d = c.position.array,
                e = void 0 !== c.index ? c.index.array : void 0,
                f = void 0 !== c.normal ? c.normal.array : void 0,
                g = void 0 !== c.color ? c.color.array : void 0,
                h = void 0 !== c.uv ? c.uv.array : void 0,
                k = [],
                l = [],
                p = (c = 0);
            c < d.length;
            c += 3, p += 2
        )
            b.vertices.push(new THREE.Vector3(d[c], d[c + 1], d[c + 2])),
                void 0 !== f && k.push(new THREE.Vector3(f[c], f[c + 1], f[c + 2])),
                void 0 !== g && b.colors.push(new THREE.Color(g[c], g[c + 1], g[c + 2])),
                void 0 !== h && l.push(new THREE.Vector2(h[p], h[p + 1]));
        var q = function (a, c, d) {
            var e = void 0 !== f ? [k[a].clone(), k[c].clone(), k[d].clone()] : [],
                n = void 0 !== g ? [b.colors[a].clone(), b.colors[c].clone(), b.colors[d].clone()] : [];
            b.faces.push(new THREE.Face3(a, c, d, e, n));
            void 0 !== h && b.faceVertexUvs[0].push([l[a].clone(), l[c].clone(), l[d].clone()]);
        };
        if (void 0 !== e)
            if (((d = a.drawcalls), 0 < d.length)) for (c = 0; c < d.length; c++) for (var p = d[c], n = p.start, t = p.count, r = p.index, p = n, n = n + t; p < n; p += 3) q(r + e[p], r + e[p + 1], r + e[p + 2]);
            else for (c = 0; c < e.length; c += 3) q(e[c], e[c + 1], e[c + 2]);
        else for (c = 0; c < d.length / 3; c += 3) q(c, c + 1, c + 2);
        this.computeFaceNormals();
        null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone());
        null !== a.boundingSphere && (this.boundingSphere = a.boundingSphere.clone());
        return this;
    },
    center: function () {
        this.computeBoundingBox();
        var a = this.boundingBox.center().negate();
        this.applyMatrix(new THREE.Matrix4().setPosition(a));
        return a;
    },
    computeFaceNormals: function () {
        for (var a = new THREE.Vector3(), b = new THREE.Vector3(), c = 0, d = this.faces.length; c < d; c++) {
            var e = this.faces[c],
                f = this.vertices[e.a],
                g = this.vertices[e.b];
            a.subVectors(this.vertices[e.c], g);
            b.subVectors(f, g);
            a.cross(b);
            a.normalize();
            e.normal.copy(a);
        }
    },
    computeVertexNormals: function (a) {
        var b, c, d;
        d = Array(this.vertices.length);
        b = 0;
        for (c = this.vertices.length; b < c; b++) d[b] = new THREE.Vector3();
        if (a) {
            var e,
                f,
                g,
                h = new THREE.Vector3(),
                k = new THREE.Vector3();
            a = 0;
            for (b = this.faces.length; a < b; a++)
                (c = this.faces[a]), (e = this.vertices[c.a]), (f = this.vertices[c.b]), (g = this.vertices[c.c]), h.subVectors(g, f), k.subVectors(e, f), h.cross(k), d[c.a].add(h), d[c.b].add(h), d[c.c].add(h);
        } else for (a = 0, b = this.faces.length; a < b; a++) (c = this.faces[a]), d[c.a].add(c.normal), d[c.b].add(c.normal), d[c.c].add(c.normal);
        b = 0;
        for (c = this.vertices.length; b < c; b++) d[b].normalize();
        a = 0;
        for (b = this.faces.length; a < b; a++) (c = this.faces[a]), (c.vertexNormals[0] = d[c.a].clone()), (c.vertexNormals[1] = d[c.b].clone()), (c.vertexNormals[2] = d[c.c].clone());
    },
    computeMorphNormals: function () {
        var a, b, c, d, e;
        c = 0;
        for (d = this.faces.length; c < d; c++)
            for (
                e = this.faces[c],
                    e.__originalFaceNormal ? e.__originalFaceNormal.copy(e.normal) : (e.__originalFaceNormal = e.normal.clone()),
                    e.__originalVertexNormals || (e.__originalVertexNormals = []),
                    a = 0,
                    b = e.vertexNormals.length;
                a < b;
                a++
            )
                e.__originalVertexNormals[a] ? e.__originalVertexNormals[a].copy(e.vertexNormals[a]) : (e.__originalVertexNormals[a] = e.vertexNormals[a].clone());
        var f = new THREE.Geometry();
        f.faces = this.faces;
        a = 0;
        for (b = this.morphTargets.length; a < b; a++) {
            if (!this.morphNormals[a]) {
                this.morphNormals[a] = {};
                this.morphNormals[a].faceNormals = [];
                this.morphNormals[a].vertexNormals = [];
                e = this.morphNormals[a].faceNormals;
                var g = this.morphNormals[a].vertexNormals,
                    h,
                    k;
                c = 0;
                for (d = this.faces.length; c < d; c++) (h = new THREE.Vector3()), (k = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() }), e.push(h), g.push(k);
            }
            g = this.morphNormals[a];
            f.vertices = this.morphTargets[a].vertices;
            f.computeFaceNormals();
            f.computeVertexNormals();
            c = 0;
            for (d = this.faces.length; c < d; c++) (e = this.faces[c]), (h = g.faceNormals[c]), (k = g.vertexNormals[c]), h.copy(e.normal), k.a.copy(e.vertexNormals[0]), k.b.copy(e.vertexNormals[1]), k.c.copy(e.vertexNormals[2]);
        }
        c = 0;
        for (d = this.faces.length; c < d; c++) (e = this.faces[c]), (e.normal = e.__originalFaceNormal), (e.vertexNormals = e.__originalVertexNormals);
    },
    computeTangents: function () {
        var a,
            b,
            c,
            d,
            e,
            f,
            g,
            h,
            k,
            l,
            p,
            q,
            n,
            t,
            r,
            s,
            u,
            v = [],
            x = [];
        c = new THREE.Vector3();
        var D = new THREE.Vector3(),
            w = new THREE.Vector3(),
            y = new THREE.Vector3(),
            A = new THREE.Vector3();
        a = 0;
        for (b = this.vertices.length; a < b; a++) (v[a] = new THREE.Vector3()), (x[a] = new THREE.Vector3());
        a = 0;
        for (b = this.faces.length; a < b; a++)
            (e = this.faces[a]),
                (f = this.faceVertexUvs[0][a]),
                (d = e.a),
                (u = e.b),
                (e = e.c),
                (g = this.vertices[d]),
                (h = this.vertices[u]),
                (k = this.vertices[e]),
                (l = f[0]),
                (p = f[1]),
                (q = f[2]),
                (f = h.x - g.x),
                (n = k.x - g.x),
                (t = h.y - g.y),
                (r = k.y - g.y),
                (h = h.z - g.z),
                (g = k.z - g.z),
                (k = p.x - l.x),
                (s = q.x - l.x),
                (p = p.y - l.y),
                (l = q.y - l.y),
                (q = 1 / (k * l - s * p)),
                c.set((l * f - p * n) * q, (l * t - p * r) * q, (l * h - p * g) * q),
                D.set((k * n - s * f) * q, (k * r - s * t) * q, (k * g - s * h) * q),
                v[d].add(c),
                v[u].add(c),
                v[e].add(c),
                x[d].add(D),
                x[u].add(D),
                x[e].add(D);
        D = ["a", "b", "c", "d"];
        a = 0;
        for (b = this.faces.length; a < b; a++)
            for (e = this.faces[a], c = 0; c < Math.min(e.vertexNormals.length, 3); c++)
                A.copy(e.vertexNormals[c]),
                    (d = e[D[c]]),
                    (u = v[d]),
                    w.copy(u),
                    w.sub(A.multiplyScalar(A.dot(u))).normalize(),
                    y.crossVectors(e.vertexNormals[c], u),
                    (d = y.dot(x[d])),
                    (d = 0 > d ? -1 : 1),
                    (e.vertexTangents[c] = new THREE.Vector4(w.x, w.y, w.z, d));
        this.hasTangents = !0;
    },
    computeLineDistances: function () {
        for (var a = 0, b = this.vertices, c = 0, d = b.length; c < d; c++) 0 < c && (a += b[c].distanceTo(b[c - 1])), (this.lineDistances[c] = a);
    },
    computeBoundingBox: function () {
        null === this.boundingBox && (this.boundingBox = new THREE.Box3());
        this.boundingBox.setFromPoints(this.vertices);
    },
    computeBoundingSphere: function () {
        null === this.boundingSphere && (this.boundingSphere = new THREE.Sphere());
        this.boundingSphere.setFromPoints(this.vertices);
    },
    merge: function (a, b, c) {
        if (!1 === a instanceof THREE.Geometry) THREE.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", a);
        else {
            var d,
                e = this.vertices.length,
                f = this.vertices,
                g = a.vertices,
                h = this.faces,
                k = a.faces,
                l = this.faceVertexUvs[0];
            a = a.faceVertexUvs[0];
            void 0 === c && (c = 0);
            void 0 !== b && (d = new THREE.Matrix3().getNormalMatrix(b));
            for (var p = 0, q = g.length; p < q; p++) {
                var n = g[p].clone();
                void 0 !== b && n.applyMatrix4(b);
                f.push(n);
            }
            p = 0;
            for (q = k.length; p < q; p++) {
                var g = k[p],
                    t,
                    r = g.vertexNormals,
                    s = g.vertexColors,
                    n = new THREE.Face3(g.a + e, g.b + e, g.c + e);
                n.normal.copy(g.normal);
                void 0 !== d && n.normal.applyMatrix3(d).normalize();
                b = 0;
                for (f = r.length; b < f; b++) (t = r[b].clone()), void 0 !== d && t.applyMatrix3(d).normalize(), n.vertexNormals.push(t);
                n.color.copy(g.color);
                b = 0;
                for (f = s.length; b < f; b++) (t = s[b]), n.vertexColors.push(t.clone());
                n.materialIndex = g.materialIndex + c;
                h.push(n);
            }
            p = 0;
            for (q = a.length; p < q; p++)
                if (((c = a[p]), (d = []), void 0 !== c)) {
                    b = 0;
                    for (f = c.length; b < f; b++) d.push(c[b].clone());
                    l.push(d);
                }
        }
    },
    mergeMesh: function (a) {
        !1 === a instanceof THREE.Mesh ? THREE.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", a) : (a.matrixAutoUpdate && a.updateMatrix(), this.merge(a.geometry, a.matrix));
    },
    mergeVertices: function () {
        var a = {},
            b = [],
            c = [],
            d,
            e = Math.pow(10, 4),
            f,
            g;
        f = 0;
        for (g = this.vertices.length; f < g; f++)
            (d = this.vertices[f]), (d = Math.round(d.x * e) + "_" + Math.round(d.y * e) + "_" + Math.round(d.z * e)), void 0 === a[d] ? ((a[d] = f), b.push(this.vertices[f]), (c[f] = b.length - 1)) : (c[f] = c[a[d]]);
        a = [];
        f = 0;
        for (g = this.faces.length; f < g; f++)
            for (e = this.faces[f], e.a = c[e.a], e.b = c[e.b], e.c = c[e.c], e = [e.a, e.b, e.c], d = 0; 3 > d; d++)
                if (e[d] == e[(d + 1) % 3]) {
                    a.push(f);
                    break;
                }
        for (f = a.length - 1; 0 <= f; f--) for (e = a[f], this.faces.splice(e, 1), c = 0, g = this.faceVertexUvs.length; c < g; c++) this.faceVertexUvs[c].splice(e, 1);
        f = this.vertices.length - b.length;
        this.vertices = b;
        return f;
    },
    toJSON: function () {
        function a(a, b, c) {
            return c ? a | (1 << b) : a & ~(1 << b);
        }
        function b(a) {
            var b = a.x.toString() + a.y.toString() + a.z.toString();
            if (void 0 !== l[b]) return l[b];
            l[b] = k.length / 3;
            k.push(a.x, a.y, a.z);
            return l[b];
        }
        function c(a) {
            var b = a.r.toString() + a.g.toString() + a.b.toString();
            if (void 0 !== q[b]) return q[b];
            q[b] = p.length;
            p.push(a.getHex());
            return q[b];
        }
        function d(a) {
            var b = a.x.toString() + a.y.toString();
            if (void 0 !== t[b]) return t[b];
            t[b] = n.length / 2;
            n.push(a.x, a.y);
            return t[b];
        }
        var e = { metadata: { version: 4, type: "BufferGeometry", generator: "BufferGeometryExporter" }, uuid: this.uuid, type: this.type };
        "" !== this.name && (e.name = this.name);
        if (void 0 !== this.parameters) {
            var f = this.parameters,
                g;
            for (g in f) void 0 !== f[g] && (e[g] = f[g]);
            return e;
        }
        f = [];
        for (g = 0; g < this.vertices.length; g++) {
            var h = this.vertices[g];
            f.push(h.x, h.y, h.z);
        }
        var h = [],
            k = [],
            l = {},
            p = [],
            q = {},
            n = [],
            t = {};
        for (g = 0; g < this.faces.length; g++) {
            var r = this.faces[g],
                s = void 0 !== this.faceVertexUvs[0][g],
                u = 0 < r.normal.length(),
                v = 0 < r.vertexNormals.length,
                x = 1 !== r.color.r || 1 !== r.color.g || 1 !== r.color.b,
                D = 0 < r.vertexColors.length,
                w = 0,
                w = a(w, 0, 0),
                w = a(w, 1, !1),
                w = a(w, 2, !1),
                w = a(w, 3, s),
                w = a(w, 4, u),
                w = a(w, 5, v),
                w = a(w, 6, x),
                w = a(w, 7, D);
            h.push(w);
            h.push(r.a, r.b, r.c);
            s && ((s = this.faceVertexUvs[0][g]), h.push(d(s[0]), d(s[1]), d(s[2])));
            u && h.push(b(r.normal));
            v && ((u = r.vertexNormals), h.push(b(u[0]), b(u[1]), b(u[2])));
            x && h.push(c(r.color));
            D && ((r = r.vertexColors), h.push(c(r[0]), c(r[1]), c(r[2])));
        }
        e.data = {};
        e.data.vertices = f;
        e.data.normals = k;
        0 < p.length && (e.data.colors = p);
        0 < n.length && (e.data.uvs = [n]);
        e.data.faces = h;
        return e;
    },
    clone: function () {
        for (var a = new THREE.Geometry(), b = this.vertices, c = 0, d = b.length; c < d; c++) a.vertices.push(b[c].clone());
        b = this.faces;
        c = 0;
        for (d = b.length; c < d; c++) a.faces.push(b[c].clone());
        c = 0;
        for (d = this.faceVertexUvs.length; c < d; c++) {
            b = this.faceVertexUvs[c];
            void 0 === a.faceVertexUvs[c] && (a.faceVertexUvs[c] = []);
            for (var e = 0, f = b.length; e < f; e++) {
                for (var g = b[e], h = [], k = 0, l = g.length; k < l; k++) h.push(g[k].clone());
                a.faceVertexUvs[c].push(h);
            }
        }
        return a;
    },
    dispose: function () {
        this.dispatchEvent({ type: "dispose" });
    },
};
THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);
THREE.GeometryIdCount = 0;
THREE.Camera = function () {
    THREE.Object3D.call(this);
    this.type = "Camera";
    this.matrixWorldInverse = new THREE.Matrix4();
    this.projectionMatrix = new THREE.Matrix4();
};
THREE.Camera.prototype = Object.create(THREE.Object3D.prototype);
THREE.Camera.prototype.constructor = THREE.Camera;
THREE.Camera.prototype.getWorldDirection = (function () {
    var a = new THREE.Quaternion();
    return function (b) {
        b = b || new THREE.Vector3();
        this.getWorldQuaternion(a);
        return b.set(0, 0, -1).applyQuaternion(a);
    };
})();
THREE.Camera.prototype.lookAt = (function () {
    var a = new THREE.Matrix4();
    return function (b) {
        a.lookAt(this.position, b, this.up);
        this.quaternion.setFromRotationMatrix(a);
    };
})();
THREE.Camera.prototype.clone = function (a) {
    void 0 === a && (a = new THREE.Camera());
    THREE.Object3D.prototype.clone.call(this, a);
    a.matrixWorldInverse.copy(this.matrixWorldInverse);
    a.projectionMatrix.copy(this.projectionMatrix);
    return a;
};
THREE.CubeCamera = function (a, b, c) {
    THREE.Object3D.call(this);
    this.type = "CubeCamera";
    var d = new THREE.PerspectiveCamera(90, 1, a, b);
    d.up.set(0, -1, 0);
    d.lookAt(new THREE.Vector3(1, 0, 0));
    this.add(d);
    var e = new THREE.PerspectiveCamera(90, 1, a, b);
    e.up.set(0, -1, 0);
    e.lookAt(new THREE.Vector3(-1, 0, 0));
    this.add(e);
    var f = new THREE.PerspectiveCamera(90, 1, a, b);
    f.up.set(0, 0, 1);
    f.lookAt(new THREE.Vector3(0, 1, 0));
    this.add(f);
    var g = new THREE.PerspectiveCamera(90, 1, a, b);
    g.up.set(0, 0, -1);
    g.lookAt(new THREE.Vector3(0, -1, 0));
    this.add(g);
    var h = new THREE.PerspectiveCamera(90, 1, a, b);
    h.up.set(0, -1, 0);
    h.lookAt(new THREE.Vector3(0, 0, 1));
    this.add(h);
    var k = new THREE.PerspectiveCamera(90, 1, a, b);
    k.up.set(0, -1, 0);
    k.lookAt(new THREE.Vector3(0, 0, -1));
    this.add(k);
    this.renderTarget = new THREE.WebGLRenderTargetCube(c, c, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter });
    this.updateCubeMap = function (a, b) {
        var c = this.renderTarget,
            n = c.generateMipmaps;
        c.generateMipmaps = !1;
        c.activeCubeFace = 0;
        a.render(b, d, c);
        c.activeCubeFace = 1;
        a.render(b, e, c);
        c.activeCubeFace = 2;
        a.render(b, f, c);
        c.activeCubeFace = 3;
        a.render(b, g, c);
        c.activeCubeFace = 4;
        a.render(b, h, c);
        c.generateMipmaps = n;
        c.activeCubeFace = 5;
        a.render(b, k, c);
    };
};
THREE.CubeCamera.prototype = Object.create(THREE.Object3D.prototype);
THREE.CubeCamera.prototype.constructor = THREE.CubeCamera;
THREE.OrthographicCamera = function (a, b, c, d, e, f) {
    THREE.Camera.call(this);
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.left = a;
    this.right = b;
    this.top = c;
    this.bottom = d;
    this.near = void 0 !== e ? e : 0.1;
    this.far = void 0 !== f ? f : 2e3;
    this.updateProjectionMatrix();
};
THREE.OrthographicCamera.prototype = Object.create(THREE.Camera.prototype);
THREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;
THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {
    var a = (this.right - this.left) / (2 * this.zoom),
        b = (this.top - this.bottom) / (2 * this.zoom),
        c = (this.right + this.left) / 2,
        d = (this.top + this.bottom) / 2;
    this.projectionMatrix.makeOrthographic(c - a, c + a, d + b, d - b, this.near, this.far);
};
THREE.OrthographicCamera.prototype.clone = function () {
    var a = new THREE.OrthographicCamera();
    THREE.Camera.prototype.clone.call(this, a);
    a.zoom = this.zoom;
    a.left = this.left;
    a.right = this.right;
    a.top = this.top;
    a.bottom = this.bottom;
    a.near = this.near;
    a.far = this.far;
    a.projectionMatrix.copy(this.projectionMatrix);
    return a;
};
THREE.PerspectiveCamera = function (a, b, c, d) {
    THREE.Camera.call(this);
    this.type = "PerspectiveCamera";
    this.zoom = 1;
    this.fov = void 0 !== a ? a : 50;
    this.aspect = void 0 !== b ? b : 1;
    this.near = void 0 !== c ? c : 0.1;
    this.far = void 0 !== d ? d : 2e3;
    this.updateProjectionMatrix();
};
THREE.PerspectiveCamera.prototype = Object.create(THREE.Camera.prototype);
THREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;
THREE.PerspectiveCamera.prototype.setLens = function (a, b) {
    void 0 === b && (b = 24);
    this.fov = 2 * THREE.Math.radToDeg(Math.atan(b / (2 * a)));
    this.updateProjectionMatrix();
};
THREE.PerspectiveCamera.prototype.setViewOffset = function (a, b, c, d, e, f) {
    this.fullWidth = a;
    this.fullHeight = b;
    this.x = c;
    this.y = d;
    this.width = e;
    this.height = f;
    this.updateProjectionMatrix();
};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {
    var a = THREE.Math.radToDeg(2 * Math.atan(Math.tan(0.5 * THREE.Math.degToRad(this.fov)) / this.zoom));
    if (this.fullWidth) {
        var b = this.fullWidth / this.fullHeight,
            a = Math.tan(THREE.Math.degToRad(0.5 * a)) * this.near,
            c = -a,
            d = b * c,
            b = Math.abs(b * a - d),
            c = Math.abs(a - c);
        this.projectionMatrix.makeFrustum(d + (this.x * b) / this.fullWidth, d + ((this.x + this.width) * b) / this.fullWidth, a - ((this.y + this.height) * c) / this.fullHeight, a - (this.y * c) / this.fullHeight, this.near, this.far);
    } else this.projectionMatrix.makePerspective(a, this.aspect, this.near, this.far);
};
THREE.PerspectiveCamera.prototype.clone = function () {
    var a = new THREE.PerspectiveCamera();
    THREE.Camera.prototype.clone.call(this, a);
    a.zoom = this.zoom;
    a.fov = this.fov;
    a.aspect = this.aspect;
    a.near = this.near;
    a.far = this.far;
    a.projectionMatrix.copy(this.projectionMatrix);
    return a;
};
THREE.Light = function (a) {
    THREE.Object3D.call(this);
    this.type = "Light";
    this.color = new THREE.Color(a);
};
THREE.Light.prototype = Object.create(THREE.Object3D.prototype);
THREE.Light.prototype.constructor = THREE.Light;
THREE.Light.prototype.clone = function (a) {
    void 0 === a && (a = new THREE.Light());
    THREE.Object3D.prototype.clone.call(this, a);
    a.color.copy(this.color);
    return a;
};
THREE.AmbientLight = function (a) {
    THREE.Light.call(this, a);
    this.type = "AmbientLight";
};
THREE.AmbientLight.prototype = Object.create(THREE.Light.prototype);
THREE.AmbientLight.prototype.constructor = THREE.AmbientLight;
THREE.AmbientLight.prototype.clone = function () {
    var a = new THREE.AmbientLight();
    THREE.Light.prototype.clone.call(this, a);
    return a;
};
THREE.AreaLight = function (a, b) {
    THREE.Light.call(this, a);
    this.type = "AreaLight";
    this.normal = new THREE.Vector3(0, -1, 0);
    this.right = new THREE.Vector3(1, 0, 0);
    this.intensity = void 0 !== b ? b : 1;
    this.height = this.width = 1;
    this.constantAttenuation = 1.5;
    this.linearAttenuation = 0.5;
    this.quadraticAttenuation = 0.1;
};
THREE.AreaLight.prototype = Object.create(THREE.Light.prototype);
THREE.AreaLight.prototype.constructor = THREE.AreaLight;
THREE.DirectionalLight = function (a, b) {
    THREE.Light.call(this, a);
    this.type = "DirectionalLight";
    this.position.set(0, 1, 0);
    this.target = new THREE.Object3D();
    this.intensity = void 0 !== b ? b : 1;
    this.onlyShadow = this.castShadow = !1;
    this.shadowCameraNear = 50;
    this.shadowCameraFar = 5e3;
    this.shadowCameraLeft = -500;
    this.shadowCameraTop = this.shadowCameraRight = 500;
    this.shadowCameraBottom = -500;
    this.shadowCameraVisible = !1;
    this.shadowBias = 0;
    this.shadowDarkness = 0.5;
    this.shadowMapHeight = this.shadowMapWidth = 512;
    this.shadowCascade = !1;
    this.shadowCascadeOffset = new THREE.Vector3(0, 0, -1e3);
    this.shadowCascadeCount = 2;
    this.shadowCascadeBias = [0, 0, 0];
    this.shadowCascadeWidth = [512, 512, 512];
    this.shadowCascadeHeight = [512, 512, 512];
    this.shadowCascadeNearZ = [-1, 0.99, 0.998];
    this.shadowCascadeFarZ = [0.99, 0.998, 1];
    this.shadowCascadeArray = [];
    this.shadowMatrix = this.shadowCamera = this.shadowMapSize = this.shadowMap = null;
};
THREE.DirectionalLight.prototype = Object.create(THREE.Light.prototype);
THREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;
THREE.DirectionalLight.prototype.clone = function () {
    var a = new THREE.DirectionalLight();
    THREE.Light.prototype.clone.call(this, a);
    a.target = this.target.clone();
    a.intensity = this.intensity;
    a.castShadow = this.castShadow;
    a.onlyShadow = this.onlyShadow;
    a.shadowCameraNear = this.shadowCameraNear;
    a.shadowCameraFar = this.shadowCameraFar;
    a.shadowCameraLeft = this.shadowCameraLeft;
    a.shadowCameraRight = this.shadowCameraRight;
    a.shadowCameraTop = this.shadowCameraTop;
    a.shadowCameraBottom = this.shadowCameraBottom;
    a.shadowCameraVisible = this.shadowCameraVisible;
    a.shadowBias = this.shadowBias;
    a.shadowDarkness = this.shadowDarkness;
    a.shadowMapWidth = this.shadowMapWidth;
    a.shadowMapHeight = this.shadowMapHeight;
    a.shadowCascade = this.shadowCascade;
    a.shadowCascadeOffset.copy(this.shadowCascadeOffset);
    a.shadowCascadeCount = this.shadowCascadeCount;
    a.shadowCascadeBias = this.shadowCascadeBias.slice(0);
    a.shadowCascadeWidth = this.shadowCascadeWidth.slice(0);
    a.shadowCascadeHeight = this.shadowCascadeHeight.slice(0);
    a.shadowCascadeNearZ = this.shadowCascadeNearZ.slice(0);
    a.shadowCascadeFarZ = this.shadowCascadeFarZ.slice(0);
    return a;
};
THREE.HemisphereLight = function (a, b, c) {
    THREE.Light.call(this, a);
    this.type = "HemisphereLight";
    this.position.set(0, 100, 0);
    this.groundColor = new THREE.Color(b);
    this.intensity = void 0 !== c ? c : 1;
};
THREE.HemisphereLight.prototype = Object.create(THREE.Light.prototype);
THREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;
THREE.HemisphereLight.prototype.clone = function () {
    var a = new THREE.HemisphereLight();
    THREE.Light.prototype.clone.call(this, a);
    a.groundColor.copy(this.groundColor);
    a.intensity = this.intensity;
    return a;
};
THREE.PointLight = function (a, b, c, d) {
    THREE.Light.call(this, a);
    this.type = "PointLight";
    this.intensity = void 0 !== b ? b : 1;
    this.distance = void 0 !== c ? c : 0;
    this.decay = void 0 !== d ? d : 1;
};
THREE.PointLight.prototype = Object.create(THREE.Light.prototype);
THREE.PointLight.prototype.constructor = THREE.PointLight;
THREE.PointLight.prototype.clone = function () {
    var a = new THREE.PointLight();
    THREE.Light.prototype.clone.call(this, a);
    a.intensity = this.intensity;
    a.distance = this.distance;
    a.decay = this.decay;
    return a;
};
THREE.SpotLight = function (a, b, c, d, e, f) {
    THREE.Light.call(this, a);
    this.type = "SpotLight";
    this.position.set(0, 1, 0);
    this.target = new THREE.Object3D();
    this.intensity = void 0 !== b ? b : 1;
    this.distance = void 0 !== c ? c : 0;
    this.angle = void 0 !== d ? d : Math.PI / 3;
    this.exponent = void 0 !== e ? e : 10;
    this.decay = void 0 !== f ? f : 1;
    this.onlyShadow = this.castShadow = !1;
    this.shadowCameraNear = 50;
    this.shadowCameraFar = 5e3;
    this.shadowCameraFov = 50;
    this.shadowCameraVisible = !1;
    this.shadowBias = 0;
    this.shadowDarkness = 0.5;
    this.shadowMapHeight = this.shadowMapWidth = 512;
    this.shadowMatrix = this.shadowCamera = this.shadowMapSize = this.shadowMap = null;
};
THREE.SpotLight.prototype = Object.create(THREE.Light.prototype);
THREE.SpotLight.prototype.constructor = THREE.SpotLight;
THREE.SpotLight.prototype.clone = function () {
    var a = new THREE.SpotLight();
    THREE.Light.prototype.clone.call(this, a);
    a.target = this.target.clone();
    a.intensity = this.intensity;
    a.distance = this.distance;
    a.angle = this.angle;
    a.exponent = this.exponent;
    a.decay = this.decay;
    a.castShadow = this.castShadow;
    a.onlyShadow = this.onlyShadow;
    a.shadowCameraNear = this.shadowCameraNear;
    a.shadowCameraFar = this.shadowCameraFar;
    a.shadowCameraFov = this.shadowCameraFov;
    a.shadowCameraVisible = this.shadowCameraVisible;
    a.shadowBias = this.shadowBias;
    a.shadowDarkness = this.shadowDarkness;
    a.shadowMapWidth = this.shadowMapWidth;
    a.shadowMapHeight = this.shadowMapHeight;
    return a;
};
THREE.Cache = {
    files: {},
    add: function (a, b) {
        this.files[a] = b;
    },
    get: function (a) {
        return this.files[a];
    },
    remove: function (a) {
        delete this.files[a];
    },
    clear: function () {
        this.files = {};
    },
};
THREE.Loader = function (a) {
    this.statusDomElement = (this.showStatus = a) ? THREE.Loader.prototype.addStatusElement() : null;
    this.imageLoader = new THREE.ImageLoader();
    this.onLoadStart = function () {};
    this.onLoadProgress = function () {};
    this.onLoadComplete = function () {};
};
THREE.Loader.prototype = {
    constructor: THREE.Loader,
    crossOrigin: void 0,
    addStatusElement: function () {
        var a = document.createElement("div");
        a.style.position = "absolute";
        a.style.right = "0px";
        a.style.top = "0px";
        a.style.fontSize = "0.8em";
        a.style.textAlign = "left";
        a.style.background = "rgba(0,0,0,0.25)";
        a.style.color = "#fff";
        a.style.width = "120px";
        a.style.padding = "0.5em 0.5em 0.5em 0.5em";
        a.style.zIndex = 1e3;
        a.innerHTML = "Loading ...";
        return a;
    },
    updateProgress: function (a) {
        var b = "Loaded ",
            b = a.total ? b + (((100 * a.loaded) / a.total).toFixed(0) + "%") : b + ((a.loaded / 1024).toFixed(2) + " KB");
        this.statusDomElement.innerHTML = b;
    },
    extractUrlBase: function (a) {
        a = a.split("/");
        if (1 === a.length) return "./";
        a.pop();
        return a.join("/") + "/";
    },
    initMaterials: function (a, b) {
        for (var c = [], d = 0; d < a.length; ++d) c[d] = this.createMaterial(a[d], b);
        return c;
    },
    needsTangents: function (a) {
        for (var b = 0, c = a.length; b < c; b++) if (a[b] instanceof THREE.ShaderMaterial) return !0;
        return !1;
    },
    createMaterial: function (a, b) {
        function c(a) {
            a = Math.log(a) / Math.LN2;
            return Math.pow(2, Math.round(a));
        }
        function d(a, d, e, g, h, k, s) {
            var u = b + e,
                v,
                x = THREE.Loader.Handlers.get(u);
            null !== x
                ? (v = x.load(u))
                : ((v = new THREE.Texture()),
                  (x = f.imageLoader),
                  (x.crossOrigin = f.crossOrigin),
                  x.load(u, function (a) {
                      if (!1 === THREE.Math.isPowerOfTwo(a.width) || !1 === THREE.Math.isPowerOfTwo(a.height)) {
                          var b = c(a.width),
                              d = c(a.height),
                              e = document.createElement("canvas");
                          e.width = b;
                          e.height = d;
                          e.getContext("2d").drawImage(a, 0, 0, b, d);
                          v.image = e;
                      } else v.image = a;
                      v.needsUpdate = !0;
                  }));
            v.sourceFile = e;
            g && (v.repeat.set(g[0], g[1]), 1 !== g[0] && (v.wrapS = THREE.RepeatWrapping), 1 !== g[1] && (v.wrapT = THREE.RepeatWrapping));
            h && v.offset.set(h[0], h[1]);
            k && ((e = { repeat: THREE.RepeatWrapping, mirror: THREE.MirroredRepeatWrapping }), void 0 !== e[k[0]] && (v.wrapS = e[k[0]]), void 0 !== e[k[1]] && (v.wrapT = e[k[1]]));
            s && (v.anisotropy = s);
            a[d] = v;
        }
        function e(a) {
            return ((255 * a[0]) << 16) + ((255 * a[1]) << 8) + 255 * a[2];
        }
        var f = this,
            g = "MeshLambertMaterial",
            h = { color: 15658734, opacity: 1, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: !1 };
        if (a.shading) {
            var k = a.shading.toLowerCase();
            "phong" === k ? (g = "MeshPhongMaterial") : "basic" === k && (g = "MeshBasicMaterial");
        }
        void 0 !== a.blending && void 0 !== THREE[a.blending] && (h.blending = THREE[a.blending]);
        void 0 !== a.transparent && (h.transparent = a.transparent);
        void 0 !== a.opacity && 1 > a.opacity && (h.transparent = !0);
        void 0 !== a.depthTest && (h.depthTest = a.depthTest);
        void 0 !== a.depthWrite && (h.depthWrite = a.depthWrite);
        void 0 !== a.visible && (h.visible = a.visible);
        void 0 !== a.flipSided && (h.side = THREE.BackSide);
        void 0 !== a.doubleSided && (h.side = THREE.DoubleSide);
        void 0 !== a.wireframe && (h.wireframe = a.wireframe);
        void 0 !== a.vertexColors && ("face" === a.vertexColors ? (h.vertexColors = THREE.FaceColors) : a.vertexColors && (h.vertexColors = THREE.VertexColors));
        a.colorDiffuse ? (h.color = e(a.colorDiffuse)) : a.DbgColor && (h.color = a.DbgColor);
        a.colorSpecular && (h.specular = e(a.colorSpecular));
        a.colorEmissive && (h.emissive = e(a.colorEmissive));
        void 0 !== a.transparency && (console.warn("THREE.Loader: transparency has been renamed to opacity"), (a.opacity = a.transparency));
        void 0 !== a.opacity && (h.opacity = a.opacity);
        a.specularCoef && (h.shininess = a.specularCoef);
        a.mapDiffuse && b && d(h, "map", a.mapDiffuse, a.mapDiffuseRepeat, a.mapDiffuseOffset, a.mapDiffuseWrap, a.mapDiffuseAnisotropy);
        a.mapLight && b && d(h, "lightMap", a.mapLight, a.mapLightRepeat, a.mapLightOffset, a.mapLightWrap, a.mapLightAnisotropy);
        a.mapBump && b && d(h, "bumpMap", a.mapBump, a.mapBumpRepeat, a.mapBumpOffset, a.mapBumpWrap, a.mapBumpAnisotropy);
        a.mapNormal && b && d(h, "normalMap", a.mapNormal, a.mapNormalRepeat, a.mapNormalOffset, a.mapNormalWrap, a.mapNormalAnisotropy);
        a.mapSpecular && b && d(h, "specularMap", a.mapSpecular, a.mapSpecularRepeat, a.mapSpecularOffset, a.mapSpecularWrap, a.mapSpecularAnisotropy);
        a.mapAlpha && b && d(h, "alphaMap", a.mapAlpha, a.mapAlphaRepeat, a.mapAlphaOffset, a.mapAlphaWrap, a.mapAlphaAnisotropy);
        a.mapBumpScale && (h.bumpScale = a.mapBumpScale);
        a.mapNormalFactor && (h.normalScale = new THREE.Vector2(a.mapNormalFactor, a.mapNormalFactor));
        g = new THREE[g](h);
        void 0 !== a.DbgName && (g.name = a.DbgName);
        return g;
    },
};
THREE.Loader.Handlers = {
    handlers: [],
    add: function (a, b) {
        this.handlers.push(a, b);
    },
    get: function (a) {
        for (var b = 0, c = this.handlers.length; b < c; b += 2) {
            var d = this.handlers[b + 1];
            if (this.handlers[b].test(a)) return d;
        }
        return null;
    },
};
THREE.XHRLoader = function (a) {
    this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.XHRLoader.prototype = {
    constructor: THREE.XHRLoader,
    load: function (a, b, c, d) {
        var e = this,
            f = THREE.Cache.get(a);
        void 0 !== f
            ? b && b(f)
            : ((f = new XMLHttpRequest()),
              f.open("GET", a, !0),
              f.addEventListener(
                  "load",
                  function (c) {
                      THREE.Cache.add(a, this.response);
                      b && b(this.response);
                      e.manager.itemEnd(a);
                  },
                  !1
              ),
              void 0 !== c &&
                  f.addEventListener(
                      "progress",
                      function (a) {
                          c(a);
                      },
                      !1
                  ),
              void 0 !== d &&
                  f.addEventListener(
                      "error",
                      function (a) {
                          d(a);
                      },
                      !1
                  ),
              void 0 !== this.crossOrigin && (f.crossOrigin = this.crossOrigin),
              void 0 !== this.responseType && (f.responseType = this.responseType),
              f.send(null),
              e.manager.itemStart(a));
    },
    setResponseType: function (a) {
        this.responseType = a;
    },
    setCrossOrigin: function (a) {
        this.crossOrigin = a;
    },
};
THREE.ImageLoader = function (a) {
    this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.ImageLoader.prototype = {
    constructor: THREE.ImageLoader,
    load: function (a, b, c, d) {
        var e = this,
            f = THREE.Cache.get(a);
        if (void 0 !== f) b(f);
        else
            return (
                (f = document.createElement("img")),
                f.addEventListener(
                    "load",
                    function (c) {
                        THREE.Cache.add(a, this);
                        b && b(this);
                        e.manager.itemEnd(a);
                    },
                    !1
                ),
                void 0 !== c &&
                    f.addEventListener(
                        "progress",
                        function (a) {
                            c(a);
                        },
                        !1
                    ),
                void 0 !== d &&
                    f.addEventListener(
                        "error",
                        function (a) {
                            d(a);
                        },
                        !1
                    ),
                void 0 !== this.crossOrigin && (f.crossOrigin = this.crossOrigin),
                (f.src = a),
                e.manager.itemStart(a),
                f
            );
    },
    setCrossOrigin: function (a) {
        this.crossOrigin = a;
    },
};
THREE.JSONLoader = function (a) {
    THREE.Loader.call(this, a);
    this.withCredentials = !1;
};
THREE.JSONLoader.prototype = Object.create(THREE.Loader.prototype);
THREE.JSONLoader.prototype.constructor = THREE.JSONLoader;
THREE.JSONLoader.prototype.load = function (a, b, c) {
    c = c && "string" === typeof c ? c : this.extractUrlBase(a);
    this.onLoadStart();
    this.loadAjaxJSON(this, a, b, c);
};
THREE.JSONLoader.prototype.loadAjaxJSON = function (a, b, c, d, e) {
    var f = new XMLHttpRequest(),
        g = 0;
    f.onreadystatechange = function () {
        if (f.readyState === f.DONE)
            if (200 === f.status || 0 === f.status) {
                if (f.responseText) {
                    var h = JSON.parse(f.responseText),
                        k = h.metadata;
                    if (void 0 !== k) {
                        if ("object" === k.type) {
                            THREE.error("THREE.JSONLoader: " + b + " should be loaded with THREE.ObjectLoader instead.");
                            return;
                        }
                        if ("scene" === k.type) {
                            THREE.error("THREE.JSONLoader: " + b + " seems to be a Scene. Use THREE.SceneLoader instead.");
                            return;
                        }
                    }
                    h = a.parse(h, d);
                    c(h.geometry, h.materials);
                } else THREE.error("THREE.JSONLoader: " + b + " seems to be unreachable or the file is empty.");
                a.onLoadComplete();
            } else THREE.error("THREE.JSONLoader: Couldn't load " + b + " (" + f.status + ")");
        else
            f.readyState === f.LOADING
                ? e && (0 === g && (g = f.getResponseHeader("Content-Length")), e({ total: g, loaded: f.responseText.length }))
                : f.readyState === f.HEADERS_RECEIVED && void 0 !== e && (g = f.getResponseHeader("Content-Length"));
    };
    f.open("GET", b, !0);
    f.withCredentials = this.withCredentials;
    f.send(null);
};
THREE.JSONLoader.prototype.parse = function (a, b) {
    var c = new THREE.Geometry(),
        d = void 0 !== a.scale ? 1 / a.scale : 1;
    (function (b) {
        var d,
            g,
            h,
            k,
            l,
            p,
            q,
            n,
            t,
            r,
            s,
            u,
            v,
            x = a.faces;
        p = a.vertices;
        var D = a.normals,
            w = a.colors,
            y = 0;
        if (void 0 !== a.uvs) {
            for (d = 0; d < a.uvs.length; d++) a.uvs[d].length && y++;
            for (d = 0; d < y; d++) c.faceVertexUvs[d] = [];
        }
        k = 0;
        for (l = p.length; k < l; ) (d = new THREE.Vector3()), (d.x = p[k++] * b), (d.y = p[k++] * b), (d.z = p[k++] * b), c.vertices.push(d);
        k = 0;
        for (l = x.length; k < l; )
            if (((b = x[k++]), (t = b & 1), (h = b & 2), (d = b & 8), (q = b & 16), (r = b & 32), (p = b & 64), (b &= 128), t)) {
                t = new THREE.Face3();
                t.a = x[k];
                t.b = x[k + 1];
                t.c = x[k + 3];
                s = new THREE.Face3();
                s.a = x[k + 1];
                s.b = x[k + 2];
                s.c = x[k + 3];
                k += 4;
                h && ((h = x[k++]), (t.materialIndex = h), (s.materialIndex = h));
                h = c.faces.length;
                if (d)
                    for (d = 0; d < y; d++)
                        for (u = a.uvs[d], c.faceVertexUvs[d][h] = [], c.faceVertexUvs[d][h + 1] = [], g = 0; 4 > g; g++)
                            (n = x[k++]), (v = u[2 * n]), (n = u[2 * n + 1]), (v = new THREE.Vector2(v, n)), 2 !== g && c.faceVertexUvs[d][h].push(v), 0 !== g && c.faceVertexUvs[d][h + 1].push(v);
                q && ((q = 3 * x[k++]), t.normal.set(D[q++], D[q++], D[q]), s.normal.copy(t.normal));
                if (r) for (d = 0; 4 > d; d++) (q = 3 * x[k++]), (r = new THREE.Vector3(D[q++], D[q++], D[q])), 2 !== d && t.vertexNormals.push(r), 0 !== d && s.vertexNormals.push(r);
                p && ((p = x[k++]), (p = w[p]), t.color.setHex(p), s.color.setHex(p));
                if (b) for (d = 0; 4 > d; d++) (p = x[k++]), (p = w[p]), 2 !== d && t.vertexColors.push(new THREE.Color(p)), 0 !== d && s.vertexColors.push(new THREE.Color(p));
                c.faces.push(t);
                c.faces.push(s);
            } else {
                t = new THREE.Face3();
                t.a = x[k++];
                t.b = x[k++];
                t.c = x[k++];
                h && ((h = x[k++]), (t.materialIndex = h));
                h = c.faces.length;
                if (d) for (d = 0; d < y; d++) for (u = a.uvs[d], c.faceVertexUvs[d][h] = [], g = 0; 3 > g; g++) (n = x[k++]), (v = u[2 * n]), (n = u[2 * n + 1]), (v = new THREE.Vector2(v, n)), c.faceVertexUvs[d][h].push(v);
                q && ((q = 3 * x[k++]), t.normal.set(D[q++], D[q++], D[q]));
                if (r) for (d = 0; 3 > d; d++) (q = 3 * x[k++]), (r = new THREE.Vector3(D[q++], D[q++], D[q])), t.vertexNormals.push(r);
                p && ((p = x[k++]), t.color.setHex(w[p]));
                if (b) for (d = 0; 3 > d; d++) (p = x[k++]), t.vertexColors.push(new THREE.Color(w[p]));
                c.faces.push(t);
            }
    })(d);
    (function () {
        var b = void 0 !== a.influencesPerVertex ? a.influencesPerVertex : 2;
        if (a.skinWeights)
            for (var d = 0, g = a.skinWeights.length; d < g; d += b) c.skinWeights.push(new THREE.Vector4(a.skinWeights[d], 1 < b ? a.skinWeights[d + 1] : 0, 2 < b ? a.skinWeights[d + 2] : 0, 3 < b ? a.skinWeights[d + 3] : 0));
        if (a.skinIndices) for (d = 0, g = a.skinIndices.length; d < g; d += b) c.skinIndices.push(new THREE.Vector4(a.skinIndices[d], 1 < b ? a.skinIndices[d + 1] : 0, 2 < b ? a.skinIndices[d + 2] : 0, 3 < b ? a.skinIndices[d + 3] : 0));
        c.bones = a.bones;
        c.bones &&
            0 < c.bones.length &&
            (c.skinWeights.length !== c.skinIndices.length || c.skinIndices.length !== c.vertices.length) &&
            THREE.warn("THREE.JSONLoader: When skinning, number of vertices (" + c.vertices.length + "), skinIndices (" + c.skinIndices.length + "), and skinWeights (" + c.skinWeights.length + ") should match.");
        c.animation = a.animation;
        c.animations = a.animations;
    })();
    (function (b) {
        if (void 0 !== a.morphTargets) {
            var d, g, h, k, l, p;
            d = 0;
            for (g = a.morphTargets.length; d < g; d++)
                for (c.morphTargets[d] = {}, c.morphTargets[d].name = a.morphTargets[d].name, c.morphTargets[d].vertices = [], l = c.morphTargets[d].vertices, p = a.morphTargets[d].vertices, h = 0, k = p.length; h < k; h += 3) {
                    var q = new THREE.Vector3();
                    q.x = p[h] * b;
                    q.y = p[h + 1] * b;
                    q.z = p[h + 2] * b;
                    l.push(q);
                }
        }
        if (void 0 !== a.morphColors)
            for (d = 0, g = a.morphColors.length; d < g; d++)
                for (c.morphColors[d] = {}, c.morphColors[d].name = a.morphColors[d].name, c.morphColors[d].colors = [], k = c.morphColors[d].colors, l = a.morphColors[d].colors, b = 0, h = l.length; b < h; b += 3)
                    (p = new THREE.Color(16755200)), p.setRGB(l[b], l[b + 1], l[b + 2]), k.push(p);
    })(d);
    c.computeFaceNormals();
    c.computeBoundingSphere();
    if (void 0 === a.materials || 0 === a.materials.length) return { geometry: c };
    d = this.initMaterials(a.materials, b);
    this.needsTangents(d) && c.computeTangents();
    return { geometry: c, materials: d };
};
THREE.LoadingManager = function (a, b, c) {
    var d = this,
        e = 0,
        f = 0;
    this.onLoad = a;
    this.onProgress = b;
    this.onError = c;
    this.itemStart = function (a) {
        f++;
    };
    this.itemEnd = function (a) {
        e++;
        if (void 0 !== d.onProgress) d.onProgress(a, e, f);
        if (e === f && void 0 !== d.onLoad) d.onLoad();
    };
};
THREE.DefaultLoadingManager = new THREE.LoadingManager();
THREE.BufferGeometryLoader = function (a) {
    this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.BufferGeometryLoader.prototype = {
    constructor: THREE.BufferGeometryLoader,
    load: function (a, b, c, d) {
        var e = this,
            f = new THREE.XHRLoader(e.manager);
        f.setCrossOrigin(this.crossOrigin);
        f.load(
            a,
            function (a) {
                b(e.parse(JSON.parse(a)));
            },
            c,
            d
        );
    },
    setCrossOrigin: function (a) {
        this.crossOrigin = a;
    },
    parse: function (a) {
        var b = new THREE.BufferGeometry(),
            c = a.data.attributes,
            d;
        for (d in c) {
            var e = c[d],
                f = new self[e.type](e.array);
            b.addAttribute(d, new THREE.BufferAttribute(f, e.itemSize));
        }
        c = a.data.offsets;
        void 0 !== c && (b.offsets = JSON.parse(JSON.stringify(c)));
        a = a.data.boundingSphere;
        void 0 !== a && ((c = new THREE.Vector3()), void 0 !== a.center && c.fromArray(a.center), (b.boundingSphere = new THREE.Sphere(c, a.radius)));
        return b;
    },
};
THREE.MaterialLoader = function (a) {
    this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.MaterialLoader.prototype = {
    constructor: THREE.MaterialLoader,
    load: function (a, b, c, d) {
        var e = this,
            f = new THREE.XHRLoader(e.manager);
        f.setCrossOrigin(this.crossOrigin);
        f.load(
            a,
            function (a) {
                b(e.parse(JSON.parse(a)));
            },
            c,
            d
        );
    },
    setCrossOrigin: function (a) {
        this.crossOrigin = a;
    },
    parse: function (a) {
        var b = new THREE[a.type]();
        void 0 !== a.color && b.color.setHex(a.color);
        void 0 !== a.emissive && b.emissive.setHex(a.emissive);
        void 0 !== a.specular && b.specular.setHex(a.specular);
        void 0 !== a.shininess && (b.shininess = a.shininess);
        void 0 !== a.uniforms && (b.uniforms = a.uniforms);
        void 0 !== a.vertexShader && (b.vertexShader = a.vertexShader);
        void 0 !== a.fragmentShader && (b.fragmentShader = a.fragmentShader);
        void 0 !== a.vertexColors && (b.vertexColors = a.vertexColors);
        void 0 !== a.shading && (b.shading = a.shading);
        void 0 !== a.blending && (b.blending = a.blending);
        void 0 !== a.side && (b.side = a.side);
        void 0 !== a.opacity && (b.opacity = a.opacity);
        void 0 !== a.transparent && (b.transparent = a.transparent);
        void 0 !== a.wireframe && (b.wireframe = a.wireframe);
        void 0 !== a.size && (b.size = a.size);
        void 0 !== a.sizeAttenuation && (b.sizeAttenuation = a.sizeAttenuation);
        if (void 0 !== a.materials) for (var c = 0, d = a.materials.length; c < d; c++) b.materials.push(this.parse(a.materials[c]));
        return b;
    },
};
THREE.ObjectLoader = function (a) {
    this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
    this.texturePath = "";
};
THREE.ObjectLoader.prototype = {
    constructor: THREE.ObjectLoader,
    load: function (a, b, c, d) {
        "" === this.texturePath && (this.texturePath = a.substring(0, a.lastIndexOf("/") + 1));
        var e = this,
            f = new THREE.XHRLoader(e.manager);
        f.setCrossOrigin(this.crossOrigin);
        f.load(
            a,
            function (a) {
                e.parse(JSON.parse(a), b);
            },
            c,
            d
        );
    },
    setTexturePath: function (a) {
        this.texturePath = a;
    },
    setCrossOrigin: function (a) {
        this.crossOrigin = a;
    },
    parse: function (a, b) {
        var c = this.parseGeometries(a.geometries),
            d = this.parseImages(a.images, function () {
                void 0 !== b && b(e);
            }),
            d = this.parseTextures(a.textures, d),
            d = this.parseMaterials(a.materials, d),
            e = this.parseObject(a.object, c, d);
        (void 0 !== a.images && 0 !== a.images.length) || void 0 === b || b(e);
        return e;
    },
    parseGeometries: function (a) {
        var b = {};
        if (void 0 !== a)
            for (var c = new THREE.JSONLoader(), d = new THREE.BufferGeometryLoader(), e = 0, f = a.length; e < f; e++) {
                var g,
                    h = a[e];
                switch (h.type) {
                    case "PlaneGeometry":
                    case "PlaneBufferGeometry":
                        g = new THREE[h.type](h.width, h.height, h.widthSegments, h.heightSegments);
                        break;
                    case "BoxGeometry":
                    case "CubeGeometry":
                        g = new THREE.BoxGeometry(h.width, h.height, h.depth, h.widthSegments, h.heightSegments, h.depthSegments);
                        break;
                    case "CircleGeometry":
                        g = new THREE.CircleGeometry(h.radius, h.segments);
                        break;
                    case "CylinderGeometry":
                        g = new THREE.CylinderGeometry(h.radiusTop, h.radiusBottom, h.height, h.radialSegments, h.heightSegments, h.openEnded);
                        break;
                    case "SphereGeometry":
                        g = new THREE.SphereGeometry(h.radius, h.widthSegments, h.heightSegments, h.phiStart, h.phiLength, h.thetaStart, h.thetaLength);
                        break;
                    case "IcosahedronGeometry":
                        g = new THREE.IcosahedronGeometry(h.radius, h.detail);
                        break;
                    case "TorusGeometry":
                        g = new THREE.TorusGeometry(h.radius, h.tube, h.radialSegments, h.tubularSegments, h.arc);
                        break;
                    case "TorusKnotGeometry":
                        g = new THREE.TorusKnotGeometry(h.radius, h.tube, h.radialSegments, h.tubularSegments, h.p, h.q, h.heightScale);
                        break;
                    case "BufferGeometry":
                        g = d.parse(h);
                        break;
                    case "Geometry":
                        g = c.parse(h.data).geometry;
                }
                g.uuid = h.uuid;
                void 0 !== h.name && (g.name = h.name);
                b[h.uuid] = g;
            }
        return b;
    },
    parseMaterials: function (a, b) {
        var c = {};
        if (void 0 !== a)
            for (
                var d = function (a) {
                        void 0 === b[a] && THREE.warn("THREE.ObjectLoader: Undefined texture", a);
                        return b[a];
                    },
                    e = new THREE.MaterialLoader(),
                    f = 0,
                    g = a.length;
                f < g;
                f++
            ) {
                var h = a[f],
                    k = e.parse(h);
                k.uuid = h.uuid;
                void 0 !== h.name && (k.name = h.name);
                void 0 !== h.map && (k.map = d(h.map));
                void 0 !== h.bumpMap && ((k.bumpMap = d(h.bumpMap)), h.bumpScale && (k.bumpScale = new THREE.Vector2(h.bumpScale, h.bumpScale)));
                void 0 !== h.alphaMap && (k.alphaMap = d(h.alphaMap));
                void 0 !== h.envMap && (k.envMap = d(h.envMap));
                void 0 !== h.normalMap && ((k.normalMap = d(h.normalMap)), h.normalScale && (k.normalScale = new THREE.Vector2(h.normalScale, h.normalScale)));
                void 0 !== h.lightMap && (k.lightMap = d(h.lightMap));
                void 0 !== h.specularMap && (k.specularMap = d(h.specularMap));
                c[h.uuid] = k;
            }
        return c;
    },
    parseImages: function (a, b) {
        var c = this,
            d = {};
        if (void 0 !== a && 0 < a.length) {
            var e = new THREE.LoadingManager(b),
                f = new THREE.ImageLoader(e);
            f.setCrossOrigin(this.crossOrigin);
            for (
                var e = function (a) {
                        c.manager.itemStart(a);
                        return f.load(a, function () {
                            c.manager.itemEnd(a);
                        });
                    },
                    g = 0,
                    h = a.length;
                g < h;
                g++
            ) {
                var k = a[g],
                    l = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(k.url) ? k.url : c.texturePath + k.url;
                d[k.uuid] = e(l);
            }
        }
        return d;
    },
    parseTextures: function (a, b) {
        var c = {};
        if (void 0 !== a)
            for (var d = 0, e = a.length; d < e; d++) {
                var f = a[d];
                void 0 === f.image && THREE.warn('THREE.ObjectLoader: No "image" speficied for', f.uuid);
                void 0 === b[f.image] && THREE.warn("THREE.ObjectLoader: Undefined image", f.image);
                var g = new THREE.Texture(b[f.image]);
                g.needsUpdate = !0;
                g.uuid = f.uuid;
                void 0 !== f.name && (g.name = f.name);
                void 0 !== f.repeat && (g.repeat = new THREE.Vector2(f.repeat[0], f.repeat[1]));
                void 0 !== f.minFilter && (g.minFilter = THREE[f.minFilter]);
                void 0 !== f.magFilter && (g.magFilter = THREE[f.magFilter]);
                void 0 !== f.anisotropy && (g.anisotropy = f.anisotropy);
                f.wrap instanceof Array && ((g.wrapS = THREE[f.wrap[0]]), (g.wrapT = THREE[f.wrap[1]]));
                c[f.uuid] = g;
            }
        return c;
    },
    parseObject: (function () {
        var a = new THREE.Matrix4();
        return function (b, c, d) {
            var e;
            e = function (a) {
                void 0 === c[a] && THREE.warn("THREE.ObjectLoader: Undefined geometry", a);
                return c[a];
            };
            var f = function (a) {
                void 0 === d[a] && THREE.warn("THREE.ObjectLoader: Undefined material", a);
                return d[a];
            };
            switch (b.type) {
                case "Scene":
                    e = new THREE.Scene();
                    break;
                case "PerspectiveCamera":
                    e = new THREE.PerspectiveCamera(b.fov, b.aspect, b.near, b.far);
                    break;
                case "OrthographicCamera":
                    e = new THREE.OrthographicCamera(b.left, b.right, b.top, b.bottom, b.near, b.far);
                    break;
                case "AmbientLight":
                    e = new THREE.AmbientLight(b.color);
                    break;
                case "DirectionalLight":
                    e = new THREE.DirectionalLight(b.color, b.intensity);
                    break;
                case "PointLight":
                    e = new THREE.PointLight(b.color, b.intensity, b.distance, b.decay);
                    break;
                case "SpotLight":
                    e = new THREE.SpotLight(b.color, b.intensity, b.distance, b.angle, b.exponent, b.decay);
                    break;
                case "HemisphereLight":
                    e = new THREE.HemisphereLight(b.color, b.groundColor, b.intensity);
                    break;
                case "Mesh":
                    e = new THREE.Mesh(e(b.geometry), f(b.material));
                    break;
                case "Line":
                    e = new THREE.Line(e(b.geometry), f(b.material), b.mode);
                    break;
                case "PointCloud":
                    e = new THREE.PointCloud(e(b.geometry), f(b.material));
                    break;
                case "Sprite":
                    e = new THREE.Sprite(f(b.material));
                    break;
                case "Group":
                    e = new THREE.Group();
                    break;
                default:
                    e = new THREE.Object3D();
            }
            e.uuid = b.uuid;
            void 0 !== b.name && (e.name = b.name);
            void 0 !== b.matrix
                ? (a.fromArray(b.matrix), a.decompose(e.position, e.quaternion, e.scale))
                : (void 0 !== b.position && e.position.fromArray(b.position), void 0 !== b.rotation && e.rotation.fromArray(b.rotation), void 0 !== b.scale && e.scale.fromArray(b.scale));
            void 0 !== b.visible && (e.visible = b.visible);
            void 0 !== b.userData && (e.userData = b.userData);
            if (void 0 !== b.children) for (var g in b.children) e.add(this.parseObject(b.children[g], c, d));
            return e;
        };
    })(),
};
THREE.TextureLoader = function (a) {
    this.manager = void 0 !== a ? a : THREE.DefaultLoadingManager;
};
THREE.TextureLoader.prototype = {
    constructor: THREE.TextureLoader,
    load: function (a, b, c, d) {
        var e = new THREE.ImageLoader(this.manager);
        e.setCrossOrigin(this.crossOrigin);
        e.load(
            a,
            function (a) {
                a = new THREE.Texture(a);
                a.needsUpdate = !0;
                void 0 !== b && b(a);
            },
            c,
            d
        );
    },
    setCrossOrigin: function (a) {
        this.crossOrigin = a;
    },
};
THREE.DataTextureLoader = THREE.BinaryTextureLoader = function () {
    this._parser = null;
};
THREE.BinaryTextureLoader.prototype = {
    constructor: THREE.BinaryTextureLoader,
    load: function (a, b, c, d) {
        var e = this,
            f = new THREE.DataTexture(),
            g = new THREE.XHRLoader();
        g.setResponseType("arraybuffer");
        g.load(
            a,
            function (a) {
                if ((a = e._parser(a)))
                    void 0 !== a.image ? (f.image = a.image) : void 0 !== a.data && ((f.image.width = a.width), (f.image.height = a.height), (f.image.data = a.data)),
                        (f.wrapS = void 0 !== a.wrapS ? a.wrapS : THREE.ClampToEdgeWrapping),
                        (f.wrapT = void 0 !== a.wrapT ? a.wrapT : THREE.ClampToEdgeWrapping),
                        (f.magFilter = void 0 !== a.magFilter ? a.magFilter : THREE.LinearFilter),
                        (f.minFilter = void 0 !== a.minFilter ? a.minFilter : THREE.LinearMipMapLinearFilter),
                        (f.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1),
                        void 0 !== a.format && (f.format = a.format),
                        void 0 !== a.type && (f.type = a.type),
                        void 0 !== a.mipmaps && (f.mipmaps = a.mipmaps),
                        1 === a.mipmapCount && (f.minFilter = THREE.LinearFilter),
                        (f.needsUpdate = !0),
                        b && b(f, a);
            },
            c,
            d
        );
        return f;
    },
};
THREE.CompressedTextureLoader = function () {
    this._parser = null;
};
THREE.CompressedTextureLoader.prototype = {
    constructor: THREE.CompressedTextureLoader,
    load: function (a, b, c) {
        var d = this,
            e = [],
            f = new THREE.CompressedTexture();
        f.image = e;
        var g = new THREE.XHRLoader();
        g.setResponseType("arraybuffer");
        if (a instanceof Array) {
            var h = 0;
            c = function (c) {
                g.load(a[c], function (a) {
                    a = d._parser(a, !0);
                    e[c] = { width: a.width, height: a.height, format: a.format, mipmaps: a.mipmaps };
                    h += 1;
                    6 === h && (1 == a.mipmapCount && (f.minFilter = THREE.LinearFilter), (f.format = a.format), (f.needsUpdate = !0), b && b(f));
                });
            };
            for (var k = 0, l = a.length; k < l; ++k) c(k);
        } else
            g.load(a, function (a) {
                a = d._parser(a, !0);
                if (a.isCubemap)
                    for (var c = a.mipmaps.length / a.mipmapCount, g = 0; g < c; g++) {
                        e[g] = { mipmaps: [] };
                        for (var h = 0; h < a.mipmapCount; h++) e[g].mipmaps.push(a.mipmaps[g * a.mipmapCount + h]), (e[g].format = a.format), (e[g].width = a.width), (e[g].height = a.height);
                    }
                else (f.image.width = a.width), (f.image.height = a.height), (f.mipmaps = a.mipmaps);
                1 === a.mipmapCount && (f.minFilter = THREE.LinearFilter);
                f.format = a.format;
                f.needsUpdate = !0;
                b && b(f);
            });
        return f;
    },
};
THREE.Material = function () {
    Object.defineProperty(this, "id", { value: THREE.MaterialIdCount++ });
    this.uuid = THREE.Math.generateUUID();
    this.name = "";
    this.type = "Material";
    this.side = THREE.FrontSide;
    this.opacity = 1;
    this.transparent = !1;
    this.blending = THREE.NormalBlending;
    this.blendSrc = THREE.SrcAlphaFactor;
    this.blendDst = THREE.OneMinusSrcAlphaFactor;
    this.blendEquation = THREE.AddEquation;
    this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null;
    this.colorWrite = this.depthWrite = this.depthTest = !0;
    this.polygonOffset = !1;
    this.overdraw = this.alphaTest = this.polygonOffsetUnits = this.polygonOffsetFactor = 0;
    this._needsUpdate = this.visible = !0;
};
THREE.Material.prototype = {
    constructor: THREE.Material,
    get needsUpdate() {
        return this._needsUpdate;
    },
    set needsUpdate(a) {
        !0 === a && this.update();
        this._needsUpdate = a;
    },
    setValues: function (a) {
        if (void 0 !== a)
            for (var b in a) {
                var c = a[b];
                if (void 0 === c) THREE.warn("THREE.Material: '" + b + "' parameter is undefined.");
                else if (b in this) {
                    var d = this[b];
                    d instanceof THREE.Color ? d.set(c) : d instanceof THREE.Vector3 && c instanceof THREE.Vector3 ? d.copy(c) : (this[b] = "overdraw" == b ? Number(c) : c);
                }
            }
    },
    toJSON: function () {
        var a = { metadata: { version: 4.2, type: "material", generator: "MaterialExporter" }, uuid: this.uuid, type: this.type };
        "" !== this.name && (a.name = this.name);
        this instanceof THREE.MeshBasicMaterial
            ? ((a.color = this.color.getHex()),
              this.vertexColors !== THREE.NoColors && (a.vertexColors = this.vertexColors),
              this.blending !== THREE.NormalBlending && (a.blending = this.blending),
              this.side !== THREE.FrontSide && (a.side = this.side))
            : this instanceof THREE.MeshLambertMaterial
            ? ((a.color = this.color.getHex()),
              (a.emissive = this.emissive.getHex()),
              this.vertexColors !== THREE.NoColors && (a.vertexColors = this.vertexColors),
              this.shading !== THREE.SmoothShading && (a.shading = this.shading),
              this.blending !== THREE.NormalBlending && (a.blending = this.blending),
              this.side !== THREE.FrontSide && (a.side = this.side))
            : this instanceof THREE.MeshPhongMaterial
            ? ((a.color = this.color.getHex()),
              (a.emissive = this.emissive.getHex()),
              (a.specular = this.specular.getHex()),
              (a.shininess = this.shininess),
              this.vertexColors !== THREE.NoColors && (a.vertexColors = this.vertexColors),
              this.shading !== THREE.SmoothShading && (a.shading = this.shading),
              this.blending !== THREE.NormalBlending && (a.blending = this.blending),
              this.side !== THREE.FrontSide && (a.side = this.side))
            : this instanceof THREE.MeshNormalMaterial
            ? (this.blending !== THREE.NormalBlending && (a.blending = this.blending), this.side !== THREE.FrontSide && (a.side = this.side))
            : this instanceof THREE.MeshDepthMaterial
            ? (this.blending !== THREE.NormalBlending && (a.blending = this.blending), this.side !== THREE.FrontSide && (a.side = this.side))
            : this instanceof THREE.PointCloudMaterial
            ? ((a.size = this.size),
              (a.sizeAttenuation = this.sizeAttenuation),
              (a.color = this.color.getHex()),
              this.vertexColors !== THREE.NoColors && (a.vertexColors = this.vertexColors),
              this.blending !== THREE.NormalBlending && (a.blending = this.blending))
            : this instanceof THREE.ShaderMaterial
            ? ((a.uniforms = this.uniforms), (a.vertexShader = this.vertexShader), (a.fragmentShader = this.fragmentShader))
            : this instanceof THREE.SpriteMaterial && (a.color = this.color.getHex());
        1 > this.opacity && (a.opacity = this.opacity);
        !1 !== this.transparent && (a.transparent = this.transparent);
        !1 !== this.wireframe && (a.wireframe = this.wireframe);
        return a;
    },
    clone: function (a) {
        void 0 === a && (a = new THREE.Material());
        a.name = this.name;
        a.side = this.side;
        a.opacity = this.opacity;
        a.transparent = this.transparent;
        a.blending = this.blending;
        a.blendSrc = this.blendSrc;
        a.blendDst = this.blendDst;
        a.blendEquation = this.blendEquation;
        a.blendSrcAlpha = this.blendSrcAlpha;
        a.blendDstAlpha = this.blendDstAlpha;
        a.blendEquationAlpha = this.blendEquationAlpha;
        a.depthTest = this.depthTest;
        a.depthWrite = this.depthWrite;
        a.polygonOffset = this.polygonOffset;
        a.polygonOffsetFactor = this.polygonOffsetFactor;
        a.polygonOffsetUnits = this.polygonOffsetUnits;
        a.alphaTest = this.alphaTest;
        a.overdraw = this.overdraw;
        a.visible = this.visible;
        return a;
    },
    update: function () {
        this.dispatchEvent({ type: "update" });
    },
    dispose: function () {
        this.dispatchEvent({ type: "dispose" });
    },
};
THREE.EventDispatcher.prototype.apply(THREE.Material.prototype);
THREE.MaterialIdCount = 0;
THREE.LineBasicMaterial = function (a) {
    THREE.Material.call(this);
    this.type = "LineBasicMaterial";
    this.color = new THREE.Color(16777215);
    this.linewidth = 1;
    this.linejoin = this.linecap = "round";
    this.vertexColors = THREE.NoColors;
    this.fog = !0;
    this.setValues(a);
};
THREE.LineBasicMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;
THREE.LineBasicMaterial.prototype.clone = function () {
    var a = new THREE.LineBasicMaterial();
    THREE.Material.prototype.clone.call(this, a);
    a.color.copy(this.color);
    a.linewidth = this.linewidth;
    a.linecap = this.linecap;
    a.linejoin = this.linejoin;
    a.vertexColors = this.vertexColors;
    a.fog = this.fog;
    return a;
};
THREE.LineDashedMaterial = function (a) {
    THREE.Material.call(this);
    this.type = "LineDashedMaterial";
    this.color = new THREE.Color(16777215);
    this.scale = this.linewidth = 1;
    this.dashSize = 3;
    this.gapSize = 1;
    this.vertexColors = !1;
    this.fog = !0;
    this.setValues(a);
};
THREE.LineDashedMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;
THREE.LineDashedMaterial.prototype.clone = function () {
    var a = new THREE.LineDashedMaterial();
    THREE.Material.prototype.clone.call(this, a);
    a.color.copy(this.color);
    a.linewidth = this.linewidth;
    a.scale = this.scale;
    a.dashSize = this.dashSize;
    a.gapSize = this.gapSize;
    a.vertexColors = this.vertexColors;
    a.fog = this.fog;
    return a;
};
THREE.MeshBasicMaterial = function (a) {
    THREE.Material.call(this);
    this.type = "MeshBasicMaterial";
    this.color = new THREE.Color(16777215);
    this.envMap = this.alphaMap = this.specularMap = this.lightMap = this.map = null;
    this.combine = THREE.MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.fog = !0;
    this.shading = THREE.SmoothShading;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.vertexColors = THREE.NoColors;
    this.morphTargets = this.skinning = !1;
    this.setValues(a);
};
THREE.MeshBasicMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;
THREE.MeshBasicMaterial.prototype.clone = function () {
    var a = new THREE.MeshBasicMaterial();
    THREE.Material.prototype.clone.call(this, a);
    a.color.copy(this.color);
    a.map = this.map;
    a.lightMap = this.lightMap;
    a.specularMap = this.specularMap;
    a.alphaMap = this.alphaMap;
    a.envMap = this.envMap;
    a.combine = this.combine;
    a.reflectivity = this.reflectivity;
    a.refractionRatio = this.refractionRatio;
    a.fog = this.fog;
    a.shading = this.shading;
    a.wireframe = this.wireframe;
    a.wireframeLinewidth = this.wireframeLinewidth;
    a.wireframeLinecap = this.wireframeLinecap;
    a.wireframeLinejoin = this.wireframeLinejoin;
    a.vertexColors = this.vertexColors;
    a.skinning = this.skinning;
    a.morphTargets = this.morphTargets;
    return a;
};
THREE.MeshLambertMaterial = function (a) {
    THREE.Material.call(this);
    this.type = "MeshLambertMaterial";
    this.color = new THREE.Color(16777215);
    this.emissive = new THREE.Color(0);
    this.wrapAround = !1;
    this.wrapRGB = new THREE.Vector3(1, 1, 1);
    this.envMap = this.alphaMap = this.specularMap = this.lightMap = this.map = null;
    this.combine = THREE.MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.fog = !0;
    this.shading = THREE.SmoothShading;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.vertexColors = THREE.NoColors;
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(a);
};
THREE.MeshLambertMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;
THREE.MeshLambertMaterial.prototype.clone = function () {
    var a = new THREE.MeshLambertMaterial();
    THREE.Material.prototype.clone.call(this, a);
    a.color.copy(this.color);
    a.emissive.copy(this.emissive);
    a.wrapAround = this.wrapAround;
    a.wrapRGB.copy(this.wrapRGB);
    a.map = this.map;
    a.lightMap = this.lightMap;
    a.specularMap = this.specularMap;
    a.alphaMap = this.alphaMap;
    a.envMap = this.envMap;
    a.combine = this.combine;
    a.reflectivity = this.reflectivity;
    a.refractionRatio = this.refractionRatio;
    a.fog = this.fog;
    a.shading = this.shading;
    a.wireframe = this.wireframe;
    a.wireframeLinewidth = this.wireframeLinewidth;
    a.wireframeLinecap = this.wireframeLinecap;
    a.wireframeLinejoin = this.wireframeLinejoin;
    a.vertexColors = this.vertexColors;
    a.skinning = this.skinning;
    a.morphTargets = this.morphTargets;
    a.morphNormals = this.morphNormals;
    return a;
};
THREE.MeshPhongMaterial = function (a) {
    THREE.Material.call(this);
    this.type = "MeshPhongMaterial";
    this.color = new THREE.Color(16777215);
    this.emissive = new THREE.Color(0);
    this.specular = new THREE.Color(1118481);
    this.shininess = 30;
    this.wrapAround = this.metal = !1;
    this.wrapRGB = new THREE.Vector3(1, 1, 1);
    this.bumpMap = this.lightMap = this.map = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalScale = new THREE.Vector2(1, 1);
    this.envMap = this.alphaMap = this.specularMap = null;
    this.combine = THREE.MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.fog = !0;
    this.shading = THREE.SmoothShading;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.wireframeLinejoin = this.wireframeLinecap = "round";
    this.vertexColors = THREE.NoColors;
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.setValues(a);
};
THREE.MeshPhongMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;
THREE.MeshPhongMaterial.prototype.clone = function () {
    var a = new THREE.MeshPhongMaterial();
    THREE.Material.prototype.clone.call(this, a);
    a.color.copy(this.color);
    a.emissive.copy(this.emissive);
    a.specular.copy(this.specular);
    a.shininess = this.shininess;
    a.metal = this.metal;
    a.wrapAround = this.wrapAround;
    a.wrapRGB.copy(this.wrapRGB);
    a.map = this.map;
    a.lightMap = this.lightMap;
    a.bumpMap = this.bumpMap;
    a.bumpScale = this.bumpScale;
    a.normalMap = this.normalMap;
    a.normalScale.copy(this.normalScale);
    a.specularMap = this.specularMap;
    a.alphaMap = this.alphaMap;
    a.envMap = this.envMap;
    a.combine = this.combine;
    a.reflectivity = this.reflectivity;
    a.refractionRatio = this.refractionRatio;
    a.fog = this.fog;
    a.shading = this.shading;
    a.wireframe = this.wireframe;
    a.wireframeLinewidth = this.wireframeLinewidth;
    a.wireframeLinecap = this.wireframeLinecap;
    a.wireframeLinejoin = this.wireframeLinejoin;
    a.vertexColors = this.vertexColors;
    a.skinning = this.skinning;
    a.morphTargets = this.morphTargets;
    a.morphNormals = this.morphNormals;
    return a;
};
THREE.MeshDepthMaterial = function (a) {
    THREE.Material.call(this);
    this.type = "MeshDepthMaterial";
    this.wireframe = this.morphTargets = !1;
    this.wireframeLinewidth = 1;
    this.setValues(a);
};
THREE.MeshDepthMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;
THREE.MeshDepthMaterial.prototype.clone = function () {
    var a = new THREE.MeshDepthMaterial();
    THREE.Material.prototype.clone.call(this, a);
    a.wireframe = this.wireframe;
    a.wireframeLinewidth = this.wireframeLinewidth;
    return a;
};
THREE.MeshNormalMaterial = function (a) {
    THREE.Material.call(this, a);
    this.type = "MeshNormalMaterial";
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.morphTargets = !1;
    this.setValues(a);
};
THREE.MeshNormalMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;
THREE.MeshNormalMaterial.prototype.clone = function () {
    var a = new THREE.MeshNormalMaterial();
    THREE.Material.prototype.clone.call(this, a);
    a.wireframe = this.wireframe;
    a.wireframeLinewidth = this.wireframeLinewidth;
    return a;
};
THREE.MeshFaceMaterial = function (a) {
    this.uuid = THREE.Math.generateUUID();
    this.type = "MeshFaceMaterial";
    this.materials = a instanceof Array ? a : [];
};
THREE.MeshFaceMaterial.prototype = {
    constructor: THREE.MeshFaceMaterial,
    toJSON: function () {
        for (var a = { metadata: { version: 4.2, type: "material", generator: "MaterialExporter" }, uuid: this.uuid, type: this.type, materials: [] }, b = 0, c = this.materials.length; b < c; b++)
            a.materials.push(this.materials[b].toJSON());
        return a;
    },
    clone: function () {
        for (var a = new THREE.MeshFaceMaterial(), b = 0; b < this.materials.length; b++) a.materials.push(this.materials[b].clone());
        return a;
    },
};
THREE.PointCloudMaterial = function (a) {
    THREE.Material.call(this);
    this.type = "PointCloudMaterial";
    this.color = new THREE.Color(16777215);
    this.map = null;
    this.size = 1;
    this.sizeAttenuation = !0;
    this.vertexColors = THREE.NoColors;
    this.fog = !0;
    this.setValues(a);
};
THREE.PointCloudMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.PointCloudMaterial.prototype.constructor = THREE.PointCloudMaterial;
THREE.PointCloudMaterial.prototype.clone = function () {
    var a = new THREE.PointCloudMaterial();
    THREE.Material.prototype.clone.call(this, a);
    a.color.copy(this.color);
    a.map = this.map;
    a.size = this.size;
    a.sizeAttenuation = this.sizeAttenuation;
    a.vertexColors = this.vertexColors;
    a.fog = this.fog;
    return a;
};
THREE.ParticleBasicMaterial = function (a) {
    THREE.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointCloudMaterial.");
    return new THREE.PointCloudMaterial(a);
};
THREE.ParticleSystemMaterial = function (a) {
    THREE.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointCloudMaterial.");
    return new THREE.PointCloudMaterial(a);
};
THREE.ShaderMaterial = function (a) {
    THREE.Material.call(this);
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.attributes = null;
    this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
    this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
    this.shading = THREE.SmoothShading;
    this.linewidth = 1;
    this.wireframe = !1;
    this.wireframeLinewidth = 1;
    this.lights = this.fog = !1;
    this.vertexColors = THREE.NoColors;
    this.morphNormals = this.morphTargets = this.skinning = !1;
    this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] };
    this.index0AttributeName = void 0;
    this.setValues(a);
};
THREE.ShaderMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;
THREE.ShaderMaterial.prototype.clone = function () {
    var a = new THREE.ShaderMaterial();
    THREE.Material.prototype.clone.call(this, a);
    a.fragmentShader = this.fragmentShader;
    a.vertexShader = this.vertexShader;
    a.uniforms = THREE.UniformsUtils.clone(this.uniforms);
    a.attributes = this.attributes;
    a.defines = this.defines;
    a.shading = this.shading;
    a.wireframe = this.wireframe;
    a.wireframeLinewidth = this.wireframeLinewidth;
    a.fog = this.fog;
    a.lights = this.lights;
    a.vertexColors = this.vertexColors;
    a.skinning = this.skinning;
    a.morphTargets = this.morphTargets;
    a.morphNormals = this.morphNormals;
    return a;
};
THREE.RawShaderMaterial = function (a) {
    THREE.ShaderMaterial.call(this, a);
    this.type = "RawShaderMaterial";
};
THREE.RawShaderMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);
THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;
THREE.RawShaderMaterial.prototype.clone = function () {
    var a = new THREE.RawShaderMaterial();
    THREE.ShaderMaterial.prototype.clone.call(this, a);
    return a;
};
THREE.SpriteMaterial = function (a) {
    THREE.Material.call(this);
    this.type = "SpriteMaterial";
    this.color = new THREE.Color(16777215);
    this.map = null;
    this.rotation = 0;
    this.fog = !1;
    this.setValues(a);
};
THREE.SpriteMaterial.prototype = Object.create(THREE.Material.prototype);
THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;
THREE.SpriteMaterial.prototype.clone = function () {
    var a = new THREE.SpriteMaterial();
    THREE.Material.prototype.clone.call(this, a);
    a.color.copy(this.color);
    a.map = this.map;
    a.rotation = this.rotation;
    a.fog = this.fog;
    return a;
};
THREE.Texture = function (a, b, c, d, e, f, g, h, k) {
    Object.defineProperty(this, "id", { value: THREE.TextureIdCount++ });
    this.uuid = THREE.Math.generateUUID();
    this.sourceFile = this.name = "";
    this.image = void 0 !== a ? a : THREE.Texture.DEFAULT_IMAGE;
    this.mipmaps = [];
    this.mapping = void 0 !== b ? b : THREE.Texture.DEFAULT_MAPPING;
    this.wrapS = void 0 !== c ? c : THREE.ClampToEdgeWrapping;
    this.wrapT = void 0 !== d ? d : THREE.ClampToEdgeWrapping;
    this.magFilter = void 0 !== e ? e : THREE.LinearFilter;
    this.minFilter = void 0 !== f ? f : THREE.LinearMipMapLinearFilter;
    this.anisotropy = void 0 !== k ? k : 1;
    this.format = void 0 !== g ? g : THREE.RGBAFormat;
    this.type = void 0 !== h ? h : THREE.UnsignedByteType;
    this.offset = new THREE.Vector2(0, 0);
    this.repeat = new THREE.Vector2(1, 1);
    this.generateMipmaps = !0;
    this.premultiplyAlpha = !1;
    this.flipY = !0;
    this.unpackAlignment = 4;
    this._needsUpdate = !1;
    this.onUpdate = null;
};
THREE.Texture.DEFAULT_IMAGE = void 0;
THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;
THREE.Texture.prototype = {
    constructor: THREE.Texture,
    get needsUpdate() {
        return this._needsUpdate;
    },
    set needsUpdate(a) {
        !0 === a && this.update();
        this._needsUpdate = a;
    },
    clone: function (a) {
        void 0 === a && (a = new THREE.Texture());
        a.image = this.image;
        a.mipmaps = this.mipmaps.slice(0);
        a.mapping = this.mapping;
        a.wrapS = this.wrapS;
        a.wrapT = this.wrapT;
        a.magFilter = this.magFilter;
        a.minFilter = this.minFilter;
        a.anisotropy = this.anisotropy;
        a.format = this.format;
        a.type = this.type;
        a.offset.copy(this.offset);
        a.repeat.copy(this.repeat);
        a.generateMipmaps = this.generateMipmaps;
        a.premultiplyAlpha = this.premultiplyAlpha;
        a.flipY = this.flipY;
        a.unpackAlignment = this.unpackAlignment;
        return a;
    },
    update: function () {
        this.dispatchEvent({ type: "update" });
    },
    dispose: function () {
        this.dispatchEvent({ type: "dispose" });
    },
};
THREE.EventDispatcher.prototype.apply(THREE.Texture.prototype);
THREE.TextureIdCount = 0;
THREE.CubeTexture = function (a, b, c, d, e, f, g, h, k) {
    b = void 0 !== b ? b : THREE.CubeReflectionMapping;
    THREE.Texture.call(this, a, b, c, d, e, f, g, h, k);
    this.images = a;
};
THREE.CubeTexture.prototype = Object.create(THREE.Texture.prototype);
THREE.CubeTexture.prototype.constructor = THREE.CubeTexture;
THREE.CubeTexture.clone = function (a) {
    void 0 === a && (a = new THREE.CubeTexture());
    THREE.Texture.prototype.clone.call(this, a);
    a.images = this.images;
    return a;
};
THREE.CompressedTexture = function (a, b, c, d, e, f, g, h, k, l, p) {
    THREE.Texture.call(this, null, f, g, h, k, l, d, e, p);
    this.image = { width: b, height: c };
    this.mipmaps = a;
    this.generateMipmaps = this.flipY = !1;
};
THREE.CompressedTexture.prototype = Object.create(THREE.Texture.prototype);
THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;
THREE.CompressedTexture.prototype.clone = function () {
    var a = new THREE.CompressedTexture();
    THREE.Texture.prototype.clone.call(this, a);
    return a;
};
THREE.DataTexture = function (a, b, c, d, e, f, g, h, k, l, p) {
    THREE.Texture.call(this, null, f, g, h, k, l, d, e, p);
    this.image = { data: a, width: b, height: c };
};
THREE.DataTexture.prototype = Object.create(THREE.Texture.prototype);
THREE.DataTexture.prototype.constructor = THREE.DataTexture;
THREE.DataTexture.prototype.clone = function () {
    var a = new THREE.DataTexture();
    THREE.Texture.prototype.clone.call(this, a);
    return a;
};
THREE.VideoTexture = function (a, b, c, d, e, f, g, h, k) {
    THREE.Texture.call(this, a, b, c, d, e, f, g, h, k);
    this.generateMipmaps = !1;
    var l = this,
        p = function () {
            requestAnimationFrame(p);
            a.readyState === a.HAVE_ENOUGH_DATA && (l.needsUpdate = !0);
        };
    p();
};
THREE.VideoTexture.prototype = Object.create(THREE.Texture.prototype);
THREE.VideoTexture.prototype.constructor = THREE.VideoTexture;
THREE.Group = function () {
    THREE.Object3D.call(this);
    this.type = "Group";
};
THREE.Group.prototype = Object.create(THREE.Object3D.prototype);
THREE.Group.prototype.constructor = THREE.Group;
THREE.PointCloud = function (a, b) {
    THREE.Object3D.call(this);
    this.type = "PointCloud";
    this.geometry = void 0 !== a ? a : new THREE.Geometry();
    this.material = void 0 !== b ? b : new THREE.PointCloudMaterial({ color: 16777215 * Math.random() });
};
THREE.PointCloud.prototype = Object.create(THREE.Object3D.prototype);
THREE.PointCloud.prototype.constructor = THREE.PointCloud;
THREE.PointCloud.prototype.raycast = (function () {
    var a = new THREE.Matrix4(),
        b = new THREE.Ray();
    return function (c, d) {
        var e = this,
            f = e.geometry,
            g = c.params.PointCloud.threshold;
        a.getInverse(this.matrixWorld);
        b.copy(c.ray).applyMatrix4(a);
        if (null === f.boundingBox || !1 !== b.isIntersectionBox(f.boundingBox)) {
            var h = g / ((this.scale.x + this.scale.y + this.scale.z) / 3),
                k = new THREE.Vector3(),
                g = function (a, f) {
                    var g = b.distanceToPoint(a);
                    if (g < h) {
                        var k = b.closestPointToPoint(a);
                        k.applyMatrix4(e.matrixWorld);
                        var n = c.ray.origin.distanceTo(k);
                        d.push({ distance: n, distanceToRay: g, point: k.clone(), index: f, face: null, object: e });
                    }
                };
            if (f instanceof THREE.BufferGeometry) {
                var l = f.attributes,
                    p = l.position.array;
                if (void 0 !== l.index) {
                    var l = l.index.array,
                        q = f.offsets;
                    0 === q.length && (q = [{ start: 0, count: l.length, index: 0 }]);
                    for (var n = 0, t = q.length; n < t; ++n)
                        for (var r = q[n].start, s = q[n].index, f = r, r = r + q[n].count; f < r; f++) {
                            var u = s + l[f];
                            k.fromArray(p, 3 * u);
                            g(k, u);
                        }
                } else for (l = p.length / 3, f = 0; f < l; f++) k.set(p[3 * f], p[3 * f + 1], p[3 * f + 2]), g(k, f);
            } else for (k = this.geometry.vertices, f = 0; f < k.length; f++) g(k[f], f);
        }
    };
})();
THREE.PointCloud.prototype.clone = function (a) {
    void 0 === a && (a = new THREE.PointCloud(this.geometry, this.material));
    THREE.Object3D.prototype.clone.call(this, a);
    return a;
};
THREE.ParticleSystem = function (a, b) {
    THREE.warn("THREE.ParticleSystem has been renamed to THREE.PointCloud.");
    return new THREE.PointCloud(a, b);
};
THREE.Line = function (a, b, c) {
    THREE.Object3D.call(this);
    this.type = "Line";
    this.geometry = void 0 !== a ? a : new THREE.Geometry();
    this.material = void 0 !== b ? b : new THREE.LineBasicMaterial({ color: 16777215 * Math.random() });
    this.mode = void 0 !== c ? c : THREE.LineStrip;
};
THREE.LineStrip = 0;
THREE.LinePieces = 1;
THREE.Line.prototype = Object.create(THREE.Object3D.prototype);
THREE.Line.prototype.constructor = THREE.Line;
THREE.Line.prototype.raycast = (function () {
    var a = new THREE.Matrix4(),
        b = new THREE.Ray(),
        c = new THREE.Sphere();
    return function (d, e) {
        var f = d.linePrecision,
            f = f * f,
            g = this.geometry;
        null === g.boundingSphere && g.computeBoundingSphere();
        c.copy(g.boundingSphere);
        c.applyMatrix4(this.matrixWorld);
        if (!1 !== d.ray.isIntersectionSphere(c)) {
            a.getInverse(this.matrixWorld);
            b.copy(d.ray).applyMatrix4(a);
            var h = new THREE.Vector3(),
                k = new THREE.Vector3(),
                l = new THREE.Vector3(),
                p = new THREE.Vector3(),
                q = this.mode === THREE.LineStrip ? 1 : 2;
            if (g instanceof THREE.BufferGeometry) {
                var n = g.attributes;
                if (void 0 !== n.index) {
                    var t = n.index.array,
                        n = n.position.array,
                        r = g.offsets;
                    0 === r.length && (r = [{ start: 0, count: t.length, index: 0 }]);
                    for (var s = 0; s < r.length; s++)
                        for (var u = r[s].start, v = r[s].count, x = r[s].index, g = u; g < u + v - 1; g += q) {
                            var D = x + t[g + 1];
                            h.fromArray(n, 3 * (x + t[g]));
                            k.fromArray(n, 3 * D);
                            D = b.distanceSqToSegment(h, k, p, l);
                            D > f || ((D = b.origin.distanceTo(p)), D < d.near || D > d.far || e.push({ distance: D, point: l.clone().applyMatrix4(this.matrixWorld), index: g, offsetIndex: s, face: null, faceIndex: null, object: this }));
                        }
                } else
                    for (n = n.position.array, g = 0; g < n.length / 3 - 1; g += q)
                        h.fromArray(n, 3 * g),
                            k.fromArray(n, 3 * g + 3),
                            (D = b.distanceSqToSegment(h, k, p, l)),
                            D > f || ((D = b.origin.distanceTo(p)), D < d.near || D > d.far || e.push({ distance: D, point: l.clone().applyMatrix4(this.matrixWorld), index: g, face: null, faceIndex: null, object: this }));
            } else if (g instanceof THREE.Geometry)
                for (h = g.vertices, k = h.length, g = 0; g < k - 1; g += q)
                    (D = b.distanceSqToSegment(h[g], h[g + 1], p, l)),
                        D > f || ((D = b.origin.distanceTo(p)), D < d.near || D > d.far || e.push({ distance: D, point: l.clone().applyMatrix4(this.matrixWorld), index: g, face: null, faceIndex: null, object: this }));
        }
    };
})();
THREE.Line.prototype.clone = function (a) {
    void 0 === a && (a = new THREE.Line(this.geometry, this.material, this.mode));
    THREE.Object3D.prototype.clone.call(this, a);
    return a;
};
THREE.Mesh = function (a, b) {
    THREE.Object3D.call(this);
    this.type = "Mesh";
    this.geometry = void 0 !== a ? a : new THREE.Geometry();
    this.material = void 0 !== b ? b : new THREE.MeshBasicMaterial({ color: 16777215 * Math.random() });
    this.updateMorphTargets();
};
THREE.Mesh.prototype = Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.constructor = THREE.Mesh;
THREE.Mesh.prototype.updateMorphTargets = function () {
    if (void 0 !== this.geometry.morphTargets && 0 < this.geometry.morphTargets.length) {
        this.morphTargetBase = -1;
        this.morphTargetForcedOrder = [];
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (var a = 0, b = this.geometry.morphTargets.length; a < b; a++) this.morphTargetInfluences.push(0), (this.morphTargetDictionary[this.geometry.morphTargets[a].name] = a);
    }
};
THREE.Mesh.prototype.getMorphTargetIndexByName = function (a) {
    if (void 0 !== this.morphTargetDictionary[a]) return this.morphTargetDictionary[a];
    THREE.warn("THREE.Mesh.getMorphTargetIndexByName: morph target " + a + " does not exist. Returning 0.");
    return 0;
};
THREE.Mesh.prototype.raycast = (function () {
    var a = new THREE.Matrix4(),
        b = new THREE.Ray(),
        c = new THREE.Sphere(),
        d = new THREE.Vector3(),
        e = new THREE.Vector3(),
        f = new THREE.Vector3();
    return function (g, h) {
        var k = this.geometry;
        null === k.boundingSphere && k.computeBoundingSphere();
        c.copy(k.boundingSphere);
        c.applyMatrix4(this.matrixWorld);
        if (!1 !== g.ray.isIntersectionSphere(c) && (a.getInverse(this.matrixWorld), b.copy(g.ray).applyMatrix4(a), null === k.boundingBox || !1 !== b.isIntersectionBox(k.boundingBox)))
            if (k instanceof THREE.BufferGeometry) {
                var l = this.material;
                if (void 0 !== l) {
                    var p = k.attributes,
                        q,
                        n,
                        t = g.precision;
                    if (void 0 !== p.index) {
                        var r = p.index.array,
                            s = p.position.array,
                            u = k.offsets;
                        0 === u.length && (u = [{ start: 0, count: r.length, index: 0 }]);
                        for (var v = 0, x = u.length; v < x; ++v)
                            for (var p = u[v].start, D = u[v].index, k = p, w = p + u[v].count; k < w; k += 3) {
                                p = D + r[k];
                                q = D + r[k + 1];
                                n = D + r[k + 2];
                                d.fromArray(s, 3 * p);
                                e.fromArray(s, 3 * q);
                                f.fromArray(s, 3 * n);
                                var y = l.side === THREE.BackSide ? b.intersectTriangle(f, e, d, !0) : b.intersectTriangle(d, e, f, l.side !== THREE.DoubleSide);
                                if (null !== y) {
                                    y.applyMatrix4(this.matrixWorld);
                                    var A = g.ray.origin.distanceTo(y);
                                    A < t || A < g.near || A > g.far || h.push({ distance: A, point: y, face: new THREE.Face3(p, q, n, THREE.Triangle.normal(d, e, f)), faceIndex: null, object: this });
                                }
                            }
                    } else
                        for (s = p.position.array, r = k = 0, w = s.length; k < w; k += 3, r += 9)
                            (p = k),
                                (q = k + 1),
                                (n = k + 2),
                                d.fromArray(s, r),
                                e.fromArray(s, r + 3),
                                f.fromArray(s, r + 6),
                                (y = l.side === THREE.BackSide ? b.intersectTriangle(f, e, d, !0) : b.intersectTriangle(d, e, f, l.side !== THREE.DoubleSide)),
                                null !== y &&
                                    (y.applyMatrix4(this.matrixWorld),
                                    (A = g.ray.origin.distanceTo(y)),
                                    A < t || A < g.near || A > g.far || h.push({ distance: A, point: y, face: new THREE.Face3(p, q, n, THREE.Triangle.normal(d, e, f)), faceIndex: null, object: this }));
                }
            } else if (k instanceof THREE.Geometry)
                for (r = this.material instanceof THREE.MeshFaceMaterial, s = !0 === r ? this.material.materials : null, t = g.precision, u = k.vertices, v = 0, x = k.faces.length; v < x; v++)
                    if (((D = k.faces[v]), (l = !0 === r ? s[D.materialIndex] : this.material), void 0 !== l)) {
                        p = u[D.a];
                        q = u[D.b];
                        n = u[D.c];
                        if (!0 === l.morphTargets) {
                            y = k.morphTargets;
                            A = this.morphTargetInfluences;
                            d.set(0, 0, 0);
                            e.set(0, 0, 0);
                            f.set(0, 0, 0);
                            for (var w = 0, E = y.length; w < E; w++) {
                                var G = A[w];
                                if (0 !== G) {
                                    var F = y[w].vertices;
                                    d.x += (F[D.a].x - p.x) * G;
                                    d.y += (F[D.a].y - p.y) * G;
                                    d.z += (F[D.a].z - p.z) * G;
                                    e.x += (F[D.b].x - q.x) * G;
                                    e.y += (F[D.b].y - q.y) * G;
                                    e.z += (F[D.b].z - q.z) * G;
                                    f.x += (F[D.c].x - n.x) * G;
                                    f.y += (F[D.c].y - n.y) * G;
                                    f.z += (F[D.c].z - n.z) * G;
                                }
                            }
                            d.add(p);
                            e.add(q);
                            f.add(n);
                            p = d;
                            q = e;
                            n = f;
                        }
                        y = l.side === THREE.BackSide ? b.intersectTriangle(n, q, p, !0) : b.intersectTriangle(p, q, n, l.side !== THREE.DoubleSide);
                        null !== y && (y.applyMatrix4(this.matrixWorld), (A = g.ray.origin.distanceTo(y)), A < t || A < g.near || A > g.far || h.push({ distance: A, point: y, face: D, faceIndex: v, object: this }));
                    }
    };
})();
THREE.Mesh.prototype.clone = function (a, b) {
    void 0 === a && (a = new THREE.Mesh(this.geometry, this.material));
    THREE.Object3D.prototype.clone.call(this, a, b);
    return a;
};
THREE.Bone = function (a) {
    THREE.Object3D.call(this);
    this.type = "Bone";
    this.skin = a;
};
THREE.Bone.prototype = Object.create(THREE.Object3D.prototype);
THREE.Bone.prototype.constructor = THREE.Bone;
THREE.Skeleton = function (a, b, c) {
    this.useVertexTexture = void 0 !== c ? c : !0;
    this.identityMatrix = new THREE.Matrix4();
    a = a || [];
    this.bones = a.slice(0);
    this.useVertexTexture
        ? ((this.boneTextureHeight = this.boneTextureWidth = a = 256 < this.bones.length ? 64 : 64 < this.bones.length ? 32 : 16 < this.bones.length ? 16 : 8),
          (this.boneMatrices = new Float32Array(this.boneTextureWidth * this.boneTextureHeight * 4)),
          (this.boneTexture = new THREE.DataTexture(this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType)),
          (this.boneTexture.minFilter = THREE.NearestFilter),
          (this.boneTexture.magFilter = THREE.NearestFilter),
          (this.boneTexture.generateMipmaps = !1),
          (this.boneTexture.flipY = !1))
        : (this.boneMatrices = new Float32Array(16 * this.bones.length));
    if (void 0 === b) this.calculateInverses();
    else if (this.bones.length === b.length) this.boneInverses = b.slice(0);
    else for (THREE.warn("THREE.Skeleton bonInverses is the wrong length."), this.boneInverses = [], b = 0, a = this.bones.length; b < a; b++) this.boneInverses.push(new THREE.Matrix4());
};
THREE.Skeleton.prototype.calculateInverses = function () {
    this.boneInverses = [];
    for (var a = 0, b = this.bones.length; a < b; a++) {
        var c = new THREE.Matrix4();
        this.bones[a] && c.getInverse(this.bones[a].matrixWorld);
        this.boneInverses.push(c);
    }
};
THREE.Skeleton.prototype.pose = function () {
    for (var a, b = 0, c = this.bones.length; b < c; b++) (a = this.bones[b]) && a.matrixWorld.getInverse(this.boneInverses[b]);
    b = 0;
    for (c = this.bones.length; b < c; b++)
        if ((a = this.bones[b])) a.parent ? (a.matrix.getInverse(a.parent.matrixWorld), a.matrix.multiply(a.matrixWorld)) : a.matrix.copy(a.matrixWorld), a.matrix.decompose(a.position, a.quaternion, a.scale);
};
THREE.Skeleton.prototype.update = (function () {
    var a = new THREE.Matrix4();
    return function () {
        for (var b = 0, c = this.bones.length; b < c; b++) a.multiplyMatrices(this.bones[b] ? this.bones[b].matrixWorld : this.identityMatrix, this.boneInverses[b]), a.flattenToArrayOffset(this.boneMatrices, 16 * b);
        this.useVertexTexture && (this.boneTexture.needsUpdate = !0);
    };
})();
THREE.SkinnedMesh = function (a, b, c) {
    THREE.Mesh.call(this, a, b);
    this.type = "SkinnedMesh";
    this.bindMode = "attached";
    this.bindMatrix = new THREE.Matrix4();
    this.bindMatrixInverse = new THREE.Matrix4();
    a = [];
    if (this.geometry && void 0 !== this.geometry.bones) {
        for (var d, e, f, g, h = 0, k = this.geometry.bones.length; h < k; ++h)
            (d = this.geometry.bones[h]),
                (e = d.pos),
                (f = d.rotq),
                (g = d.scl),
                (b = new THREE.Bone(this)),
                a.push(b),
                (b.name = d.name),
                b.position.set(e[0], e[1], e[2]),
                b.quaternion.set(f[0], f[1], f[2], f[3]),
                void 0 !== g ? b.scale.set(g[0], g[1], g[2]) : b.scale.set(1, 1, 1);
        h = 0;
        for (k = this.geometry.bones.length; h < k; ++h) (d = this.geometry.bones[h]), -1 !== d.parent ? a[d.parent].add(a[h]) : this.add(a[h]);
    }
    this.normalizeSkinWeights();
    this.updateMatrixWorld(!0);
    this.bind(new THREE.Skeleton(a, void 0, c));
};
THREE.SkinnedMesh.prototype = Object.create(THREE.Mesh.prototype);
THREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;
THREE.SkinnedMesh.prototype.bind = function (a, b) {
    this.skeleton = a;
    void 0 === b && (this.updateMatrixWorld(!0), (b = this.matrixWorld));
    this.bindMatrix.copy(b);
    this.bindMatrixInverse.getInverse(b);
};
THREE.SkinnedMesh.prototype.pose = function () {
    this.skeleton.pose();
};
THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {
    if (this.geometry instanceof THREE.Geometry)
        for (var a = 0; a < this.geometry.skinIndices.length; a++) {
            var b = this.geometry.skinWeights[a],
                c = 1 / b.lengthManhattan();
            Infinity !== c ? b.multiplyScalar(c) : b.set(1);
        }
};
THREE.SkinnedMesh.prototype.updateMatrixWorld = function (a) {
    THREE.Mesh.prototype.updateMatrixWorld.call(this, !0);
    "attached" === this.bindMode
        ? this.bindMatrixInverse.getInverse(this.matrixWorld)
        : "detached" === this.bindMode
        ? this.bindMatrixInverse.getInverse(this.bindMatrix)
        : THREE.warn("THREE.SkinnedMesh unreckognized bindMode: " + this.bindMode);
};
THREE.SkinnedMesh.prototype.clone = function (a) {
    void 0 === a && (a = new THREE.SkinnedMesh(this.geometry, this.material, this.useVertexTexture));
    THREE.Mesh.prototype.clone.call(this, a);
    return a;
};
THREE.MorphAnimMesh = function (a, b) {
    THREE.Mesh.call(this, a, b);
    this.type = "MorphAnimMesh";
    this.duration = 1e3;
    this.mirroredLoop = !1;
    this.currentKeyframe = this.lastKeyframe = this.time = 0;
    this.direction = 1;
    this.directionBackwards = !1;
    this.setFrameRange(0, this.geometry.morphTargets.length - 1);
};
THREE.MorphAnimMesh.prototype = Object.create(THREE.Mesh.prototype);
THREE.MorphAnimMesh.prototype.constructor = THREE.MorphAnimMesh;
THREE.MorphAnimMesh.prototype.setFrameRange = function (a, b) {
    this.startKeyframe = a;
    this.endKeyframe = b;
    this.length = this.endKeyframe - this.startKeyframe + 1;
};
THREE.MorphAnimMesh.prototype.setDirectionForward = function () {
    this.direction = 1;
    this.directionBackwards = !1;
};
THREE.MorphAnimMesh.prototype.setDirectionBackward = function () {
    this.direction = -1;
    this.directionBackwards = !0;
};
THREE.MorphAnimMesh.prototype.parseAnimations = function () {
    var a = this.geometry;
    a.animations || (a.animations = {});
    for (var b, c = a.animations, d = /([a-z]+)_?(\d+)/, e = 0, f = a.morphTargets.length; e < f; e++) {
        var g = a.morphTargets[e].name.match(d);
        if (g && 1 < g.length) {
            g = g[1];
            c[g] || (c[g] = { start: Infinity, end: -Infinity });
            var h = c[g];
            e < h.start && (h.start = e);
            e > h.end && (h.end = e);
            b || (b = g);
        }
    }
    a.firstAnimation = b;
};
THREE.MorphAnimMesh.prototype.setAnimationLabel = function (a, b, c) {
    this.geometry.animations || (this.geometry.animations = {});
    this.geometry.animations[a] = { start: b, end: c };
};
THREE.MorphAnimMesh.prototype.playAnimation = function (a, b) {
    var c = this.geometry.animations[a];
    c ? (this.setFrameRange(c.start, c.end), (this.duration = ((c.end - c.start) / b) * 1e3), (this.time = 0)) : THREE.warn("THREE.MorphAnimMesh: animation[" + a + "] undefined in .playAnimation()");
};
THREE.MorphAnimMesh.prototype.updateAnimation = function (a) {
    var b = this.duration / this.length;
    this.time += this.direction * a;
    if (this.mirroredLoop) {
        if (this.time > this.duration || 0 > this.time) (this.direction *= -1), this.time > this.duration && ((this.time = this.duration), (this.directionBackwards = !0)), 0 > this.time && ((this.time = 0), (this.directionBackwards = !1));
    } else (this.time %= this.duration), 0 > this.time && (this.time += this.duration);
    a = this.startKeyframe + THREE.Math.clamp(Math.floor(this.time / b), 0, this.length - 1);
    a !== this.currentKeyframe &&
        ((this.morphTargetInfluences[this.lastKeyframe] = 0), (this.morphTargetInfluences[this.currentKeyframe] = 1), (this.morphTargetInfluences[a] = 0), (this.lastKeyframe = this.currentKeyframe), (this.currentKeyframe = a));
    b = (this.time % b) / b;
    this.directionBackwards && (b = 1 - b);
    this.morphTargetInfluences[this.currentKeyframe] = b;
    this.morphTargetInfluences[this.lastKeyframe] = 1 - b;
};
THREE.MorphAnimMesh.prototype.interpolateTargets = function (a, b, c) {
    for (var d = this.morphTargetInfluences, e = 0, f = d.length; e < f; e++) d[e] = 0;
    -1 < a && (d[a] = 1 - c);
    -1 < b && (d[b] = c);
};
THREE.MorphAnimMesh.prototype.clone = function (a) {
    void 0 === a && (a = new THREE.MorphAnimMesh(this.geometry, this.material));
    a.duration = this.duration;
    a.mirroredLoop = this.mirroredLoop;
    a.time = this.time;
    a.lastKeyframe = this.lastKeyframe;
    a.currentKeyframe = this.currentKeyframe;
    a.direction = this.direction;
    a.directionBackwards = this.directionBackwards;
    THREE.Mesh.prototype.clone.call(this, a);
    return a;
};
THREE.LOD = function () {
    THREE.Object3D.call(this);
    this.objects = [];
};
THREE.LOD.prototype = Object.create(THREE.Object3D.prototype);
THREE.LOD.prototype.constructor = THREE.LOD;
THREE.LOD.prototype.addLevel = function (a, b) {
    void 0 === b && (b = 0);
    b = Math.abs(b);
    for (var c = 0; c < this.objects.length && !(b < this.objects[c].distance); c++);
    this.objects.splice(c, 0, { distance: b, object: a });
    this.add(a);
};
THREE.LOD.prototype.getObjectForDistance = function (a) {
    for (var b = 1, c = this.objects.length; b < c && !(a < this.objects[b].distance); b++);
    return this.objects[b - 1].object;
};
THREE.LOD.prototype.raycast = (function () {
    var a = new THREE.Vector3();
    return function (b, c) {
        a.setFromMatrixPosition(this.matrixWorld);
        var d = b.ray.origin.distanceTo(a);
        this.getObjectForDistance(d).raycast(b, c);
    };
})();
THREE.LOD.prototype.update = (function () {
    var a = new THREE.Vector3(),
        b = new THREE.Vector3();
    return function (c) {
        if (1 < this.objects.length) {
            a.setFromMatrixPosition(c.matrixWorld);
            b.setFromMatrixPosition(this.matrixWorld);
            c = a.distanceTo(b);
            this.objects[0].object.visible = !0;
            for (var d = 1, e = this.objects.length; d < e; d++)
                if (c >= this.objects[d].distance) (this.objects[d - 1].object.visible = !1), (this.objects[d].object.visible = !0);
                else break;
            for (; d < e; d++) this.objects[d].object.visible = !1;
        }
    };
})();
THREE.LOD.prototype.clone = function (a) {
    void 0 === a && (a = new THREE.LOD());
    THREE.Object3D.prototype.clone.call(this, a);
    for (var b = 0, c = this.objects.length; b < c; b++) {
        var d = this.objects[b].object.clone();
        d.visible = 0 === b;
        a.addLevel(d, this.objects[b].distance);
    }
    return a;
};
THREE.Sprite = (function () {
    var a = new Uint16Array([0, 1, 2, 0, 2, 3]),
        b = new Float32Array([-0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0, -0.5, 0.5, 0]),
        c = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),
        d = new THREE.BufferGeometry();
    d.addAttribute("index", new THREE.BufferAttribute(a, 1));
    d.addAttribute("position", new THREE.BufferAttribute(b, 3));
    d.addAttribute("uv", new THREE.BufferAttribute(c, 2));
    return function (a) {
        THREE.Object3D.call(this);
        this.type = "Sprite";
        this.geometry = d;
        this.material = void 0 !== a ? a : new THREE.SpriteMaterial();
    };
})();
THREE.Sprite.prototype = Object.create(THREE.Object3D.prototype);
THREE.Sprite.prototype.constructor = THREE.Sprite;
THREE.Sprite.prototype.raycast = (function () {
    var a = new THREE.Vector3();
    return function (b, c) {
        a.setFromMatrixPosition(this.matrixWorld);
        var d = b.ray.distanceToPoint(a);
        d > this.scale.x || c.push({ distance: d, point: this.position, face: null, object: this });
    };
})();
THREE.Sprite.prototype.clone = function (a) {
    void 0 === a && (a = new THREE.Sprite(this.material));
    THREE.Object3D.prototype.clone.call(this, a);
    return a;
};
THREE.Particle = THREE.Sprite;
THREE.LensFlare = function (a, b, c, d, e) {
    THREE.Object3D.call(this);
    this.lensFlares = [];
    this.positionScreen = new THREE.Vector3();
    this.customUpdateCallback = void 0;
    void 0 !== a && this.add(a, b, c, d, e);
};
THREE.LensFlare.prototype = Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.constructor = THREE.LensFlare;
THREE.LensFlare.prototype.add = function (a, b, c, d, e, f) {
    void 0 === b && (b = -1);
    void 0 === c && (c = 0);
    void 0 === f && (f = 1);
    void 0 === e && (e = new THREE.Color(16777215));
    void 0 === d && (d = THREE.NormalBlending);
    c = Math.min(c, Math.max(0, c));
    this.lensFlares.push({ texture: a, size: b, distance: c, x: 0, y: 0, z: 0, scale: 1, rotation: 1, opacity: f, color: e, blending: d });
};
THREE.LensFlare.prototype.updateLensFlares = function () {
    var a,
        b = this.lensFlares.length,
        c,
        d = 2 * -this.positionScreen.x,
        e = 2 * -this.positionScreen.y;
    for (a = 0; a < b; a++)
        (c = this.lensFlares[a]), (c.x = this.positionScreen.x + d * c.distance), (c.y = this.positionScreen.y + e * c.distance), (c.wantedRotation = c.x * Math.PI * 0.25), (c.rotation += 0.25 * (c.wantedRotation - c.rotation));
};
THREE.Scene = function () {
    THREE.Object3D.call(this);
    this.type = "Scene";
    this.overrideMaterial = this.fog = null;
    this.autoUpdate = !0;
};
THREE.Scene.prototype = Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.constructor = THREE.Scene;
THREE.Scene.prototype.clone = function (a) {
    void 0 === a && (a = new THREE.Scene());
    THREE.Object3D.prototype.clone.call(this, a);
    null !== this.fog && (a.fog = this.fog.clone());
    null !== this.overrideMaterial && (a.overrideMaterial = this.overrideMaterial.clone());
    a.autoUpdate = this.autoUpdate;
    a.matrixAutoUpdate = this.matrixAutoUpdate;
    return a;
};
THREE.Fog = function (a, b, c) {
    this.name = "";
    this.color = new THREE.Color(a);
    this.near = void 0 !== b ? b : 1;
    this.far = void 0 !== c ? c : 1e3;
};
THREE.Fog.prototype.clone = function () {
    return new THREE.Fog(this.color.getHex(), this.near, this.far);
};
THREE.FogExp2 = function (a, b) {
    this.name = "";
    this.color = new THREE.Color(a);
    this.density = void 0 !== b ? b : 2.5e-4;
};
THREE.FogExp2.prototype.clone = function () {
    return new THREE.FogExp2(this.color.getHex(), this.density);
};
THREE.ShaderChunk = {};
THREE.ShaderChunk.common =
    "#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\nfloat square( in float a ) { return a*a; }\nvec2  square( in vec2 a )  { return vec2( a.x*a.x, a.y*a.y ); }\nvec3  square( in vec3 a )  { return vec3( a.x*a.x, a.y*a.y, a.z*a.z ); }\nvec4  square( in vec4 a )  { return vec4( a.x*a.x, a.y*a.y, a.z*a.z, a.w*a.w ); }\nfloat saturate( in float a ) { return clamp( a, 0.0, 1.0 ); }\nvec2  saturate( in vec2 a )  { return clamp( a, 0.0, 1.0 ); }\nvec3  saturate( in vec3 a )  { return clamp( a, 0.0, 1.0 ); }\nvec4  saturate( in vec4 a )  { return clamp( a, 0.0, 1.0 ); }\nfloat average( in float a ) { return a; }\nfloat average( in vec2 a )  { return ( a.x + a.y) * 0.5; }\nfloat average( in vec3 a )  { return ( a.x + a.y + a.z) / 3.0; }\nfloat average( in vec4 a )  { return ( a.x + a.y + a.z + a.w) * 0.25; }\nfloat whiteCompliment( in float a ) { return saturate( 1.0 - a ); }\nvec2  whiteCompliment( in vec2 a )  { return saturate( vec2(1.0) - a ); }\nvec3  whiteCompliment( in vec3 a )  { return saturate( vec3(1.0) - a ); }\nvec4  whiteCompliment( in vec4 a )  { return saturate( vec4(1.0) - a ); }\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n}\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal) {\n\tfloat distance = dot( planeNormal, point-pointOnPlane );\n\treturn point - distance * planeNormal;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn pointOnLine + lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) );\n}\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\n\tif ( decayExponent > 0.0 ) {\n\t  return pow( saturate( 1.0 - lightDistance / cutoffDistance ), decayExponent );\n\t}\n\treturn 1.0;\n}\n\nvec3 inputToLinear( in vec3 a ) {\n#ifdef GAMMA_INPUT\n\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\n#else\n\treturn a;\n#endif\n}\nvec3 linearToOutput( in vec3 a ) {\n#ifdef GAMMA_OUTPUT\n\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n#else\n\treturn a;\n#endif\n}\n";
THREE.ShaderChunk.alphatest_fragment = "#ifdef ALPHATEST\n\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n";
THREE.ShaderChunk.lights_lambert_vertex =
    "vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack = vec3( 0.0 );\n\n#endif\n\ntransformedNormal = normalize( transformedNormal );\n\n#if MAX_DIR_LIGHTS > 0\n\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\tvec3 dirVector = transformDirection( directionalLightDirection[ i ], viewMatrix );\n\n\tfloat dotProduct = dot( transformedNormal, dirVector );\n\tvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t#endif\n\n\t#endif\n\n\t#ifdef WRAP_AROUND\n\n\t\tvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\tdirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tdirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n\n\t\t#endif\n\n\t#endif\n\n\tvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n\n\t#endif\n\n}\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\t\tlVector = normalize( lVector );\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\tpointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tpointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t\tvLightFront += pointLightColor[ i ] * pointLightWeighting * attenuation;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += pointLightColor[ i ] * pointLightWeightingBack * attenuation;\n\n\t\t#endif\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\t\tlVector = normalize( lVector );\n\n\t\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\t\t\tvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n\t\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\t\tvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n\t\t\t\tspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n\n\t\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\t\tspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvLightFront += spotLightColor[ i ] * spotLightWeighting * attenuation * spotEffect;\n\n\t\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t\tvLightBack += spotLightColor[ i ] * spotLightWeightingBack * attenuation * spotEffect;\n\n\t\t\t#endif\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lVector = transformDirection( hemisphereLightDirection[ i ], viewMatrix );\n\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\n\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\t\tfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\n\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n\t\t#endif\n\n\t}\n\n#endif\n\nvLightFront += ambientLightColor;\n\n#ifdef DOUBLE_SIDED\n\n\tvLightBack += ambientLightColor;\n\n#endif\n";
THREE.ShaderChunk.map_particle_pars_fragment = "#ifdef USE_MAP\n\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n\n#endif\n";
THREE.ShaderChunk.default_vertex =
    "#ifdef USE_SKINNING\n\n\tvec4 mvPosition = modelViewMatrix * skinned;\n\n#elif defined( USE_MORPHTARGETS )\n\n\tvec4 mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n\n#else\n\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n";
THREE.ShaderChunk.map_pars_fragment =
    "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif";
THREE.ShaderChunk.skinnormal_vertex =
    "#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\t#ifdef USE_MORPHNORMALS\n\n\tvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n\n\t#else\n\n\tvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n\tuniform float logDepthBufFC;\n\n#endif";
THREE.ShaderChunk.lightmap_pars_vertex = "#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\n#endif";
THREE.ShaderChunk.lights_phong_fragment =
    "#ifndef FLAT_SHADED\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n\t#endif\n\n#else\n\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#endif\n\nvec3 viewPosition = normalize( vViewPosition );\n\n#ifdef USE_NORMALMAP\n\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\nvec3 totalDiffuseLight = vec3( 0.0 );\nvec3 totalSpecularLight = vec3( 0.0 );\n\n#if MAX_POINT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\t\tlVector = normalize( lVector );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\ttotalDiffuseLight += pointLightColor[ i ] * pointDiffuseWeight * attenuation;\n\n\t\t\t\t// specular\n\n\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\n\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n\t\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\n\t\ttotalSpecularLight += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * attenuation * specularNormalization;\n\n\t}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n\t\tlVector = normalize( lVector );\n\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\n\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\n\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n\t\t\t// diffuse\n\n\t\t\tfloat dotProduct = dot( normal, lVector );\n\n\t\t\t#ifdef WRAP_AROUND\n\n\t\t\t\tfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\t\tvec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n\n\t\t\t#else\n\n\t\t\t\tfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t\t#endif\n\n\t\t\ttotalDiffuseLight += spotLightColor[ i ] * spotDiffuseWeight * attenuation * spotEffect;\n\n\t\t\t// specular\n\n\t\t\tvec3 spotHalfVector = normalize( lVector + viewPosition );\n\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\n\t\t\tfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\n\t\t\ttotalSpecularLight += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * attenuation * specularNormalization * spotEffect;\n\n\t\t}\n\n\t}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n\t\tvec3 dirVector = transformDirection( directionalLightDirection[ i ], viewMatrix );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, dirVector );\n\n\t\t#ifdef WRAP_AROUND\n\n\t\t\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n\t\t\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n\n\t\t#else\n\n\t\t\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n\n\t\t#endif\n\n\t\ttotalDiffuseLight += directionalLightColor[ i ] * dirDiffuseWeight;\n\n\t\t// specular\n\n\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\n\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n\t\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\n\t\t/*\n\t\t// fresnel term from skin shader\n\t\tconst float F0 = 0.128;\n\n\t\tfloat base = 1.0 - dot( viewPosition, dirHalfVector );\n\t\tfloat exponential = pow( base, 5.0 );\n\n\t\tfloat fresnel = exponential + F0 * ( 1.0 - exponential );\n\t\t*/\n\n\t\t/*\n\t\t// fresnel term from fresnel shader\n\t\tconst float mFresnelBias = 0.08;\n\t\tconst float mFresnelScale = 0.3;\n\t\tconst float mFresnelPower = 5.0;\n\n\t\tfloat fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\n\t\t*/\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\t// \t\tdirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\n\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n\t\ttotalSpecularLight += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\n\n\t}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n\t\tvec3 lVector = transformDirection( hemisphereLightDirection[ i ], viewMatrix );\n\n\t\t// diffuse\n\n\t\tfloat dotProduct = dot( normal, lVector );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n\t\ttotalDiffuseLight += hemiColor;\n\n\t\t// specular (sky light)\n\n\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n\t\tfloat hemiSpecularWeightSky = specularStrength * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\n\n\t\t// specular (ground light)\n\n\t\tvec3 lVectorGround = -lVector;\n\n\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n\t\tfloat hemiSpecularWeightGround = specularStrength * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\n\n\t\tfloat dotProductGround = dot( normal, lVectorGround );\n\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n\t\tvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\n\t\tvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\n\t\ttotalSpecularLight += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n\n\t}\n\n#endif\n\n#ifdef METAL\n\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + ambientLightColor ) * specular + totalSpecularLight + emissive;\n\n#else\n\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + ambientLightColor ) + totalSpecularLight + emissive;\n\n#endif\n";
THREE.ShaderChunk.fog_pars_fragment = "#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n\n#endif";
THREE.ShaderChunk.morphnormal_vertex =
    "#ifdef USE_MORPHNORMALS\n\n\tvec3 morphedNormal = vec3( 0.0 );\n\n\tmorphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tmorphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tmorphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tmorphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n\tmorphedNormal += normal;\n\n#endif";
THREE.ShaderChunk.envmap_pars_fragment =
    "#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tuniform float refractionRatio;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.logdepthbuf_fragment = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif";
THREE.ShaderChunk.normalmap_pars_fragment =
    "#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n\t// Per-Pixel Tangent Space Normal Mapping\n\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\n\t}\n\n#endif\n";
THREE.ShaderChunk.lights_phong_pars_vertex = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n";
THREE.ShaderChunk.lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\n\tvarying vec2 vUv2;\n\tuniform sampler2D lightMap;\n\n#endif";
THREE.ShaderChunk.shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n\t}\n\n#endif";
THREE.ShaderChunk.lights_phong_vertex = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif";
THREE.ShaderChunk.map_fragment = "#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\n\n\tdiffuseColor *= texelColor;\n\n#endif";
THREE.ShaderChunk.lightmap_vertex = "#ifdef USE_LIGHTMAP\n\n\tvUv2 = uv2;\n\n#endif";
THREE.ShaderChunk.map_particle_fragment = "#ifdef USE_MAP\n\n\tdiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\n#endif\n";
THREE.ShaderChunk.color_pars_fragment = "#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif\n";
THREE.ShaderChunk.color_vertex = "#ifdef USE_COLOR\n\n\tvColor.xyz = inputToLinear( color.xyz );\n\n#endif";
THREE.ShaderChunk.skinning_vertex =
    "#ifdef USE_SKINNING\n\n\t#ifdef USE_MORPHTARGETS\n\n\tvec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\tskinned  = bindMatrixInverse * skinned;\n\n#endif\n";
THREE.ShaderChunk.envmap_pars_vertex = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvarying vec3 vReflect;\n\n\tuniform float refractionRatio;\n\n#endif\n";
THREE.ShaderChunk.linear_to_gamma_fragment = "\n\toutgoingLight = linearToOutput( outgoingLight );\n";
THREE.ShaderChunk.color_pars_vertex = "#ifdef USE_COLOR\n\n\tvarying vec3 vColor;\n\n#endif";
THREE.ShaderChunk.lights_lambert_pars_vertex =
    "uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n";
THREE.ShaderChunk.map_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n\n#endif\n";
THREE.ShaderChunk.envmap_fragment =
    "#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\tfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\t#else\n\t\tfloat flipNormal = 1.0;\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#endif\n\n\tenvColor.xyz = inputToLinear( envColor.xyz );\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif";
THREE.ShaderChunk.logdepthbuf_vertex =
    "#ifdef USE_LOGDEPTHBUF\n\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\n\t#ifndef USE_MORPHNORMALS\n\n\tuniform float morphTargetInfluences[ 8 ];\n\n\t#else\n\n\tuniform float morphTargetInfluences[ 4 ];\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.specularmap_fragment = "float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif";
THREE.ShaderChunk.fog_fragment =
    "#ifdef USE_FOG\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n\t#else\n\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\n\t#endif\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = exp2( - square( fogDensity ) * square( depth ) * LOG2 );\n\t\tfogFactor = whiteCompliment( fogFactor );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n\n\t#endif\n\t\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\n\n#endif";
THREE.ShaderChunk.bumpmap_pars_fragment =
    "#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n\t// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\tvec3 vSigmaX = dFdx( surf_pos );\n\t\tvec3 vSigmaY = dFdy( surf_pos );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n";
THREE.ShaderChunk.defaultnormal_vertex =
    "#ifdef USE_SKINNING\n\n\tvec3 objectNormal = skinnedNormal.xyz;\n\n#elif defined( USE_MORPHNORMALS )\n\n\tvec3 objectNormal = morphedNormal;\n\n#else\n\n\tvec3 objectNormal = normal;\n\n#endif\n\n#ifdef FLIP_SIDED\n\n\tobjectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;\n";
THREE.ShaderChunk.lights_phong_pars_fragment =
    "uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#ifdef WRAP_AROUND\n\n\tuniform vec3 wrapRGB;\n\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n";
THREE.ShaderChunk.skinbase_vertex =
    "#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif";
THREE.ShaderChunk.map_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif";
THREE.ShaderChunk.lightmap_fragment = "#ifdef USE_LIGHTMAP\n\n\toutgoingLight *= diffuseColor.xyz * texture2D( lightMap, vUv2 ).xyz;\n\n#endif";
THREE.ShaderChunk.shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\n#endif";
THREE.ShaderChunk.color_fragment = "#ifdef USE_COLOR\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif";
THREE.ShaderChunk.morphtarget_vertex =
    "#ifdef USE_MORPHTARGETS\n\n\tvec3 morphed = vec3( 0.0 );\n\tmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\tmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\tmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\tmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n\t#ifndef USE_MORPHNORMALS\n\n\tmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\tmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\tmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\tmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n\t#endif\n\n\tmorphed += position;\n\n#endif";
THREE.ShaderChunk.envmap_vertex =
    "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n\tvec3 worldNormal = transformDirection( objectNormal, modelMatrix );\n\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t#else\n\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.shadowmap_fragment =
    "#ifdef USE_SHADOWMAP\n\n\t#ifdef SHADOWMAP_DEBUG\n\n\t\tvec3 frustumColors[3];\n\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\n\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\n\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n\n\t#endif\n\n\t#ifdef SHADOWMAP_CASCADE\n\n\t\tint inFrustumCount = 0;\n\n\t#endif\n\n\tfloat fDepth;\n\tvec3 shadowColor = vec3( 1.0 );\n\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\t\t\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\t\t\t// don't shadow pixels outside of light frustum\n\t\t\t\t// use just first frustum (for cascades)\n\t\t\t\t// don't shadow pixels behind far plane of light frustum\n\n\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\tinFrustumCount += int( inFrustum );\n\t\t\tbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n\n\t\t#else\n\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\t#endif\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t\tshadowCoord.z += shadowBias[ i ];\n\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t/*\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n\t\t\t\t\t\t// must enroll loop manually\n\n\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\n\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\n\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\n\t\t\t\t\t\t\t\t// doesn't seem to produce any noticeable visual difference compared to simple texture2D lookup\n\t\t\t\t\t\t\t\t//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\n\n\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\n\t\t\t\t\t\t\tshadow += 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tshadow /= 9.0;\n\n\t\t*/\n\n\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\t\t\t\t// Percentage-close filtering\n\t\t\t\t\t\t// (9 pixel kernel)\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\n\n\t\t\t\tfloat shadow = 0.0;\n\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\n\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\n\n\t\t\t\tmat3 shadowKernel;\n\t\t\t\tmat3 depthKernel;\n\n\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\n\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\n\t\t\t\tshadowKernel[0] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\n\t\t\t\tshadowKernel[1] *= vec3(0.25);\n\n\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\n\t\t\t\tshadowKernel[2] *= vec3(0.25);\n\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\n\n\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\n\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\n\n\t\t\t\tvec4 shadowValues;\n\t\t\t\tshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\n\t\t\t\tshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\n\t\t\t\tshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\n\t\t\t\tshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\n\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) );\n\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n\t\t\t#else\n\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\n\n\t\t\t\tif ( fDepth < shadowCoord.z )\n\n\t\t// spot with multiple shadows is darker\n\n\t\t\t\t\tshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n\n\t\t// spot with multiple shadows has the same color as single shadow spot\n\n\t\t// \t\t\t\t\tshadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\n\n\t\t\t#endif\n\n\t\t}\n\n\n\t\t#ifdef SHADOWMAP_DEBUG\n\n\t\t\t#ifdef SHADOWMAP_CASCADE\n\n\t\t\t\tif ( inFrustum && inFrustumCount == 1 ) outgoingLight *= frustumColors[ i ];\n\n\t\t\t#else\n\n\t\t\t\tif ( inFrustum ) outgoingLight *= frustumColors[ i ];\n\n\t\t\t#endif\n\n\t\t#endif\n\n\t}\n\n\t// NOTE: I am unsure if this is correct in linear space.  -bhouston, Dec 29, 2014\n\tshadowColor = inputToLinear( shadowColor );\n\n\toutgoingLight = outgoingLight * shadowColor;\n\n#endif\n";
THREE.ShaderChunk.worldpos_vertex =
    "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n\t#ifdef USE_SKINNING\n\n\t\tvec4 worldPosition = modelMatrix * skinned;\n\n\t#elif defined( USE_MORPHTARGETS )\n\n\t\tvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n\n\t#else\n\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.shadowmap_pars_fragment =
    "#ifdef USE_SHADOWMAP\n\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\n\tuniform float shadowBias[ MAX_SHADOWS ];\n\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\n\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n\t\tfloat depth = dot( rgba_depth, bit_shift );\n\t\treturn depth;\n\n\t}\n\n#endif";
THREE.ShaderChunk.skinning_pars_vertex =
    "#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureWidth;\n\t\tuniform int boneTextureHeight;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n";
THREE.ShaderChunk.logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\n\tuniform float logDepthBufFC;\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\t#extension GL_EXT_frag_depth : enable\n\t\tvarying float vFragDepth;\n\n\t#endif\n\n#endif";
THREE.ShaderChunk.alphamap_fragment = "#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n";
THREE.ShaderChunk.alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n";
THREE.UniformsUtils = {
    merge: function (a) {
        for (var b = {}, c = 0; c < a.length; c++) {
            var d = this.clone(a[c]),
                e;
            for (e in d) b[e] = d[e];
        }
        return b;
    },
    clone: function (a) {
        var b = {},
            c;
        for (c in a) {
            b[c] = {};
            for (var d in a[c]) {
                var e = a[c][d];
                b[c][d] =
                    e instanceof THREE.Color || e instanceof THREE.Vector2 || e instanceof THREE.Vector3 || e instanceof THREE.Vector4 || e instanceof THREE.Matrix4 || e instanceof THREE.Texture
                        ? e.clone()
                        : e instanceof Array
                        ? e.slice()
                        : e;
            }
        }
        return b;
    },
};
THREE.UniformsLib = {
    common: {
        diffuse: { type: "c", value: new THREE.Color(15658734) },
        opacity: { type: "f", value: 1 },
        map: { type: "t", value: null },
        offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) },
        lightMap: { type: "t", value: null },
        specularMap: { type: "t", value: null },
        alphaMap: { type: "t", value: null },
        envMap: { type: "t", value: null },
        flipEnvMap: { type: "f", value: -1 },
        reflectivity: { type: "f", value: 1 },
        refractionRatio: { type: "f", value: 0.98 },
        morphTargetInfluences: { type: "f", value: 0 },
    },
    bump: { bumpMap: { type: "t", value: null }, bumpScale: { type: "f", value: 1 } },
    normalmap: { normalMap: { type: "t", value: null }, normalScale: { type: "v2", value: new THREE.Vector2(1, 1) } },
    fog: { fogDensity: { type: "f", value: 2.5e-4 }, fogNear: { type: "f", value: 1 }, fogFar: { type: "f", value: 2e3 }, fogColor: { type: "c", value: new THREE.Color(16777215) } },
    lights: {
        ambientLightColor: { type: "fv", value: [] },
        directionalLightDirection: { type: "fv", value: [] },
        directionalLightColor: { type: "fv", value: [] },
        hemisphereLightDirection: { type: "fv", value: [] },
        hemisphereLightSkyColor: { type: "fv", value: [] },
        hemisphereLightGroundColor: { type: "fv", value: [] },
        pointLightColor: { type: "fv", value: [] },
        pointLightPosition: { type: "fv", value: [] },
        pointLightDistance: { type: "fv1", value: [] },
        pointLightDecay: { type: "fv1", value: [] },
        spotLightColor: { type: "fv", value: [] },
        spotLightPosition: { type: "fv", value: [] },
        spotLightDirection: { type: "fv", value: [] },
        spotLightDistance: { type: "fv1", value: [] },
        spotLightAngleCos: { type: "fv1", value: [] },
        spotLightExponent: { type: "fv1", value: [] },
        spotLightDecay: { type: "fv1", value: [] },
    },
    particle: {
        psColor: { type: "c", value: new THREE.Color(15658734) },
        opacity: { type: "f", value: 1 },
        size: { type: "f", value: 1 },
        scale: { type: "f", value: 1 },
        map: { type: "t", value: null },
        offsetRepeat: { type: "v4", value: new THREE.Vector4(0, 0, 1, 1) },
        fogDensity: { type: "f", value: 2.5e-4 },
        fogNear: { type: "f", value: 1 },
        fogFar: { type: "f", value: 2e3 },
        fogColor: { type: "c", value: new THREE.Color(16777215) },
    },
    shadowmap: { shadowMap: { type: "tv", value: [] }, shadowMapSize: { type: "v2v", value: [] }, shadowBias: { type: "fv1", value: [] }, shadowDarkness: { type: "fv1", value: [] }, shadowMatrix: { type: "m4v", value: [] } },
};
THREE.ShaderLib = {
    basic: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, THREE.UniformsLib.shadowmap]),
        vertexShader: [
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.map_pars_vertex,
            THREE.ShaderChunk.lightmap_pars_vertex,
            THREE.ShaderChunk.envmap_pars_vertex,
            THREE.ShaderChunk.color_pars_vertex,
            THREE.ShaderChunk.morphtarget_pars_vertex,
            THREE.ShaderChunk.skinning_pars_vertex,
            THREE.ShaderChunk.shadowmap_pars_vertex,
            THREE.ShaderChunk.logdepthbuf_pars_vertex,
            "void main() {",
            THREE.ShaderChunk.map_vertex,
            THREE.ShaderChunk.lightmap_vertex,
            THREE.ShaderChunk.color_vertex,
            THREE.ShaderChunk.skinbase_vertex,
            "\t#ifdef USE_ENVMAP",
            THREE.ShaderChunk.morphnormal_vertex,
            THREE.ShaderChunk.skinnormal_vertex,
            THREE.ShaderChunk.defaultnormal_vertex,
            "\t#endif",
            THREE.ShaderChunk.morphtarget_vertex,
            THREE.ShaderChunk.skinning_vertex,
            THREE.ShaderChunk.default_vertex,
            THREE.ShaderChunk.logdepthbuf_vertex,
            THREE.ShaderChunk.worldpos_vertex,
            THREE.ShaderChunk.envmap_vertex,
            THREE.ShaderChunk.shadowmap_vertex,
            "}",
        ].join("\n"),
        fragmentShader: [
            "uniform vec3 diffuse;\nuniform float opacity;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.color_pars_fragment,
            THREE.ShaderChunk.map_pars_fragment,
            THREE.ShaderChunk.alphamap_pars_fragment,
            THREE.ShaderChunk.lightmap_pars_fragment,
            THREE.ShaderChunk.envmap_pars_fragment,
            THREE.ShaderChunk.fog_pars_fragment,
            THREE.ShaderChunk.shadowmap_pars_fragment,
            THREE.ShaderChunk.specularmap_pars_fragment,
            THREE.ShaderChunk.logdepthbuf_pars_fragment,
            "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",
            THREE.ShaderChunk.logdepthbuf_fragment,
            THREE.ShaderChunk.map_fragment,
            THREE.ShaderChunk.color_fragment,
            THREE.ShaderChunk.alphamap_fragment,
            THREE.ShaderChunk.alphatest_fragment,
            THREE.ShaderChunk.specularmap_fragment,
            "\toutgoingLight = diffuseColor.rgb;",
            THREE.ShaderChunk.lightmap_fragment,
            THREE.ShaderChunk.envmap_fragment,
            THREE.ShaderChunk.shadowmap_fragment,
            THREE.ShaderChunk.linear_to_gamma_fragment,
            THREE.ShaderChunk.fog_fragment,
            "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}",
        ].join("\n"),
    },
    lambert: {
        uniforms: THREE.UniformsUtils.merge([
            THREE.UniformsLib.common,
            THREE.UniformsLib.fog,
            THREE.UniformsLib.lights,
            THREE.UniformsLib.shadowmap,
            { emissive: { type: "c", value: new THREE.Color(0) }, wrapRGB: { type: "v3", value: new THREE.Vector3(1, 1, 1) } },
        ]),
        vertexShader: [
            "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.map_pars_vertex,
            THREE.ShaderChunk.lightmap_pars_vertex,
            THREE.ShaderChunk.envmap_pars_vertex,
            THREE.ShaderChunk.lights_lambert_pars_vertex,
            THREE.ShaderChunk.color_pars_vertex,
            THREE.ShaderChunk.morphtarget_pars_vertex,
            THREE.ShaderChunk.skinning_pars_vertex,
            THREE.ShaderChunk.shadowmap_pars_vertex,
            THREE.ShaderChunk.logdepthbuf_pars_vertex,
            "void main() {",
            THREE.ShaderChunk.map_vertex,
            THREE.ShaderChunk.lightmap_vertex,
            THREE.ShaderChunk.color_vertex,
            THREE.ShaderChunk.morphnormal_vertex,
            THREE.ShaderChunk.skinbase_vertex,
            THREE.ShaderChunk.skinnormal_vertex,
            THREE.ShaderChunk.defaultnormal_vertex,
            THREE.ShaderChunk.morphtarget_vertex,
            THREE.ShaderChunk.skinning_vertex,
            THREE.ShaderChunk.default_vertex,
            THREE.ShaderChunk.logdepthbuf_vertex,
            THREE.ShaderChunk.worldpos_vertex,
            THREE.ShaderChunk.envmap_vertex,
            THREE.ShaderChunk.lights_lambert_vertex,
            THREE.ShaderChunk.shadowmap_vertex,
            "}",
        ].join("\n"),
        fragmentShader: [
            "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.color_pars_fragment,
            THREE.ShaderChunk.map_pars_fragment,
            THREE.ShaderChunk.alphamap_pars_fragment,
            THREE.ShaderChunk.lightmap_pars_fragment,
            THREE.ShaderChunk.envmap_pars_fragment,
            THREE.ShaderChunk.fog_pars_fragment,
            THREE.ShaderChunk.shadowmap_pars_fragment,
            THREE.ShaderChunk.specularmap_pars_fragment,
            THREE.ShaderChunk.logdepthbuf_pars_fragment,
            "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",
            THREE.ShaderChunk.logdepthbuf_fragment,
            THREE.ShaderChunk.map_fragment,
            THREE.ShaderChunk.color_fragment,
            THREE.ShaderChunk.alphamap_fragment,
            THREE.ShaderChunk.alphatest_fragment,
            THREE.ShaderChunk.specularmap_fragment,
            "\t#ifdef DOUBLE_SIDED\n\t\tif ( gl_FrontFacing )\n\t\t\toutgoingLight += diffuseColor.rgb * vLightFront + emissive;\n\t\telse\n\t\t\toutgoingLight += diffuseColor.rgb * vLightBack + emissive;\n\t#else\n\t\toutgoingLight += diffuseColor.rgb * vLightFront + emissive;\n\t#endif",
            THREE.ShaderChunk.lightmap_fragment,
            THREE.ShaderChunk.envmap_fragment,
            THREE.ShaderChunk.shadowmap_fragment,
            THREE.ShaderChunk.linear_to_gamma_fragment,
            THREE.ShaderChunk.fog_fragment,
            "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}",
        ].join("\n"),
    },
    phong: {
        uniforms: THREE.UniformsUtils.merge([
            THREE.UniformsLib.common,
            THREE.UniformsLib.bump,
            THREE.UniformsLib.normalmap,
            THREE.UniformsLib.fog,
            THREE.UniformsLib.lights,
            THREE.UniformsLib.shadowmap,
            { emissive: { type: "c", value: new THREE.Color(0) }, specular: { type: "c", value: new THREE.Color(1118481) }, shininess: { type: "f", value: 30 }, wrapRGB: { type: "v3", value: new THREE.Vector3(1, 1, 1) } },
        ]),
        vertexShader: [
            "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.map_pars_vertex,
            THREE.ShaderChunk.lightmap_pars_vertex,
            THREE.ShaderChunk.envmap_pars_vertex,
            THREE.ShaderChunk.lights_phong_pars_vertex,
            THREE.ShaderChunk.color_pars_vertex,
            THREE.ShaderChunk.morphtarget_pars_vertex,
            THREE.ShaderChunk.skinning_pars_vertex,
            THREE.ShaderChunk.shadowmap_pars_vertex,
            THREE.ShaderChunk.logdepthbuf_pars_vertex,
            "void main() {",
            THREE.ShaderChunk.map_vertex,
            THREE.ShaderChunk.lightmap_vertex,
            THREE.ShaderChunk.color_vertex,
            THREE.ShaderChunk.morphnormal_vertex,
            THREE.ShaderChunk.skinbase_vertex,
            THREE.ShaderChunk.skinnormal_vertex,
            THREE.ShaderChunk.defaultnormal_vertex,
            "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif",
            THREE.ShaderChunk.morphtarget_vertex,
            THREE.ShaderChunk.skinning_vertex,
            THREE.ShaderChunk.default_vertex,
            THREE.ShaderChunk.logdepthbuf_vertex,
            "\tvViewPosition = -mvPosition.xyz;",
            THREE.ShaderChunk.worldpos_vertex,
            THREE.ShaderChunk.envmap_vertex,
            THREE.ShaderChunk.lights_phong_vertex,
            THREE.ShaderChunk.shadowmap_vertex,
            "}",
        ].join("\n"),
        fragmentShader: [
            "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.color_pars_fragment,
            THREE.ShaderChunk.map_pars_fragment,
            THREE.ShaderChunk.alphamap_pars_fragment,
            THREE.ShaderChunk.lightmap_pars_fragment,
            THREE.ShaderChunk.envmap_pars_fragment,
            THREE.ShaderChunk.fog_pars_fragment,
            THREE.ShaderChunk.lights_phong_pars_fragment,
            THREE.ShaderChunk.shadowmap_pars_fragment,
            THREE.ShaderChunk.bumpmap_pars_fragment,
            THREE.ShaderChunk.normalmap_pars_fragment,
            THREE.ShaderChunk.specularmap_pars_fragment,
            THREE.ShaderChunk.logdepthbuf_pars_fragment,
            "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",
            THREE.ShaderChunk.logdepthbuf_fragment,
            THREE.ShaderChunk.map_fragment,
            THREE.ShaderChunk.color_fragment,
            THREE.ShaderChunk.alphamap_fragment,
            THREE.ShaderChunk.alphatest_fragment,
            THREE.ShaderChunk.specularmap_fragment,
            THREE.ShaderChunk.lights_phong_fragment,
            THREE.ShaderChunk.lightmap_fragment,
            THREE.ShaderChunk.envmap_fragment,
            THREE.ShaderChunk.shadowmap_fragment,
            THREE.ShaderChunk.linear_to_gamma_fragment,
            THREE.ShaderChunk.fog_fragment,
            "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}",
        ].join("\n"),
    },
    particle_basic: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.particle, THREE.UniformsLib.shadowmap]),
        vertexShader: [
            "uniform float size;\nuniform float scale;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.color_pars_vertex,
            THREE.ShaderChunk.shadowmap_pars_vertex,
            THREE.ShaderChunk.logdepthbuf_pars_vertex,
            "void main() {",
            THREE.ShaderChunk.color_vertex,
            "\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\tgl_Position = projectionMatrix * mvPosition;",
            THREE.ShaderChunk.logdepthbuf_vertex,
            THREE.ShaderChunk.worldpos_vertex,
            THREE.ShaderChunk.shadowmap_vertex,
            "}",
        ].join("\n"),
        fragmentShader: [
            "uniform vec3 psColor;\nuniform float opacity;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.color_pars_fragment,
            THREE.ShaderChunk.map_particle_pars_fragment,
            THREE.ShaderChunk.fog_pars_fragment,
            THREE.ShaderChunk.shadowmap_pars_fragment,
            THREE.ShaderChunk.logdepthbuf_pars_fragment,
            "void main() {\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( psColor, opacity );",
            THREE.ShaderChunk.logdepthbuf_fragment,
            THREE.ShaderChunk.map_particle_fragment,
            THREE.ShaderChunk.color_fragment,
            THREE.ShaderChunk.alphatest_fragment,
            "\toutgoingLight = diffuseColor.rgb;",
            THREE.ShaderChunk.shadowmap_fragment,
            THREE.ShaderChunk.fog_fragment,
            "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}",
        ].join("\n"),
    },
    dashed: {
        uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.common, THREE.UniformsLib.fog, { scale: { type: "f", value: 1 }, dashSize: { type: "f", value: 1 }, totalSize: { type: "f", value: 2 } }]),
        vertexShader: [
            "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.color_pars_vertex,
            THREE.ShaderChunk.logdepthbuf_pars_vertex,
            "void main() {",
            THREE.ShaderChunk.color_vertex,
            "\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;",
            THREE.ShaderChunk.logdepthbuf_vertex,
            "}",
        ].join("\n"),
        fragmentShader: [
            "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.color_pars_fragment,
            THREE.ShaderChunk.fog_pars_fragment,
            THREE.ShaderChunk.logdepthbuf_pars_fragment,
            "void main() {\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );",
            THREE.ShaderChunk.logdepthbuf_fragment,
            THREE.ShaderChunk.color_fragment,
            "\toutgoingLight = diffuseColor.rgb;",
            THREE.ShaderChunk.fog_fragment,
            "\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n}",
        ].join("\n"),
    },
    depth: {
        uniforms: { mNear: { type: "f", value: 1 }, mFar: { type: "f", value: 2e3 }, opacity: { type: "f", value: 1 } },
        vertexShader: [
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.morphtarget_pars_vertex,
            THREE.ShaderChunk.logdepthbuf_pars_vertex,
            "void main() {",
            THREE.ShaderChunk.morphtarget_vertex,
            THREE.ShaderChunk.default_vertex,
            THREE.ShaderChunk.logdepthbuf_vertex,
            "}",
        ].join("\n"),
        fragmentShader: [
            "uniform float mNear;\nuniform float mFar;\nuniform float opacity;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.logdepthbuf_pars_fragment,
            "void main() {",
            THREE.ShaderChunk.logdepthbuf_fragment,
            "\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\t#else\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\t#endif\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\n\tgl_FragColor = vec4( vec3( color ), opacity );\n}",
        ].join("\n"),
    },
    normal: {
        uniforms: { opacity: { type: "f", value: 1 } },
        vertexShader: [
            "varying vec3 vNormal;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.morphtarget_pars_vertex,
            THREE.ShaderChunk.logdepthbuf_pars_vertex,
            "void main() {\n\tvNormal = normalize( normalMatrix * normal );",
            THREE.ShaderChunk.morphtarget_vertex,
            THREE.ShaderChunk.default_vertex,
            THREE.ShaderChunk.logdepthbuf_vertex,
            "}",
        ].join("\n"),
        fragmentShader: [
            "uniform float opacity;\nvarying vec3 vNormal;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.logdepthbuf_pars_fragment,
            "void main() {\n\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",
            THREE.ShaderChunk.logdepthbuf_fragment,
            "}",
        ].join("\n"),
    },
    cube: {
        uniforms: { tCube: { type: "t", value: null }, tFlip: { type: "f", value: -1 } },
        vertexShader: [
            "varying vec3 vWorldPosition;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.logdepthbuf_pars_vertex,
            "void main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
            THREE.ShaderChunk.logdepthbuf_vertex,
            "}",
        ].join("\n"),
        fragmentShader: [
            "uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.logdepthbuf_pars_fragment,
            "void main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",
            THREE.ShaderChunk.logdepthbuf_fragment,
            "}",
        ].join("\n"),
    },
    equirect: {
        uniforms: { tEquirect: { type: "t", value: null }, tFlip: { type: "f", value: -1 } },
        vertexShader: [
            "varying vec3 vWorldPosition;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.logdepthbuf_pars_vertex,
            "void main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
            THREE.ShaderChunk.logdepthbuf_vertex,
            "}",
        ].join("\n"),
        fragmentShader: [
            "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;",
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.logdepthbuf_pars_fragment,
            "void main() {\nvec3 direction = normalize( vWorldPosition );\nvec2 sampleUV;\nsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\nsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\ngl_FragColor = texture2D( tEquirect, sampleUV );",
            THREE.ShaderChunk.logdepthbuf_fragment,
            "}",
        ].join("\n"),
    },
    depthRGBA: {
        uniforms: {},
        vertexShader: [
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.morphtarget_pars_vertex,
            THREE.ShaderChunk.skinning_pars_vertex,
            THREE.ShaderChunk.logdepthbuf_pars_vertex,
            "void main() {",
            THREE.ShaderChunk.skinbase_vertex,
            THREE.ShaderChunk.morphtarget_vertex,
            THREE.ShaderChunk.skinning_vertex,
            THREE.ShaderChunk.default_vertex,
            THREE.ShaderChunk.logdepthbuf_vertex,
            "}",
        ].join("\n"),
        fragmentShader: [
            THREE.ShaderChunk.common,
            THREE.ShaderChunk.logdepthbuf_pars_fragment,
            "vec4 pack_depth( const in float depth ) {\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\n\tres -= res.xxyz * bit_mask;\n\treturn res;\n}\nvoid main() {",
            THREE.ShaderChunk.logdepthbuf_fragment,
            "\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\n\t#else\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n\t#endif\n}",
        ].join("\n"),
    },
};
THREE.WebGLRenderer = function (a) {
    function b(a) {
        var b = a.geometry;
        a = a.material;
        var c = b.vertices.length;
        if (a.attributes) {
            void 0 === b.__webglCustomAttributesList && (b.__webglCustomAttributesList = []);
            for (var d in a.attributes) {
                var e = a.attributes[d];
                if (!e.__webglInitialized || e.createUniqueBuffers) {
                    e.__webglInitialized = !0;
                    var f = 1;
                    "v2" === e.type ? (f = 2) : "v3" === e.type ? (f = 3) : "v4" === e.type ? (f = 4) : "c" === e.type && (f = 3);
                    e.size = f;
                    e.array = new Float32Array(c * f);
                    e.buffer = m.createBuffer();
                    e.buffer.belongsToAttribute = d;
                    e.needsUpdate = !0;
                }
                b.__webglCustomAttributesList.push(e);
            }
        }
    }
    function c(a, b) {
        return a.material instanceof THREE.MeshFaceMaterial ? a.material.materials[b.materialIndex] : a.material;
    }
    function d(a, b, c, d) {
        c = c.attributes;
        var e = b.attributes;
        b = b.attributesKeys;
        for (var f = 0, g = b.length; f < g; f++) {
            var h = b[f],
                k = e[h];
            if (0 <= k) {
                var n = c[h];
                void 0 !== n
                    ? ((h = n.itemSize), m.bindBuffer(m.ARRAY_BUFFER, n.buffer), W.enableAttribute(k), m.vertexAttribPointer(k, h, m.FLOAT, !1, 0, d * h * 4))
                    : void 0 !== a.defaultAttributeValues &&
                      (2 === a.defaultAttributeValues[h].length ? m.vertexAttrib2fv(k, a.defaultAttributeValues[h]) : 3 === a.defaultAttributeValues[h].length && m.vertexAttrib3fv(k, a.defaultAttributeValues[h]));
            }
        }
        W.disableUnusedAttributes();
    }
    function e(a, b) {
        return a.object.renderOrder !== b.object.renderOrder ? a.object.renderOrder - b.object.renderOrder : a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id;
    }
    function f(a, b) {
        return a.object.renderOrder !== b.object.renderOrder ? a.object.renderOrder - b.object.renderOrder : a.z !== b.z ? b.z - a.z : a.id - b.id;
    }
    function g(a, b) {
        return b[0] - a[0];
    }
    function h(a) {
        if (!1 !== a.visible) {
            if (!(a instanceof THREE.Scene || a instanceof THREE.Group)) {
                void 0 === a.__webglInit && ((a.__webglInit = !0), (a._modelViewMatrix = new THREE.Matrix4()), (a._normalMatrix = new THREE.Matrix3()), a.addEventListener("removed", wb));
                var c = a.geometry;
                if (void 0 !== c && void 0 === c.__webglInit)
                    if (((c.__webglInit = !0), c.addEventListener("dispose", jb), c instanceof THREE.BufferGeometry)) B.info.memory.geometries++;
                    else if (a instanceof THREE.Mesh) q(a, c);
                    else if (a instanceof THREE.Line) {
                        if (void 0 === c.__webglVertexBuffer) {
                            c.__webglVertexBuffer = m.createBuffer();
                            c.__webglColorBuffer = m.createBuffer();
                            c.__webglLineDistanceBuffer = m.createBuffer();
                            B.info.memory.geometries++;
                            var d = c.vertices.length;
                            c.__vertexArray = new Float32Array(3 * d);
                            c.__colorArray = new Float32Array(3 * d);
                            c.__lineDistanceArray = new Float32Array(1 * d);
                            c.__webglLineCount = d;
                            b(a);
                            c.verticesNeedUpdate = !0;
                            c.colorsNeedUpdate = !0;
                            c.lineDistancesNeedUpdate = !0;
                        }
                    } else
                        a instanceof THREE.PointCloud &&
                            void 0 === c.__webglVertexBuffer &&
                            ((c.__webglVertexBuffer = m.createBuffer()),
                            (c.__webglColorBuffer = m.createBuffer()),
                            B.info.memory.geometries++,
                            (d = c.vertices.length),
                            (c.__vertexArray = new Float32Array(3 * d)),
                            (c.__colorArray = new Float32Array(3 * d)),
                            (c.__webglParticleCount = d),
                            b(a),
                            (c.verticesNeedUpdate = !0),
                            (c.colorsNeedUpdate = !0));
                if (void 0 === a.__webglActive)
                    if (((a.__webglActive = !0), a instanceof THREE.Mesh))
                        if (c instanceof THREE.BufferGeometry) n(ba, c, a);
                        else {
                            if (c instanceof THREE.Geometry) for (var c = Ua[c.id], d = 0, e = c.length; d < e; d++) n(ba, c[d], a);
                        }
                    else
                        a instanceof THREE.Line || a instanceof THREE.PointCloud
                            ? n(ba, c, a)
                            : (a instanceof THREE.ImmediateRenderObject || a.immediateRenderCallback) && qa.push({ id: null, object: a, opaque: null, transparent: null, z: 0 });
                if (a instanceof THREE.Light) ca.push(a);
                else if (a instanceof THREE.Sprite) Xa.push(a);
                else if (a instanceof THREE.LensFlare) Ya.push(a);
                else if ((c = ba[a.id]) && (!1 === a.frustumCulled || !0 === cb.intersectsObject(a)))
                    for (d = 0, e = c.length; d < e; d++) {
                        var f = c[d],
                            g = f,
                            k = g.object,
                            l = g.buffer,
                            p = k.geometry,
                            k = k.material;
                        k instanceof THREE.MeshFaceMaterial
                            ? ((k = k.materials[p instanceof THREE.BufferGeometry ? 0 : l.materialIndex]), (g.material = k), k.transparent ? Qa.push(g) : Ka.push(g))
                            : k && ((g.material = k), k.transparent ? Qa.push(g) : Ka.push(g));
                        f.render = !0;
                        !0 === B.sortObjects && (wa.setFromMatrixPosition(a.matrixWorld), wa.applyProjection(db), (f.z = wa.z));
                    }
            }
            d = 0;
            for (e = a.children.length; d < e; d++) h(a.children[d]);
        }
    }
    function k(a, b, c, d, e) {
        for (var f, g = 0, h = a.length; g < h; g++) {
            f = a[g];
            var k = f.object,
                m = f.buffer;
            w(k, b);
            if (e) f = e;
            else {
                f = f.material;
                if (!f) continue;
                u(f);
            }
            B.setMaterialFaces(f);
            m instanceof THREE.BufferGeometry ? B.renderBufferDirect(b, c, d, f, m, k) : B.renderBuffer(b, c, d, f, m, k);
        }
    }
    function l(a, b, c, d, e, f) {
        for (var g, h = 0, k = a.length; h < k; h++) {
            g = a[h];
            var m = g.object;
            if (m.visible) {
                if (f) g = f;
                else {
                    g = g[b];
                    if (!g) continue;
                    u(g);
                }
                B.renderImmediateObject(c, d, e, g, m);
            }
        }
    }
    function p(a) {
        var b = a.object.material;
        b.transparent ? ((a.transparent = b), (a.opaque = null)) : ((a.opaque = b), (a.transparent = null));
    }
    function q(a, b) {
        var d = a.material,
            e = !1;
        if (void 0 === Ua[b.id] || !0 === b.groupsNeedUpdate) {
            delete ba[a.id];
            for (
                var f = Ua,
                    g = b.id,
                    d = d instanceof THREE.MeshFaceMaterial,
                    h = da.get("OES_element_index_uint") ? 4294967296 : 65535,
                    k,
                    e = {},
                    l = b.morphTargets.length,
                    p = b.morphNormals.length,
                    q,
                    s = {},
                    t = [],
                    r = 0,
                    w = b.faces.length;
                r < w;
                r++
            ) {
                k = b.faces[r];
                var u = d ? k.materialIndex : 0;
                u in e || (e[u] = { hash: u, counter: 0 });
                k = e[u].hash + "_" + e[u].counter;
                k in s || ((q = { id: Qb++, faces3: [], materialIndex: u, vertices: 0, numMorphTargets: l, numMorphNormals: p }), (s[k] = q), t.push(q));
                s[k].vertices + 3 > h && ((e[u].counter += 1), (k = e[u].hash + "_" + e[u].counter), k in s || ((q = { id: Qb++, faces3: [], materialIndex: u, vertices: 0, numMorphTargets: l, numMorphNormals: p }), (s[k] = q), t.push(q)));
                s[k].faces3.push(r);
                s[k].vertices += 3;
            }
            f[g] = t;
            b.groupsNeedUpdate = !1;
        }
        f = Ua[b.id];
        g = 0;
        for (d = f.length; g < d; g++) {
            h = f[g];
            if (void 0 === h.__webglVertexBuffer) {
                e = h;
                e.__webglVertexBuffer = m.createBuffer();
                e.__webglNormalBuffer = m.createBuffer();
                e.__webglTangentBuffer = m.createBuffer();
                e.__webglColorBuffer = m.createBuffer();
                e.__webglUVBuffer = m.createBuffer();
                e.__webglUV2Buffer = m.createBuffer();
                e.__webglSkinIndicesBuffer = m.createBuffer();
                e.__webglSkinWeightsBuffer = m.createBuffer();
                e.__webglFaceBuffer = m.createBuffer();
                e.__webglLineBuffer = m.createBuffer();
                if ((p = e.numMorphTargets)) for (e.__webglMorphTargetsBuffers = [], l = 0; l < p; l++) e.__webglMorphTargetsBuffers.push(m.createBuffer());
                if ((p = e.numMorphNormals)) for (e.__webglMorphNormalsBuffers = [], l = 0; l < p; l++) e.__webglMorphNormalsBuffers.push(m.createBuffer());
                B.info.memory.geometries++;
                e = h;
                r = a;
                w = r.geometry;
                p = e.faces3;
                l = 3 * p.length;
                s = 1 * p.length;
                t = 3 * p.length;
                p = c(r, e);
                e.__vertexArray = new Float32Array(3 * l);
                e.__normalArray = new Float32Array(3 * l);
                e.__colorArray = new Float32Array(3 * l);
                e.__uvArray = new Float32Array(2 * l);
                1 < w.faceVertexUvs.length && (e.__uv2Array = new Float32Array(2 * l));
                w.hasTangents && (e.__tangentArray = new Float32Array(4 * l));
                r.geometry.skinWeights.length && r.geometry.skinIndices.length && ((e.__skinIndexArray = new Float32Array(4 * l)), (e.__skinWeightArray = new Float32Array(4 * l)));
                r = null !== da.get("OES_element_index_uint") && 21845 < s ? Uint32Array : Uint16Array;
                e.__typeArray = r;
                e.__faceArray = new r(3 * s);
                e.__lineArray = new r(2 * t);
                if ((w = e.numMorphTargets)) for (e.__morphTargetsArrays = [], r = 0; r < w; r++) e.__morphTargetsArrays.push(new Float32Array(3 * l));
                if ((w = e.numMorphNormals)) for (e.__morphNormalsArrays = [], r = 0; r < w; r++) e.__morphNormalsArrays.push(new Float32Array(3 * l));
                e.__webglFaceCount = 3 * s;
                e.__webglLineCount = 2 * t;
                if (p.attributes)
                    for (s in (void 0 === e.__webglCustomAttributesList && (e.__webglCustomAttributesList = []), (s = void 0), p.attributes)) {
                        var t = p.attributes[s],
                            r = {},
                            v;
                        for (v in t) r[v] = t[v];
                        if (!r.__webglInitialized || r.createUniqueBuffers)
                            (r.__webglInitialized = !0),
                                (w = 1),
                                "v2" === r.type ? (w = 2) : "v3" === r.type ? (w = 3) : "v4" === r.type ? (w = 4) : "c" === r.type && (w = 3),
                                (r.size = w),
                                (r.array = new Float32Array(l * w)),
                                (r.buffer = m.createBuffer()),
                                (r.buffer.belongsToAttribute = s),
                                (t.needsUpdate = !0),
                                (r.__original = t);
                        e.__webglCustomAttributesList.push(r);
                    }
                e.__inittedArrays = !0;
                b.verticesNeedUpdate = !0;
                b.morphTargetsNeedUpdate = !0;
                b.elementsNeedUpdate = !0;
                b.uvsNeedUpdate = !0;
                b.normalsNeedUpdate = !0;
                b.tangentsNeedUpdate = !0;
                e = b.colorsNeedUpdate = !0;
            } else e = !1;
            (e || void 0 === a.__webglActive) && n(ba, h, a);
        }
        a.__webglActive = !0;
    }
    function n(a, b, c) {
        var d = c.id;
        a[d] = a[d] || [];
        a[d].push({ id: d, buffer: b, object: c, material: null, z: 0 });
    }
    function t(a) {
        var b = a.geometry;
        if (b instanceof THREE.BufferGeometry)
            for (var d = b.attributes, e = b.attributesKeys, f = 0, g = e.length; f < g; f++) {
                var h = e[f],
                    k = d[h],
                    n = "index" === h ? m.ELEMENT_ARRAY_BUFFER : m.ARRAY_BUFFER;
                void 0 === k.buffer
                    ? ((k.buffer = m.createBuffer()), m.bindBuffer(n, k.buffer), m.bufferData(n, k.array, k instanceof THREE.DynamicBufferAttribute ? m.DYNAMIC_DRAW : m.STATIC_DRAW), (k.needsUpdate = !1))
                    : !0 === k.needsUpdate &&
                      (m.bindBuffer(n, k.buffer),
                      void 0 === k.updateRange || -1 === k.updateRange.count
                          ? m.bufferSubData(n, 0, k.array)
                          : 0 === k.updateRange.count
                          ? console.error("THREE.WebGLRenderer.updateObject: using updateRange for THREE.DynamicBufferAttribute and marked as needsUpdate but count is 0, ensure you are using set methods or updating manually.")
                          : (m.bufferSubData(n, k.updateRange.offset * k.array.BYTES_PER_ELEMENT, k.array.subarray(k.updateRange.offset, k.updateRange.offset + k.updateRange.count)), (k.updateRange.count = 0)),
                      (k.needsUpdate = !1));
            }
        else if (a instanceof THREE.Mesh) {
            !0 === b.groupsNeedUpdate && q(a, b);
            for (var l = Ua[b.id], f = 0, p = l.length; f < p; f++) {
                var t = l[f],
                    w = c(a, t),
                    u = w.attributes && r(w);
                if (b.verticesNeedUpdate || b.morphTargetsNeedUpdate || b.elementsNeedUpdate || b.uvsNeedUpdate || b.normalsNeedUpdate || b.colorsNeedUpdate || b.tangentsNeedUpdate || u) {
                    var v = t,
                        x = a,
                        D = m.DYNAMIC_DRAW,
                        A = !b.dynamic,
                        E = w;
                    if (v.__inittedArrays) {
                        var G = !1 === E instanceof THREE.MeshPhongMaterial && E.shading === THREE.FlatShading,
                            y = void 0,
                            z = void 0,
                            F = void 0,
                            B = void 0,
                            I = void 0,
                            H = void 0,
                            M = void 0,
                            R = void 0,
                            P = void 0,
                            U = void 0,
                            O = void 0,
                            J = void 0,
                            L = void 0,
                            N = void 0,
                            Ka = void 0,
                            V = void 0,
                            W = void 0,
                            Qa = void 0,
                            Ya = void 0,
                            Xa = void 0,
                            da = void 0,
                            ba = void 0,
                            ja = void 0,
                            Pa = void 0,
                            ka = void 0,
                            Q = void 0,
                            ha = void 0,
                            ia = void 0,
                            ob = void 0,
                            Y = void 0,
                            ub = void 0,
                            pa = void 0,
                            ab = void 0,
                            oa = void 0,
                            ca = void 0,
                            qa = void 0,
                            Ca = void 0,
                            ta = void 0,
                            na = void 0,
                            wa = void 0,
                            La = 0,
                            Ma = 0,
                            kb = 0,
                            yb = 0,
                            zb = 0,
                            Ra = 0,
                            Aa = 0,
                            eb = 0,
                            Ha = 0,
                            la = 0,
                            ra = 0,
                            K = 0,
                            za = void 0,
                            Sa = v.__vertexArray,
                            Ab = v.__uvArray,
                            lb = v.__uv2Array,
                            Na = v.__normalArray,
                            sa = v.__tangentArray,
                            Da = v.__colorArray,
                            Ea = v.__skinIndexArray,
                            Fa = v.__skinWeightArray,
                            Gb = v.__morphTargetsArrays,
                            Bb = v.__morphNormalsArrays,
                            mb = v.__webglCustomAttributesList,
                            C = void 0,
                            Va = v.__faceArray,
                            Ta = v.__lineArray,
                            ea = x.geometry,
                            fb = ea.elementsNeedUpdate,
                            vb = ea.uvsNeedUpdate,
                            Mb = ea.normalsNeedUpdate,
                            Ob = ea.tangentsNeedUpdate,
                            ib = ea.colorsNeedUpdate,
                            sb = ea.morphTargetsNeedUpdate,
                            Cb = ea.vertices,
                            $ = v.faces3,
                            xa = ea.faces,
                            Hb = ea.faceVertexUvs[0],
                            Oa = ea.faceVertexUvs[1],
                            $a = ea.skinIndices,
                            Ga = ea.skinWeights,
                            nb = ea.morphTargets,
                            bb = ea.morphNormals;
                        if (ea.verticesNeedUpdate) {
                            y = 0;
                            for (z = $.length; y < z; y++)
                                (B = xa[$[y]]),
                                    (J = Cb[B.a]),
                                    (L = Cb[B.b]),
                                    (N = Cb[B.c]),
                                    (Sa[Ma] = J.x),
                                    (Sa[Ma + 1] = J.y),
                                    (Sa[Ma + 2] = J.z),
                                    (Sa[Ma + 3] = L.x),
                                    (Sa[Ma + 4] = L.y),
                                    (Sa[Ma + 5] = L.z),
                                    (Sa[Ma + 6] = N.x),
                                    (Sa[Ma + 7] = N.y),
                                    (Sa[Ma + 8] = N.z),
                                    (Ma += 9);
                            m.bindBuffer(m.ARRAY_BUFFER, v.__webglVertexBuffer);
                            m.bufferData(m.ARRAY_BUFFER, Sa, D);
                        }
                        if (sb)
                            for (ca = 0, qa = nb.length; ca < qa; ca++) {
                                y = ra = 0;
                                for (z = $.length; y < z; y++)
                                    (na = $[y]),
                                        (B = xa[na]),
                                        (J = nb[ca].vertices[B.a]),
                                        (L = nb[ca].vertices[B.b]),
                                        (N = nb[ca].vertices[B.c]),
                                        (Ca = Gb[ca]),
                                        (Ca[ra] = J.x),
                                        (Ca[ra + 1] = J.y),
                                        (Ca[ra + 2] = J.z),
                                        (Ca[ra + 3] = L.x),
                                        (Ca[ra + 4] = L.y),
                                        (Ca[ra + 5] = L.z),
                                        (Ca[ra + 6] = N.x),
                                        (Ca[ra + 7] = N.y),
                                        (Ca[ra + 8] = N.z),
                                        E.morphNormals &&
                                            (G ? (Xa = Ya = Qa = bb[ca].faceNormals[na]) : ((wa = bb[ca].vertexNormals[na]), (Qa = wa.a), (Ya = wa.b), (Xa = wa.c)),
                                            (ta = Bb[ca]),
                                            (ta[ra] = Qa.x),
                                            (ta[ra + 1] = Qa.y),
                                            (ta[ra + 2] = Qa.z),
                                            (ta[ra + 3] = Ya.x),
                                            (ta[ra + 4] = Ya.y),
                                            (ta[ra + 5] = Ya.z),
                                            (ta[ra + 6] = Xa.x),
                                            (ta[ra + 7] = Xa.y),
                                            (ta[ra + 8] = Xa.z)),
                                        (ra += 9);
                                m.bindBuffer(m.ARRAY_BUFFER, v.__webglMorphTargetsBuffers[ca]);
                                m.bufferData(m.ARRAY_BUFFER, Gb[ca], D);
                                E.morphNormals && (m.bindBuffer(m.ARRAY_BUFFER, v.__webglMorphNormalsBuffers[ca]), m.bufferData(m.ARRAY_BUFFER, Bb[ca], D));
                            }
                        if (Ga.length) {
                            y = 0;
                            for (z = $.length; y < z; y++)
                                (B = xa[$[y]]),
                                    (Pa = Ga[B.a]),
                                    (ka = Ga[B.b]),
                                    (Q = Ga[B.c]),
                                    (Fa[la] = Pa.x),
                                    (Fa[la + 1] = Pa.y),
                                    (Fa[la + 2] = Pa.z),
                                    (Fa[la + 3] = Pa.w),
                                    (Fa[la + 4] = ka.x),
                                    (Fa[la + 5] = ka.y),
                                    (Fa[la + 6] = ka.z),
                                    (Fa[la + 7] = ka.w),
                                    (Fa[la + 8] = Q.x),
                                    (Fa[la + 9] = Q.y),
                                    (Fa[la + 10] = Q.z),
                                    (Fa[la + 11] = Q.w),
                                    (ha = $a[B.a]),
                                    (ia = $a[B.b]),
                                    (ob = $a[B.c]),
                                    (Ea[la] = ha.x),
                                    (Ea[la + 1] = ha.y),
                                    (Ea[la + 2] = ha.z),
                                    (Ea[la + 3] = ha.w),
                                    (Ea[la + 4] = ia.x),
                                    (Ea[la + 5] = ia.y),
                                    (Ea[la + 6] = ia.z),
                                    (Ea[la + 7] = ia.w),
                                    (Ea[la + 8] = ob.x),
                                    (Ea[la + 9] = ob.y),
                                    (Ea[la + 10] = ob.z),
                                    (Ea[la + 11] = ob.w),
                                    (la += 12);
                            0 < la && (m.bindBuffer(m.ARRAY_BUFFER, v.__webglSkinIndicesBuffer), m.bufferData(m.ARRAY_BUFFER, Ea, D), m.bindBuffer(m.ARRAY_BUFFER, v.__webglSkinWeightsBuffer), m.bufferData(m.ARRAY_BUFFER, Fa, D));
                        }
                        if (ib) {
                            y = 0;
                            for (z = $.length; y < z; y++)
                                (B = xa[$[y]]),
                                    (M = B.vertexColors),
                                    (R = B.color),
                                    3 === M.length && E.vertexColors === THREE.VertexColors ? ((da = M[0]), (ba = M[1]), (ja = M[2])) : (ja = ba = da = R),
                                    (Da[Ha] = da.r),
                                    (Da[Ha + 1] = da.g),
                                    (Da[Ha + 2] = da.b),
                                    (Da[Ha + 3] = ba.r),
                                    (Da[Ha + 4] = ba.g),
                                    (Da[Ha + 5] = ba.b),
                                    (Da[Ha + 6] = ja.r),
                                    (Da[Ha + 7] = ja.g),
                                    (Da[Ha + 8] = ja.b),
                                    (Ha += 9);
                            0 < Ha && (m.bindBuffer(m.ARRAY_BUFFER, v.__webglColorBuffer), m.bufferData(m.ARRAY_BUFFER, Da, D));
                        }
                        if (Ob && ea.hasTangents) {
                            y = 0;
                            for (z = $.length; y < z; y++)
                                (B = xa[$[y]]),
                                    (P = B.vertexTangents),
                                    (Ka = P[0]),
                                    (V = P[1]),
                                    (W = P[2]),
                                    (sa[Aa] = Ka.x),
                                    (sa[Aa + 1] = Ka.y),
                                    (sa[Aa + 2] = Ka.z),
                                    (sa[Aa + 3] = Ka.w),
                                    (sa[Aa + 4] = V.x),
                                    (sa[Aa + 5] = V.y),
                                    (sa[Aa + 6] = V.z),
                                    (sa[Aa + 7] = V.w),
                                    (sa[Aa + 8] = W.x),
                                    (sa[Aa + 9] = W.y),
                                    (sa[Aa + 10] = W.z),
                                    (sa[Aa + 11] = W.w),
                                    (Aa += 12);
                            m.bindBuffer(m.ARRAY_BUFFER, v.__webglTangentBuffer);
                            m.bufferData(m.ARRAY_BUFFER, sa, D);
                        }
                        if (Mb) {
                            y = 0;
                            for (z = $.length; y < z; y++)
                                if (((B = xa[$[y]]), (I = B.vertexNormals), (H = B.normal), 3 === I.length && !1 === G)) for (Y = 0; 3 > Y; Y++) (pa = I[Y]), (Na[Ra] = pa.x), (Na[Ra + 1] = pa.y), (Na[Ra + 2] = pa.z), (Ra += 3);
                                else for (Y = 0; 3 > Y; Y++) (Na[Ra] = H.x), (Na[Ra + 1] = H.y), (Na[Ra + 2] = H.z), (Ra += 3);
                            m.bindBuffer(m.ARRAY_BUFFER, v.__webglNormalBuffer);
                            m.bufferData(m.ARRAY_BUFFER, Na, D);
                        }
                        if (vb && Hb) {
                            y = 0;
                            for (z = $.length; y < z; y++) if (((F = $[y]), (U = Hb[F]), void 0 !== U)) for (Y = 0; 3 > Y; Y++) (ab = U[Y]), (Ab[kb] = ab.x), (Ab[kb + 1] = ab.y), (kb += 2);
                            0 < kb && (m.bindBuffer(m.ARRAY_BUFFER, v.__webglUVBuffer), m.bufferData(m.ARRAY_BUFFER, Ab, D));
                        }
                        if (vb && Oa) {
                            y = 0;
                            for (z = $.length; y < z; y++) if (((F = $[y]), (O = Oa[F]), void 0 !== O)) for (Y = 0; 3 > Y; Y++) (oa = O[Y]), (lb[yb] = oa.x), (lb[yb + 1] = oa.y), (yb += 2);
                            0 < yb && (m.bindBuffer(m.ARRAY_BUFFER, v.__webglUV2Buffer), m.bufferData(m.ARRAY_BUFFER, lb, D));
                        }
                        if (fb) {
                            y = 0;
                            for (z = $.length; y < z; y++)
                                (Va[zb] = La),
                                    (Va[zb + 1] = La + 1),
                                    (Va[zb + 2] = La + 2),
                                    (zb += 3),
                                    (Ta[eb] = La),
                                    (Ta[eb + 1] = La + 1),
                                    (Ta[eb + 2] = La),
                                    (Ta[eb + 3] = La + 2),
                                    (Ta[eb + 4] = La + 1),
                                    (Ta[eb + 5] = La + 2),
                                    (eb += 6),
                                    (La += 3);
                            m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, v.__webglFaceBuffer);
                            m.bufferData(m.ELEMENT_ARRAY_BUFFER, Va, D);
                            m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, v.__webglLineBuffer);
                            m.bufferData(m.ELEMENT_ARRAY_BUFFER, Ta, D);
                        }
                        if (mb)
                            for (Y = 0, ub = mb.length; Y < ub; Y++)
                                if (((C = mb[Y]), C.__original.needsUpdate)) {
                                    K = 0;
                                    if (1 === C.size)
                                        if (void 0 === C.boundTo || "vertices" === C.boundTo)
                                            for (y = 0, z = $.length; y < z; y++) (B = xa[$[y]]), (C.array[K] = C.value[B.a]), (C.array[K + 1] = C.value[B.b]), (C.array[K + 2] = C.value[B.c]), (K += 3);
                                        else {
                                            if ("faces" === C.boundTo) for (y = 0, z = $.length; y < z; y++) (za = C.value[$[y]]), (C.array[K] = za), (C.array[K + 1] = za), (C.array[K + 2] = za), (K += 3);
                                        }
                                    else if (2 === C.size)
                                        if (void 0 === C.boundTo || "vertices" === C.boundTo)
                                            for (y = 0, z = $.length; y < z; y++)
                                                (B = xa[$[y]]),
                                                    (J = C.value[B.a]),
                                                    (L = C.value[B.b]),
                                                    (N = C.value[B.c]),
                                                    (C.array[K] = J.x),
                                                    (C.array[K + 1] = J.y),
                                                    (C.array[K + 2] = L.x),
                                                    (C.array[K + 3] = L.y),
                                                    (C.array[K + 4] = N.x),
                                                    (C.array[K + 5] = N.y),
                                                    (K += 6);
                                        else {
                                            if ("faces" === C.boundTo)
                                                for (y = 0, z = $.length; y < z; y++)
                                                    (N = L = J = za = C.value[$[y]]), (C.array[K] = J.x), (C.array[K + 1] = J.y), (C.array[K + 2] = L.x), (C.array[K + 3] = L.y), (C.array[K + 4] = N.x), (C.array[K + 5] = N.y), (K += 6);
                                        }
                                    else if (3 === C.size) {
                                        var T;
                                        T = "c" === C.type ? ["r", "g", "b"] : ["x", "y", "z"];
                                        if (void 0 === C.boundTo || "vertices" === C.boundTo)
                                            for (y = 0, z = $.length; y < z; y++)
                                                (B = xa[$[y]]),
                                                    (J = C.value[B.a]),
                                                    (L = C.value[B.b]),
                                                    (N = C.value[B.c]),
                                                    (C.array[K] = J[T[0]]),
                                                    (C.array[K + 1] = J[T[1]]),
                                                    (C.array[K + 2] = J[T[2]]),
                                                    (C.array[K + 3] = L[T[0]]),
                                                    (C.array[K + 4] = L[T[1]]),
                                                    (C.array[K + 5] = L[T[2]]),
                                                    (C.array[K + 6] = N[T[0]]),
                                                    (C.array[K + 7] = N[T[1]]),
                                                    (C.array[K + 8] = N[T[2]]),
                                                    (K += 9);
                                        else if ("faces" === C.boundTo)
                                            for (y = 0, z = $.length; y < z; y++)
                                                (N = L = J = za = C.value[$[y]]),
                                                    (C.array[K] = J[T[0]]),
                                                    (C.array[K + 1] = J[T[1]]),
                                                    (C.array[K + 2] = J[T[2]]),
                                                    (C.array[K + 3] = L[T[0]]),
                                                    (C.array[K + 4] = L[T[1]]),
                                                    (C.array[K + 5] = L[T[2]]),
                                                    (C.array[K + 6] = N[T[0]]),
                                                    (C.array[K + 7] = N[T[1]]),
                                                    (C.array[K + 8] = N[T[2]]),
                                                    (K += 9);
                                        else if ("faceVertices" === C.boundTo)
                                            for (y = 0, z = $.length; y < z; y++)
                                                (za = C.value[$[y]]),
                                                    (J = za[0]),
                                                    (L = za[1]),
                                                    (N = za[2]),
                                                    (C.array[K] = J[T[0]]),
                                                    (C.array[K + 1] = J[T[1]]),
                                                    (C.array[K + 2] = J[T[2]]),
                                                    (C.array[K + 3] = L[T[0]]),
                                                    (C.array[K + 4] = L[T[1]]),
                                                    (C.array[K + 5] = L[T[2]]),
                                                    (C.array[K + 6] = N[T[0]]),
                                                    (C.array[K + 7] = N[T[1]]),
                                                    (C.array[K + 8] = N[T[2]]),
                                                    (K += 9);
                                    } else if (4 === C.size)
                                        if (void 0 === C.boundTo || "vertices" === C.boundTo)
                                            for (y = 0, z = $.length; y < z; y++)
                                                (B = xa[$[y]]),
                                                    (J = C.value[B.a]),
                                                    (L = C.value[B.b]),
                                                    (N = C.value[B.c]),
                                                    (C.array[K] = J.x),
                                                    (C.array[K + 1] = J.y),
                                                    (C.array[K + 2] = J.z),
                                                    (C.array[K + 3] = J.w),
                                                    (C.array[K + 4] = L.x),
                                                    (C.array[K + 5] = L.y),
                                                    (C.array[K + 6] = L.z),
                                                    (C.array[K + 7] = L.w),
                                                    (C.array[K + 8] = N.x),
                                                    (C.array[K + 9] = N.y),
                                                    (C.array[K + 10] = N.z),
                                                    (C.array[K + 11] = N.w),
                                                    (K += 12);
                                        else if ("faces" === C.boundTo)
                                            for (y = 0, z = $.length; y < z; y++)
                                                (N = L = J = za = C.value[$[y]]),
                                                    (C.array[K] = J.x),
                                                    (C.array[K + 1] = J.y),
                                                    (C.array[K + 2] = J.z),
                                                    (C.array[K + 3] = J.w),
                                                    (C.array[K + 4] = L.x),
                                                    (C.array[K + 5] = L.y),
                                                    (C.array[K + 6] = L.z),
                                                    (C.array[K + 7] = L.w),
                                                    (C.array[K + 8] = N.x),
                                                    (C.array[K + 9] = N.y),
                                                    (C.array[K + 10] = N.z),
                                                    (C.array[K + 11] = N.w),
                                                    (K += 12);
                                        else if ("faceVertices" === C.boundTo)
                                            for (y = 0, z = $.length; y < z; y++)
                                                (za = C.value[$[y]]),
                                                    (J = za[0]),
                                                    (L = za[1]),
                                                    (N = za[2]),
                                                    (C.array[K] = J.x),
                                                    (C.array[K + 1] = J.y),
                                                    (C.array[K + 2] = J.z),
                                                    (C.array[K + 3] = J.w),
                                                    (C.array[K + 4] = L.x),
                                                    (C.array[K + 5] = L.y),
                                                    (C.array[K + 6] = L.z),
                                                    (C.array[K + 7] = L.w),
                                                    (C.array[K + 8] = N.x),
                                                    (C.array[K + 9] = N.y),
                                                    (C.array[K + 10] = N.z),
                                                    (C.array[K + 11] = N.w),
                                                    (K += 12);
                                    m.bindBuffer(m.ARRAY_BUFFER, C.buffer);
                                    m.bufferData(m.ARRAY_BUFFER, C.array, D);
                                }
                        A &&
                            (delete v.__inittedArrays,
                            delete v.__colorArray,
                            delete v.__normalArray,
                            delete v.__tangentArray,
                            delete v.__uvArray,
                            delete v.__uv2Array,
                            delete v.__faceArray,
                            delete v.__vertexArray,
                            delete v.__lineArray,
                            delete v.__skinIndexArray,
                            delete v.__skinWeightArray);
                    }
                }
            }
            b.verticesNeedUpdate = !1;
            b.morphTargetsNeedUpdate = !1;
            b.elementsNeedUpdate = !1;
            b.uvsNeedUpdate = !1;
            b.normalsNeedUpdate = !1;
            b.colorsNeedUpdate = !1;
            b.tangentsNeedUpdate = !1;
            w.attributes && s(w);
        } else if (a instanceof THREE.Line) {
            w = c(a, b);
            u = w.attributes && r(w);
            if (b.verticesNeedUpdate || b.colorsNeedUpdate || b.lineDistancesNeedUpdate || u) {
                var Db = m.DYNAMIC_DRAW,
                    S,
                    aa,
                    Z,
                    Ba,
                    X,
                    Eb,
                    Rb = b.vertices,
                    Ib = b.colors,
                    gb = b.lineDistances,
                    ya = Rb.length,
                    pb = Ib.length,
                    qb = gb.length,
                    Wa = b.__vertexArray,
                    tb = b.__colorArray,
                    hb = b.__lineDistanceArray,
                    $b = b.colorsNeedUpdate,
                    Fb = b.lineDistancesNeedUpdate,
                    Sb = b.__webglCustomAttributesList,
                    Jb,
                    cb,
                    ua,
                    Kb,
                    Ia,
                    fa;
                if (b.verticesNeedUpdate) {
                    for (S = 0; S < ya; S++) (Ba = Rb[S]), (X = 3 * S), (Wa[X] = Ba.x), (Wa[X + 1] = Ba.y), (Wa[X + 2] = Ba.z);
                    m.bindBuffer(m.ARRAY_BUFFER, b.__webglVertexBuffer);
                    m.bufferData(m.ARRAY_BUFFER, Wa, Db);
                }
                if ($b) {
                    for (aa = 0; aa < pb; aa++) (Eb = Ib[aa]), (X = 3 * aa), (tb[X] = Eb.r), (tb[X + 1] = Eb.g), (tb[X + 2] = Eb.b);
                    m.bindBuffer(m.ARRAY_BUFFER, b.__webglColorBuffer);
                    m.bufferData(m.ARRAY_BUFFER, tb, Db);
                }
                if (Fb) {
                    for (Z = 0; Z < qb; Z++) hb[Z] = gb[Z];
                    m.bindBuffer(m.ARRAY_BUFFER, b.__webglLineDistanceBuffer);
                    m.bufferData(m.ARRAY_BUFFER, hb, Db);
                }
                if (Sb)
                    for (Jb = 0, cb = Sb.length; Jb < cb; Jb++)
                        if (((fa = Sb[Jb]), fa.needsUpdate && (void 0 === fa.boundTo || "vertices" === fa.boundTo))) {
                            X = 0;
                            Kb = fa.value.length;
                            if (1 === fa.size) for (ua = 0; ua < Kb; ua++) fa.array[ua] = fa.value[ua];
                            else if (2 === fa.size) for (ua = 0; ua < Kb; ua++) (Ia = fa.value[ua]), (fa.array[X] = Ia.x), (fa.array[X + 1] = Ia.y), (X += 2);
                            else if (3 === fa.size)
                                if ("c" === fa.type) for (ua = 0; ua < Kb; ua++) (Ia = fa.value[ua]), (fa.array[X] = Ia.r), (fa.array[X + 1] = Ia.g), (fa.array[X + 2] = Ia.b), (X += 3);
                                else for (ua = 0; ua < Kb; ua++) (Ia = fa.value[ua]), (fa.array[X] = Ia.x), (fa.array[X + 1] = Ia.y), (fa.array[X + 2] = Ia.z), (X += 3);
                            else if (4 === fa.size) for (ua = 0; ua < Kb; ua++) (Ia = fa.value[ua]), (fa.array[X] = Ia.x), (fa.array[X + 1] = Ia.y), (fa.array[X + 2] = Ia.z), (fa.array[X + 3] = Ia.w), (X += 4);
                            m.bindBuffer(m.ARRAY_BUFFER, fa.buffer);
                            m.bufferData(m.ARRAY_BUFFER, fa.array, Db);
                            fa.needsUpdate = !1;
                        }
            }
            b.verticesNeedUpdate = !1;
            b.colorsNeedUpdate = !1;
            b.lineDistancesNeedUpdate = !1;
            w.attributes && s(w);
        } else if (a instanceof THREE.PointCloud) {
            w = c(a, b);
            u = w.attributes && r(w);
            if (b.verticesNeedUpdate || b.colorsNeedUpdate || u) {
                var db = m.DYNAMIC_DRAW,
                    Tb,
                    Ub,
                    ac,
                    ma,
                    bc,
                    Nb = b.vertices,
                    Vb = Nb.length,
                    Pb = b.colors,
                    rb = Pb.length,
                    cc = b.__vertexArray,
                    dc = b.__colorArray,
                    wb = b.colorsNeedUpdate,
                    gc = b.__webglCustomAttributesList,
                    ec,
                    jb,
                    va,
                    Lb,
                    Ja,
                    ga;
                if (b.verticesNeedUpdate) {
                    for (Tb = 0; Tb < Vb; Tb++) (ac = Nb[Tb]), (ma = 3 * Tb), (cc[ma] = ac.x), (cc[ma + 1] = ac.y), (cc[ma + 2] = ac.z);
                    m.bindBuffer(m.ARRAY_BUFFER, b.__webglVertexBuffer);
                    m.bufferData(m.ARRAY_BUFFER, cc, db);
                }
                if (wb) {
                    for (Ub = 0; Ub < rb; Ub++) (bc = Pb[Ub]), (ma = 3 * Ub), (dc[ma] = bc.r), (dc[ma + 1] = bc.g), (dc[ma + 2] = bc.b);
                    m.bindBuffer(m.ARRAY_BUFFER, b.__webglColorBuffer);
                    m.bufferData(m.ARRAY_BUFFER, dc, db);
                }
                if (gc)
                    for (ec = 0, jb = gc.length; ec < jb; ec++) {
                        ga = gc[ec];
                        if (ga.needsUpdate && (void 0 === ga.boundTo || "vertices" === ga.boundTo))
                            if (((Lb = ga.value.length), (ma = 0), 1 === ga.size)) for (va = 0; va < Lb; va++) ga.array[va] = ga.value[va];
                            else if (2 === ga.size) for (va = 0; va < Lb; va++) (Ja = ga.value[va]), (ga.array[ma] = Ja.x), (ga.array[ma + 1] = Ja.y), (ma += 2);
                            else if (3 === ga.size)
                                if ("c" === ga.type) for (va = 0; va < Lb; va++) (Ja = ga.value[va]), (ga.array[ma] = Ja.r), (ga.array[ma + 1] = Ja.g), (ga.array[ma + 2] = Ja.b), (ma += 3);
                                else for (va = 0; va < Lb; va++) (Ja = ga.value[va]), (ga.array[ma] = Ja.x), (ga.array[ma + 1] = Ja.y), (ga.array[ma + 2] = Ja.z), (ma += 3);
                            else if (4 === ga.size) for (va = 0; va < Lb; va++) (Ja = ga.value[va]), (ga.array[ma] = Ja.x), (ga.array[ma + 1] = Ja.y), (ga.array[ma + 2] = Ja.z), (ga.array[ma + 3] = Ja.w), (ma += 4);
                        m.bindBuffer(m.ARRAY_BUFFER, ga.buffer);
                        m.bufferData(m.ARRAY_BUFFER, ga.array, db);
                        ga.needsUpdate = !1;
                    }
            }
            b.verticesNeedUpdate = !1;
            b.colorsNeedUpdate = !1;
            w.attributes && s(w);
        }
    }
    function r(a) {
        for (var b in a.attributes) if (a.attributes[b].needsUpdate) return !0;
        return !1;
    }
    function s(a) {
        for (var b in a.attributes) a.attributes[b].needsUpdate = !1;
    }
    function u(a) {
        !0 === a.transparent ? W.setBlending(a.blending, a.blendEquation, a.blendSrc, a.blendDst, a.blendEquationAlpha, a.blendSrcAlpha, a.blendDstAlpha) : W.setBlending(THREE.NoBlending);
        W.setDepthTest(a.depthTest);
        W.setDepthWrite(a.depthWrite);
        W.setColorWrite(a.colorWrite);
        W.setPolygonOffset(a.polygonOffset, a.polygonOffsetFactor, a.polygonOffsetUnits);
    }
    function v(a, b, c, d, e) {
        var f, g, h, k;
        Mb = 0;
        if (d.needsUpdate) {
            d.program && hc(d);
            d.addEventListener("dispose", ic);
            var n = pc[d.type];
            if (n) {
                var l = THREE.ShaderLib[n];
                d.__webglShader = { uniforms: THREE.UniformsUtils.clone(l.uniforms), vertexShader: l.vertexShader, fragmentShader: l.fragmentShader };
            } else d.__webglShader = { uniforms: d.uniforms, vertexShader: d.vertexShader, fragmentShader: d.fragmentShader };
            for (var p = 0, q = 0, r = 0, s = 0, t = 0, w = b.length; t < w; t++) {
                var v = b[t];
                v.onlyShadow || !1 === v.visible || (v instanceof THREE.DirectionalLight && p++, v instanceof THREE.PointLight && q++, v instanceof THREE.SpotLight && r++, v instanceof THREE.HemisphereLight && s++);
            }
            f = p;
            g = q;
            h = r;
            k = s;
            for (var u, z = 0, G = 0, F = b.length; G < F; G++) {
                var J = b[G];
                J.castShadow && (J instanceof THREE.SpotLight && z++, J instanceof THREE.DirectionalLight && !J.shadowCascade && z++);
            }
            u = z;
            var H;
            if (Nb && e && e.skeleton && e.skeleton.useVertexTexture) H = 1024;
            else {
                var N = m.getParameter(m.MAX_VERTEX_UNIFORM_VECTORS),
                    M = Math.floor((N - 20) / 4);
                void 0 !== e &&
                    e instanceof THREE.SkinnedMesh &&
                    ((M = Math.min(e.skeleton.bones.length, M)), M < e.skeleton.bones.length && THREE.warn("WebGLRenderer: too many bones - " + e.skeleton.bones.length + ", this GPU supports just " + M + " (try OpenGL instead of ANGLE)"));
                H = M;
            }
            var P = {
                    precision: L,
                    supportsVertexTextures: Vb,
                    map: !!d.map,
                    envMap: !!d.envMap,
                    envMapMode: d.envMap && d.envMap.mapping,
                    lightMap: !!d.lightMap,
                    bumpMap: !!d.bumpMap,
                    normalMap: !!d.normalMap,
                    specularMap: !!d.specularMap,
                    alphaMap: !!d.alphaMap,
                    combine: d.combine,
                    vertexColors: d.vertexColors,
                    fog: c,
                    useFog: d.fog,
                    fogExp: c instanceof THREE.FogExp2,
                    flatShading: d.shading === THREE.FlatShading,
                    sizeAttenuation: d.sizeAttenuation,
                    logarithmicDepthBuffer: ja,
                    skinning: d.skinning,
                    maxBones: H,
                    useVertexTexture: Nb && e && e.skeleton && e.skeleton.useVertexTexture,
                    morphTargets: d.morphTargets,
                    morphNormals: d.morphNormals,
                    maxMorphTargets: B.maxMorphTargets,
                    maxMorphNormals: B.maxMorphNormals,
                    maxDirLights: f,
                    maxPointLights: g,
                    maxSpotLights: h,
                    maxHemiLights: k,
                    maxShadows: u,
                    shadowMapEnabled: B.shadowMapEnabled && e.receiveShadow && 0 < u,
                    shadowMapType: B.shadowMapType,
                    shadowMapDebug: B.shadowMapDebug,
                    shadowMapCascade: B.shadowMapCascade,
                    alphaTest: d.alphaTest,
                    metal: d.metal,
                    wrapAround: d.wrapAround,
                    doubleSided: d.side === THREE.DoubleSide,
                    flipSided: d.side === THREE.BackSide,
                },
                R = [];
            n ? R.push(n) : (R.push(d.fragmentShader), R.push(d.vertexShader));
            if (void 0 !== d.defines) for (var O in d.defines) R.push(O), R.push(d.defines[O]);
            for (O in P) R.push(O), R.push(P[O]);
            for (var Ka = R.join(), V, W = 0, Qa = Pa.length; W < Qa; W++) {
                var Ya = Pa[W];
                if (Ya.code === Ka) {
                    V = Ya;
                    V.usedTimes++;
                    break;
                }
            }
            void 0 === V && ((V = new THREE.WebGLProgram(B, Ka, d, P)), Pa.push(V), (B.info.memory.programs = Pa.length));
            d.program = V;
            var Xa = V.attributes;
            if (d.morphTargets) {
                d.numSupportedMorphTargets = 0;
                for (var ca, da = "morphTarget", ba = 0; ba < B.maxMorphTargets; ba++) (ca = da + ba), 0 <= Xa[ca] && d.numSupportedMorphTargets++;
            }
            if (d.morphNormals) for (d.numSupportedMorphNormals = 0, da = "morphNormal", ba = 0; ba < B.maxMorphNormals; ba++) (ca = da + ba), 0 <= Xa[ca] && d.numSupportedMorphNormals++;
            d.uniformsList = [];
            for (var ha in d.__webglShader.uniforms) {
                var ta = d.program.uniforms[ha];
                ta && d.uniformsList.push([d.__webglShader.uniforms[ha], ta]);
            }
            d.needsUpdate = !1;
        }
        d.morphTargets && !e.__webglMorphTargetInfluences && (e.__webglMorphTargetInfluences = new Float32Array(B.maxMorphTargets));
        var ab = !1,
            oa = !1,
            qa = !1,
            Ua = d.program,
            ka = Ua.uniforms,
            Q = d.__webglShader.uniforms;
        Ua.id !== ob && (m.useProgram(Ua.program), (ob = Ua.id), (qa = oa = ab = !0));
        d.id !== ub && (-1 === ub && (qa = !0), (ub = d.id), (oa = !0));
        if (ab || a !== vb)
            m.uniformMatrix4fv(ka.projectionMatrix, !1, a.projectionMatrix.elements),
                ja && m.uniform1f(ka.logDepthBufFC, 2 / (Math.log(a.far + 1) / Math.LN2)),
                a !== vb && (vb = a),
                (d instanceof THREE.ShaderMaterial || d instanceof THREE.MeshPhongMaterial || d.envMap) && null !== ka.cameraPosition && (wa.setFromMatrixPosition(a.matrixWorld), m.uniform3f(ka.cameraPosition, wa.x, wa.y, wa.z)),
                (d instanceof THREE.MeshPhongMaterial || d instanceof THREE.MeshLambertMaterial || d instanceof THREE.MeshBasicMaterial || d instanceof THREE.ShaderMaterial || d.skinning) &&
                    null !== ka.viewMatrix &&
                    m.uniformMatrix4fv(ka.viewMatrix, !1, a.matrixWorldInverse.elements);
        if (d.skinning)
            if (
                (e.bindMatrix && null !== ka.bindMatrix && m.uniformMatrix4fv(ka.bindMatrix, !1, e.bindMatrix.elements),
                e.bindMatrixInverse && null !== ka.bindMatrixInverse && m.uniformMatrix4fv(ka.bindMatrixInverse, !1, e.bindMatrixInverse.elements),
                Nb && e.skeleton && e.skeleton.useVertexTexture)
            ) {
                if (null !== ka.boneTexture) {
                    var db = D();
                    m.uniform1i(ka.boneTexture, db);
                    B.setTexture(e.skeleton.boneTexture, db);
                }
                null !== ka.boneTextureWidth && m.uniform1i(ka.boneTextureWidth, e.skeleton.boneTextureWidth);
                null !== ka.boneTextureHeight && m.uniform1i(ka.boneTextureHeight, e.skeleton.boneTextureHeight);
            } else e.skeleton && e.skeleton.boneMatrices && null !== ka.boneGlobalMatrices && m.uniformMatrix4fv(ka.boneGlobalMatrices, !1, e.skeleton.boneMatrices);
        if (oa) {
            c && d.fog && ((Q.fogColor.value = c.color), c instanceof THREE.Fog ? ((Q.fogNear.value = c.near), (Q.fogFar.value = c.far)) : c instanceof THREE.FogExp2 && (Q.fogDensity.value = c.density));
            if (d instanceof THREE.MeshPhongMaterial || d instanceof THREE.MeshLambertMaterial || d.lights) {
                if (Ob) {
                    var qa = !0,
                        ia,
                        Za,
                        Y,
                        bb = 0,
                        cb = 0,
                        ib = 0,
                        xb,
                        pb,
                        qb,
                        Ca,
                        jb,
                        na = jc,
                        rb = na.directional.colors,
                        La = na.directional.positions,
                        Ma = na.point.colors,
                        kb = na.point.positions,
                        yb = na.point.distances,
                        zb = na.point.decays,
                        Ra = na.spot.colors,
                        Aa = na.spot.positions,
                        eb = na.spot.distances,
                        Ha = na.spot.directions,
                        la = na.spot.anglesCos,
                        ra = na.spot.exponents,
                        K = na.spot.decays,
                        za = na.hemi.skyColors,
                        Sa = na.hemi.groundColors,
                        Ab = na.hemi.positions,
                        lb = 0,
                        Na = 0,
                        sa = 0,
                        Da = 0,
                        Ea = 0,
                        Fa = 0,
                        Gb = 0,
                        Bb = 0,
                        mb = 0,
                        C = 0,
                        Va = 0,
                        Ta = 0;
                    ia = 0;
                    for (Za = b.length; ia < Za; ia++)
                        (Y = b[ia]),
                            Y.onlyShadow ||
                                ((xb = Y.color),
                                (Ca = Y.intensity),
                                (jb = Y.distance),
                                Y instanceof THREE.AmbientLight
                                    ? Y.visible && ((bb += xb.r), (cb += xb.g), (ib += xb.b))
                                    : Y instanceof THREE.DirectionalLight
                                    ? ((Ea += 1),
                                      Y.visible &&
                                          (pa.setFromMatrixPosition(Y.matrixWorld),
                                          wa.setFromMatrixPosition(Y.target.matrixWorld),
                                          pa.sub(wa),
                                          pa.normalize(),
                                          (mb = 3 * lb),
                                          (La[mb] = pa.x),
                                          (La[mb + 1] = pa.y),
                                          (La[mb + 2] = pa.z),
                                          y(rb, mb, xb, Ca),
                                          (lb += 1)))
                                    : Y instanceof THREE.PointLight
                                    ? ((Fa += 1),
                                      Y.visible &&
                                          ((C = 3 * Na),
                                          y(Ma, C, xb, Ca),
                                          wa.setFromMatrixPosition(Y.matrixWorld),
                                          (kb[C] = wa.x),
                                          (kb[C + 1] = wa.y),
                                          (kb[C + 2] = wa.z),
                                          (yb[Na] = jb),
                                          (zb[Na] = 0 === Y.distance ? 0 : Y.decay),
                                          (Na += 1)))
                                    : Y instanceof THREE.SpotLight
                                    ? ((Gb += 1),
                                      Y.visible &&
                                          ((Va = 3 * sa),
                                          y(Ra, Va, xb, Ca),
                                          pa.setFromMatrixPosition(Y.matrixWorld),
                                          (Aa[Va] = pa.x),
                                          (Aa[Va + 1] = pa.y),
                                          (Aa[Va + 2] = pa.z),
                                          (eb[sa] = jb),
                                          wa.setFromMatrixPosition(Y.target.matrixWorld),
                                          pa.sub(wa),
                                          pa.normalize(),
                                          (Ha[Va] = pa.x),
                                          (Ha[Va + 1] = pa.y),
                                          (Ha[Va + 2] = pa.z),
                                          (la[sa] = Math.cos(Y.angle)),
                                          (ra[sa] = Y.exponent),
                                          (K[sa] = 0 === Y.distance ? 0 : Y.decay),
                                          (sa += 1)))
                                    : Y instanceof THREE.HemisphereLight &&
                                      ((Bb += 1),
                                      Y.visible &&
                                          (pa.setFromMatrixPosition(Y.matrixWorld),
                                          pa.normalize(),
                                          (Ta = 3 * Da),
                                          (Ab[Ta] = pa.x),
                                          (Ab[Ta + 1] = pa.y),
                                          (Ab[Ta + 2] = pa.z),
                                          (pb = Y.color),
                                          (qb = Y.groundColor),
                                          y(za, Ta, pb, Ca),
                                          y(Sa, Ta, qb, Ca),
                                          (Da += 1))));
                    ia = 3 * lb;
                    for (Za = Math.max(rb.length, 3 * Ea); ia < Za; ia++) rb[ia] = 0;
                    ia = 3 * Na;
                    for (Za = Math.max(Ma.length, 3 * Fa); ia < Za; ia++) Ma[ia] = 0;
                    ia = 3 * sa;
                    for (Za = Math.max(Ra.length, 3 * Gb); ia < Za; ia++) Ra[ia] = 0;
                    ia = 3 * Da;
                    for (Za = Math.max(za.length, 3 * Bb); ia < Za; ia++) za[ia] = 0;
                    ia = 3 * Da;
                    for (Za = Math.max(Sa.length, 3 * Bb); ia < Za; ia++) Sa[ia] = 0;
                    na.directional.length = lb;
                    na.point.length = Na;
                    na.spot.length = sa;
                    na.hemi.length = Da;
                    na.ambient[0] = bb;
                    na.ambient[1] = cb;
                    na.ambient[2] = ib;
                    Ob = !1;
                }
                if (qa) {
                    var ea = jc;
                    Q.ambientLightColor.value = ea.ambient;
                    Q.directionalLightColor.value = ea.directional.colors;
                    Q.directionalLightDirection.value = ea.directional.positions;
                    Q.pointLightColor.value = ea.point.colors;
                    Q.pointLightPosition.value = ea.point.positions;
                    Q.pointLightDistance.value = ea.point.distances;
                    Q.pointLightDecay.value = ea.point.decays;
                    Q.spotLightColor.value = ea.spot.colors;
                    Q.spotLightPosition.value = ea.spot.positions;
                    Q.spotLightDistance.value = ea.spot.distances;
                    Q.spotLightDirection.value = ea.spot.directions;
                    Q.spotLightAngleCos.value = ea.spot.anglesCos;
                    Q.spotLightExponent.value = ea.spot.exponents;
                    Q.spotLightDecay.value = ea.spot.decays;
                    Q.hemisphereLightSkyColor.value = ea.hemi.skyColors;
                    Q.hemisphereLightGroundColor.value = ea.hemi.groundColors;
                    Q.hemisphereLightDirection.value = ea.hemi.positions;
                    x(Q, !0);
                } else x(Q, !1);
            }
            if (d instanceof THREE.MeshBasicMaterial || d instanceof THREE.MeshLambertMaterial || d instanceof THREE.MeshPhongMaterial) {
                Q.opacity.value = d.opacity;
                Q.diffuse.value = d.color;
                Q.map.value = d.map;
                Q.lightMap.value = d.lightMap;
                Q.specularMap.value = d.specularMap;
                Q.alphaMap.value = d.alphaMap;
                d.bumpMap && ((Q.bumpMap.value = d.bumpMap), (Q.bumpScale.value = d.bumpScale));
                d.normalMap && ((Q.normalMap.value = d.normalMap), Q.normalScale.value.copy(d.normalScale));
                var fb;
                d.map ? (fb = d.map) : d.specularMap ? (fb = d.specularMap) : d.normalMap ? (fb = d.normalMap) : d.bumpMap ? (fb = d.bumpMap) : d.alphaMap && (fb = d.alphaMap);
                if (void 0 !== fb) {
                    var wb = fb.offset,
                        Qb = fb.repeat;
                    Q.offsetRepeat.value.set(wb.x, wb.y, Qb.x, Qb.y);
                }
                Q.envMap.value = d.envMap;
                Q.flipEnvMap.value = d.envMap instanceof THREE.WebGLRenderTargetCube ? 1 : -1;
                Q.reflectivity.value = d.reflectivity;
                Q.refractionRatio.value = d.refractionRatio;
            }
            if (d instanceof THREE.LineBasicMaterial) (Q.diffuse.value = d.color), (Q.opacity.value = d.opacity);
            else if (d instanceof THREE.LineDashedMaterial) (Q.diffuse.value = d.color), (Q.opacity.value = d.opacity), (Q.dashSize.value = d.dashSize), (Q.totalSize.value = d.dashSize + d.gapSize), (Q.scale.value = d.scale);
            else if (d instanceof THREE.PointCloudMaterial) {
                if (((Q.psColor.value = d.color), (Q.opacity.value = d.opacity), (Q.size.value = d.size), (Q.scale.value = U.height / 2), (Q.map.value = d.map), null !== d.map)) {
                    var Wb = d.map.offset,
                        Xb = d.map.repeat;
                    Q.offsetRepeat.value.set(Wb.x, Wb.y, Xb.x, Xb.y);
                }
            } else
                d instanceof THREE.MeshPhongMaterial
                    ? ((Q.shininess.value = d.shininess), (Q.emissive.value = d.emissive), (Q.specular.value = d.specular), d.wrapAround && Q.wrapRGB.value.copy(d.wrapRGB))
                    : d instanceof THREE.MeshLambertMaterial
                    ? ((Q.emissive.value = d.emissive), d.wrapAround && Q.wrapRGB.value.copy(d.wrapRGB))
                    : d instanceof THREE.MeshDepthMaterial
                    ? ((Q.mNear.value = a.near), (Q.mFar.value = a.far), (Q.opacity.value = d.opacity))
                    : d instanceof THREE.MeshNormalMaterial && (Q.opacity.value = d.opacity);
            if (e.receiveShadow && !d._shadowPass && Q.shadowMatrix)
                for (var sb = 0, Cb = 0, $ = b.length; Cb < $; Cb++) {
                    var xa = b[Cb];
                    xa.castShadow &&
                        (xa instanceof THREE.SpotLight || (xa instanceof THREE.DirectionalLight && !xa.shadowCascade)) &&
                        ((Q.shadowMap.value[sb] = xa.shadowMap),
                        (Q.shadowMapSize.value[sb] = xa.shadowMapSize),
                        (Q.shadowMatrix.value[sb] = xa.shadowMatrix),
                        (Q.shadowDarkness.value[sb] = xa.shadowDarkness),
                        (Q.shadowBias.value[sb] = xa.shadowBias),
                        sb++);
                }
            for (var Hb = d.uniformsList, Oa, $a, Ga, nb = 0, fc = Hb.length; nb < fc; nb++) {
                var T = Hb[nb][0];
                if (!1 !== T.needsUpdate) {
                    var Db = T.type,
                        S = T.value,
                        aa = Hb[nb][1];
                    switch (Db) {
                        case "1i":
                            m.uniform1i(aa, S);
                            break;
                        case "1f":
                            m.uniform1f(aa, S);
                            break;
                        case "2f":
                            m.uniform2f(aa, S[0], S[1]);
                            break;
                        case "3f":
                            m.uniform3f(aa, S[0], S[1], S[2]);
                            break;
                        case "4f":
                            m.uniform4f(aa, S[0], S[1], S[2], S[3]);
                            break;
                        case "1iv":
                            m.uniform1iv(aa, S);
                            break;
                        case "3iv":
                            m.uniform3iv(aa, S);
                            break;
                        case "1fv":
                            m.uniform1fv(aa, S);
                            break;
                        case "2fv":
                            m.uniform2fv(aa, S);
                            break;
                        case "3fv":
                            m.uniform3fv(aa, S);
                            break;
                        case "4fv":
                            m.uniform4fv(aa, S);
                            break;
                        case "Matrix3fv":
                            m.uniformMatrix3fv(aa, !1, S);
                            break;
                        case "Matrix4fv":
                            m.uniformMatrix4fv(aa, !1, S);
                            break;
                        case "i":
                            m.uniform1i(aa, S);
                            break;
                        case "f":
                            m.uniform1f(aa, S);
                            break;
                        case "v2":
                            m.uniform2f(aa, S.x, S.y);
                            break;
                        case "v3":
                            m.uniform3f(aa, S.x, S.y, S.z);
                            break;
                        case "v4":
                            m.uniform4f(aa, S.x, S.y, S.z, S.w);
                            break;
                        case "c":
                            m.uniform3f(aa, S.r, S.g, S.b);
                            break;
                        case "iv1":
                            m.uniform1iv(aa, S);
                            break;
                        case "iv":
                            m.uniform3iv(aa, S);
                            break;
                        case "fv1":
                            m.uniform1fv(aa, S);
                            break;
                        case "fv":
                            m.uniform3fv(aa, S);
                            break;
                        case "v2v":
                            void 0 === T._array && (T._array = new Float32Array(2 * S.length));
                            for (var Z = 0, Ba = S.length; Z < Ba; Z++) (Ga = 2 * Z), (T._array[Ga] = S[Z].x), (T._array[Ga + 1] = S[Z].y);
                            m.uniform2fv(aa, T._array);
                            break;
                        case "v3v":
                            void 0 === T._array && (T._array = new Float32Array(3 * S.length));
                            Z = 0;
                            for (Ba = S.length; Z < Ba; Z++) (Ga = 3 * Z), (T._array[Ga] = S[Z].x), (T._array[Ga + 1] = S[Z].y), (T._array[Ga + 2] = S[Z].z);
                            m.uniform3fv(aa, T._array);
                            break;
                        case "v4v":
                            void 0 === T._array && (T._array = new Float32Array(4 * S.length));
                            Z = 0;
                            for (Ba = S.length; Z < Ba; Z++) (Ga = 4 * Z), (T._array[Ga] = S[Z].x), (T._array[Ga + 1] = S[Z].y), (T._array[Ga + 2] = S[Z].z), (T._array[Ga + 3] = S[Z].w);
                            m.uniform4fv(aa, T._array);
                            break;
                        case "m3":
                            m.uniformMatrix3fv(aa, !1, S.elements);
                            break;
                        case "m3v":
                            void 0 === T._array && (T._array = new Float32Array(9 * S.length));
                            Z = 0;
                            for (Ba = S.length; Z < Ba; Z++) S[Z].flattenToArrayOffset(T._array, 9 * Z);
                            m.uniformMatrix3fv(aa, !1, T._array);
                            break;
                        case "m4":
                            m.uniformMatrix4fv(aa, !1, S.elements);
                            break;
                        case "m4v":
                            void 0 === T._array && (T._array = new Float32Array(16 * S.length));
                            Z = 0;
                            for (Ba = S.length; Z < Ba; Z++) S[Z].flattenToArrayOffset(T._array, 16 * Z);
                            m.uniformMatrix4fv(aa, !1, T._array);
                            break;
                        case "t":
                            Oa = S;
                            $a = D();
                            m.uniform1i(aa, $a);
                            if (!Oa) continue;
                            if (Oa instanceof THREE.CubeTexture || (Oa.image instanceof Array && 6 === Oa.image.length)) {
                                var X = Oa,
                                    Eb = $a;
                                if (6 === X.image.length)
                                    if (X.needsUpdate) {
                                        X.image.__webglTextureCube || (X.addEventListener("dispose", Pb), (X.image.__webglTextureCube = m.createTexture()), B.info.memory.textures++);
                                        m.activeTexture(m.TEXTURE0 + Eb);
                                        m.bindTexture(m.TEXTURE_CUBE_MAP, X.image.__webglTextureCube);
                                        m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL, X.flipY);
                                        for (var Rb = X instanceof THREE.CompressedTexture, Ib = X.image[0] instanceof THREE.DataTexture, gb = [], ya = 0; 6 > ya; ya++)
                                            gb[ya] = !B.autoScaleCubemaps || Rb || Ib ? (Ib ? X.image[ya].image : X.image[ya]) : E(X.image[ya], qc);
                                        var Yb = gb[0],
                                            Zb = THREE.Math.isPowerOfTwo(Yb.width) && THREE.Math.isPowerOfTwo(Yb.height),
                                            Wa = I(X.format),
                                            tb = I(X.type);
                                        A(m.TEXTURE_CUBE_MAP, X, Zb);
                                        for (ya = 0; 6 > ya; ya++)
                                            if (Rb)
                                                for (var hb, $b = gb[ya].mipmaps, Fb = 0, Sb = $b.length; Fb < Sb; Fb++)
                                                    (hb = $b[Fb]),
                                                        X.format !== THREE.RGBAFormat && X.format !== THREE.RGBFormat
                                                            ? -1 < kc().indexOf(Wa)
                                                                ? m.compressedTexImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X + ya, Fb, Wa, hb.width, hb.height, 0, hb.data)
                                                                : THREE.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()")
                                                            : m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X + ya, Fb, Wa, hb.width, hb.height, 0, Wa, tb, hb.data);
                                            else Ib ? m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X + ya, 0, Wa, gb[ya].width, gb[ya].height, 0, Wa, tb, gb[ya].data) : m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X + ya, 0, Wa, Wa, tb, gb[ya]);
                                        X.generateMipmaps && Zb && m.generateMipmap(m.TEXTURE_CUBE_MAP);
                                        X.needsUpdate = !1;
                                        if (X.onUpdate) X.onUpdate();
                                    } else m.activeTexture(m.TEXTURE0 + Eb), m.bindTexture(m.TEXTURE_CUBE_MAP, X.image.__webglTextureCube);
                            } else if (Oa instanceof THREE.WebGLRenderTargetCube) {
                                var Jb = Oa;
                                m.activeTexture(m.TEXTURE0 + $a);
                                m.bindTexture(m.TEXTURE_CUBE_MAP, Jb.__webglTexture);
                            } else B.setTexture(Oa, $a);
                            break;
                        case "tv":
                            void 0 === T._array && (T._array = []);
                            Z = 0;
                            for (Ba = T.value.length; Z < Ba; Z++) T._array[Z] = D();
                            m.uniform1iv(aa, T._array);
                            Z = 0;
                            for (Ba = T.value.length; Z < Ba; Z++) (Oa = T.value[Z]), ($a = T._array[Z]), Oa && B.setTexture(Oa, $a);
                            break;
                        default:
                            THREE.warn("THREE.WebGLRenderer: Unknown uniform type: " + Db);
                    }
                }
            }
        }
        m.uniformMatrix4fv(ka.modelViewMatrix, !1, e._modelViewMatrix.elements);
        ka.normalMatrix && m.uniformMatrix3fv(ka.normalMatrix, !1, e._normalMatrix.elements);
        null !== ka.modelMatrix && m.uniformMatrix4fv(ka.modelMatrix, !1, e.matrixWorld.elements);
        return Ua;
    }
    function x(a, b) {
        a.ambientLightColor.needsUpdate = b;
        a.directionalLightColor.needsUpdate = b;
        a.directionalLightDirection.needsUpdate = b;
        a.pointLightColor.needsUpdate = b;
        a.pointLightPosition.needsUpdate = b;
        a.pointLightDistance.needsUpdate = b;
        a.pointLightDecay.needsUpdate = b;
        a.spotLightColor.needsUpdate = b;
        a.spotLightPosition.needsUpdate = b;
        a.spotLightDistance.needsUpdate = b;
        a.spotLightDirection.needsUpdate = b;
        a.spotLightAngleCos.needsUpdate = b;
        a.spotLightExponent.needsUpdate = b;
        a.spotLightDecay.needsUpdate = b;
        a.hemisphereLightSkyColor.needsUpdate = b;
        a.hemisphereLightGroundColor.needsUpdate = b;
        a.hemisphereLightDirection.needsUpdate = b;
    }
    function D() {
        var a = Mb;
        a >= Wb && THREE.warn("WebGLRenderer: trying to use " + a + " texture units while this GPU supports only " + Wb);
        Mb += 1;
        return a;
    }
    function w(a, b) {
        a._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse, a.matrixWorld);
        a._normalMatrix.getNormalMatrix(a._modelViewMatrix);
    }
    function y(a, b, c, d) {
        a[b] = c.r * d;
        a[b + 1] = c.g * d;
        a[b + 2] = c.b * d;
    }
    function A(a, b, c) {
        c
            ? (m.texParameteri(a, m.TEXTURE_WRAP_S, I(b.wrapS)), m.texParameteri(a, m.TEXTURE_WRAP_T, I(b.wrapT)), m.texParameteri(a, m.TEXTURE_MAG_FILTER, I(b.magFilter)), m.texParameteri(a, m.TEXTURE_MIN_FILTER, I(b.minFilter)))
            : (m.texParameteri(a, m.TEXTURE_WRAP_S, m.CLAMP_TO_EDGE),
              m.texParameteri(a, m.TEXTURE_WRAP_T, m.CLAMP_TO_EDGE),
              (b.wrapS === THREE.ClampToEdgeWrapping && b.wrapT === THREE.ClampToEdgeWrapping) ||
                  THREE.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping. ( " + b.sourceFile + " )"),
              m.texParameteri(a, m.TEXTURE_MAG_FILTER, z(b.magFilter)),
              m.texParameteri(a, m.TEXTURE_MIN_FILTER, z(b.minFilter)),
              b.minFilter !== THREE.NearestFilter &&
                  b.minFilter !== THREE.LinearFilter &&
                  THREE.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter. ( " + b.sourceFile + " )"));
        (c = da.get("EXT_texture_filter_anisotropic")) &&
            b.type !== THREE.FloatType &&
            b.type !== THREE.HalfFloatType &&
            (1 < b.anisotropy || b.__currentAnisotropy) &&
            (m.texParameterf(a, c.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(b.anisotropy, B.getMaxAnisotropy())), (b.__currentAnisotropy = b.anisotropy));
    }
    function E(a, b) {
        if (a.width > b || a.height > b) {
            var c = b / Math.max(a.width, a.height),
                d = document.createElement("canvas");
            d.width = Math.floor(a.width * c);
            d.height = Math.floor(a.height * c);
            d.getContext("2d").drawImage(a, 0, 0, a.width, a.height, 0, 0, d.width, d.height);
            THREE.warn("THREE.WebGLRenderer: image is too big (" + a.width + "x" + a.height + "). Resized to " + d.width + "x" + d.height, a);
            return d;
        }
        return a;
    }
    function G(a, b) {
        m.bindRenderbuffer(m.RENDERBUFFER, a);
        b.depthBuffer && !b.stencilBuffer
            ? (m.renderbufferStorage(m.RENDERBUFFER, m.DEPTH_COMPONENT16, b.width, b.height), m.framebufferRenderbuffer(m.FRAMEBUFFER, m.DEPTH_ATTACHMENT, m.RENDERBUFFER, a))
            : b.depthBuffer && b.stencilBuffer
            ? (m.renderbufferStorage(m.RENDERBUFFER, m.DEPTH_STENCIL, b.width, b.height), m.framebufferRenderbuffer(m.FRAMEBUFFER, m.DEPTH_STENCIL_ATTACHMENT, m.RENDERBUFFER, a))
            : m.renderbufferStorage(m.RENDERBUFFER, m.RGBA4, b.width, b.height);
    }
    function F(a) {
        a instanceof THREE.WebGLRenderTargetCube
            ? (m.bindTexture(m.TEXTURE_CUBE_MAP, a.__webglTexture), m.generateMipmap(m.TEXTURE_CUBE_MAP), m.bindTexture(m.TEXTURE_CUBE_MAP, null))
            : (m.bindTexture(m.TEXTURE_2D, a.__webglTexture), m.generateMipmap(m.TEXTURE_2D), m.bindTexture(m.TEXTURE_2D, null));
    }
    function z(a) {
        return a === THREE.NearestFilter || a === THREE.NearestMipMapNearestFilter || a === THREE.NearestMipMapLinearFilter ? m.NEAREST : m.LINEAR;
    }
    function I(a) {
        var b;
        if (a === THREE.RepeatWrapping) return m.REPEAT;
        if (a === THREE.ClampToEdgeWrapping) return m.CLAMP_TO_EDGE;
        if (a === THREE.MirroredRepeatWrapping) return m.MIRRORED_REPEAT;
        if (a === THREE.NearestFilter) return m.NEAREST;
        if (a === THREE.NearestMipMapNearestFilter) return m.NEAREST_MIPMAP_NEAREST;
        if (a === THREE.NearestMipMapLinearFilter) return m.NEAREST_MIPMAP_LINEAR;
        if (a === THREE.LinearFilter) return m.LINEAR;
        if (a === THREE.LinearMipMapNearestFilter) return m.LINEAR_MIPMAP_NEAREST;
        if (a === THREE.LinearMipMapLinearFilter) return m.LINEAR_MIPMAP_LINEAR;
        if (a === THREE.UnsignedByteType) return m.UNSIGNED_BYTE;
        if (a === THREE.UnsignedShort4444Type) return m.UNSIGNED_SHORT_4_4_4_4;
        if (a === THREE.UnsignedShort5551Type) return m.UNSIGNED_SHORT_5_5_5_1;
        if (a === THREE.UnsignedShort565Type) return m.UNSIGNED_SHORT_5_6_5;
        if (a === THREE.ByteType) return m.BYTE;
        if (a === THREE.ShortType) return m.SHORT;
        if (a === THREE.UnsignedShortType) return m.UNSIGNED_SHORT;
        if (a === THREE.IntType) return m.INT;
        if (a === THREE.UnsignedIntType) return m.UNSIGNED_INT;
        if (a === THREE.FloatType) return m.FLOAT;
        b = da.get("OES_texture_half_float");
        if (null !== b && a === THREE.HalfFloatType) return b.HALF_FLOAT_OES;
        if (a === THREE.AlphaFormat) return m.ALPHA;
        if (a === THREE.RGBFormat) return m.RGB;
        if (a === THREE.RGBAFormat) return m.RGBA;
        if (a === THREE.LuminanceFormat) return m.LUMINANCE;
        if (a === THREE.LuminanceAlphaFormat) return m.LUMINANCE_ALPHA;
        if (a === THREE.AddEquation) return m.FUNC_ADD;
        if (a === THREE.SubtractEquation) return m.FUNC_SUBTRACT;
        if (a === THREE.ReverseSubtractEquation) return m.FUNC_REVERSE_SUBTRACT;
        if (a === THREE.ZeroFactor) return m.ZERO;
        if (a === THREE.OneFactor) return m.ONE;
        if (a === THREE.SrcColorFactor) return m.SRC_COLOR;
        if (a === THREE.OneMinusSrcColorFactor) return m.ONE_MINUS_SRC_COLOR;
        if (a === THREE.SrcAlphaFactor) return m.SRC_ALPHA;
        if (a === THREE.OneMinusSrcAlphaFactor) return m.ONE_MINUS_SRC_ALPHA;
        if (a === THREE.DstAlphaFactor) return m.DST_ALPHA;
        if (a === THREE.OneMinusDstAlphaFactor) return m.ONE_MINUS_DST_ALPHA;
        if (a === THREE.DstColorFactor) return m.DST_COLOR;
        if (a === THREE.OneMinusDstColorFactor) return m.ONE_MINUS_DST_COLOR;
        if (a === THREE.SrcAlphaSaturateFactor) return m.SRC_ALPHA_SATURATE;
        b = da.get("WEBGL_compressed_texture_s3tc");
        if (null !== b) {
            if (a === THREE.RGB_S3TC_DXT1_Format) return b.COMPRESSED_RGB_S3TC_DXT1_EXT;
            if (a === THREE.RGBA_S3TC_DXT1_Format) return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;
            if (a === THREE.RGBA_S3TC_DXT3_Format) return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;
            if (a === THREE.RGBA_S3TC_DXT5_Format) return b.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        }
        b = da.get("WEBGL_compressed_texture_pvrtc");
        if (null !== b) {
            if (a === THREE.RGB_PVRTC_4BPPV1_Format) return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
            if (a === THREE.RGB_PVRTC_2BPPV1_Format) return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
            if (a === THREE.RGBA_PVRTC_4BPPV1_Format) return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
            if (a === THREE.RGBA_PVRTC_2BPPV1_Format) return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        }
        b = da.get("EXT_blend_minmax");
        if (null !== b) {
            if (a === THREE.MinEquation) return b.MIN_EXT;
            if (a === THREE.MaxEquation) return b.MAX_EXT;
        }
        return 0;
    }
    console.log("THREE.WebGLRenderer", THREE.REVISION);
    a = a || {};
    var U = void 0 !== a.canvas ? a.canvas : document.createElement("canvas"),
        M = void 0 !== a.context ? a.context : null,
        H = 1,
        L = void 0 !== a.precision ? a.precision : "highp",
        P = void 0 !== a.alpha ? a.alpha : !1,
        N = void 0 !== a.depth ? a.depth : !0,
        R = void 0 !== a.stencil ? a.stencil : !0,
        V = void 0 !== a.antialias ? a.antialias : !1,
        J = void 0 !== a.premultipliedAlpha ? a.premultipliedAlpha : !0,
        oa = void 0 !== a.preserveDrawingBuffer ? a.preserveDrawingBuffer : !1,
        ja = void 0 !== a.logarithmicDepthBuffer ? a.logarithmicDepthBuffer : !1,
        ha = new THREE.Color(0),
        O = 0,
        ca = [],
        ba = {},
        qa = [],
        Ka = [],
        Qa = [],
        Xa = [],
        Ya = [];
    this.domElement = U;
    this.context = null;
    this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0;
    this.gammaFactor = 2;
    this.shadowMapEnabled = this.gammaOutput = this.gammaInput = !1;
    this.shadowMapType = THREE.PCFShadowMap;
    this.shadowMapCullFace = THREE.CullFaceFront;
    this.shadowMapCascade = this.shadowMapDebug = !1;
    this.maxMorphTargets = 8;
    this.maxMorphNormals = 4;
    this.autoScaleCubemaps = !0;
    this.info = { memory: { programs: 0, geometries: 0, textures: 0 }, render: { calls: 0, vertices: 0, faces: 0, points: 0 } };
    var B = this,
        Pa = [],
        ob = null,
        ab = null,
        ub = -1,
        ta = "",
        vb = null,
        Mb = 0,
        ib = 0,
        bb = 0,
        pb = U.width,
        qb = U.height,
        Xb = 0,
        fc = 0,
        cb = new THREE.Frustum(),
        db = new THREE.Matrix4(),
        wa = new THREE.Vector3(),
        pa = new THREE.Vector3(),
        Ob = !0,
        jc = {
            ambient: [0, 0, 0],
            directional: { length: 0, colors: [], positions: [] },
            point: { length: 0, colors: [], positions: [], distances: [], decays: [] },
            spot: { length: 0, colors: [], positions: [], distances: [], directions: [], anglesCos: [], exponents: [], decays: [] },
            hemi: { length: 0, skyColors: [], groundColors: [], positions: [] },
        },
        m;
    try {
        var Yb = { alpha: P, depth: N, stencil: R, antialias: V, premultipliedAlpha: J, preserveDrawingBuffer: oa };
        m = M || U.getContext("webgl", Yb) || U.getContext("experimental-webgl", Yb);
        if (null === m) {
            if (null !== U.getContext("webgl")) throw "Error creating WebGL context with your selected attributes.";
            throw "Error creating WebGL context.";
        }
        U.addEventListener(
            "webglcontextlost",
            function (a) {
                a.preventDefault();
                Zb();
                lc();
                ba = {};
            },
            !1
        );
    } catch (rc) {
        THREE.error("THREE.WebGLRenderer: " + rc);
    }
    var W = new THREE.WebGLState(m, I);
    void 0 === m.getShaderPrecisionFormat &&
        (m.getShaderPrecisionFormat = function () {
            return { rangeMin: 1, rangeMax: 1, precision: 1 };
        });
    var da = new THREE.WebGLExtensions(m);
    da.get("OES_texture_float");
    da.get("OES_texture_float_linear");
    da.get("OES_texture_half_float");
    da.get("OES_texture_half_float_linear");
    da.get("OES_standard_derivatives");
    ja && da.get("EXT_frag_depth");
    var rb = function (a, b, c, d) {
            !0 === J && ((a *= d), (b *= d), (c *= d));
            m.clearColor(a, b, c, d);
        },
        lc = function () {
            m.clearColor(0, 0, 0, 1);
            m.clearDepth(1);
            m.clearStencil(0);
            m.enable(m.DEPTH_TEST);
            m.depthFunc(m.LEQUAL);
            m.frontFace(m.CCW);
            m.cullFace(m.BACK);
            m.enable(m.CULL_FACE);
            m.enable(m.BLEND);
            m.blendEquation(m.FUNC_ADD);
            m.blendFunc(m.SRC_ALPHA, m.ONE_MINUS_SRC_ALPHA);
            m.viewport(ib, bb, pb, qb);
            rb(ha.r, ha.g, ha.b, O);
        },
        Zb = function () {
            vb = ob = null;
            ta = "";
            ub = -1;
            Ob = !0;
            W.reset();
        };
    lc();
    this.context = m;
    this.state = W;
    var Wb = m.getParameter(m.MAX_TEXTURE_IMAGE_UNITS),
        sc = m.getParameter(m.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
        tc = m.getParameter(m.MAX_TEXTURE_SIZE),
        qc = m.getParameter(m.MAX_CUBE_MAP_TEXTURE_SIZE),
        Vb = 0 < sc,
        Nb = Vb && da.get("OES_texture_float"),
        uc = m.getShaderPrecisionFormat(m.VERTEX_SHADER, m.HIGH_FLOAT),
        vc = m.getShaderPrecisionFormat(m.VERTEX_SHADER, m.MEDIUM_FLOAT),
        wc = m.getShaderPrecisionFormat(m.FRAGMENT_SHADER, m.HIGH_FLOAT),
        xc = m.getShaderPrecisionFormat(m.FRAGMENT_SHADER, m.MEDIUM_FLOAT),
        kc = (function () {
            var a;
            return function () {
                if (void 0 !== a) return a;
                a = [];
                if (da.get("WEBGL_compressed_texture_pvrtc") || da.get("WEBGL_compressed_texture_s3tc")) for (var b = m.getParameter(m.COMPRESSED_TEXTURE_FORMATS), c = 0; c < b.length; c++) a.push(b[c]);
                return a;
            };
        })(),
        yc = 0 < uc.precision && 0 < wc.precision,
        mc = 0 < vc.precision && 0 < xc.precision;
    "highp" !== L || yc || (mc ? ((L = "mediump"), THREE.warn("THREE.WebGLRenderer: highp not supported, using mediump.")) : ((L = "lowp"), THREE.warn("THREE.WebGLRenderer: highp and mediump not supported, using lowp.")));
    "mediump" !== L || mc || ((L = "lowp"), THREE.warn("THREE.WebGLRenderer: mediump not supported, using lowp."));
    var zc = new THREE.ShadowMapPlugin(this, ca, ba, qa),
        Ac = new THREE.SpritePlugin(this, Xa),
        Bc = new THREE.LensFlarePlugin(this, Ya);
    this.getContext = function () {
        return m;
    };
    this.forceContextLoss = function () {
        da.get("WEBGL_lose_context").loseContext();
    };
    this.supportsVertexTextures = function () {
        return Vb;
    };
    this.supportsFloatTextures = function () {
        return da.get("OES_texture_float");
    };
    this.supportsHalfFloatTextures = function () {
        return da.get("OES_texture_half_float");
    };
    this.supportsStandardDerivatives = function () {
        return da.get("OES_standard_derivatives");
    };
    this.supportsCompressedTextureS3TC = function () {
        return da.get("WEBGL_compressed_texture_s3tc");
    };
    this.supportsCompressedTexturePVRTC = function () {
        return da.get("WEBGL_compressed_texture_pvrtc");
    };
    this.supportsBlendMinMax = function () {
        return da.get("EXT_blend_minmax");
    };
    this.getMaxAnisotropy = (function () {
        var a;
        return function () {
            if (void 0 !== a) return a;
            var b = da.get("EXT_texture_filter_anisotropic");
            return (a = null !== b ? m.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0);
        };
    })();
    this.getPrecision = function () {
        return L;
    };
    this.getPixelRatio = function () {
        return H;
    };
    this.setPixelRatio = function (a) {
        H = a;
    };
    this.setSize = function (a, b, c) {
        U.width = a * H;
        U.height = b * H;
        !1 !== c && ((U.style.width = a + "px"), (U.style.height = b + "px"));
        this.setViewport(0, 0, a, b);
    };
    this.setViewport = function (a, b, c, d) {
        ib = a * H;
        bb = b * H;
        pb = c * H;
        qb = d * H;
        m.viewport(ib, bb, pb, qb);
    };
    this.setScissor = function (a, b, c, d) {
        m.scissor(a * H, b * H, c * H, d * H);
    };
    this.enableScissorTest = function (a) {
        a ? m.enable(m.SCISSOR_TEST) : m.disable(m.SCISSOR_TEST);
    };
    this.getClearColor = function () {
        return ha;
    };
    this.setClearColor = function (a, b) {
        ha.set(a);
        O = void 0 !== b ? b : 1;
        rb(ha.r, ha.g, ha.b, O);
    };
    this.getClearAlpha = function () {
        return O;
    };
    this.setClearAlpha = function (a) {
        O = a;
        rb(ha.r, ha.g, ha.b, O);
    };
    this.clear = function (a, b, c) {
        var d = 0;
        if (void 0 === a || a) d |= m.COLOR_BUFFER_BIT;
        if (void 0 === b || b) d |= m.DEPTH_BUFFER_BIT;
        if (void 0 === c || c) d |= m.STENCIL_BUFFER_BIT;
        m.clear(d);
    };
    this.clearColor = function () {
        m.clear(m.COLOR_BUFFER_BIT);
    };
    this.clearDepth = function () {
        m.clear(m.DEPTH_BUFFER_BIT);
    };
    this.clearStencil = function () {
        m.clear(m.STENCIL_BUFFER_BIT);
    };
    this.clearTarget = function (a, b, c, d) {
        this.setRenderTarget(a);
        this.clear(b, c, d);
    };
    this.resetGLState = Zb;
    var wb = function (a) {
            a.target.traverse(function (a) {
                a.removeEventListener("remove", wb);
                if (a instanceof THREE.Mesh || a instanceof THREE.PointCloud || a instanceof THREE.Line) delete ba[a.id];
                else if (a instanceof THREE.ImmediateRenderObject || a.immediateRenderCallback) for (var b = qa, c = b.length - 1; 0 <= c; c--) b[c].object === a && b.splice(c, 1);
                delete a.__webglInit;
                delete a._modelViewMatrix;
                delete a._normalMatrix;
                delete a.__webglActive;
            });
        },
        jb = function (a) {
            a = a.target;
            a.removeEventListener("dispose", jb);
            delete a.__webglInit;
            if (a instanceof THREE.BufferGeometry) {
                for (var b in a.attributes) {
                    var c = a.attributes[b];
                    void 0 !== c.buffer && (m.deleteBuffer(c.buffer), delete c.buffer);
                }
                B.info.memory.geometries--;
            } else if (((b = Ua[a.id]), void 0 !== b)) {
                for (var c = 0, d = b.length; c < d; c++) {
                    var e = b[c];
                    if (void 0 !== e.numMorphTargets) {
                        for (var f = 0, g = e.numMorphTargets; f < g; f++) m.deleteBuffer(e.__webglMorphTargetsBuffers[f]);
                        delete e.__webglMorphTargetsBuffers;
                    }
                    if (void 0 !== e.numMorphNormals) {
                        f = 0;
                        for (g = e.numMorphNormals; f < g; f++) m.deleteBuffer(e.__webglMorphNormalsBuffers[f]);
                        delete e.__webglMorphNormalsBuffers;
                    }
                    nc(e);
                }
                delete Ua[a.id];
            } else nc(a);
            ta = "";
        },
        Pb = function (a) {
            a = a.target;
            a.removeEventListener("dispose", Pb);
            a.image && a.image.__webglTextureCube
                ? (m.deleteTexture(a.image.__webglTextureCube), delete a.image.__webglTextureCube)
                : void 0 !== a.__webglInit && (m.deleteTexture(a.__webglTexture), delete a.__webglTexture, delete a.__webglInit);
            B.info.memory.textures--;
        },
        oc = function (a) {
            a = a.target;
            a.removeEventListener("dispose", oc);
            if (a && void 0 !== a.__webglTexture) {
                m.deleteTexture(a.__webglTexture);
                delete a.__webglTexture;
                if (a instanceof THREE.WebGLRenderTargetCube) for (var b = 0; 6 > b; b++) m.deleteFramebuffer(a.__webglFramebuffer[b]), m.deleteRenderbuffer(a.__webglRenderbuffer[b]);
                else m.deleteFramebuffer(a.__webglFramebuffer), m.deleteRenderbuffer(a.__webglRenderbuffer);
                delete a.__webglFramebuffer;
                delete a.__webglRenderbuffer;
            }
            B.info.memory.textures--;
        },
        ic = function (a) {
            a = a.target;
            a.removeEventListener("dispose", ic);
            hc(a);
        },
        nc = function (a) {
            for (
                var b = "__webglVertexBuffer __webglNormalBuffer __webglTangentBuffer __webglColorBuffer __webglUVBuffer __webglUV2Buffer __webglSkinIndicesBuffer __webglSkinWeightsBuffer __webglFaceBuffer __webglLineBuffer __webglLineDistanceBuffer".split(
                        " "
                    ),
                    c = 0,
                    d = b.length;
                c < d;
                c++
            ) {
                var e = b[c];
                void 0 !== a[e] && (m.deleteBuffer(a[e]), delete a[e]);
            }
            if (void 0 !== a.__webglCustomAttributesList) {
                for (e in a.__webglCustomAttributesList) m.deleteBuffer(a.__webglCustomAttributesList[e].buffer);
                delete a.__webglCustomAttributesList;
            }
            B.info.memory.geometries--;
        },
        hc = function (a) {
            var b = a.program.program;
            if (void 0 !== b) {
                a.program = void 0;
                var c,
                    d,
                    e = !1;
                a = 0;
                for (c = Pa.length; a < c; a++)
                    if (((d = Pa[a]), d.program === b)) {
                        d.usedTimes--;
                        0 === d.usedTimes && (e = !0);
                        break;
                    }
                if (!0 === e) {
                    e = [];
                    a = 0;
                    for (c = Pa.length; a < c; a++) (d = Pa[a]), d.program !== b && e.push(d);
                    Pa = e;
                    m.deleteProgram(b);
                    B.info.memory.programs--;
                }
            }
        };
    this.renderBufferImmediate = function (a, b, c) {
        W.initAttributes();
        a.hasPositions && !a.__webglVertexBuffer && (a.__webglVertexBuffer = m.createBuffer());
        a.hasNormals && !a.__webglNormalBuffer && (a.__webglNormalBuffer = m.createBuffer());
        a.hasUvs && !a.__webglUvBuffer && (a.__webglUvBuffer = m.createBuffer());
        a.hasColors && !a.__webglColorBuffer && (a.__webglColorBuffer = m.createBuffer());
        a.hasPositions &&
            (m.bindBuffer(m.ARRAY_BUFFER, a.__webglVertexBuffer), m.bufferData(m.ARRAY_BUFFER, a.positionArray, m.DYNAMIC_DRAW), W.enableAttribute(b.attributes.position), m.vertexAttribPointer(b.attributes.position, 3, m.FLOAT, !1, 0, 0));
        if (a.hasNormals) {
            m.bindBuffer(m.ARRAY_BUFFER, a.__webglNormalBuffer);
            if (!1 === c instanceof THREE.MeshPhongMaterial && c.shading === THREE.FlatShading) {
                var d,
                    e,
                    f,
                    g,
                    h,
                    k,
                    n,
                    l,
                    p,
                    q,
                    r,
                    s = 3 * a.count;
                for (r = 0; r < s; r += 9)
                    (q = a.normalArray),
                        (d = q[r]),
                        (e = q[r + 1]),
                        (f = q[r + 2]),
                        (g = q[r + 3]),
                        (k = q[r + 4]),
                        (l = q[r + 5]),
                        (h = q[r + 6]),
                        (n = q[r + 7]),
                        (p = q[r + 8]),
                        (d = (d + g + h) / 3),
                        (e = (e + k + n) / 3),
                        (f = (f + l + p) / 3),
                        (q[r] = d),
                        (q[r + 1] = e),
                        (q[r + 2] = f),
                        (q[r + 3] = d),
                        (q[r + 4] = e),
                        (q[r + 5] = f),
                        (q[r + 6] = d),
                        (q[r + 7] = e),
                        (q[r + 8] = f);
            }
            m.bufferData(m.ARRAY_BUFFER, a.normalArray, m.DYNAMIC_DRAW);
            W.enableAttribute(b.attributes.normal);
            m.vertexAttribPointer(b.attributes.normal, 3, m.FLOAT, !1, 0, 0);
        }
        a.hasUvs && c.map && (m.bindBuffer(m.ARRAY_BUFFER, a.__webglUvBuffer), m.bufferData(m.ARRAY_BUFFER, a.uvArray, m.DYNAMIC_DRAW), W.enableAttribute(b.attributes.uv), m.vertexAttribPointer(b.attributes.uv, 2, m.FLOAT, !1, 0, 0));
        a.hasColors &&
            c.vertexColors !== THREE.NoColors &&
            (m.bindBuffer(m.ARRAY_BUFFER, a.__webglColorBuffer), m.bufferData(m.ARRAY_BUFFER, a.colorArray, m.DYNAMIC_DRAW), W.enableAttribute(b.attributes.color), m.vertexAttribPointer(b.attributes.color, 3, m.FLOAT, !1, 0, 0));
        W.disableUnusedAttributes();
        m.drawArrays(m.TRIANGLES, 0, a.count);
        a.count = 0;
    };
    this.renderBufferDirect = function (a, b, c, e, f, g) {
        if (!1 !== e.visible)
            if ((t(g), (a = v(a, b, c, e, g)), (b = !1), (c = "direct_" + f.id + "_" + a.id + "_" + (e.wireframe ? 1 : 0)), c !== ta && ((ta = c), (b = !0)), b && W.initAttributes(), g instanceof THREE.Mesh)) {
                g = !0 === e.wireframe ? m.LINES : m.TRIANGLES;
                var h = f.attributes.index;
                if (h) {
                    var k, n;
                    h.array instanceof Uint32Array && da.get("OES_element_index_uint") ? ((k = m.UNSIGNED_INT), (n = 4)) : ((k = m.UNSIGNED_SHORT), (n = 2));
                    c = f.offsets;
                    if (0 === c.length)
                        b && (d(e, a, f, 0), m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, h.buffer)),
                            m.drawElements(g, h.array.length, k, 0),
                            B.info.render.calls++,
                            (B.info.render.vertices += h.array.length),
                            (B.info.render.faces += h.array.length / 3);
                    else {
                        b = !0;
                        for (var l = 0, p = c.length; l < p; l++) {
                            var q = c[l].index;
                            b && (d(e, a, f, q), m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, h.buffer));
                            m.drawElements(g, c[l].count, k, c[l].start * n);
                            B.info.render.calls++;
                            B.info.render.vertices += c[l].count;
                            B.info.render.faces += c[l].count / 3;
                        }
                    }
                } else
                    b && d(e, a, f, 0),
                        (e = f.attributes.position),
                        m.drawArrays(g, 0, e.array.length / e.itemSize),
                        B.info.render.calls++,
                        (B.info.render.vertices += e.array.length / e.itemSize),
                        (B.info.render.faces += e.array.length / (3 * e.itemSize));
            } else if (g instanceof THREE.PointCloud)
                if (((g = m.POINTS), (h = f.attributes.index)))
                    if ((h.array instanceof Uint32Array && da.get("OES_element_index_uint") ? ((k = m.UNSIGNED_INT), (n = 4)) : ((k = m.UNSIGNED_SHORT), (n = 2)), (c = f.offsets), 0 === c.length))
                        b && (d(e, a, f, 0), m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, h.buffer)), m.drawElements(g, h.array.length, k, 0), B.info.render.calls++, (B.info.render.points += h.array.length);
                    else
                        for (1 < c.length && (b = !0), l = 0, p = c.length; l < p; l++)
                            (q = c[l].index), b && (d(e, a, f, q), m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, h.buffer)), m.drawElements(g, c[l].count, k, c[l].start * n), B.info.render.calls++, (B.info.render.points += c[l].count);
                else if ((b && d(e, a, f, 0), (e = f.attributes.position), (c = f.offsets), 0 === c.length)) m.drawArrays(g, 0, e.array.length / 3), B.info.render.calls++, (B.info.render.points += e.array.length / 3);
                else for (l = 0, p = c.length; l < p; l++) m.drawArrays(g, c[l].index, c[l].count), B.info.render.calls++, (B.info.render.points += c[l].count);
            else if (g instanceof THREE.Line)
                if (((g = g.mode === THREE.LineStrip ? m.LINE_STRIP : m.LINES), W.setLineWidth(e.linewidth * H), (h = f.attributes.index)))
                    if ((h.array instanceof Uint32Array ? ((k = m.UNSIGNED_INT), (n = 4)) : ((k = m.UNSIGNED_SHORT), (n = 2)), (c = f.offsets), 0 === c.length))
                        b && (d(e, a, f, 0), m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, h.buffer)), m.drawElements(g, h.array.length, k, 0), B.info.render.calls++, (B.info.render.vertices += h.array.length);
                    else
                        for (1 < c.length && (b = !0), l = 0, p = c.length; l < p; l++)
                            (q = c[l].index), b && (d(e, a, f, q), m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, h.buffer)), m.drawElements(g, c[l].count, k, c[l].start * n), B.info.render.calls++, (B.info.render.vertices += c[l].count);
                else if ((b && d(e, a, f, 0), (e = f.attributes.position), (c = f.offsets), 0 === c.length)) m.drawArrays(g, 0, e.array.length / 3), B.info.render.calls++, (B.info.render.vertices += e.array.length / 3);
                else for (l = 0, p = c.length; l < p; l++) m.drawArrays(g, c[l].index, c[l].count), B.info.render.calls++, (B.info.render.vertices += c[l].count);
    };
    this.renderBuffer = function (a, b, c, d, e, f) {
        if (!1 !== d.visible) {
            t(f);
            c = v(a, b, c, d, f);
            b = c.attributes;
            a = !1;
            c = e.id + "_" + c.id + "_" + (d.wireframe ? 1 : 0);
            c !== ta && ((ta = c), (a = !0));
            a && W.initAttributes();
            if (!d.morphTargets && 0 <= b.position) a && (m.bindBuffer(m.ARRAY_BUFFER, e.__webglVertexBuffer), W.enableAttribute(b.position), m.vertexAttribPointer(b.position, 3, m.FLOAT, !1, 0, 0));
            else if (f.morphTargetBase) {
                c = d.program.attributes;
                -1 !== f.morphTargetBase && 0 <= c.position
                    ? (m.bindBuffer(m.ARRAY_BUFFER, e.__webglMorphTargetsBuffers[f.morphTargetBase]), W.enableAttribute(c.position), m.vertexAttribPointer(c.position, 3, m.FLOAT, !1, 0, 0))
                    : 0 <= c.position && (m.bindBuffer(m.ARRAY_BUFFER, e.__webglVertexBuffer), W.enableAttribute(c.position), m.vertexAttribPointer(c.position, 3, m.FLOAT, !1, 0, 0));
                if (f.morphTargetForcedOrder.length)
                    for (var h = 0, k = f.morphTargetForcedOrder, n = f.morphTargetInfluences, l; h < d.numSupportedMorphTargets && h < k.length; )
                        (l = c["morphTarget" + h]),
                            0 <= l && (m.bindBuffer(m.ARRAY_BUFFER, e.__webglMorphTargetsBuffers[k[h]]), W.enableAttribute(l), m.vertexAttribPointer(l, 3, m.FLOAT, !1, 0, 0)),
                            (l = c["morphNormal" + h]),
                            0 <= l && d.morphNormals && (m.bindBuffer(m.ARRAY_BUFFER, e.__webglMorphNormalsBuffers[k[h]]), W.enableAttribute(l), m.vertexAttribPointer(l, 3, m.FLOAT, !1, 0, 0)),
                            (f.__webglMorphTargetInfluences[h] = n[k[h]]),
                            h++;
                else {
                    k = [];
                    n = f.morphTargetInfluences;
                    h = f.geometry.morphTargets;
                    n.length > h.length && (console.warn("THREE.WebGLRenderer: Influences array is bigger than morphTargets array."), (n.length = h.length));
                    h = 0;
                    for (l = n.length; h < l; h++) k.push([n[h], h]);
                    k.length > d.numSupportedMorphTargets ? (k.sort(g), (k.length = d.numSupportedMorphTargets)) : k.length > d.numSupportedMorphNormals ? k.sort(g) : 0 === k.length && k.push([0, 0]);
                    for (var h = 0, p = d.numSupportedMorphTargets; h < p; h++)
                        if (k[h]) {
                            var q = k[h][1];
                            l = c["morphTarget" + h];
                            0 <= l && (m.bindBuffer(m.ARRAY_BUFFER, e.__webglMorphTargetsBuffers[q]), W.enableAttribute(l), m.vertexAttribPointer(l, 3, m.FLOAT, !1, 0, 0));
                            l = c["morphNormal" + h];
                            0 <= l && d.morphNormals && (m.bindBuffer(m.ARRAY_BUFFER, e.__webglMorphNormalsBuffers[q]), W.enableAttribute(l), m.vertexAttribPointer(l, 3, m.FLOAT, !1, 0, 0));
                            f.__webglMorphTargetInfluences[h] = n[q];
                        } else f.__webglMorphTargetInfluences[h] = 0;
                }
                null !== d.program.uniforms.morphTargetInfluences && m.uniform1fv(d.program.uniforms.morphTargetInfluences, f.__webglMorphTargetInfluences);
            }
            if (a) {
                if (e.__webglCustomAttributesList)
                    for (c = 0, n = e.__webglCustomAttributesList.length; c < n; c++)
                        (k = e.__webglCustomAttributesList[c]),
                            0 <= b[k.buffer.belongsToAttribute] &&
                                (m.bindBuffer(m.ARRAY_BUFFER, k.buffer), W.enableAttribute(b[k.buffer.belongsToAttribute]), m.vertexAttribPointer(b[k.buffer.belongsToAttribute], k.size, m.FLOAT, !1, 0, 0));
                0 <= b.color &&
                    (0 < f.geometry.colors.length || 0 < f.geometry.faces.length
                        ? (m.bindBuffer(m.ARRAY_BUFFER, e.__webglColorBuffer), W.enableAttribute(b.color), m.vertexAttribPointer(b.color, 3, m.FLOAT, !1, 0, 0))
                        : void 0 !== d.defaultAttributeValues && m.vertexAttrib3fv(b.color, d.defaultAttributeValues.color));
                0 <= b.normal && (m.bindBuffer(m.ARRAY_BUFFER, e.__webglNormalBuffer), W.enableAttribute(b.normal), m.vertexAttribPointer(b.normal, 3, m.FLOAT, !1, 0, 0));
                0 <= b.tangent && (m.bindBuffer(m.ARRAY_BUFFER, e.__webglTangentBuffer), W.enableAttribute(b.tangent), m.vertexAttribPointer(b.tangent, 4, m.FLOAT, !1, 0, 0));
                0 <= b.uv &&
                    (f.geometry.faceVertexUvs[0]
                        ? (m.bindBuffer(m.ARRAY_BUFFER, e.__webglUVBuffer), W.enableAttribute(b.uv), m.vertexAttribPointer(b.uv, 2, m.FLOAT, !1, 0, 0))
                        : void 0 !== d.defaultAttributeValues && m.vertexAttrib2fv(b.uv, d.defaultAttributeValues.uv));
                0 <= b.uv2 &&
                    (f.geometry.faceVertexUvs[1]
                        ? (m.bindBuffer(m.ARRAY_BUFFER, e.__webglUV2Buffer), W.enableAttribute(b.uv2), m.vertexAttribPointer(b.uv2, 2, m.FLOAT, !1, 0, 0))
                        : void 0 !== d.defaultAttributeValues && m.vertexAttrib2fv(b.uv2, d.defaultAttributeValues.uv2));
                d.skinning &&
                    0 <= b.skinIndex &&
                    0 <= b.skinWeight &&
                    (m.bindBuffer(m.ARRAY_BUFFER, e.__webglSkinIndicesBuffer),
                    W.enableAttribute(b.skinIndex),
                    m.vertexAttribPointer(b.skinIndex, 4, m.FLOAT, !1, 0, 0),
                    m.bindBuffer(m.ARRAY_BUFFER, e.__webglSkinWeightsBuffer),
                    W.enableAttribute(b.skinWeight),
                    m.vertexAttribPointer(b.skinWeight, 4, m.FLOAT, !1, 0, 0));
                0 <= b.lineDistance && (m.bindBuffer(m.ARRAY_BUFFER, e.__webglLineDistanceBuffer), W.enableAttribute(b.lineDistance), m.vertexAttribPointer(b.lineDistance, 1, m.FLOAT, !1, 0, 0));
            }
            W.disableUnusedAttributes();
            f instanceof THREE.Mesh
                ? ((f = e.__typeArray === Uint32Array ? m.UNSIGNED_INT : m.UNSIGNED_SHORT),
                  d.wireframe
                      ? (W.setLineWidth(d.wireframeLinewidth * H), a && m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, e.__webglLineBuffer), m.drawElements(m.LINES, e.__webglLineCount, f, 0))
                      : (a && m.bindBuffer(m.ELEMENT_ARRAY_BUFFER, e.__webglFaceBuffer), m.drawElements(m.TRIANGLES, e.__webglFaceCount, f, 0)),
                  B.info.render.calls++,
                  (B.info.render.vertices += e.__webglFaceCount),
                  (B.info.render.faces += e.__webglFaceCount / 3))
                : f instanceof THREE.Line
                ? ((f = f.mode === THREE.LineStrip ? m.LINE_STRIP : m.LINES), W.setLineWidth(d.linewidth * H), m.drawArrays(f, 0, e.__webglLineCount), B.info.render.calls++)
                : f instanceof THREE.PointCloud && (m.drawArrays(m.POINTS, 0, e.__webglParticleCount), B.info.render.calls++, (B.info.render.points += e.__webglParticleCount));
        }
    };
    this.render = function (a, b, c, d) {
        if (!1 === b instanceof THREE.Camera) THREE.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        else {
            var g = a.fog;
            ta = "";
            ub = -1;
            vb = null;
            Ob = !0;
            !0 === a.autoUpdate && a.updateMatrixWorld();
            void 0 === b.parent && b.updateMatrixWorld();
            a.traverse(function (a) {
                a instanceof THREE.SkinnedMesh && a.skeleton.update();
            });
            b.matrixWorldInverse.getInverse(b.matrixWorld);
            db.multiplyMatrices(b.projectionMatrix, b.matrixWorldInverse);
            cb.setFromMatrix(db);
            ca.length = 0;
            Ka.length = 0;
            Qa.length = 0;
            Xa.length = 0;
            Ya.length = 0;
            h(a);
            !0 === B.sortObjects && (Ka.sort(e), Qa.sort(f));
            zc.render(a, b);
            B.info.render.calls = 0;
            B.info.render.vertices = 0;
            B.info.render.faces = 0;
            B.info.render.points = 0;
            this.setRenderTarget(c);
            (this.autoClear || d) && this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
            d = 0;
            for (var n = qa.length; d < n; d++) {
                var m = qa[d],
                    q = m.object;
                q.visible && (w(q, b), p(m));
            }
            a.overrideMaterial
                ? ((d = a.overrideMaterial), u(d), k(Ka, b, ca, g, d), k(Qa, b, ca, g, d), l(qa, "", b, ca, g, d))
                : (W.setBlending(THREE.NoBlending), k(Ka, b, ca, g, null), l(qa, "opaque", b, ca, g, null), k(Qa, b, ca, g, null), l(qa, "transparent", b, ca, g, null));
            Ac.render(a, b);
            Bc.render(a, b, Xb, fc);
            c && c.generateMipmaps && c.minFilter !== THREE.NearestFilter && c.minFilter !== THREE.LinearFilter && F(c);
            W.setDepthTest(!0);
            W.setDepthWrite(!0);
            W.setColorWrite(!0);
        }
    };
    this.renderImmediateObject = function (a, b, c, d, e) {
        var f = v(a, b, c, d, e);
        ta = "";
        B.setMaterialFaces(d);
        e.immediateRenderCallback
            ? e.immediateRenderCallback(f, m, cb)
            : e.render(function (a) {
                  B.renderBufferImmediate(a, f, d);
              });
    };
    var Ua = {},
        Qb = 0,
        pc = {
            MeshDepthMaterial: "depth",
            MeshNormalMaterial: "normal",
            MeshBasicMaterial: "basic",
            MeshLambertMaterial: "lambert",
            MeshPhongMaterial: "phong",
            LineBasicMaterial: "basic",
            LineDashedMaterial: "dashed",
            PointCloudMaterial: "particle_basic",
        };
    this.setFaceCulling = function (a, b) {
        a === THREE.CullFaceNone
            ? m.disable(m.CULL_FACE)
            : (b === THREE.FrontFaceDirectionCW ? m.frontFace(m.CW) : m.frontFace(m.CCW),
              a === THREE.CullFaceBack ? m.cullFace(m.BACK) : a === THREE.CullFaceFront ? m.cullFace(m.FRONT) : m.cullFace(m.FRONT_AND_BACK),
              m.enable(m.CULL_FACE));
    };
    this.setMaterialFaces = function (a) {
        W.setDoubleSided(a.side === THREE.DoubleSide);
        W.setFlipSided(a.side === THREE.BackSide);
    };
    this.uploadTexture = function (a) {
        void 0 === a.__webglInit && ((a.__webglInit = !0), a.addEventListener("dispose", Pb), (a.__webglTexture = m.createTexture()), B.info.memory.textures++);
        m.bindTexture(m.TEXTURE_2D, a.__webglTexture);
        m.pixelStorei(m.UNPACK_FLIP_Y_WEBGL, a.flipY);
        m.pixelStorei(m.UNPACK_PREMULTIPLY_ALPHA_WEBGL, a.premultiplyAlpha);
        m.pixelStorei(m.UNPACK_ALIGNMENT, a.unpackAlignment);
        a.image = E(a.image, tc);
        var b = a.image,
            c = THREE.Math.isPowerOfTwo(b.width) && THREE.Math.isPowerOfTwo(b.height),
            d = I(a.format),
            e = I(a.type);
        A(m.TEXTURE_2D, a, c);
        var f = a.mipmaps;
        if (a instanceof THREE.DataTexture)
            if (0 < f.length && c) {
                for (var g = 0, h = f.length; g < h; g++) (b = f[g]), m.texImage2D(m.TEXTURE_2D, g, d, b.width, b.height, 0, d, e, b.data);
                a.generateMipmaps = !1;
            } else m.texImage2D(m.TEXTURE_2D, 0, d, b.width, b.height, 0, d, e, b.data);
        else if (a instanceof THREE.CompressedTexture)
            for (g = 0, h = f.length; g < h; g++)
                (b = f[g]),
                    a.format !== THREE.RGBAFormat && a.format !== THREE.RGBFormat
                        ? -1 < kc().indexOf(d)
                            ? m.compressedTexImage2D(m.TEXTURE_2D, g, d, b.width, b.height, 0, b.data)
                            : THREE.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")
                        : m.texImage2D(m.TEXTURE_2D, g, d, b.width, b.height, 0, d, e, b.data);
        else if (0 < f.length && c) {
            g = 0;
            for (h = f.length; g < h; g++) (b = f[g]), m.texImage2D(m.TEXTURE_2D, g, d, d, e, b);
            a.generateMipmaps = !1;
        } else m.texImage2D(m.TEXTURE_2D, 0, d, d, e, a.image);
        a.generateMipmaps && c && m.generateMipmap(m.TEXTURE_2D);
        a.needsUpdate = !1;
        if (a.onUpdate) a.onUpdate();
    };
    this.setTexture = function (a, b) {
        m.activeTexture(m.TEXTURE0 + b);
        a.needsUpdate ? B.uploadTexture(a) : m.bindTexture(m.TEXTURE_2D, a.__webglTexture);
    };
    this.setRenderTarget = function (a) {
        var b = a instanceof THREE.WebGLRenderTargetCube;
        if (a && void 0 === a.__webglFramebuffer) {
            void 0 === a.depthBuffer && (a.depthBuffer = !0);
            void 0 === a.stencilBuffer && (a.stencilBuffer = !0);
            a.addEventListener("dispose", oc);
            a.__webglTexture = m.createTexture();
            B.info.memory.textures++;
            var c = THREE.Math.isPowerOfTwo(a.width) && THREE.Math.isPowerOfTwo(a.height),
                d = I(a.format),
                e = I(a.type);
            if (b) {
                a.__webglFramebuffer = [];
                a.__webglRenderbuffer = [];
                m.bindTexture(m.TEXTURE_CUBE_MAP, a.__webglTexture);
                A(m.TEXTURE_CUBE_MAP, a, c);
                for (var f = 0; 6 > f; f++) {
                    a.__webglFramebuffer[f] = m.createFramebuffer();
                    a.__webglRenderbuffer[f] = m.createRenderbuffer();
                    m.texImage2D(m.TEXTURE_CUBE_MAP_POSITIVE_X + f, 0, d, a.width, a.height, 0, d, e, null);
                    var g = a,
                        h = m.TEXTURE_CUBE_MAP_POSITIVE_X + f;
                    m.bindFramebuffer(m.FRAMEBUFFER, a.__webglFramebuffer[f]);
                    m.framebufferTexture2D(m.FRAMEBUFFER, m.COLOR_ATTACHMENT0, h, g.__webglTexture, 0);
                    G(a.__webglRenderbuffer[f], a);
                }
                c && m.generateMipmap(m.TEXTURE_CUBE_MAP);
            } else
                (a.__webglFramebuffer = m.createFramebuffer()),
                    (a.__webglRenderbuffer = a.shareDepthFrom ? a.shareDepthFrom.__webglRenderbuffer : m.createRenderbuffer()),
                    m.bindTexture(m.TEXTURE_2D, a.__webglTexture),
                    A(m.TEXTURE_2D, a, c),
                    m.texImage2D(m.TEXTURE_2D, 0, d, a.width, a.height, 0, d, e, null),
                    (d = m.TEXTURE_2D),
                    m.bindFramebuffer(m.FRAMEBUFFER, a.__webglFramebuffer),
                    m.framebufferTexture2D(m.FRAMEBUFFER, m.COLOR_ATTACHMENT0, d, a.__webglTexture, 0),
                    a.shareDepthFrom
                        ? a.depthBuffer && !a.stencilBuffer
                            ? m.framebufferRenderbuffer(m.FRAMEBUFFER, m.DEPTH_ATTACHMENT, m.RENDERBUFFER, a.__webglRenderbuffer)
                            : a.depthBuffer && a.stencilBuffer && m.framebufferRenderbuffer(m.FRAMEBUFFER, m.DEPTH_STENCIL_ATTACHMENT, m.RENDERBUFFER, a.__webglRenderbuffer)
                        : G(a.__webglRenderbuffer, a),
                    c && m.generateMipmap(m.TEXTURE_2D);
            b ? m.bindTexture(m.TEXTURE_CUBE_MAP, null) : m.bindTexture(m.TEXTURE_2D, null);
            m.bindRenderbuffer(m.RENDERBUFFER, null);
            m.bindFramebuffer(m.FRAMEBUFFER, null);
        }
        a ? ((b = b ? a.__webglFramebuffer[a.activeCubeFace] : a.__webglFramebuffer), (c = a.width), (a = a.height), (e = d = 0)) : ((b = null), (c = pb), (a = qb), (d = ib), (e = bb));
        b !== ab && (m.bindFramebuffer(m.FRAMEBUFFER, b), m.viewport(d, e, c, a), (ab = b));
        Xb = c;
        fc = a;
    };
    this.readRenderTargetPixels = function (a, b, c, d, e, f) {
        if (!(a instanceof THREE.WebGLRenderTarget)) console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        else if (a.__webglFramebuffer)
            if (a.format !== THREE.RGBAFormat) console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA format. readPixels can read only RGBA format.");
            else {
                var g = !1;
                a.__webglFramebuffer !== ab && (m.bindFramebuffer(m.FRAMEBUFFER, a.__webglFramebuffer), (g = !0));
                m.checkFramebufferStatus(m.FRAMEBUFFER) === m.FRAMEBUFFER_COMPLETE
                    ? m.readPixels(b, c, d, e, m.RGBA, m.UNSIGNED_BYTE, f)
                    : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
                g && m.bindFramebuffer(m.FRAMEBUFFER, ab);
            }
    };
    this.initMaterial = function () {
        THREE.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
    };
    this.addPrePlugin = function () {
        THREE.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
    };
    this.addPostPlugin = function () {
        THREE.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
    };
    this.updateShadowMap = function () {
        THREE.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
    };
};
THREE.WebGLRenderTarget = function (a, b, c) {
    this.width = a;
    this.height = b;
    c = c || {};
    this.wrapS = void 0 !== c.wrapS ? c.wrapS : THREE.ClampToEdgeWrapping;
    this.wrapT = void 0 !== c.wrapT ? c.wrapT : THREE.ClampToEdgeWrapping;
    this.magFilter = void 0 !== c.magFilter ? c.magFilter : THREE.LinearFilter;
    this.minFilter = void 0 !== c.minFilter ? c.minFilter : THREE.LinearMipMapLinearFilter;
    this.anisotropy = void 0 !== c.anisotropy ? c.anisotropy : 1;
    this.offset = new THREE.Vector2(0, 0);
    this.repeat = new THREE.Vector2(1, 1);
    this.format = void 0 !== c.format ? c.format : THREE.RGBAFormat;
    this.type = void 0 !== c.type ? c.type : THREE.UnsignedByteType;
    this.depthBuffer = void 0 !== c.depthBuffer ? c.depthBuffer : !0;
    this.stencilBuffer = void 0 !== c.stencilBuffer ? c.stencilBuffer : !0;
    this.generateMipmaps = !0;
    this.shareDepthFrom = void 0 !== c.shareDepthFrom ? c.shareDepthFrom : null;
};
THREE.WebGLRenderTarget.prototype = {
    constructor: THREE.WebGLRenderTarget,
    setSize: function (a, b) {
        this.width = a;
        this.height = b;
    },
    clone: function () {
        var a = new THREE.WebGLRenderTarget(this.width, this.height);
        a.wrapS = this.wrapS;
        a.wrapT = this.wrapT;
        a.magFilter = this.magFilter;
        a.minFilter = this.minFilter;
        a.anisotropy = this.anisotropy;
        a.offset.copy(this.offset);
        a.repeat.copy(this.repeat);
        a.format = this.format;
        a.type = this.type;
        a.depthBuffer = this.depthBuffer;
        a.stencilBuffer = this.stencilBuffer;
        a.generateMipmaps = this.generateMipmaps;
        a.shareDepthFrom = this.shareDepthFrom;
        return a;
    },
    dispose: function () {
        this.dispatchEvent({ type: "dispose" });
    },
};
THREE.EventDispatcher.prototype.apply(THREE.WebGLRenderTarget.prototype);
THREE.WebGLRenderTargetCube = function (a, b, c) {
    THREE.WebGLRenderTarget.call(this, a, b, c);
    this.activeCubeFace = 0;
};
THREE.WebGLRenderTargetCube.prototype = Object.create(THREE.WebGLRenderTarget.prototype);
THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;
THREE.WebGLExtensions = function (a) {
    var b = {};
    this.get = function (c) {
        if (void 0 !== b[c]) return b[c];
        var d;
        switch (c) {
            case "EXT_texture_filter_anisotropic":
                d = a.getExtension("EXT_texture_filter_anisotropic") || a.getExtension("MOZ_EXT_texture_filter_anisotropic") || a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                break;
            case "WEBGL_compressed_texture_s3tc":
                d = a.getExtension("WEBGL_compressed_texture_s3tc") || a.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                break;
            case "WEBGL_compressed_texture_pvrtc":
                d = a.getExtension("WEBGL_compressed_texture_pvrtc") || a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                break;
            default:
                d = a.getExtension(c);
        }
        null === d && THREE.warn("THREE.WebGLRenderer: " + c + " extension not supported.");
        return (b[c] = d);
    };
};
THREE.WebGLProgram = (function () {
    var a = 0;
    return function (b, c, d, e) {
        var f = b.context,
            g = d.defines,
            h = d.__webglShader.uniforms,
            k = d.attributes,
            l = d.__webglShader.vertexShader,
            p = d.__webglShader.fragmentShader,
            q = d.index0AttributeName;
        void 0 === q && !0 === e.morphTargets && (q = "position");
        var n = "SHADOWMAP_TYPE_BASIC";
        e.shadowMapType === THREE.PCFShadowMap ? (n = "SHADOWMAP_TYPE_PCF") : e.shadowMapType === THREE.PCFSoftShadowMap && (n = "SHADOWMAP_TYPE_PCF_SOFT");
        var t = "ENVMAP_TYPE_CUBE",
            r = "ENVMAP_MODE_REFLECTION",
            s = "ENVMAP_BLENDING_MULTIPLY";
        if (e.envMap) {
            switch (d.envMap.mapping) {
                case THREE.CubeReflectionMapping:
                case THREE.CubeRefractionMapping:
                    t = "ENVMAP_TYPE_CUBE";
                    break;
                case THREE.EquirectangularReflectionMapping:
                case THREE.EquirectangularRefractionMapping:
                    t = "ENVMAP_TYPE_EQUIREC";
                    break;
                case THREE.SphericalReflectionMapping:
                    t = "ENVMAP_TYPE_SPHERE";
            }
            switch (d.envMap.mapping) {
                case THREE.CubeRefractionMapping:
                case THREE.EquirectangularRefractionMapping:
                    r = "ENVMAP_MODE_REFRACTION";
            }
            switch (d.combine) {
                case THREE.MultiplyOperation:
                    s = "ENVMAP_BLENDING_MULTIPLY";
                    break;
                case THREE.MixOperation:
                    s = "ENVMAP_BLENDING_MIX";
                    break;
                case THREE.AddOperation:
                    s = "ENVMAP_BLENDING_ADD";
            }
        }
        var u = 0 < b.gammaFactor ? b.gammaFactor : 1,
            v,
            x;
        v = [];
        for (var D in g) (x = g[D]), !1 !== x && ((x = "#define " + D + " " + x), v.push(x));
        v = v.join("\n");
        g = f.createProgram();
        d instanceof THREE.RawShaderMaterial
            ? (b = d = "")
            : ((d = [
                  "precision " + e.precision + " float;",
                  "precision " + e.precision + " int;",
                  v,
                  e.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
                  b.gammaInput ? "#define GAMMA_INPUT" : "",
                  b.gammaOutput ? "#define GAMMA_OUTPUT" : "",
                  "#define GAMMA_FACTOR " + u,
                  "#define MAX_DIR_LIGHTS " + e.maxDirLights,
                  "#define MAX_POINT_LIGHTS " + e.maxPointLights,
                  "#define MAX_SPOT_LIGHTS " + e.maxSpotLights,
                  "#define MAX_HEMI_LIGHTS " + e.maxHemiLights,
                  "#define MAX_SHADOWS " + e.maxShadows,
                  "#define MAX_BONES " + e.maxBones,
                  e.map ? "#define USE_MAP" : "",
                  e.envMap ? "#define USE_ENVMAP" : "",
                  e.envMap ? "#define " + r : "",
                  e.lightMap ? "#define USE_LIGHTMAP" : "",
                  e.bumpMap ? "#define USE_BUMPMAP" : "",
                  e.normalMap ? "#define USE_NORMALMAP" : "",
                  e.specularMap ? "#define USE_SPECULARMAP" : "",
                  e.alphaMap ? "#define USE_ALPHAMAP" : "",
                  e.vertexColors ? "#define USE_COLOR" : "",
                  e.flatShading ? "#define FLAT_SHADED" : "",
                  e.skinning ? "#define USE_SKINNING" : "",
                  e.useVertexTexture ? "#define BONE_TEXTURE" : "",
                  e.morphTargets ? "#define USE_MORPHTARGETS" : "",
                  e.morphNormals ? "#define USE_MORPHNORMALS" : "",
                  e.wrapAround ? "#define WRAP_AROUND" : "",
                  e.doubleSided ? "#define DOUBLE_SIDED" : "",
                  e.flipSided ? "#define FLIP_SIDED" : "",
                  e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
                  e.shadowMapEnabled ? "#define " + n : "",
                  e.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
                  e.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",
                  e.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
                  e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
                  "uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\n\tattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\n\tattribute vec3 morphTarget0;\n\tattribute vec3 morphTarget1;\n\tattribute vec3 morphTarget2;\n\tattribute vec3 morphTarget3;\n\t#ifdef USE_MORPHNORMALS\n\t\tattribute vec3 morphNormal0;\n\t\tattribute vec3 morphNormal1;\n\t\tattribute vec3 morphNormal2;\n\t\tattribute vec3 morphNormal3;\n\t#else\n\t\tattribute vec3 morphTarget4;\n\t\tattribute vec3 morphTarget5;\n\t\tattribute vec3 morphTarget6;\n\t\tattribute vec3 morphTarget7;\n\t#endif\n#endif\n#ifdef USE_SKINNING\n\tattribute vec4 skinIndex;\n\tattribute vec4 skinWeight;\n#endif\n",
              ].join("\n")),
              (b = [
                  "precision " + e.precision + " float;",
                  "precision " + e.precision + " int;",
                  e.bumpMap || e.normalMap || e.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "",
                  v,
                  "#define MAX_DIR_LIGHTS " + e.maxDirLights,
                  "#define MAX_POINT_LIGHTS " + e.maxPointLights,
                  "#define MAX_SPOT_LIGHTS " + e.maxSpotLights,
                  "#define MAX_HEMI_LIGHTS " + e.maxHemiLights,
                  "#define MAX_SHADOWS " + e.maxShadows,
                  e.alphaTest ? "#define ALPHATEST " + e.alphaTest : "",
                  b.gammaInput ? "#define GAMMA_INPUT" : "",
                  b.gammaOutput ? "#define GAMMA_OUTPUT" : "",
                  "#define GAMMA_FACTOR " + u,
                  e.useFog && e.fog ? "#define USE_FOG" : "",
                  e.useFog && e.fogExp ? "#define FOG_EXP2" : "",
                  e.map ? "#define USE_MAP" : "",
                  e.envMap ? "#define USE_ENVMAP" : "",
                  e.envMap ? "#define " + t : "",
                  e.envMap ? "#define " + r : "",
                  e.envMap ? "#define " + s : "",
                  e.lightMap ? "#define USE_LIGHTMAP" : "",
                  e.bumpMap ? "#define USE_BUMPMAP" : "",
                  e.normalMap ? "#define USE_NORMALMAP" : "",
                  e.specularMap ? "#define USE_SPECULARMAP" : "",
                  e.alphaMap ? "#define USE_ALPHAMAP" : "",
                  e.vertexColors ? "#define USE_COLOR" : "",
                  e.flatShading ? "#define FLAT_SHADED" : "",
                  e.metal ? "#define METAL" : "",
                  e.wrapAround ? "#define WRAP_AROUND" : "",
                  e.doubleSided ? "#define DOUBLE_SIDED" : "",
                  e.flipSided ? "#define FLIP_SIDED" : "",
                  e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
                  e.shadowMapEnabled ? "#define " + n : "",
                  e.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
                  e.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",
                  e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
                  "uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n",
              ].join("\n")));
        l = new THREE.WebGLShader(f, f.VERTEX_SHADER, d + l);
        p = new THREE.WebGLShader(f, f.FRAGMENT_SHADER, b + p);
        f.attachShader(g, l);
        f.attachShader(g, p);
        void 0 !== q && f.bindAttribLocation(g, 0, q);
        f.linkProgram(g);
        q = f.getProgramInfoLog(g);
        !1 === f.getProgramParameter(g, f.LINK_STATUS) && THREE.error("THREE.WebGLProgram: shader error: " + f.getError(), "gl.VALIDATE_STATUS", f.getProgramParameter(g, f.VALIDATE_STATUS), "gl.getPRogramInfoLog", q);
        "" !== q && THREE.warn("THREE.WebGLProgram: gl.getProgramInfoLog()" + q);
        f.deleteShader(l);
        f.deleteShader(p);
        q = "viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences bindMatrix bindMatrixInverse".split(" ");
        e.useVertexTexture ? (q.push("boneTexture"), q.push("boneTextureWidth"), q.push("boneTextureHeight")) : q.push("boneGlobalMatrices");
        e.logarithmicDepthBuffer && q.push("logDepthBufFC");
        for (var w in h) q.push(w);
        h = q;
        w = {};
        q = 0;
        for (b = h.length; q < b; q++) (n = h[q]), (w[n] = f.getUniformLocation(g, n));
        this.uniforms = w;
        q = "position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");
        for (h = 0; h < e.maxMorphTargets; h++) q.push("morphTarget" + h);
        for (h = 0; h < e.maxMorphNormals; h++) q.push("morphNormal" + h);
        for (var y in k) q.push(y);
        e = q;
        k = {};
        y = 0;
        for (h = e.length; y < h; y++) (w = e[y]), (k[w] = f.getAttribLocation(g, w));
        this.attributes = k;
        this.attributesKeys = Object.keys(this.attributes);
        this.id = a++;
        this.code = c;
        this.usedTimes = 1;
        this.program = g;
        this.vertexShader = l;
        this.fragmentShader = p;
        return this;
    };
})();
THREE.WebGLShader = (function () {
    var a = function (a) {
        a = a.split("\n");
        for (var c = 0; c < a.length; c++) a[c] = c + 1 + ": " + a[c];
        return a.join("\n");
    };
    return function (b, c, d) {
        c = b.createShader(c);
        b.shaderSource(c, d);
        b.compileShader(c);
        !1 === b.getShaderParameter(c, b.COMPILE_STATUS) && THREE.error("THREE.WebGLShader: Shader couldn't compile.");
        "" !== b.getShaderInfoLog(c) && THREE.warn("THREE.WebGLShader: gl.getShaderInfoLog()", b.getShaderInfoLog(c), a(d));
        return c;
    };
})();
THREE.WebGLState = function (a, b) {
    var c = new Uint8Array(16),
        d = new Uint8Array(16),
        e = null,
        f = null,
        g = null,
        h = null,
        k = null,
        l = null,
        p = null,
        q = null,
        n = null,
        t = null,
        r = null,
        s = null,
        u = null,
        v = null,
        x = null,
        D = null;
    this.initAttributes = function () {
        for (var a = 0, b = c.length; a < b; a++) c[a] = 0;
    };
    this.enableAttribute = function (b) {
        c[b] = 1;
        0 === d[b] && (a.enableVertexAttribArray(b), (d[b] = 1));
    };
    this.disableUnusedAttributes = function () {
        for (var b = 0, e = d.length; b < e; b++) d[b] !== c[b] && (a.disableVertexAttribArray(b), (d[b] = 0));
    };
    this.setBlending = function (c, d, n, q, r, s, t) {
        c !== e &&
            (c === THREE.NoBlending
                ? a.disable(a.BLEND)
                : c === THREE.AdditiveBlending
                ? (a.enable(a.BLEND), a.blendEquation(a.FUNC_ADD), a.blendFunc(a.SRC_ALPHA, a.ONE))
                : c === THREE.SubtractiveBlending
                ? (a.enable(a.BLEND), a.blendEquation(a.FUNC_ADD), a.blendFunc(a.ZERO, a.ONE_MINUS_SRC_COLOR))
                : c === THREE.MultiplyBlending
                ? (a.enable(a.BLEND), a.blendEquation(a.FUNC_ADD), a.blendFunc(a.ZERO, a.SRC_COLOR))
                : c === THREE.CustomBlending
                ? a.enable(a.BLEND)
                : (a.enable(a.BLEND), a.blendEquationSeparate(a.FUNC_ADD, a.FUNC_ADD), a.blendFuncSeparate(a.SRC_ALPHA, a.ONE_MINUS_SRC_ALPHA, a.ONE, a.ONE_MINUS_SRC_ALPHA)),
            (e = c));
        if (c === THREE.CustomBlending) {
            r = r || d;
            s = s || n;
            t = t || q;
            if (d !== f || r !== k) a.blendEquationSeparate(b(d), b(r)), (f = d), (k = r);
            if (n !== g || q !== h || s !== l || t !== p) a.blendFuncSeparate(b(n), b(q), b(s), b(t)), (g = n), (h = q), (l = s), (p = t);
        } else p = l = k = h = g = f = null;
    };
    this.setDepthTest = function (b) {
        q !== b && (b ? a.enable(a.DEPTH_TEST) : a.disable(a.DEPTH_TEST), (q = b));
    };
    this.setDepthWrite = function (b) {
        n !== b && (a.depthMask(b), (n = b));
    };
    this.setColorWrite = function (b) {
        t !== b && (a.colorMask(b, b, b, b), (t = b));
    };
    this.setDoubleSided = function (b) {
        r !== b && (b ? a.disable(a.CULL_FACE) : a.enable(a.CULL_FACE), (r = b));
    };
    this.setFlipSided = function (b) {
        s !== b && (b ? a.frontFace(a.CW) : a.frontFace(a.CCW), (s = b));
    };
    this.setLineWidth = function (b) {
        b !== u && (a.lineWidth(b), (u = b));
    };
    this.setPolygonOffset = function (b, c, d) {
        v !== b && (b ? a.enable(a.POLYGON_OFFSET_FILL) : a.disable(a.POLYGON_OFFSET_FILL), (v = b));
        !b || (x === c && D === d) || (a.polygonOffset(c, d), (x = c), (D = d));
    };
    this.reset = function () {
        for (var a = 0; a < d.length; a++) d[a] = 0;
        s = r = t = n = q = e = null;
    };
};
THREE.LensFlarePlugin = function (a, b) {
    var c,
        d,
        e,
        f,
        g,
        h,
        k,
        l,
        p,
        q,
        n = a.context,
        t,
        r,
        s,
        u,
        v,
        x;
    this.render = function (D, w, y, A) {
        if (0 !== b.length) {
            D = new THREE.Vector3();
            var E = A / y,
                G = 0.5 * y,
                F = 0.5 * A,
                z = 16 / A,
                I = new THREE.Vector2(z * E, z),
                U = new THREE.Vector3(1, 1, 0),
                M = new THREE.Vector2(1, 1);
            if (void 0 === s) {
                var z = new Float32Array([-1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1]),
                    H = new Uint16Array([0, 1, 2, 0, 2, 3]);
                t = n.createBuffer();
                r = n.createBuffer();
                n.bindBuffer(n.ARRAY_BUFFER, t);
                n.bufferData(n.ARRAY_BUFFER, z, n.STATIC_DRAW);
                n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, r);
                n.bufferData(n.ELEMENT_ARRAY_BUFFER, H, n.STATIC_DRAW);
                v = n.createTexture();
                x = n.createTexture();
                n.bindTexture(n.TEXTURE_2D, v);
                n.texImage2D(n.TEXTURE_2D, 0, n.RGB, 16, 16, 0, n.RGB, n.UNSIGNED_BYTE, null);
                n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE);
                n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE);
                n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.NEAREST);
                n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.NEAREST);
                n.bindTexture(n.TEXTURE_2D, x);
                n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, 16, 16, 0, n.RGBA, n.UNSIGNED_BYTE, null);
                n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE);
                n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE);
                n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, n.NEAREST);
                n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, n.NEAREST);
                var z = (u = 0 < n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS))
                        ? {
                              vertexShader:
                                  "uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
                              fragmentShader:
                                  "uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}",
                          }
                        : {
                              vertexShader:
                                  "uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
                              fragmentShader:
                                  "precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}",
                          },
                    H = n.createProgram(),
                    L = n.createShader(n.FRAGMENT_SHADER),
                    P = n.createShader(n.VERTEX_SHADER),
                    N = "precision " + a.getPrecision() + " float;\n";
                n.shaderSource(L, N + z.fragmentShader);
                n.shaderSource(P, N + z.vertexShader);
                n.compileShader(L);
                n.compileShader(P);
                n.attachShader(H, L);
                n.attachShader(H, P);
                n.linkProgram(H);
                s = H;
                p = n.getAttribLocation(s, "position");
                q = n.getAttribLocation(s, "uv");
                c = n.getUniformLocation(s, "renderType");
                d = n.getUniformLocation(s, "map");
                e = n.getUniformLocation(s, "occlusionMap");
                f = n.getUniformLocation(s, "opacity");
                g = n.getUniformLocation(s, "color");
                h = n.getUniformLocation(s, "scale");
                k = n.getUniformLocation(s, "rotation");
                l = n.getUniformLocation(s, "screenPosition");
            }
            n.useProgram(s);
            n.enableVertexAttribArray(p);
            n.enableVertexAttribArray(q);
            n.uniform1i(e, 0);
            n.uniform1i(d, 1);
            n.bindBuffer(n.ARRAY_BUFFER, t);
            n.vertexAttribPointer(p, 2, n.FLOAT, !1, 16, 0);
            n.vertexAttribPointer(q, 2, n.FLOAT, !1, 16, 8);
            n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, r);
            n.disable(n.CULL_FACE);
            n.depthMask(!1);
            H = 0;
            for (L = b.length; H < L; H++)
                if (
                    ((z = 16 / A),
                    I.set(z * E, z),
                    (P = b[H]),
                    D.set(P.matrixWorld.elements[12], P.matrixWorld.elements[13], P.matrixWorld.elements[14]),
                    D.applyMatrix4(w.matrixWorldInverse),
                    D.applyProjection(w.projectionMatrix),
                    U.copy(D),
                    (M.x = U.x * G + G),
                    (M.y = U.y * F + F),
                    u || (0 < M.x && M.x < y && 0 < M.y && M.y < A))
                ) {
                    n.activeTexture(n.TEXTURE1);
                    n.bindTexture(n.TEXTURE_2D, v);
                    n.copyTexImage2D(n.TEXTURE_2D, 0, n.RGB, M.x - 8, M.y - 8, 16, 16, 0);
                    n.uniform1i(c, 0);
                    n.uniform2f(h, I.x, I.y);
                    n.uniform3f(l, U.x, U.y, U.z);
                    n.disable(n.BLEND);
                    n.enable(n.DEPTH_TEST);
                    n.drawElements(n.TRIANGLES, 6, n.UNSIGNED_SHORT, 0);
                    n.activeTexture(n.TEXTURE0);
                    n.bindTexture(n.TEXTURE_2D, x);
                    n.copyTexImage2D(n.TEXTURE_2D, 0, n.RGBA, M.x - 8, M.y - 8, 16, 16, 0);
                    n.uniform1i(c, 1);
                    n.disable(n.DEPTH_TEST);
                    n.activeTexture(n.TEXTURE1);
                    n.bindTexture(n.TEXTURE_2D, v);
                    n.drawElements(n.TRIANGLES, 6, n.UNSIGNED_SHORT, 0);
                    P.positionScreen.copy(U);
                    P.customUpdateCallback ? P.customUpdateCallback(P) : P.updateLensFlares();
                    n.uniform1i(c, 2);
                    n.enable(n.BLEND);
                    for (var N = 0, R = P.lensFlares.length; N < R; N++) {
                        var V = P.lensFlares[N];
                        0.001 < V.opacity &&
                            0.001 < V.scale &&
                            ((U.x = V.x),
                            (U.y = V.y),
                            (U.z = V.z),
                            (z = (V.size * V.scale) / A),
                            (I.x = z * E),
                            (I.y = z),
                            n.uniform3f(l, U.x, U.y, U.z),
                            n.uniform2f(h, I.x, I.y),
                            n.uniform1f(k, V.rotation),
                            n.uniform1f(f, V.opacity),
                            n.uniform3f(g, V.color.r, V.color.g, V.color.b),
                            a.state.setBlending(V.blending, V.blendEquation, V.blendSrc, V.blendDst),
                            a.setTexture(V.texture, 1),
                            n.drawElements(n.TRIANGLES, 6, n.UNSIGNED_SHORT, 0));
                    }
                }
            n.enable(n.CULL_FACE);
            n.enable(n.DEPTH_TEST);
            n.depthMask(!0);
            a.resetGLState();
        }
    };
};
THREE.ShadowMapPlugin = function (a, b, c, d) {
    function e(a, b, d) {
        if (b.visible) {
            var f = c[b.id];
            if (f && b.castShadow && (!1 === b.frustumCulled || !0 === p.intersectsObject(b)))
                for (var g = 0, h = f.length; g < h; g++) {
                    var k = f[g];
                    b._modelViewMatrix.multiplyMatrices(d.matrixWorldInverse, b.matrixWorld);
                    s.push(k);
                }
            g = 0;
            for (h = b.children.length; g < h; g++) e(a, b.children[g], d);
        }
    }
    var f = a.context,
        g,
        h,
        k,
        l,
        p = new THREE.Frustum(),
        q = new THREE.Matrix4(),
        n = new THREE.Vector3(),
        t = new THREE.Vector3(),
        r = new THREE.Vector3(),
        s = [],
        u = THREE.ShaderLib.depthRGBA,
        v = THREE.UniformsUtils.clone(u.uniforms);
    g = new THREE.ShaderMaterial({ uniforms: v, vertexShader: u.vertexShader, fragmentShader: u.fragmentShader });
    h = new THREE.ShaderMaterial({ uniforms: v, vertexShader: u.vertexShader, fragmentShader: u.fragmentShader, morphTargets: !0 });
    k = new THREE.ShaderMaterial({ uniforms: v, vertexShader: u.vertexShader, fragmentShader: u.fragmentShader, skinning: !0 });
    l = new THREE.ShaderMaterial({ uniforms: v, vertexShader: u.vertexShader, fragmentShader: u.fragmentShader, morphTargets: !0, skinning: !0 });
    g._shadowPass = !0;
    h._shadowPass = !0;
    k._shadowPass = !0;
    l._shadowPass = !0;
    this.render = function (c, v) {
        if (!1 !== a.shadowMapEnabled) {
            var u,
                y,
                A,
                E,
                G,
                F,
                z,
                I,
                U = [];
            E = 0;
            f.clearColor(1, 1, 1, 1);
            f.disable(f.BLEND);
            f.enable(f.CULL_FACE);
            f.frontFace(f.CCW);
            a.shadowMapCullFace === THREE.CullFaceFront ? f.cullFace(f.FRONT) : f.cullFace(f.BACK);
            a.state.setDepthTest(!0);
            u = 0;
            for (y = b.length; u < y; u++)
                if (((A = b[u]), A.castShadow))
                    if (A instanceof THREE.DirectionalLight && A.shadowCascade)
                        for (G = 0; G < A.shadowCascadeCount; G++) {
                            var M;
                            if (A.shadowCascadeArray[G]) M = A.shadowCascadeArray[G];
                            else {
                                z = A;
                                var H = G;
                                M = new THREE.DirectionalLight();
                                M.isVirtual = !0;
                                M.onlyShadow = !0;
                                M.castShadow = !0;
                                M.shadowCameraNear = z.shadowCameraNear;
                                M.shadowCameraFar = z.shadowCameraFar;
                                M.shadowCameraLeft = z.shadowCameraLeft;
                                M.shadowCameraRight = z.shadowCameraRight;
                                M.shadowCameraBottom = z.shadowCameraBottom;
                                M.shadowCameraTop = z.shadowCameraTop;
                                M.shadowCameraVisible = z.shadowCameraVisible;
                                M.shadowDarkness = z.shadowDarkness;
                                M.shadowBias = z.shadowCascadeBias[H];
                                M.shadowMapWidth = z.shadowCascadeWidth[H];
                                M.shadowMapHeight = z.shadowCascadeHeight[H];
                                M.pointsWorld = [];
                                M.pointsFrustum = [];
                                I = M.pointsWorld;
                                F = M.pointsFrustum;
                                for (var L = 0; 8 > L; L++) (I[L] = new THREE.Vector3()), (F[L] = new THREE.Vector3());
                                I = z.shadowCascadeNearZ[H];
                                z = z.shadowCascadeFarZ[H];
                                F[0].set(-1, -1, I);
                                F[1].set(1, -1, I);
                                F[2].set(-1, 1, I);
                                F[3].set(1, 1, I);
                                F[4].set(-1, -1, z);
                                F[5].set(1, -1, z);
                                F[6].set(-1, 1, z);
                                F[7].set(1, 1, z);
                                M.originalCamera = v;
                                F = new THREE.Gyroscope();
                                F.position.copy(A.shadowCascadeOffset);
                                F.add(M);
                                F.add(M.target);
                                v.add(F);
                                A.shadowCascadeArray[G] = M;
                            }
                            H = A;
                            I = G;
                            z = H.shadowCascadeArray[I];
                            z.position.copy(H.position);
                            z.target.position.copy(H.target.position);
                            z.lookAt(z.target);
                            z.shadowCameraVisible = H.shadowCameraVisible;
                            z.shadowDarkness = H.shadowDarkness;
                            z.shadowBias = H.shadowCascadeBias[I];
                            F = H.shadowCascadeNearZ[I];
                            H = H.shadowCascadeFarZ[I];
                            z = z.pointsFrustum;
                            z[0].z = F;
                            z[1].z = F;
                            z[2].z = F;
                            z[3].z = F;
                            z[4].z = H;
                            z[5].z = H;
                            z[6].z = H;
                            z[7].z = H;
                            U[E] = M;
                            E++;
                        }
                    else (U[E] = A), E++;
            u = 0;
            for (y = U.length; u < y; u++) {
                A = U[u];
                A.shadowMap ||
                    ((G = THREE.LinearFilter),
                    a.shadowMapType === THREE.PCFSoftShadowMap && (G = THREE.NearestFilter),
                    (A.shadowMap = new THREE.WebGLRenderTarget(A.shadowMapWidth, A.shadowMapHeight, { minFilter: G, magFilter: G, format: THREE.RGBAFormat })),
                    (A.shadowMapSize = new THREE.Vector2(A.shadowMapWidth, A.shadowMapHeight)),
                    (A.shadowMatrix = new THREE.Matrix4()));
                if (!A.shadowCamera) {
                    if (A instanceof THREE.SpotLight) A.shadowCamera = new THREE.PerspectiveCamera(A.shadowCameraFov, A.shadowMapWidth / A.shadowMapHeight, A.shadowCameraNear, A.shadowCameraFar);
                    else if (A instanceof THREE.DirectionalLight) A.shadowCamera = new THREE.OrthographicCamera(A.shadowCameraLeft, A.shadowCameraRight, A.shadowCameraTop, A.shadowCameraBottom, A.shadowCameraNear, A.shadowCameraFar);
                    else {
                        THREE.error("THREE.ShadowMapPlugin: Unsupported light type for shadow", A);
                        continue;
                    }
                    c.add(A.shadowCamera);
                    !0 === c.autoUpdate && c.updateMatrixWorld();
                }
                A.shadowCameraVisible && !A.cameraHelper && ((A.cameraHelper = new THREE.CameraHelper(A.shadowCamera)), c.add(A.cameraHelper));
                if (A.isVirtual && M.originalCamera == v) {
                    G = v;
                    E = A.shadowCamera;
                    F = A.pointsFrustum;
                    z = A.pointsWorld;
                    n.set(Infinity, Infinity, Infinity);
                    t.set(-Infinity, -Infinity, -Infinity);
                    for (H = 0; 8 > H; H++)
                        (I = z[H]),
                            I.copy(F[H]),
                            I.unproject(G),
                            I.applyMatrix4(E.matrixWorldInverse),
                            I.x < n.x && (n.x = I.x),
                            I.x > t.x && (t.x = I.x),
                            I.y < n.y && (n.y = I.y),
                            I.y > t.y && (t.y = I.y),
                            I.z < n.z && (n.z = I.z),
                            I.z > t.z && (t.z = I.z);
                    E.left = n.x;
                    E.right = t.x;
                    E.top = t.y;
                    E.bottom = n.y;
                    E.updateProjectionMatrix();
                }
                E = A.shadowMap;
                F = A.shadowMatrix;
                G = A.shadowCamera;
                G.position.setFromMatrixPosition(A.matrixWorld);
                r.setFromMatrixPosition(A.target.matrixWorld);
                G.lookAt(r);
                G.updateMatrixWorld();
                G.matrixWorldInverse.getInverse(G.matrixWorld);
                A.cameraHelper && (A.cameraHelper.visible = A.shadowCameraVisible);
                A.shadowCameraVisible && A.cameraHelper.update();
                F.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
                F.multiply(G.projectionMatrix);
                F.multiply(G.matrixWorldInverse);
                q.multiplyMatrices(G.projectionMatrix, G.matrixWorldInverse);
                p.setFromMatrix(q);
                a.setRenderTarget(E);
                a.clear();
                s.length = 0;
                e(c, c, G);
                A = 0;
                for (E = s.length; A < E; A++)
                    (z = s[A]),
                        (F = z.object),
                        (z = z.buffer),
                        (H = F.material instanceof THREE.MeshFaceMaterial ? F.material.materials[0] : F.material),
                        (I = void 0 !== F.geometry.morphTargets && 0 < F.geometry.morphTargets.length && H.morphTargets),
                        (L = F instanceof THREE.SkinnedMesh && H.skinning),
                        (I = F.customDepthMaterial ? F.customDepthMaterial : L ? (I ? l : k) : I ? h : g),
                        a.setMaterialFaces(H),
                        z instanceof THREE.BufferGeometry ? a.renderBufferDirect(G, b, null, I, z, F) : a.renderBuffer(G, b, null, I, z, F);
                A = 0;
                for (E = d.length; A < E; A++) (z = d[A]), (F = z.object), F.visible && F.castShadow && (F._modelViewMatrix.multiplyMatrices(G.matrixWorldInverse, F.matrixWorld), a.renderImmediateObject(G, b, null, g, F));
            }
            u = a.getClearColor();
            y = a.getClearAlpha();
            f.clearColor(u.r, u.g, u.b, y);
            f.enable(f.BLEND);
            a.shadowMapCullFace === THREE.CullFaceFront && f.cullFace(f.BACK);
            a.resetGLState();
        }
    };
};
THREE.SpritePlugin = function (a, b) {
    var c, d, e, f, g, h, k, l, p, q, n, t, r, s, u, v, x;
    function D(a, b) {
        return a.z !== b.z ? b.z - a.z : b.id - a.id;
    }
    var w = a.context,
        y,
        A,
        E,
        G,
        F = new THREE.Vector3(),
        z = new THREE.Quaternion(),
        I = new THREE.Vector3();
    this.render = function (U, M) {
        if (0 !== b.length) {
            if (void 0 === E) {
                var H = new Float32Array([-0.5, -0.5, 0, 0, 0.5, -0.5, 1, 0, 0.5, 0.5, 1, 1, -0.5, 0.5, 0, 1]),
                    L = new Uint16Array([0, 1, 2, 0, 2, 3]);
                y = w.createBuffer();
                A = w.createBuffer();
                w.bindBuffer(w.ARRAY_BUFFER, y);
                w.bufferData(w.ARRAY_BUFFER, H, w.STATIC_DRAW);
                w.bindBuffer(w.ELEMENT_ARRAY_BUFFER, A);
                w.bufferData(w.ELEMENT_ARRAY_BUFFER, L, w.STATIC_DRAW);
                var H = w.createProgram(),
                    L = w.createShader(w.VERTEX_SHADER),
                    P = w.createShader(w.FRAGMENT_SHADER);
                w.shaderSource(
                    L,
                    [
                        "precision " + a.getPrecision() + " float;",
                        "uniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position * scale;\nvec2 rotatedPosition;\nrotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\nrotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\nvec4 finalPosition;\nfinalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition;\nfinalPosition = projectionMatrix * finalPosition;\ngl_Position = finalPosition;\n}",
                    ].join("\n")
                );
                w.shaderSource(
                    P,
                    [
                        "precision " + a.getPrecision() + " float;",
                        "uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}",
                    ].join("\n")
                );
                w.compileShader(L);
                w.compileShader(P);
                w.attachShader(H, L);
                w.attachShader(H, P);
                w.linkProgram(H);
                E = H;
                v = w.getAttribLocation(E, "position");
                x = w.getAttribLocation(E, "uv");
                c = w.getUniformLocation(E, "uvOffset");
                d = w.getUniformLocation(E, "uvScale");
                e = w.getUniformLocation(E, "rotation");
                f = w.getUniformLocation(E, "scale");
                g = w.getUniformLocation(E, "color");
                h = w.getUniformLocation(E, "map");
                k = w.getUniformLocation(E, "opacity");
                l = w.getUniformLocation(E, "modelViewMatrix");
                p = w.getUniformLocation(E, "projectionMatrix");
                q = w.getUniformLocation(E, "fogType");
                n = w.getUniformLocation(E, "fogDensity");
                t = w.getUniformLocation(E, "fogNear");
                r = w.getUniformLocation(E, "fogFar");
                s = w.getUniformLocation(E, "fogColor");
                u = w.getUniformLocation(E, "alphaTest");
                H = document.createElement("canvas");
                H.width = 8;
                H.height = 8;
                L = H.getContext("2d");
                L.fillStyle = "white";
                L.fillRect(0, 0, 8, 8);
                G = new THREE.Texture(H);
                G.needsUpdate = !0;
            }
            w.useProgram(E);
            w.enableVertexAttribArray(v);
            w.enableVertexAttribArray(x);
            w.disable(w.CULL_FACE);
            w.enable(w.BLEND);
            w.bindBuffer(w.ARRAY_BUFFER, y);
            w.vertexAttribPointer(v, 2, w.FLOAT, !1, 16, 0);
            w.vertexAttribPointer(x, 2, w.FLOAT, !1, 16, 8);
            w.bindBuffer(w.ELEMENT_ARRAY_BUFFER, A);
            w.uniformMatrix4fv(p, !1, M.projectionMatrix.elements);
            w.activeTexture(w.TEXTURE0);
            w.uniform1i(h, 0);
            L = H = 0;
            (P = U.fog)
                ? (w.uniform3f(s, P.color.r, P.color.g, P.color.b),
                  P instanceof THREE.Fog ? (w.uniform1f(t, P.near), w.uniform1f(r, P.far), w.uniform1i(q, 1), (L = H = 1)) : P instanceof THREE.FogExp2 && (w.uniform1f(n, P.density), w.uniform1i(q, 2), (L = H = 2)))
                : (w.uniform1i(q, 0), (L = H = 0));
            for (var P = 0, N = b.length; P < N; P++) {
                var R = b[P];
                R._modelViewMatrix.multiplyMatrices(M.matrixWorldInverse, R.matrixWorld);
                R.z = -R._modelViewMatrix.elements[14];
            }
            b.sort(D);
            for (var V = [], P = 0, N = b.length; P < N; P++) {
                var R = b[P],
                    J = R.material;
                w.uniform1f(u, J.alphaTest);
                w.uniformMatrix4fv(l, !1, R._modelViewMatrix.elements);
                R.matrixWorld.decompose(F, z, I);
                V[0] = I.x;
                V[1] = I.y;
                R = 0;
                U.fog && J.fog && (R = L);
                H !== R && (w.uniform1i(q, R), (H = R));
                null !== J.map ? (w.uniform2f(c, J.map.offset.x, J.map.offset.y), w.uniform2f(d, J.map.repeat.x, J.map.repeat.y)) : (w.uniform2f(c, 0, 0), w.uniform2f(d, 1, 1));
                w.uniform1f(k, J.opacity);
                w.uniform3f(g, J.color.r, J.color.g, J.color.b);
                w.uniform1f(e, J.rotation);
                w.uniform2fv(f, V);
                a.state.setBlending(J.blending, J.blendEquation, J.blendSrc, J.blendDst);
                a.state.setDepthTest(J.depthTest);
                a.state.setDepthWrite(J.depthWrite);
                J.map && J.map.image && J.map.image.width ? a.setTexture(J.map, 0) : a.setTexture(G, 0);
                w.drawElements(w.TRIANGLES, 6, w.UNSIGNED_SHORT, 0);
            }
            w.enable(w.CULL_FACE);
            a.resetGLState();
        }
    };
};
THREE.GeometryUtils = {
    merge: function (a, b, c) {
        THREE.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
        var d;
        b instanceof THREE.Mesh && (b.matrixAutoUpdate && b.updateMatrix(), (d = b.matrix), (b = b.geometry));
        a.merge(b, d, c);
    },
    center: function (a) {
        THREE.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
        return a.center();
    },
};
THREE.ImageUtils = {
    crossOrigin: void 0,
    loadTexture: function (a, b, c, d) {
        var e = new THREE.ImageLoader();
        e.crossOrigin = this.crossOrigin;
        var f = new THREE.Texture(void 0, b);
        e.load(
            a,
            function (a) {
                f.image = a;
                f.needsUpdate = !0;
                c && c(f);
            },
            void 0,
            function (a) {
                d && d(a);
            }
        );
        f.sourceFile = a;
        return f;
    },
    loadTextureCube: function (a, b, c, d) {
        var e = new THREE.ImageLoader();
        e.crossOrigin = this.crossOrigin;
        var f = new THREE.CubeTexture([], b);
        f.flipY = !1;
        var g = 0;
        b = function (b) {
            e.load(
                a[b],
                function (a) {
                    f.images[b] = a;
                    g += 1;
                    6 === g && ((f.needsUpdate = !0), c && c(f));
                },
                void 0,
                d
            );
        };
        for (var h = 0, k = a.length; h < k; ++h) b(h);
        return f;
    },
    loadCompressedTexture: function () {
        THREE.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
    },
    loadCompressedTextureCube: function () {
        THREE.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
    },
    getNormalMap: function (a, b) {
        var c = function (a) {
            var b = Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
            return [a[0] / b, a[1] / b, a[2] / b];
        };
        b |= 1;
        var d = a.width,
            e = a.height,
            f = document.createElement("canvas");
        f.width = d;
        f.height = e;
        var g = f.getContext("2d");
        g.drawImage(a, 0, 0);
        for (var h = g.getImageData(0, 0, d, e).data, k = g.createImageData(d, e), l = k.data, p = 0; p < d; p++)
            for (var q = 0; q < e; q++) {
                var n = 0 > q - 1 ? 0 : q - 1,
                    t = q + 1 > e - 1 ? e - 1 : q + 1,
                    r = 0 > p - 1 ? 0 : p - 1,
                    s = p + 1 > d - 1 ? d - 1 : p + 1,
                    u = [],
                    v = [0, 0, (h[4 * (q * d + p)] / 255) * b];
                u.push([-1, 0, (h[4 * (q * d + r)] / 255) * b]);
                u.push([-1, -1, (h[4 * (n * d + r)] / 255) * b]);
                u.push([0, -1, (h[4 * (n * d + p)] / 255) * b]);
                u.push([1, -1, (h[4 * (n * d + s)] / 255) * b]);
                u.push([1, 0, (h[4 * (q * d + s)] / 255) * b]);
                u.push([1, 1, (h[4 * (t * d + s)] / 255) * b]);
                u.push([0, 1, (h[4 * (t * d + p)] / 255) * b]);
                u.push([-1, 1, (h[4 * (t * d + r)] / 255) * b]);
                n = [];
                r = u.length;
                for (t = 0; t < r; t++) {
                    var s = u[t],
                        x = u[(t + 1) % r],
                        s = [s[0] - v[0], s[1] - v[1], s[2] - v[2]],
                        x = [x[0] - v[0], x[1] - v[1], x[2] - v[2]];
                    n.push(c([s[1] * x[2] - s[2] * x[1], s[2] * x[0] - s[0] * x[2], s[0] * x[1] - s[1] * x[0]]));
                }
                u = [0, 0, 0];
                for (t = 0; t < n.length; t++) (u[0] += n[t][0]), (u[1] += n[t][1]), (u[2] += n[t][2]);
                u[0] /= n.length;
                u[1] /= n.length;
                u[2] /= n.length;
                v = 4 * (q * d + p);
                l[v] = (((u[0] + 1) / 2) * 255) | 0;
                l[v + 1] = (((u[1] + 1) / 2) * 255) | 0;
                l[v + 2] = (255 * u[2]) | 0;
                l[v + 3] = 255;
            }
        g.putImageData(k, 0, 0);
        return f;
    },
    generateDataTexture: function (a, b, c) {
        var d = a * b,
            e = new Uint8Array(3 * d),
            f = Math.floor(255 * c.r),
            g = Math.floor(255 * c.g);
        c = Math.floor(255 * c.b);
        for (var h = 0; h < d; h++) (e[3 * h] = f), (e[3 * h + 1] = g), (e[3 * h + 2] = c);
        a = new THREE.DataTexture(e, a, b, THREE.RGBFormat);
        a.needsUpdate = !0;
        return a;
    },
};
THREE.SceneUtils = {
    createMultiMaterialObject: function (a, b) {
        for (var c = new THREE.Object3D(), d = 0, e = b.length; d < e; d++) c.add(new THREE.Mesh(a, b[d]));
        return c;
    },
    detach: function (a, b, c) {
        a.applyMatrix(b.matrixWorld);
        b.remove(a);
        c.add(a);
    },
    attach: function (a, b, c) {
        var d = new THREE.Matrix4();
        d.getInverse(c.matrixWorld);
        a.applyMatrix(d);
        b.remove(a);
        c.add(a);
    },
};
THREE.FontUtils = {
    faces: {},
    face: "helvetiker",
    weight: "normal",
    style: "normal",
    size: 150,
    divisions: 10,
    getFace: function () {
        try {
            return this.faces[this.face][this.weight][this.style];
        } catch (a) {
            throw "The font " + this.face + " with " + this.weight + " weight and " + this.style + " style is missing.";
        }
    },
    loadFace: function (a) {
        var b = a.familyName.toLowerCase();
        this.faces[b] = this.faces[b] || {};
        this.faces[b][a.cssFontWeight] = this.faces[b][a.cssFontWeight] || {};
        this.faces[b][a.cssFontWeight][a.cssFontStyle] = a;
        return (this.faces[b][a.cssFontWeight][a.cssFontStyle] = a);
    },
    drawText: function (a) {
        var b = this.getFace(),
            c = this.size / b.resolution,
            d = 0,
            e = String(a).split(""),
            f = e.length,
            g = [];
        for (a = 0; a < f; a++) {
            var h = new THREE.Path(),
                h = this.extractGlyphPoints(e[a], b, c, d, h),
                d = d + h.offset;
            g.push(h.path);
        }
        return { paths: g, offset: d / 2 };
    },
    extractGlyphPoints: function (a, b, c, d, e) {
        var f = [],
            g,
            h,
            k,
            l,
            p,
            q,
            n,
            t,
            r,
            s,
            u,
            v = b.glyphs[a] || b.glyphs["?"];
        if (v) {
            if (v.o)
                for (b = v._cachedOutline || (v._cachedOutline = v.o.split(" ")), l = b.length, a = 0; a < l; )
                    switch (((k = b[a++]), k)) {
                        case "m":
                            k = b[a++] * c + d;
                            p = b[a++] * c;
                            e.moveTo(k, p);
                            break;
                        case "l":
                            k = b[a++] * c + d;
                            p = b[a++] * c;
                            e.lineTo(k, p);
                            break;
                        case "q":
                            k = b[a++] * c + d;
                            p = b[a++] * c;
                            t = b[a++] * c + d;
                            r = b[a++] * c;
                            e.quadraticCurveTo(t, r, k, p);
                            if ((g = f[f.length - 1]))
                                for (q = g.x, n = g.y, g = 1, h = this.divisions; g <= h; g++) {
                                    var x = g / h;
                                    THREE.Shape.Utils.b2(x, q, t, k);
                                    THREE.Shape.Utils.b2(x, n, r, p);
                                }
                            break;
                        case "b":
                            if (((k = b[a++] * c + d), (p = b[a++] * c), (t = b[a++] * c + d), (r = b[a++] * c), (s = b[a++] * c + d), (u = b[a++] * c), e.bezierCurveTo(t, r, s, u, k, p), (g = f[f.length - 1])))
                                for (q = g.x, n = g.y, g = 1, h = this.divisions; g <= h; g++) (x = g / h), THREE.Shape.Utils.b3(x, q, t, s, k), THREE.Shape.Utils.b3(x, n, r, u, p);
                    }
            return { offset: v.ha * c, path: e };
        }
    },
};
THREE.FontUtils.generateShapes = function (a, b) {
    b = b || {};
    var c = void 0 !== b.curveSegments ? b.curveSegments : 4,
        d = void 0 !== b.font ? b.font : "helvetiker",
        e = void 0 !== b.weight ? b.weight : "normal",
        f = void 0 !== b.style ? b.style : "normal";
    THREE.FontUtils.size = void 0 !== b.size ? b.size : 100;
    THREE.FontUtils.divisions = c;
    THREE.FontUtils.face = d;
    THREE.FontUtils.weight = e;
    THREE.FontUtils.style = f;
    c = THREE.FontUtils.drawText(a).paths;
    d = [];
    e = 0;
    for (f = c.length; e < f; e++) Array.prototype.push.apply(d, c[e].toShapes());
    return d;
};
(function (a) {
    var b = function (a) {
        for (var b = a.length, e = 0, f = b - 1, g = 0; g < b; f = g++) e += a[f].x * a[g].y - a[g].x * a[f].y;
        return 0.5 * e;
    };
    a.Triangulate = function (a, d) {
        var e = a.length;
        if (3 > e) return null;
        var f = [],
            g = [],
            h = [],
            k,
            l,
            p;
        if (0 < b(a)) for (l = 0; l < e; l++) g[l] = l;
        else for (l = 0; l < e; l++) g[l] = e - 1 - l;
        var q = 2 * e;
        for (l = e - 1; 2 < e; ) {
            if (0 >= q--) {
                THREE.warn("THREE.FontUtils: Warning, unable to triangulate polygon! in Triangulate.process()");
                break;
            }
            k = l;
            e <= k && (k = 0);
            l = k + 1;
            e <= l && (l = 0);
            p = l + 1;
            e <= p && (p = 0);
            var n;
            a: {
                var t = (n = void 0),
                    r = void 0,
                    s = void 0,
                    u = void 0,
                    v = void 0,
                    x = void 0,
                    D = void 0,
                    w = void 0,
                    t = a[g[k]].x,
                    r = a[g[k]].y,
                    s = a[g[l]].x,
                    u = a[g[l]].y,
                    v = a[g[p]].x,
                    x = a[g[p]].y;
                if (1e-10 > (s - t) * (x - r) - (u - r) * (v - t)) n = !1;
                else {
                    var y = void 0,
                        A = void 0,
                        E = void 0,
                        G = void 0,
                        F = void 0,
                        z = void 0,
                        I = void 0,
                        U = void 0,
                        M = void 0,
                        H = void 0,
                        M = (U = I = w = D = void 0),
                        y = v - s,
                        A = x - u,
                        E = t - v,
                        G = r - x,
                        F = s - t,
                        z = u - r;
                    for (n = 0; n < e; n++)
                        if (
                            ((D = a[g[n]].x),
                            (w = a[g[n]].y),
                            !((D === t && w === r) || (D === s && w === u) || (D === v && w === x)) &&
                                ((I = D - t), (U = w - r), (M = D - s), (H = w - u), (D -= v), (w -= x), (M = y * H - A * M), (I = F * U - z * I), (U = E * w - G * D), -1e-10 <= M && -1e-10 <= U && -1e-10 <= I))
                        ) {
                            n = !1;
                            break a;
                        }
                    n = !0;
                }
            }
            if (n) {
                f.push([a[g[k]], a[g[l]], a[g[p]]]);
                h.push([g[k], g[l], g[p]]);
                k = l;
                for (p = l + 1; p < e; k++, p++) g[k] = g[p];
                e--;
                q = 2 * e;
            }
        }
        return d ? h : f;
    };
    a.Triangulate.area = b;
    return a;
})(THREE.FontUtils);
self._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };
THREE.typeface_js = self._typeface_js;
THREE.Audio = function (a) {
    THREE.Object3D.call(this);
    this.type = "Audio";
    this.context = a.context;
    this.source = this.context.createBufferSource();
    this.source.onended = this.onEnded.bind(this);
    this.gain = this.context.createGain();
    this.gain.connect(this.context.destination);
    this.panner = this.context.createPanner();
    this.panner.connect(this.gain);
    this.autoplay = !1;
    this.startTime = 0;
    this.isPlaying = !1;
};
THREE.Audio.prototype = Object.create(THREE.Object3D.prototype);
THREE.Audio.prototype.constructor = THREE.Audio;
THREE.Audio.prototype.load = function (a) {
    var b = this,
        c = new XMLHttpRequest();
    c.open("GET", a, !0);
    c.responseType = "arraybuffer";
    c.onload = function (a) {
        b.context.decodeAudioData(this.response, function (a) {
            b.source.buffer = a;
            b.autoplay && b.play();
        });
    };
    c.send();
    return this;
};
THREE.Audio.prototype.play = function () {
    if (!0 === this.isPlaying) THREE.warn("THREE.Audio: Audio is already playing.");
    else {
        var a = this.context.createBufferSource();
        a.buffer = this.source.buffer;
        a.loop = this.source.loop;
        a.onended = this.source.onended;
        a.connect(this.panner);
        a.start(0, this.startTime);
        this.isPlaying = !0;
        this.source = a;
    }
};
THREE.Audio.prototype.pause = function () {
    this.source.stop();
    this.startTime = this.context.currentTime;
};
THREE.Audio.prototype.stop = function () {
    this.source.stop();
    this.startTime = 0;
};
THREE.Audio.prototype.onEnded = function () {
    this.isPlaying = !1;
};
THREE.Audio.prototype.setLoop = function (a) {
    this.source.loop = a;
};
THREE.Audio.prototype.setRefDistance = function (a) {
    this.panner.refDistance = a;
};
THREE.Audio.prototype.setRolloffFactor = function (a) {
    this.panner.rolloffFactor = a;
};
THREE.Audio.prototype.setVolume = function (a) {
    this.gain.gain.value = a;
};
THREE.Audio.prototype.updateMatrixWorld = (function () {
    var a = new THREE.Vector3();
    return function (b) {
        THREE.Object3D.prototype.updateMatrixWorld.call(this, b);
        a.setFromMatrixPosition(this.matrixWorld);
        this.panner.setPosition(a.x, a.y, a.z);
    };
})();
THREE.AudioListener = function () {
    THREE.Object3D.call(this);
    this.type = "AudioListener";
    this.context = new (window.AudioContext || window.webkitAudioContext)();
};
THREE.AudioListener.prototype = Object.create(THREE.Object3D.prototype);
THREE.AudioListener.prototype.constructor = THREE.AudioListener;
THREE.AudioListener.prototype.updateMatrixWorld = (function () {
    var a = new THREE.Vector3(),
        b = new THREE.Quaternion(),
        c = new THREE.Vector3(),
        d = new THREE.Vector3(),
        e = new THREE.Vector3(),
        f = new THREE.Vector3();
    return function (g) {
        THREE.Object3D.prototype.updateMatrixWorld.call(this, g);
        g = this.context.listener;
        var h = this.up;
        this.matrixWorld.decompose(a, b, c);
        d.set(0, 0, -1).applyQuaternion(b);
        e.subVectors(a, f);
        g.setPosition(a.x, a.y, a.z);
        g.setOrientation(d.x, d.y, d.z, h.x, h.y, h.z);
        g.setVelocity(e.x, e.y, e.z);
        f.copy(a);
    };
})();
THREE.Curve = function () {};
THREE.Curve.prototype.getPoint = function (a) {
    THREE.warn("THREE.Curve: Warning, getPoint() not implemented!");
    return null;
};
THREE.Curve.prototype.getPointAt = function (a) {
    a = this.getUtoTmapping(a);
    return this.getPoint(a);
};
THREE.Curve.prototype.getPoints = function (a) {
    a || (a = 5);
    var b,
        c = [];
    for (b = 0; b <= a; b++) c.push(this.getPoint(b / a));
    return c;
};
THREE.Curve.prototype.getSpacedPoints = function (a) {
    a || (a = 5);
    var b,
        c = [];
    for (b = 0; b <= a; b++) c.push(this.getPointAt(b / a));
    return c;
};
THREE.Curve.prototype.getLength = function () {
    var a = this.getLengths();
    return a[a.length - 1];
};
THREE.Curve.prototype.getLengths = function (a) {
    a || (a = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200);
    if (this.cacheArcLengths && this.cacheArcLengths.length == a + 1 && !this.needsUpdate) return this.cacheArcLengths;
    this.needsUpdate = !1;
    var b = [],
        c,
        d = this.getPoint(0),
        e,
        f = 0;
    b.push(0);
    for (e = 1; e <= a; e++) (c = this.getPoint(e / a)), (f += c.distanceTo(d)), b.push(f), (d = c);
    return (this.cacheArcLengths = b);
};
THREE.Curve.prototype.updateArcLengths = function () {
    this.needsUpdate = !0;
    this.getLengths();
};
THREE.Curve.prototype.getUtoTmapping = function (a, b) {
    var c = this.getLengths(),
        d = 0,
        e = c.length,
        f;
    f = b ? b : a * c[e - 1];
    for (var g = 0, h = e - 1, k; g <= h; )
        if (((d = Math.floor(g + (h - g) / 2)), (k = c[d] - f), 0 > k)) g = d + 1;
        else if (0 < k) h = d - 1;
        else {
            h = d;
            break;
        }
    d = h;
    if (c[d] == f) return d / (e - 1);
    g = c[d];
    return (c = (d + (f - g) / (c[d + 1] - g)) / (e - 1));
};
THREE.Curve.prototype.getTangent = function (a) {
    var b = a - 1e-4;
    a += 1e-4;
    0 > b && (b = 0);
    1 < a && (a = 1);
    b = this.getPoint(b);
    return this.getPoint(a).clone().sub(b).normalize();
};
THREE.Curve.prototype.getTangentAt = function (a) {
    a = this.getUtoTmapping(a);
    return this.getTangent(a);
};
THREE.Curve.Utils = {
    tangentQuadraticBezier: function (a, b, c, d) {
        return 2 * (1 - a) * (c - b) + 2 * a * (d - c);
    },
    tangentCubicBezier: function (a, b, c, d, e) {
        return -3 * b * (1 - a) * (1 - a) + 3 * c * (1 - a) * (1 - a) - 6 * a * c * (1 - a) + 6 * a * d * (1 - a) - 3 * a * a * d + 3 * a * a * e;
    },
    tangentSpline: function (a, b, c, d, e) {
        return 6 * a * a - 6 * a + (3 * a * a - 4 * a + 1) + (-6 * a * a + 6 * a) + (3 * a * a - 2 * a);
    },
    interpolate: function (a, b, c, d, e) {
        a = 0.5 * (c - a);
        d = 0.5 * (d - b);
        var f = e * e;
        return (2 * b - 2 * c + a + d) * e * f + (-3 * b + 3 * c - 2 * a - d) * f + a * e + b;
    },
};
THREE.Curve.create = function (a, b) {
    a.prototype = Object.create(THREE.Curve.prototype);
    a.prototype.constructor = a;
    a.prototype.getPoint = b;
    return a;
};
THREE.CurvePath = function () {
    this.curves = [];
    this.bends = [];
    this.autoClose = !1;
};
THREE.CurvePath.prototype = Object.create(THREE.Curve.prototype);
THREE.CurvePath.prototype.constructor = THREE.CurvePath;
THREE.CurvePath.prototype.add = function (a) {
    this.curves.push(a);
};
THREE.CurvePath.prototype.checkConnection = function () {};
THREE.CurvePath.prototype.closePath = function () {
    var a = this.curves[0].getPoint(0),
        b = this.curves[this.curves.length - 1].getPoint(1);
    a.equals(b) || this.curves.push(new THREE.LineCurve(b, a));
};
THREE.CurvePath.prototype.getPoint = function (a) {
    var b = a * this.getLength(),
        c = this.getCurveLengths();
    for (a = 0; a < c.length; ) {
        if (c[a] >= b) return (b = c[a] - b), (a = this.curves[a]), (b = 1 - b / a.getLength()), a.getPointAt(b);
        a++;
    }
    return null;
};
THREE.CurvePath.prototype.getLength = function () {
    var a = this.getCurveLengths();
    return a[a.length - 1];
};
THREE.CurvePath.prototype.getCurveLengths = function () {
    if (this.cacheLengths && this.cacheLengths.length == this.curves.length) return this.cacheLengths;
    var a = [],
        b = 0,
        c,
        d = this.curves.length;
    for (c = 0; c < d; c++) (b += this.curves[c].getLength()), a.push(b);
    return (this.cacheLengths = a);
};
THREE.CurvePath.prototype.getBoundingBox = function () {
    var a = this.getPoints(),
        b,
        c,
        d,
        e,
        f,
        g;
    b = c = Number.NEGATIVE_INFINITY;
    e = f = Number.POSITIVE_INFINITY;
    var h,
        k,
        l,
        p,
        q = a[0] instanceof THREE.Vector3;
    p = q ? new THREE.Vector3() : new THREE.Vector2();
    k = 0;
    for (l = a.length; k < l; k++) (h = a[k]), h.x > b ? (b = h.x) : h.x < e && (e = h.x), h.y > c ? (c = h.y) : h.y < f && (f = h.y), q && (h.z > d ? (d = h.z) : h.z < g && (g = h.z)), p.add(h);
    a = { minX: e, minY: f, maxX: b, maxY: c };
    q && ((a.maxZ = d), (a.minZ = g));
    return a;
};
THREE.CurvePath.prototype.createPointsGeometry = function (a) {
    a = this.getPoints(a, !0);
    return this.createGeometry(a);
};
THREE.CurvePath.prototype.createSpacedPointsGeometry = function (a) {
    a = this.getSpacedPoints(a, !0);
    return this.createGeometry(a);
};
THREE.CurvePath.prototype.createGeometry = function (a) {
    for (var b = new THREE.Geometry(), c = 0; c < a.length; c++) b.vertices.push(new THREE.Vector3(a[c].x, a[c].y, a[c].z || 0));
    return b;
};
THREE.CurvePath.prototype.addWrapPath = function (a) {
    this.bends.push(a);
};
THREE.CurvePath.prototype.getTransformedPoints = function (a, b) {
    var c = this.getPoints(a),
        d,
        e;
    b || (b = this.bends);
    d = 0;
    for (e = b.length; d < e; d++) c = this.getWrapPoints(c, b[d]);
    return c;
};
THREE.CurvePath.prototype.getTransformedSpacedPoints = function (a, b) {
    var c = this.getSpacedPoints(a),
        d,
        e;
    b || (b = this.bends);
    d = 0;
    for (e = b.length; d < e; d++) c = this.getWrapPoints(c, b[d]);
    return c;
};
THREE.CurvePath.prototype.getWrapPoints = function (a, b) {
    var c = this.getBoundingBox(),
        d,
        e,
        f,
        g,
        h,
        k;
    d = 0;
    for (e = a.length; d < e; d++) (f = a[d]), (g = f.x), (h = f.y), (k = g / c.maxX), (k = b.getUtoTmapping(k, g)), (g = b.getPoint(k)), (k = b.getTangent(k)), k.set(-k.y, k.x).multiplyScalar(h), (f.x = g.x + k.x), (f.y = g.y + k.y);
    return a;
};
THREE.Gyroscope = function () {
    THREE.Object3D.call(this);
};
THREE.Gyroscope.prototype = Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.constructor = THREE.Gyroscope;
THREE.Gyroscope.prototype.updateMatrixWorld = (function () {
    var a = new THREE.Vector3(),
        b = new THREE.Quaternion(),
        c = new THREE.Vector3(),
        d = new THREE.Vector3(),
        e = new THREE.Quaternion(),
        f = new THREE.Vector3();
    return function (g) {
        this.matrixAutoUpdate && this.updateMatrix();
        if (this.matrixWorldNeedsUpdate || g)
            this.parent
                ? (this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorld.decompose(d, e, f), this.matrix.decompose(a, b, c), this.matrixWorld.compose(d, b, f))
                : this.matrixWorld.copy(this.matrix),
                (this.matrixWorldNeedsUpdate = !1),
                (g = !0);
        for (var h = 0, k = this.children.length; h < k; h++) this.children[h].updateMatrixWorld(g);
    };
})();
THREE.Path = function (a) {
    THREE.CurvePath.call(this);
    this.actions = [];
    a && this.fromPoints(a);
};
THREE.Path.prototype = Object.create(THREE.CurvePath.prototype);
THREE.Path.prototype.constructor = THREE.Path;
THREE.PathActions = { MOVE_TO: "moveTo", LINE_TO: "lineTo", QUADRATIC_CURVE_TO: "quadraticCurveTo", BEZIER_CURVE_TO: "bezierCurveTo", CSPLINE_THRU: "splineThru", ARC: "arc", ELLIPSE: "ellipse" };
THREE.Path.prototype.fromPoints = function (a) {
    this.moveTo(a[0].x, a[0].y);
    for (var b = 1, c = a.length; b < c; b++) this.lineTo(a[b].x, a[b].y);
};
THREE.Path.prototype.moveTo = function (a, b) {
    var c = Array.prototype.slice.call(arguments);
    this.actions.push({ action: THREE.PathActions.MOVE_TO, args: c });
};
THREE.Path.prototype.lineTo = function (a, b) {
    var c = Array.prototype.slice.call(arguments),
        d = this.actions[this.actions.length - 1].args,
        d = new THREE.LineCurve(new THREE.Vector2(d[d.length - 2], d[d.length - 1]), new THREE.Vector2(a, b));
    this.curves.push(d);
    this.actions.push({ action: THREE.PathActions.LINE_TO, args: c });
};
THREE.Path.prototype.quadraticCurveTo = function (a, b, c, d) {
    var e = Array.prototype.slice.call(arguments),
        f = this.actions[this.actions.length - 1].args,
        f = new THREE.QuadraticBezierCurve(new THREE.Vector2(f[f.length - 2], f[f.length - 1]), new THREE.Vector2(a, b), new THREE.Vector2(c, d));
    this.curves.push(f);
    this.actions.push({ action: THREE.PathActions.QUADRATIC_CURVE_TO, args: e });
};
THREE.Path.prototype.bezierCurveTo = function (a, b, c, d, e, f) {
    var g = Array.prototype.slice.call(arguments),
        h = this.actions[this.actions.length - 1].args,
        h = new THREE.CubicBezierCurve(new THREE.Vector2(h[h.length - 2], h[h.length - 1]), new THREE.Vector2(a, b), new THREE.Vector2(c, d), new THREE.Vector2(e, f));
    this.curves.push(h);
    this.actions.push({ action: THREE.PathActions.BEZIER_CURVE_TO, args: g });
};
THREE.Path.prototype.splineThru = function (a) {
    var b = Array.prototype.slice.call(arguments),
        c = this.actions[this.actions.length - 1].args,
        c = [new THREE.Vector2(c[c.length - 2], c[c.length - 1])];
    Array.prototype.push.apply(c, a);
    c = new THREE.SplineCurve(c);
    this.curves.push(c);
    this.actions.push({ action: THREE.PathActions.CSPLINE_THRU, args: b });
};
THREE.Path.prototype.arc = function (a, b, c, d, e, f) {
    var g = this.actions[this.actions.length - 1].args;
    this.absarc(a + g[g.length - 2], b + g[g.length - 1], c, d, e, f);
};
THREE.Path.prototype.absarc = function (a, b, c, d, e, f) {
    this.absellipse(a, b, c, c, d, e, f);
};
THREE.Path.prototype.ellipse = function (a, b, c, d, e, f, g) {
    var h = this.actions[this.actions.length - 1].args;
    this.absellipse(a + h[h.length - 2], b + h[h.length - 1], c, d, e, f, g);
};
THREE.Path.prototype.absellipse = function (a, b, c, d, e, f, g) {
    var h = Array.prototype.slice.call(arguments),
        k = new THREE.EllipseCurve(a, b, c, d, e, f, g);
    this.curves.push(k);
    k = k.getPoint(1);
    h.push(k.x);
    h.push(k.y);
    this.actions.push({ action: THREE.PathActions.ELLIPSE, args: h });
};
THREE.Path.prototype.getSpacedPoints = function (a, b) {
    a || (a = 40);
    for (var c = [], d = 0; d < a; d++) c.push(this.getPoint(d / a));
    return c;
};
THREE.Path.prototype.getPoints = function (a, b) {
    if (this.useSpacedPoints) return console.log("tata"), this.getSpacedPoints(a, b);
    a = a || 12;
    var c = [],
        d,
        e,
        f,
        g,
        h,
        k,
        l,
        p,
        q,
        n,
        t,
        r,
        s;
    d = 0;
    for (e = this.actions.length; d < e; d++)
        switch (((f = this.actions[d]), (g = f.action), (f = f.args), g)) {
            case THREE.PathActions.MOVE_TO:
                c.push(new THREE.Vector2(f[0], f[1]));
                break;
            case THREE.PathActions.LINE_TO:
                c.push(new THREE.Vector2(f[0], f[1]));
                break;
            case THREE.PathActions.QUADRATIC_CURVE_TO:
                h = f[2];
                k = f[3];
                q = f[0];
                n = f[1];
                0 < c.length ? ((g = c[c.length - 1]), (t = g.x), (r = g.y)) : ((g = this.actions[d - 1].args), (t = g[g.length - 2]), (r = g[g.length - 1]));
                for (f = 1; f <= a; f++) (s = f / a), (g = THREE.Shape.Utils.b2(s, t, q, h)), (s = THREE.Shape.Utils.b2(s, r, n, k)), c.push(new THREE.Vector2(g, s));
                break;
            case THREE.PathActions.BEZIER_CURVE_TO:
                h = f[4];
                k = f[5];
                q = f[0];
                n = f[1];
                l = f[2];
                p = f[3];
                0 < c.length ? ((g = c[c.length - 1]), (t = g.x), (r = g.y)) : ((g = this.actions[d - 1].args), (t = g[g.length - 2]), (r = g[g.length - 1]));
                for (f = 1; f <= a; f++) (s = f / a), (g = THREE.Shape.Utils.b3(s, t, q, l, h)), (s = THREE.Shape.Utils.b3(s, r, n, p, k)), c.push(new THREE.Vector2(g, s));
                break;
            case THREE.PathActions.CSPLINE_THRU:
                g = this.actions[d - 1].args;
                s = [new THREE.Vector2(g[g.length - 2], g[g.length - 1])];
                g = a * f[0].length;
                s = s.concat(f[0]);
                s = new THREE.SplineCurve(s);
                for (f = 1; f <= g; f++) c.push(s.getPointAt(f / g));
                break;
            case THREE.PathActions.ARC:
                h = f[0];
                k = f[1];
                n = f[2];
                l = f[3];
                g = f[4];
                q = !!f[5];
                t = g - l;
                r = 2 * a;
                for (f = 1; f <= r; f++) (s = f / r), q || (s = 1 - s), (s = l + s * t), (g = h + n * Math.cos(s)), (s = k + n * Math.sin(s)), c.push(new THREE.Vector2(g, s));
                break;
            case THREE.PathActions.ELLIPSE:
                for (h = f[0], k = f[1], n = f[2], p = f[3], l = f[4], g = f[5], q = !!f[6], t = g - l, r = 2 * a, f = 1; f <= r; f++)
                    (s = f / r), q || (s = 1 - s), (s = l + s * t), (g = h + n * Math.cos(s)), (s = k + p * Math.sin(s)), c.push(new THREE.Vector2(g, s));
        }
    d = c[c.length - 1];
    1e-10 > Math.abs(d.x - c[0].x) && 1e-10 > Math.abs(d.y - c[0].y) && c.splice(c.length - 1, 1);
    b && c.push(c[0]);
    return c;
};
THREE.Path.prototype.toShapes = function (a, b) {
    function c(a) {
        for (var b = [], c = 0, d = a.length; c < d; c++) {
            var e = a[c],
                f = new THREE.Shape();
            f.actions = e.actions;
            f.curves = e.curves;
            b.push(f);
        }
        return b;
    }
    function d(a, b) {
        for (var c = b.length, d = !1, e = c - 1, f = 0; f < c; e = f++) {
            var g = b[e],
                h = b[f],
                k = h.x - g.x,
                n = h.y - g.y;
            if (1e-10 < Math.abs(n)) {
                if ((0 > n && ((g = b[f]), (k = -k), (h = b[e]), (n = -n)), !(a.y < g.y || a.y > h.y)))
                    if (a.y == g.y) {
                        if (a.x == g.x) return !0;
                    } else {
                        e = n * (a.x - g.x) - k * (a.y - g.y);
                        if (0 == e) return !0;
                        0 > e || (d = !d);
                    }
            } else if (a.y == g.y && ((h.x <= a.x && a.x <= g.x) || (g.x <= a.x && a.x <= h.x))) return !0;
        }
        return d;
    }
    var e = (function (a) {
        var b,
            c,
            d,
            e,
            f = [],
            g = new THREE.Path();
        b = 0;
        for (c = a.length; b < c; b++) (d = a[b]), (e = d.args), (d = d.action), d == THREE.PathActions.MOVE_TO && 0 != g.actions.length && (f.push(g), (g = new THREE.Path())), g[d].apply(g, e);
        0 != g.actions.length && f.push(g);
        return f;
    })(this.actions);
    if (0 == e.length) return [];
    if (!0 === b) return c(e);
    var f,
        g,
        h,
        k = [];
    if (1 == e.length) return (g = e[0]), (h = new THREE.Shape()), (h.actions = g.actions), (h.curves = g.curves), k.push(h), k;
    var l = !THREE.Shape.Utils.isClockWise(e[0].getPoints()),
        l = a ? !l : l;
    h = [];
    var p = [],
        q = [],
        n = 0,
        t;
    p[n] = void 0;
    q[n] = [];
    var r, s;
    r = 0;
    for (s = e.length; r < s; r++)
        (g = e[r]),
            (t = g.getPoints()),
            (f = THREE.Shape.Utils.isClockWise(t)),
            (f = a ? !f : f) ? (!l && p[n] && n++, (p[n] = { s: new THREE.Shape(), p: t }), (p[n].s.actions = g.actions), (p[n].s.curves = g.curves), l && n++, (q[n] = [])) : q[n].push({ h: g, p: t[0] });
    if (!p[0]) return c(e);
    if (1 < p.length) {
        r = !1;
        s = [];
        g = 0;
        for (e = p.length; g < e; g++) h[g] = [];
        g = 0;
        for (e = p.length; g < e; g++)
            for (f = q[g], l = 0; l < f.length; l++) {
                n = f[l];
                t = !0;
                for (var u = 0; u < p.length; u++) d(n.p, p[u].p) && (g != u && s.push({ froms: g, tos: u, hole: l }), t ? ((t = !1), h[u].push(n)) : (r = !0));
                t && h[g].push(n);
            }
        0 < s.length && (r || (q = h));
    }
    r = 0;
    for (s = p.length; r < s; r++) for (h = p[r].s, k.push(h), g = q[r], e = 0, f = g.length; e < f; e++) h.holes.push(g[e].h);
    return k;
};
THREE.Shape = function () {
    THREE.Path.apply(this, arguments);
    this.holes = [];
};
THREE.Shape.prototype = Object.create(THREE.Path.prototype);
THREE.Shape.prototype.constructor = THREE.Shape;
THREE.Shape.prototype.extrude = function (a) {
    return new THREE.ExtrudeGeometry(this, a);
};
THREE.Shape.prototype.makeGeometry = function (a) {
    return new THREE.ShapeGeometry(this, a);
};
THREE.Shape.prototype.getPointsHoles = function (a) {
    var b,
        c = this.holes.length,
        d = [];
    for (b = 0; b < c; b++) d[b] = this.holes[b].getTransformedPoints(a, this.bends);
    return d;
};
THREE.Shape.prototype.getSpacedPointsHoles = function (a) {
    var b,
        c = this.holes.length,
        d = [];
    for (b = 0; b < c; b++) d[b] = this.holes[b].getTransformedSpacedPoints(a, this.bends);
    return d;
};
THREE.Shape.prototype.extractAllPoints = function (a) {
    return { shape: this.getTransformedPoints(a), holes: this.getPointsHoles(a) };
};
THREE.Shape.prototype.extractPoints = function (a) {
    return this.useSpacedPoints ? this.extractAllSpacedPoints(a) : this.extractAllPoints(a);
};
THREE.Shape.prototype.extractAllSpacedPoints = function (a) {
    return { shape: this.getTransformedSpacedPoints(a), holes: this.getSpacedPointsHoles(a) };
};
THREE.Shape.Utils = {
    triangulateShape: function (a, b) {
        function c(a, b, c) {
            return a.x != b.x ? (a.x < b.x ? a.x <= c.x && c.x <= b.x : b.x <= c.x && c.x <= a.x) : a.y < b.y ? a.y <= c.y && c.y <= b.y : b.y <= c.y && c.y <= a.y;
        }
        function d(a, b, d, e, f) {
            var g = b.x - a.x,
                h = b.y - a.y,
                k = e.x - d.x,
                l = e.y - d.y,
                p = a.x - d.x,
                q = a.y - d.y,
                E = h * k - g * l,
                G = h * p - g * q;
            if (1e-10 < Math.abs(E)) {
                if (0 < E) {
                    if (0 > G || G > E) return [];
                    k = l * p - k * q;
                    if (0 > k || k > E) return [];
                } else {
                    if (0 < G || G < E) return [];
                    k = l * p - k * q;
                    if (0 < k || k < E) return [];
                }
                if (0 == k) return !f || (0 != G && G != E) ? [a] : [];
                if (k == E) return !f || (0 != G && G != E) ? [b] : [];
                if (0 == G) return [d];
                if (G == E) return [e];
                f = k / E;
                return [{ x: a.x + f * g, y: a.y + f * h }];
            }
            if (0 != G || l * p != k * q) return [];
            h = 0 == g && 0 == h;
            k = 0 == k && 0 == l;
            if (h && k) return a.x != d.x || a.y != d.y ? [] : [a];
            if (h) return c(d, e, a) ? [a] : [];
            if (k) return c(a, b, d) ? [d] : [];
            0 != g
                ? (a.x < b.x ? ((g = a), (k = a.x), (h = b), (a = b.x)) : ((g = b), (k = b.x), (h = a), (a = a.x)), d.x < e.x ? ((b = d), (E = d.x), (l = e), (d = e.x)) : ((b = e), (E = e.x), (l = d), (d = d.x)))
                : (a.y < b.y ? ((g = a), (k = a.y), (h = b), (a = b.y)) : ((g = b), (k = b.y), (h = a), (a = a.y)), d.y < e.y ? ((b = d), (E = d.y), (l = e), (d = e.y)) : ((b = e), (E = e.y), (l = d), (d = d.y)));
            return k <= E ? (a < E ? [] : a == E ? (f ? [] : [b]) : a <= d ? [b, h] : [b, l]) : k > d ? [] : k == d ? (f ? [] : [g]) : a <= d ? [g, h] : [g, l];
        }
        function e(a, b, c, d) {
            var e = b.x - a.x,
                f = b.y - a.y;
            b = c.x - a.x;
            c = c.y - a.y;
            var g = d.x - a.x;
            d = d.y - a.y;
            a = e * c - f * b;
            e = e * d - f * g;
            return 1e-10 < Math.abs(a) ? ((b = g * c - d * b), 0 < a ? 0 <= e && 0 <= b : 0 <= e || 0 <= b) : 0 < e;
        }
        var f,
            g,
            h,
            k,
            l,
            p = {};
        h = a.concat();
        f = 0;
        for (g = b.length; f < g; f++) Array.prototype.push.apply(h, b[f]);
        f = 0;
        for (g = h.length; f < g; f++) (l = h[f].x + ":" + h[f].y), void 0 !== p[l] && THREE.warn("THREE.Shape: Duplicate point", l), (p[l] = f);
        f = (function (a, b) {
            function c(a, b) {
                var d = h.length - 1,
                    f = a - 1;
                0 > f && (f = d);
                var g = a + 1;
                g > d && (g = 0);
                d = e(h[a], h[f], h[g], k[b]);
                if (!d) return !1;
                d = k.length - 1;
                f = b - 1;
                0 > f && (f = d);
                g = b + 1;
                g > d && (g = 0);
                return (d = e(k[b], k[f], k[g], h[a])) ? !0 : !1;
            }
            function f(a, b) {
                var c, e;
                for (c = 0; c < h.length; c++) if (((e = c + 1), (e %= h.length), (e = d(a, b, h[c], h[e], !0)), 0 < e.length)) return !0;
                return !1;
            }
            function g(a, c) {
                var e, f, h, k;
                for (e = 0; e < l.length; e++) for (f = b[l[e]], h = 0; h < f.length; h++) if (((k = h + 1), (k %= f.length), (k = d(a, c, f[h], f[k], !0)), 0 < k.length)) return !0;
                return !1;
            }
            var h = a.concat(),
                k,
                l = [],
                p,
                q,
                A,
                E,
                G,
                F = [],
                z,
                I,
                U,
                M = 0;
            for (p = b.length; M < p; M++) l.push(M);
            z = 0;
            for (var H = 2 * l.length; 0 < l.length; ) {
                H--;
                if (0 > H) {
                    console.log("Infinite Loop! Holes left:" + l.length + ", Probably Hole outside Shape!");
                    break;
                }
                for (q = z; q < h.length; q++) {
                    A = h[q];
                    p = -1;
                    for (M = 0; M < l.length; M++)
                        if (((E = l[M]), (G = A.x + ":" + A.y + ":" + E), void 0 === F[G])) {
                            k = b[E];
                            for (I = 0; I < k.length; I++)
                                if (((E = k[I]), c(q, I) && !f(A, E) && !g(A, E))) {
                                    p = I;
                                    l.splice(M, 1);
                                    z = h.slice(0, q + 1);
                                    E = h.slice(q);
                                    I = k.slice(p);
                                    U = k.slice(0, p + 1);
                                    h = z.concat(I).concat(U).concat(E);
                                    z = q;
                                    break;
                                }
                            if (0 <= p) break;
                            F[G] = !0;
                        }
                    if (0 <= p) break;
                }
            }
            return h;
        })(a, b);
        var q = THREE.FontUtils.Triangulate(f, !1);
        f = 0;
        for (g = q.length; f < g; f++) for (k = q[f], h = 0; 3 > h; h++) (l = k[h].x + ":" + k[h].y), (l = p[l]), void 0 !== l && (k[h] = l);
        return q.concat();
    },
    isClockWise: function (a) {
        return 0 > THREE.FontUtils.Triangulate.area(a);
    },
    b2p0: function (a, b) {
        var c = 1 - a;
        return c * c * b;
    },
    b2p1: function (a, b) {
        return 2 * (1 - a) * a * b;
    },
    b2p2: function (a, b) {
        return a * a * b;
    },
    b2: function (a, b, c, d) {
        return this.b2p0(a, b) + this.b2p1(a, c) + this.b2p2(a, d);
    },
    b3p0: function (a, b) {
        var c = 1 - a;
        return c * c * c * b;
    },
    b3p1: function (a, b) {
        var c = 1 - a;
        return 3 * c * c * a * b;
    },
    b3p2: function (a, b) {
        return 3 * (1 - a) * a * a * b;
    },
    b3p3: function (a, b) {
        return a * a * a * b;
    },
    b3: function (a, b, c, d, e) {
        return this.b3p0(a, b) + this.b3p1(a, c) + this.b3p2(a, d) + this.b3p3(a, e);
    },
};
THREE.LineCurve = function (a, b) {
    this.v1 = a;
    this.v2 = b;
};
THREE.LineCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.LineCurve.prototype.constructor = THREE.LineCurve;
THREE.LineCurve.prototype.getPoint = function (a) {
    var b = this.v2.clone().sub(this.v1);
    b.multiplyScalar(a).add(this.v1);
    return b;
};
THREE.LineCurve.prototype.getPointAt = function (a) {
    return this.getPoint(a);
};
THREE.LineCurve.prototype.getTangent = function (a) {
    return this.v2.clone().sub(this.v1).normalize();
};
THREE.QuadraticBezierCurve = function (a, b, c) {
    this.v0 = a;
    this.v1 = b;
    this.v2 = c;
};
THREE.QuadraticBezierCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;
THREE.QuadraticBezierCurve.prototype.getPoint = function (a) {
    var b = new THREE.Vector2();
    b.x = THREE.Shape.Utils.b2(a, this.v0.x, this.v1.x, this.v2.x);
    b.y = THREE.Shape.Utils.b2(a, this.v0.y, this.v1.y, this.v2.y);
    return b;
};
THREE.QuadraticBezierCurve.prototype.getTangent = function (a) {
    var b = new THREE.Vector2();
    b.x = THREE.Curve.Utils.tangentQuadraticBezier(a, this.v0.x, this.v1.x, this.v2.x);
    b.y = THREE.Curve.Utils.tangentQuadraticBezier(a, this.v0.y, this.v1.y, this.v2.y);
    return b.normalize();
};
THREE.CubicBezierCurve = function (a, b, c, d) {
    this.v0 = a;
    this.v1 = b;
    this.v2 = c;
    this.v3 = d;
};
THREE.CubicBezierCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;
THREE.CubicBezierCurve.prototype.getPoint = function (a) {
    var b;
    b = THREE.Shape.Utils.b3(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
    a = THREE.Shape.Utils.b3(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
    return new THREE.Vector2(b, a);
};
THREE.CubicBezierCurve.prototype.getTangent = function (a) {
    var b;
    b = THREE.Curve.Utils.tangentCubicBezier(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
    a = THREE.Curve.Utils.tangentCubicBezier(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
    b = new THREE.Vector2(b, a);
    b.normalize();
    return b;
};
THREE.SplineCurve = function (a) {
    this.points = void 0 == a ? [] : a;
};
THREE.SplineCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;
THREE.SplineCurve.prototype.getPoint = function (a) {
    var b = this.points;
    a *= b.length - 1;
    var c = Math.floor(a);
    a -= c;
    var d = b[0 == c ? c : c - 1],
        e = b[c],
        f = b[c > b.length - 2 ? b.length - 1 : c + 1],
        b = b[c > b.length - 3 ? b.length - 1 : c + 2],
        c = new THREE.Vector2();
    c.x = THREE.Curve.Utils.interpolate(d.x, e.x, f.x, b.x, a);
    c.y = THREE.Curve.Utils.interpolate(d.y, e.y, f.y, b.y, a);
    return c;
};
THREE.EllipseCurve = function (a, b, c, d, e, f, g) {
    this.aX = a;
    this.aY = b;
    this.xRadius = c;
    this.yRadius = d;
    this.aStartAngle = e;
    this.aEndAngle = f;
    this.aClockwise = g;
};
THREE.EllipseCurve.prototype = Object.create(THREE.Curve.prototype);
THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;
THREE.EllipseCurve.prototype.getPoint = function (a) {
    var b = this.aEndAngle - this.aStartAngle;
    0 > b && (b += 2 * Math.PI);
    b > 2 * Math.PI && (b -= 2 * Math.PI);
    a = !0 === this.aClockwise ? this.aEndAngle + (1 - a) * (2 * Math.PI - b) : this.aStartAngle + a * b;
    b = new THREE.Vector2();
    b.x = this.aX + this.xRadius * Math.cos(a);
    b.y = this.aY + this.yRadius * Math.sin(a);
    return b;
};
THREE.ArcCurve = function (a, b, c, d, e, f) {
    THREE.EllipseCurve.call(this, a, b, c, c, d, e, f);
};
THREE.ArcCurve.prototype = Object.create(THREE.EllipseCurve.prototype);
THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;
THREE.LineCurve3 = THREE.Curve.create(
    function (a, b) {
        this.v1 = a;
        this.v2 = b;
    },
    function (a) {
        var b = new THREE.Vector3();
        b.subVectors(this.v2, this.v1);
        b.multiplyScalar(a);
        b.add(this.v1);
        return b;
    }
);
THREE.QuadraticBezierCurve3 = THREE.Curve.create(
    function (a, b, c) {
        this.v0 = a;
        this.v1 = b;
        this.v2 = c;
    },
    function (a) {
        var b = new THREE.Vector3();
        b.x = THREE.Shape.Utils.b2(a, this.v0.x, this.v1.x, this.v2.x);
        b.y = THREE.Shape.Utils.b2(a, this.v0.y, this.v1.y, this.v2.y);
        b.z = THREE.Shape.Utils.b2(a, this.v0.z, this.v1.z, this.v2.z);
        return b;
    }
);
THREE.CubicBezierCurve3 = THREE.Curve.create(
    function (a, b, c, d) {
        this.v0 = a;
        this.v1 = b;
        this.v2 = c;
        this.v3 = d;
    },
    function (a) {
        var b = new THREE.Vector3();
        b.x = THREE.Shape.Utils.b3(a, this.v0.x, this.v1.x, this.v2.x, this.v3.x);
        b.y = THREE.Shape.Utils.b3(a, this.v0.y, this.v1.y, this.v2.y, this.v3.y);
        b.z = THREE.Shape.Utils.b3(a, this.v0.z, this.v1.z, this.v2.z, this.v3.z);
        return b;
    }
);
THREE.SplineCurve3 = THREE.Curve.create(
    function (a) {
        this.points = void 0 == a ? [] : a;
    },
    function (a) {
        var b = this.points;
        a *= b.length - 1;
        var c = Math.floor(a);
        a -= c;
        var d = b[0 == c ? c : c - 1],
            e = b[c],
            f = b[c > b.length - 2 ? b.length - 1 : c + 1],
            b = b[c > b.length - 3 ? b.length - 1 : c + 2],
            c = new THREE.Vector3();
        c.x = THREE.Curve.Utils.interpolate(d.x, e.x, f.x, b.x, a);
        c.y = THREE.Curve.Utils.interpolate(d.y, e.y, f.y, b.y, a);
        c.z = THREE.Curve.Utils.interpolate(d.z, e.z, f.z, b.z, a);
        return c;
    }
);
THREE.ClosedSplineCurve3 = THREE.Curve.create(
    function (a) {
        this.points = void 0 == a ? [] : a;
    },
    function (a) {
        var b = this.points;
        a *= b.length - 0;
        var c = Math.floor(a);
        a -= c;
        var c = c + (0 < c ? 0 : (Math.floor(Math.abs(c) / b.length) + 1) * b.length),
            d = b[(c - 1) % b.length],
            e = b[c % b.length],
            f = b[(c + 1) % b.length],
            b = b[(c + 2) % b.length],
            c = new THREE.Vector3();
        c.x = THREE.Curve.Utils.interpolate(d.x, e.x, f.x, b.x, a);
        c.y = THREE.Curve.Utils.interpolate(d.y, e.y, f.y, b.y, a);
        c.z = THREE.Curve.Utils.interpolate(d.z, e.z, f.z, b.z, a);
        return c;
    }
);
THREE.AnimationHandler = {
    LINEAR: 0,
    CATMULLROM: 1,
    CATMULLROM_FORWARD: 2,
    add: function () {
        THREE.warn("THREE.AnimationHandler.add() has been deprecated.");
    },
    get: function () {
        THREE.warn("THREE.AnimationHandler.get() has been deprecated.");
    },
    remove: function () {
        THREE.warn("THREE.AnimationHandler.remove() has been deprecated.");
    },
    animations: [],
    init: function (a) {
        if (!0 === a.initialized) return a;
        for (var b = 0; b < a.hierarchy.length; b++) {
            for (var c = 0; c < a.hierarchy[b].keys.length; c++)
                if ((0 > a.hierarchy[b].keys[c].time && (a.hierarchy[b].keys[c].time = 0), void 0 !== a.hierarchy[b].keys[c].rot && !(a.hierarchy[b].keys[c].rot instanceof THREE.Quaternion))) {
                    var d = a.hierarchy[b].keys[c].rot;
                    a.hierarchy[b].keys[c].rot = new THREE.Quaternion().fromArray(d);
                }
            if (a.hierarchy[b].keys.length && void 0 !== a.hierarchy[b].keys[0].morphTargets) {
                d = {};
                for (c = 0; c < a.hierarchy[b].keys.length; c++)
                    for (var e = 0; e < a.hierarchy[b].keys[c].morphTargets.length; e++) {
                        var f = a.hierarchy[b].keys[c].morphTargets[e];
                        d[f] = -1;
                    }
                a.hierarchy[b].usedMorphTargets = d;
                for (c = 0; c < a.hierarchy[b].keys.length; c++) {
                    var g = {};
                    for (f in d) {
                        for (e = 0; e < a.hierarchy[b].keys[c].morphTargets.length; e++)
                            if (a.hierarchy[b].keys[c].morphTargets[e] === f) {
                                g[f] = a.hierarchy[b].keys[c].morphTargetsInfluences[e];
                                break;
                            }
                        e === a.hierarchy[b].keys[c].morphTargets.length && (g[f] = 0);
                    }
                    a.hierarchy[b].keys[c].morphTargetsInfluences = g;
                }
            }
            for (c = 1; c < a.hierarchy[b].keys.length; c++) a.hierarchy[b].keys[c].time === a.hierarchy[b].keys[c - 1].time && (a.hierarchy[b].keys.splice(c, 1), c--);
            for (c = 0; c < a.hierarchy[b].keys.length; c++) a.hierarchy[b].keys[c].index = c;
        }
        a.initialized = !0;
        return a;
    },
    parse: function (a) {
        var b = function (a, c) {
                c.push(a);
                for (var d = 0; d < a.children.length; d++) b(a.children[d], c);
            },
            c = [];
        if (a instanceof THREE.SkinnedMesh) for (var d = 0; d < a.skeleton.bones.length; d++) c.push(a.skeleton.bones[d]);
        else b(a, c);
        return c;
    },
    play: function (a) {
        -1 === this.animations.indexOf(a) && this.animations.push(a);
    },
    stop: function (a) {
        a = this.animations.indexOf(a);
        -1 !== a && this.animations.splice(a, 1);
    },
    update: function (a) {
        for (var b = 0; b < this.animations.length; b++) this.animations[b].resetBlendWeights();
        for (b = 0; b < this.animations.length; b++) this.animations[b].update(a);
    },
};
THREE.Animation = function (a, b) {
    this.root = a;
    this.data = THREE.AnimationHandler.init(b);
    this.hierarchy = THREE.AnimationHandler.parse(a);
    this.currentTime = 0;
    this.timeScale = 1;
    this.isPlaying = !1;
    this.loop = !0;
    this.weight = 0;
    this.interpolationType = THREE.AnimationHandler.LINEAR;
};
THREE.Animation.prototype = {
    constructor: THREE.Animation,
    keyTypes: ["pos", "rot", "scl"],
    play: function (a, b) {
        this.currentTime = void 0 !== a ? a : 0;
        this.weight = void 0 !== b ? b : 1;
        this.isPlaying = !0;
        this.reset();
        THREE.AnimationHandler.play(this);
    },
    stop: function () {
        this.isPlaying = !1;
        THREE.AnimationHandler.stop(this);
    },
    reset: function () {
        for (var a = 0, b = this.hierarchy.length; a < b; a++) {
            var c = this.hierarchy[a];
            void 0 === c.animationCache && (c.animationCache = { animations: {}, blending: { positionWeight: 0, quaternionWeight: 0, scaleWeight: 0 } });
            var d = this.data.name,
                e = c.animationCache.animations,
                f = e[d];
            void 0 === f && ((f = { prevKey: { pos: 0, rot: 0, scl: 0 }, nextKey: { pos: 0, rot: 0, scl: 0 }, originalMatrix: c.matrix }), (e[d] = f));
            for (c = 0; 3 > c; c++) {
                for (var d = this.keyTypes[c], e = this.data.hierarchy[a].keys[0], g = this.getNextKeyWith(d, a, 1); g.time < this.currentTime && g.index > e.index; ) (e = g), (g = this.getNextKeyWith(d, a, g.index + 1));
                f.prevKey[d] = e;
                f.nextKey[d] = g;
            }
        }
    },
    resetBlendWeights: function () {
        for (var a = 0, b = this.hierarchy.length; a < b; a++) {
            var c = this.hierarchy[a].animationCache;
            void 0 !== c && ((c = c.blending), (c.positionWeight = 0), (c.quaternionWeight = 0), (c.scaleWeight = 0));
        }
    },
    update: (function () {
        var a = [],
            b = new THREE.Vector3(),
            c = new THREE.Vector3(),
            d = new THREE.Quaternion(),
            e = function (a, b) {
                var c = [],
                    d = [],
                    e,
                    q,
                    n,
                    t,
                    r,
                    s;
                e = (a.length - 1) * b;
                q = Math.floor(e);
                e -= q;
                c[0] = 0 === q ? q : q - 1;
                c[1] = q;
                c[2] = q > a.length - 2 ? q : q + 1;
                c[3] = q > a.length - 3 ? q : q + 2;
                q = a[c[0]];
                t = a[c[1]];
                r = a[c[2]];
                s = a[c[3]];
                c = e * e;
                n = e * c;
                d[0] = f(q[0], t[0], r[0], s[0], e, c, n);
                d[1] = f(q[1], t[1], r[1], s[1], e, c, n);
                d[2] = f(q[2], t[2], r[2], s[2], e, c, n);
                return d;
            },
            f = function (a, b, c, d, e, f, n) {
                a = 0.5 * (c - a);
                d = 0.5 * (d - b);
                return (2 * (b - c) + a + d) * n + (-3 * (b - c) - 2 * a - d) * f + a * e + b;
            };
        return function (f) {
            if (!1 !== this.isPlaying && ((this.currentTime += f * this.timeScale), 0 !== this.weight)) {
                f = this.data.length;
                if (this.currentTime > f || 0 > this.currentTime) this.loop ? ((this.currentTime %= f), 0 > this.currentTime && (this.currentTime += f), this.reset()) : this.stop();
                f = 0;
                for (var h = this.hierarchy.length; f < h; f++)
                    for (var k = this.hierarchy[f], l = k.animationCache.animations[this.data.name], p = k.animationCache.blending, q = 0; 3 > q; q++) {
                        var n = this.keyTypes[q],
                            t = l.prevKey[n],
                            r = l.nextKey[n];
                        if ((0 < this.timeScale && r.time <= this.currentTime) || (0 > this.timeScale && t.time >= this.currentTime)) {
                            t = this.data.hierarchy[f].keys[0];
                            for (r = this.getNextKeyWith(n, f, 1); r.time < this.currentTime && r.index > t.index; ) (t = r), (r = this.getNextKeyWith(n, f, r.index + 1));
                            l.prevKey[n] = t;
                            l.nextKey[n] = r;
                        }
                        var s = (this.currentTime - t.time) / (r.time - t.time),
                            u = t[n],
                            v = r[n];
                        0 > s && (s = 0);
                        1 < s && (s = 1);
                        if ("pos" === n)
                            if (this.interpolationType === THREE.AnimationHandler.LINEAR)
                                (c.x = u[0] + (v[0] - u[0]) * s),
                                    (c.y = u[1] + (v[1] - u[1]) * s),
                                    (c.z = u[2] + (v[2] - u[2]) * s),
                                    (t = this.weight / (this.weight + p.positionWeight)),
                                    k.position.lerp(c, t),
                                    (p.positionWeight += this.weight);
                            else {
                                if (this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD)
                                    (a[0] = this.getPrevKeyWith("pos", f, t.index - 1).pos),
                                        (a[1] = u),
                                        (a[2] = v),
                                        (a[3] = this.getNextKeyWith("pos", f, r.index + 1).pos),
                                        (s = 0.33 * s + 0.33),
                                        (r = e(a, s)),
                                        (t = this.weight / (this.weight + p.positionWeight)),
                                        (p.positionWeight += this.weight),
                                        (n = k.position),
                                        (n.x += (r[0] - n.x) * t),
                                        (n.y += (r[1] - n.y) * t),
                                        (n.z += (r[2] - n.z) * t),
                                        this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD &&
                                            ((s = e(a, 1.01 * s)), b.set(s[0], s[1], s[2]), b.sub(n), (b.y = 0), b.normalize(), (s = Math.atan2(b.x, b.z)), k.rotation.set(0, s, 0));
                            }
                        else
                            "rot" === n
                                ? (THREE.Quaternion.slerp(u, v, d, s),
                                  0 === p.quaternionWeight
                                      ? (k.quaternion.copy(d), (p.quaternionWeight = this.weight))
                                      : ((t = this.weight / (this.weight + p.quaternionWeight)), THREE.Quaternion.slerp(k.quaternion, d, k.quaternion, t), (p.quaternionWeight += this.weight)))
                                : "scl" === n &&
                                  ((c.x = u[0] + (v[0] - u[0]) * s), (c.y = u[1] + (v[1] - u[1]) * s), (c.z = u[2] + (v[2] - u[2]) * s), (t = this.weight / (this.weight + p.scaleWeight)), k.scale.lerp(c, t), (p.scaleWeight += this.weight));
                    }
                return !0;
            }
        };
    })(),
    getNextKeyWith: function (a, b, c) {
        var d = this.data.hierarchy[b].keys;
        for (c = this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ? (c < d.length - 1 ? c : d.length - 1) : c % d.length; c < d.length; c++)
            if (void 0 !== d[c][a]) return d[c];
        return this.data.hierarchy[b].keys[0];
    },
    getPrevKeyWith: function (a, b, c) {
        var d = this.data.hierarchy[b].keys;
        for (c = this.interpolationType === THREE.AnimationHandler.CATMULLROM || this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ? (0 < c ? c : 0) : 0 <= c ? c : c + d.length; 0 <= c; c--)
            if (void 0 !== d[c][a]) return d[c];
        return this.data.hierarchy[b].keys[d.length - 1];
    },
};
THREE.KeyFrameAnimation = function (a) {
    this.root = a.node;
    this.data = THREE.AnimationHandler.init(a);
    this.hierarchy = THREE.AnimationHandler.parse(this.root);
    this.currentTime = 0;
    this.timeScale = 0.001;
    this.isPlaying = !1;
    this.loop = this.isPaused = !0;
    a = 0;
    for (var b = this.hierarchy.length; a < b; a++) {
        var c = this.data.hierarchy[a].sids,
            d = this.hierarchy[a];
        if (this.data.hierarchy[a].keys.length && c) {
            for (var e = 0; e < c.length; e++) {
                var f = c[e],
                    g = this.getNextKeyWith(f, a, 0);
                g && g.apply(f);
            }
            d.matrixAutoUpdate = !1;
            this.data.hierarchy[a].node.updateMatrix();
            d.matrixWorldNeedsUpdate = !0;
        }
    }
};
THREE.KeyFrameAnimation.prototype = {
    constructor: THREE.KeyFrameAnimation,
    play: function (a) {
        this.currentTime = void 0 !== a ? a : 0;
        if (!1 === this.isPlaying) {
            this.isPlaying = !0;
            var b = this.hierarchy.length,
                c,
                d;
            for (a = 0; a < b; a++)
                (c = this.hierarchy[a]),
                    (d = this.data.hierarchy[a]),
                    void 0 === d.animationCache && ((d.animationCache = {}), (d.animationCache.prevKey = null), (d.animationCache.nextKey = null), (d.animationCache.originalMatrix = c.matrix)),
                    (c = this.data.hierarchy[a].keys),
                    c.length && ((d.animationCache.prevKey = c[0]), (d.animationCache.nextKey = c[1]), (this.startTime = Math.min(c[0].time, this.startTime)), (this.endTime = Math.max(c[c.length - 1].time, this.endTime)));
            this.update(0);
        }
        this.isPaused = !1;
        THREE.AnimationHandler.play(this);
    },
    stop: function () {
        this.isPaused = this.isPlaying = !1;
        THREE.AnimationHandler.stop(this);
        for (var a = 0; a < this.data.hierarchy.length; a++) {
            var b = this.hierarchy[a],
                c = this.data.hierarchy[a];
            if (void 0 !== c.animationCache) {
                var d = c.animationCache.originalMatrix;
                d.copy(b.matrix);
                b.matrix = d;
                delete c.animationCache;
            }
        }
    },
    update: function (a) {
        if (!1 !== this.isPlaying) {
            this.currentTime += a * this.timeScale;
            a = this.data.length;
            !0 === this.loop && this.currentTime > a && (this.currentTime %= a);
            this.currentTime = Math.min(this.currentTime, a);
            a = 0;
            for (var b = this.hierarchy.length; a < b; a++) {
                var c = this.hierarchy[a],
                    d = this.data.hierarchy[a],
                    e = d.keys,
                    d = d.animationCache;
                if (e.length) {
                    var f = d.prevKey,
                        g = d.nextKey;
                    if (g.time <= this.currentTime) {
                        for (; g.time < this.currentTime && g.index > f.index; ) (f = g), (g = e[f.index + 1]);
                        d.prevKey = f;
                        d.nextKey = g;
                    }
                    g.time >= this.currentTime ? f.interpolate(g, this.currentTime) : f.interpolate(g, g.time);
                    this.data.hierarchy[a].node.updateMatrix();
                    c.matrixWorldNeedsUpdate = !0;
                }
            }
        }
    },
    getNextKeyWith: function (a, b, c) {
        b = this.data.hierarchy[b].keys;
        for (c %= b.length; c < b.length; c++) if (b[c].hasTarget(a)) return b[c];
        return b[0];
    },
    getPrevKeyWith: function (a, b, c) {
        b = this.data.hierarchy[b].keys;
        for (c = 0 <= c ? c : c + b.length; 0 <= c; c--) if (b[c].hasTarget(a)) return b[c];
        return b[b.length - 1];
    },
};
THREE.MorphAnimation = function (a) {
    this.mesh = a;
    this.frames = a.morphTargetInfluences.length;
    this.currentTime = 0;
    this.duration = 1e3;
    this.loop = !0;
    this.currentFrame = this.lastFrame = 0;
    this.isPlaying = !1;
};
THREE.MorphAnimation.prototype = {
    constructor: THREE.MorphAnimation,
    play: function () {
        this.isPlaying = !0;
    },
    pause: function () {
        this.isPlaying = !1;
    },
    update: function (a) {
        if (!1 !== this.isPlaying) {
            this.currentTime += a;
            !0 === this.loop && this.currentTime > this.duration && (this.currentTime %= this.duration);
            this.currentTime = Math.min(this.currentTime, this.duration);
            a = this.duration / this.frames;
            var b = Math.floor(this.currentTime / a),
                c = this.mesh.morphTargetInfluences;
            b != this.currentFrame && ((c[this.lastFrame] = 0), (c[this.currentFrame] = 1), (c[b] = 0), (this.lastFrame = this.currentFrame), (this.currentFrame = b));
            c[b] = (this.currentTime % a) / a;
            c[this.lastFrame] = 1 - c[b];
        }
    },
};
THREE.BoxGeometry = function (a, b, c, d, e, f) {
    function g(a, b, c, d, e, f, g, s) {
        var u,
            v = h.widthSegments,
            x = h.heightSegments,
            D = e / 2,
            w = f / 2,
            y = h.vertices.length;
        if (("x" === a && "y" === b) || ("y" === a && "x" === b)) u = "z";
        else if (("x" === a && "z" === b) || ("z" === a && "x" === b)) (u = "y"), (x = h.depthSegments);
        else if (("z" === a && "y" === b) || ("y" === a && "z" === b)) (u = "x"), (v = h.depthSegments);
        var A = v + 1,
            E = x + 1,
            G = e / v,
            F = f / x,
            z = new THREE.Vector3();
        z[u] = 0 < g ? 1 : -1;
        for (e = 0; e < E; e++)
            for (f = 0; f < A; f++) {
                var I = new THREE.Vector3();
                I[a] = (f * G - D) * c;
                I[b] = (e * F - w) * d;
                I[u] = g;
                h.vertices.push(I);
            }
        for (e = 0; e < x; e++)
            for (f = 0; f < v; f++)
                (w = f + A * e),
                    (a = f + A * (e + 1)),
                    (b = f + 1 + A * (e + 1)),
                    (c = f + 1 + A * e),
                    (d = new THREE.Vector2(f / v, 1 - e / x)),
                    (g = new THREE.Vector2(f / v, 1 - (e + 1) / x)),
                    (u = new THREE.Vector2((f + 1) / v, 1 - (e + 1) / x)),
                    (D = new THREE.Vector2((f + 1) / v, 1 - e / x)),
                    (w = new THREE.Face3(w + y, a + y, c + y)),
                    w.normal.copy(z),
                    w.vertexNormals.push(z.clone(), z.clone(), z.clone()),
                    (w.materialIndex = s),
                    h.faces.push(w),
                    h.faceVertexUvs[0].push([d, g, D]),
                    (w = new THREE.Face3(a + y, b + y, c + y)),
                    w.normal.copy(z),
                    w.vertexNormals.push(z.clone(), z.clone(), z.clone()),
                    (w.materialIndex = s),
                    h.faces.push(w),
                    h.faceVertexUvs[0].push([g.clone(), u, D.clone()]);
    }
    THREE.Geometry.call(this);
    this.type = "BoxGeometry";
    this.parameters = { width: a, height: b, depth: c, widthSegments: d, heightSegments: e, depthSegments: f };
    this.widthSegments = d || 1;
    this.heightSegments = e || 1;
    this.depthSegments = f || 1;
    var h = this;
    d = a / 2;
    e = b / 2;
    f = c / 2;
    g("z", "y", -1, -1, c, b, d, 0);
    g("z", "y", 1, -1, c, b, -d, 1);
    g("x", "z", 1, 1, a, c, e, 2);
    g("x", "z", 1, -1, a, c, -e, 3);
    g("x", "y", 1, -1, a, b, f, 4);
    g("x", "y", -1, -1, a, b, -f, 5);
    this.mergeVertices();
};
THREE.BoxGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;
THREE.CircleGeometry = function (a, b, c, d) {
    THREE.Geometry.call(this);
    this.type = "CircleGeometry";
    this.parameters = { radius: a, segments: b, thetaStart: c, thetaLength: d };
    a = a || 50;
    b = void 0 !== b ? Math.max(3, b) : 8;
    c = void 0 !== c ? c : 0;
    d = void 0 !== d ? d : 2 * Math.PI;
    var e,
        f = [];
    e = new THREE.Vector3();
    var g = new THREE.Vector2(0.5, 0.5);
    this.vertices.push(e);
    f.push(g);
    for (e = 0; e <= b; e++) {
        var h = new THREE.Vector3(),
            k = c + (e / b) * d;
        h.x = a * Math.cos(k);
        h.y = a * Math.sin(k);
        this.vertices.push(h);
        f.push(new THREE.Vector2((h.x / a + 1) / 2, (h.y / a + 1) / 2));
    }
    c = new THREE.Vector3(0, 0, 1);
    for (e = 1; e <= b; e++) this.faces.push(new THREE.Face3(e, e + 1, 0, [c.clone(), c.clone(), c.clone()])), this.faceVertexUvs[0].push([f[e].clone(), f[e + 1].clone(), g.clone()]);
    this.computeFaceNormals();
    this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), a);
};
THREE.CircleGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;
THREE.CubeGeometry = function (a, b, c, d, e, f) {
    THREE.warn("THREE.CubeGeometry has been renamed to THREE.BoxGeometry.");
    return new THREE.BoxGeometry(a, b, c, d, e, f);
};
THREE.CylinderGeometry = function (a, b, c, d, e, f, g, h) {
    THREE.Geometry.call(this);
    this.type = "CylinderGeometry";
    this.parameters = { radiusTop: a, radiusBottom: b, height: c, radialSegments: d, heightSegments: e, openEnded: f, thetaStart: g, thetaLength: h };
    a = void 0 !== a ? a : 20;
    b = void 0 !== b ? b : 20;
    c = void 0 !== c ? c : 100;
    d = d || 8;
    e = e || 1;
    f = void 0 !== f ? f : !1;
    g = void 0 !== g ? g : 0;
    h = void 0 !== h ? h : 2 * Math.PI;
    var k = c / 2,
        l,
        p,
        q = [],
        n = [];
    for (p = 0; p <= e; p++) {
        var t = [],
            r = [],
            s = p / e,
            u = s * (b - a) + a;
        for (l = 0; l <= d; l++) {
            var v = l / d,
                x = new THREE.Vector3();
            x.x = u * Math.sin(v * h + g);
            x.y = -s * c + k;
            x.z = u * Math.cos(v * h + g);
            this.vertices.push(x);
            t.push(this.vertices.length - 1);
            r.push(new THREE.Vector2(v, 1 - s));
        }
        q.push(t);
        n.push(r);
    }
    c = (b - a) / c;
    for (l = 0; l < d; l++)
        for (
            0 !== a ? ((g = this.vertices[q[0][l]].clone()), (h = this.vertices[q[0][l + 1]].clone())) : ((g = this.vertices[q[1][l]].clone()), (h = this.vertices[q[1][l + 1]].clone())),
                g.setY(Math.sqrt(g.x * g.x + g.z * g.z) * c).normalize(),
                h.setY(Math.sqrt(h.x * h.x + h.z * h.z) * c).normalize(),
                p = 0;
            p < e;
            p++
        ) {
            var t = q[p][l],
                r = q[p + 1][l],
                s = q[p + 1][l + 1],
                u = q[p][l + 1],
                v = g.clone(),
                x = g.clone(),
                D = h.clone(),
                w = h.clone(),
                y = n[p][l].clone(),
                A = n[p + 1][l].clone(),
                E = n[p + 1][l + 1].clone(),
                G = n[p][l + 1].clone();
            this.faces.push(new THREE.Face3(t, r, u, [v, x, w]));
            this.faceVertexUvs[0].push([y, A, G]);
            this.faces.push(new THREE.Face3(r, s, u, [x.clone(), D, w.clone()]));
            this.faceVertexUvs[0].push([A.clone(), E, G.clone()]);
        }
    if (!1 === f && 0 < a)
        for (this.vertices.push(new THREE.Vector3(0, k, 0)), l = 0; l < d; l++)
            (t = q[0][l]),
                (r = q[0][l + 1]),
                (s = this.vertices.length - 1),
                (v = new THREE.Vector3(0, 1, 0)),
                (x = new THREE.Vector3(0, 1, 0)),
                (D = new THREE.Vector3(0, 1, 0)),
                (y = n[0][l].clone()),
                (A = n[0][l + 1].clone()),
                (E = new THREE.Vector2(A.x, 0)),
                this.faces.push(new THREE.Face3(t, r, s, [v, x, D])),
                this.faceVertexUvs[0].push([y, A, E]);
    if (!1 === f && 0 < b)
        for (this.vertices.push(new THREE.Vector3(0, -k, 0)), l = 0; l < d; l++)
            (t = q[e][l + 1]),
                (r = q[e][l]),
                (s = this.vertices.length - 1),
                (v = new THREE.Vector3(0, -1, 0)),
                (x = new THREE.Vector3(0, -1, 0)),
                (D = new THREE.Vector3(0, -1, 0)),
                (y = n[e][l + 1].clone()),
                (A = n[e][l].clone()),
                (E = new THREE.Vector2(A.x, 1)),
                this.faces.push(new THREE.Face3(t, r, s, [v, x, D])),
                this.faceVertexUvs[0].push([y, A, E]);
    this.computeFaceNormals();
};
THREE.CylinderGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;
THREE.ExtrudeGeometry = function (a, b) {
    "undefined" !== typeof a && (THREE.Geometry.call(this), (this.type = "ExtrudeGeometry"), (a = a instanceof Array ? a : [a]), this.addShapeList(a, b), this.computeFaceNormals());
};
THREE.ExtrudeGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;
THREE.ExtrudeGeometry.prototype.addShapeList = function (a, b) {
    for (var c = a.length, d = 0; d < c; d++) this.addShape(a[d], b);
};
THREE.ExtrudeGeometry.prototype.addShape = function (a, b) {
    function c(a, b, c) {
        b || THREE.error("THREE.ExtrudeGeometry: vec does not exist");
        return b.clone().multiplyScalar(c).add(a);
    }
    function d(a, b, c) {
        var d = 1,
            d = a.x - b.x,
            e = a.y - b.y,
            f = c.x - a.x,
            g = c.y - a.y,
            h = d * d + e * e;
        if (1e-10 < Math.abs(d * g - e * f)) {
            var k = Math.sqrt(h),
                l = Math.sqrt(f * f + g * g),
                h = b.x - e / k;
            b = b.y + d / k;
            f = ((c.x - g / l - h) * g - (c.y + f / l - b) * f) / (d * g - e * f);
            c = h + d * f - a.x;
            a = b + e * f - a.y;
            d = c * c + a * a;
            if (2 >= d) return new THREE.Vector2(c, a);
            d = Math.sqrt(d / 2);
        } else (a = !1), 1e-10 < d ? 1e-10 < f && (a = !0) : -1e-10 > d ? -1e-10 > f && (a = !0) : Math.sign(e) == Math.sign(g) && (a = !0), a ? ((c = -e), (a = d), (d = Math.sqrt(h))) : ((c = d), (a = e), (d = Math.sqrt(h / 2)));
        return new THREE.Vector2(c / d, a / d);
    }
    function e(a, b) {
        var c, d;
        for (O = a.length; 0 <= --O; ) {
            c = O;
            d = O - 1;
            0 > d && (d = a.length - 1);
            for (var e = 0, f = t + 2 * p, e = 0; e < f; e++) {
                var g = oa * e,
                    h = oa * (e + 1),
                    k = b + c + g,
                    g = b + d + g,
                    l = b + d + h,
                    h = b + c + h,
                    k = k + U,
                    g = g + U,
                    l = l + U,
                    h = h + U;
                I.faces.push(new THREE.Face3(k, g, h, null, null, x));
                I.faces.push(new THREE.Face3(g, l, h, null, null, x));
                k = D.generateSideWallUV(I, k, g, l, h);
                I.faceVertexUvs[0].push([k[0], k[1], k[3]]);
                I.faceVertexUvs[0].push([k[1], k[2], k[3]]);
            }
        }
    }
    function f(a, b, c) {
        I.vertices.push(new THREE.Vector3(a, b, c));
    }
    function g(a, b, c) {
        a += U;
        b += U;
        c += U;
        I.faces.push(new THREE.Face3(a, b, c, null, null, v));
        a = D.generateTopUV(I, a, b, c);
        I.faceVertexUvs[0].push(a);
    }
    var h = void 0 !== b.amount ? b.amount : 100,
        k = void 0 !== b.bevelThickness ? b.bevelThickness : 6,
        l = void 0 !== b.bevelSize ? b.bevelSize : k - 2,
        p = void 0 !== b.bevelSegments ? b.bevelSegments : 3,
        q = void 0 !== b.bevelEnabled ? b.bevelEnabled : !0,
        n = void 0 !== b.curveSegments ? b.curveSegments : 12,
        t = void 0 !== b.steps ? b.steps : 1,
        r = b.extrudePath,
        s,
        u = !1,
        v = b.material,
        x = b.extrudeMaterial,
        D = void 0 !== b.UVGenerator ? b.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator,
        w,
        y,
        A,
        E;
    r && ((s = r.getSpacedPoints(t)), (u = !0), (q = !1), (w = void 0 !== b.frames ? b.frames : new THREE.TubeGeometry.FrenetFrames(r, t, !1)), (y = new THREE.Vector3()), (A = new THREE.Vector3()), (E = new THREE.Vector3()));
    q || (l = k = p = 0);
    var G,
        F,
        z,
        I = this,
        U = this.vertices.length,
        r = a.extractPoints(n),
        n = r.shape,
        M = r.holes;
    if ((r = !THREE.Shape.Utils.isClockWise(n))) {
        n = n.reverse();
        F = 0;
        for (z = M.length; F < z; F++) (G = M[F]), THREE.Shape.Utils.isClockWise(G) && (M[F] = G.reverse());
        r = !1;
    }
    var H = THREE.Shape.Utils.triangulateShape(n, M),
        L = n;
    F = 0;
    for (z = M.length; F < z; F++) (G = M[F]), (n = n.concat(G));
    var P,
        N,
        R,
        V,
        J,
        oa = n.length,
        ja,
        ha = H.length,
        r = [],
        O = 0;
    R = L.length;
    P = R - 1;
    for (N = O + 1; O < R; O++, P++, N++) P === R && (P = 0), N === R && (N = 0), (r[O] = d(L[O], L[P], L[N]));
    var ca = [],
        ba,
        qa = r.concat();
    F = 0;
    for (z = M.length; F < z; F++) {
        G = M[F];
        ba = [];
        O = 0;
        R = G.length;
        P = R - 1;
        for (N = O + 1; O < R; O++, P++, N++) P === R && (P = 0), N === R && (N = 0), (ba[O] = d(G[O], G[P], G[N]));
        ca.push(ba);
        qa = qa.concat(ba);
    }
    for (P = 0; P < p; P++) {
        R = P / p;
        V = k * (1 - R);
        N = l * Math.sin((R * Math.PI) / 2);
        O = 0;
        for (R = L.length; O < R; O++) (J = c(L[O], r[O], N)), f(J.x, J.y, -V);
        F = 0;
        for (z = M.length; F < z; F++) for (G = M[F], ba = ca[F], O = 0, R = G.length; O < R; O++) (J = c(G[O], ba[O], N)), f(J.x, J.y, -V);
    }
    N = l;
    for (O = 0; O < oa; O++) (J = q ? c(n[O], qa[O], N) : n[O]), u ? (A.copy(w.normals[0]).multiplyScalar(J.x), y.copy(w.binormals[0]).multiplyScalar(J.y), E.copy(s[0]).add(A).add(y), f(E.x, E.y, E.z)) : f(J.x, J.y, 0);
    for (R = 1; R <= t; R++)
        for (O = 0; O < oa; O++) (J = q ? c(n[O], qa[O], N) : n[O]), u ? (A.copy(w.normals[R]).multiplyScalar(J.x), y.copy(w.binormals[R]).multiplyScalar(J.y), E.copy(s[R]).add(A).add(y), f(E.x, E.y, E.z)) : f(J.x, J.y, (h / t) * R);
    for (P = p - 1; 0 <= P; P--) {
        R = P / p;
        V = k * (1 - R);
        N = l * Math.sin((R * Math.PI) / 2);
        O = 0;
        for (R = L.length; O < R; O++) (J = c(L[O], r[O], N)), f(J.x, J.y, h + V);
        F = 0;
        for (z = M.length; F < z; F++) for (G = M[F], ba = ca[F], O = 0, R = G.length; O < R; O++) (J = c(G[O], ba[O], N)), u ? f(J.x, J.y + s[t - 1].y, s[t - 1].x + V) : f(J.x, J.y, h + V);
    }
    (function () {
        if (q) {
            var a;
            a = 0 * oa;
            for (O = 0; O < ha; O++) (ja = H[O]), g(ja[2] + a, ja[1] + a, ja[0] + a);
            a = t + 2 * p;
            a *= oa;
            for (O = 0; O < ha; O++) (ja = H[O]), g(ja[0] + a, ja[1] + a, ja[2] + a);
        } else {
            for (O = 0; O < ha; O++) (ja = H[O]), g(ja[2], ja[1], ja[0]);
            for (O = 0; O < ha; O++) (ja = H[O]), g(ja[0] + oa * t, ja[1] + oa * t, ja[2] + oa * t);
        }
    })();
    (function () {
        var a = 0;
        e(L, a);
        a += L.length;
        F = 0;
        for (z = M.length; F < z; F++) (G = M[F]), e(G, a), (a += G.length);
    })();
};
THREE.ExtrudeGeometry.WorldUVGenerator = {
    generateTopUV: function (a, b, c, d) {
        a = a.vertices;
        b = a[b];
        c = a[c];
        d = a[d];
        return [new THREE.Vector2(b.x, b.y), new THREE.Vector2(c.x, c.y), new THREE.Vector2(d.x, d.y)];
    },
    generateSideWallUV: function (a, b, c, d, e) {
        a = a.vertices;
        b = a[b];
        c = a[c];
        d = a[d];
        e = a[e];
        return 0.01 > Math.abs(b.y - c.y)
            ? [new THREE.Vector2(b.x, 1 - b.z), new THREE.Vector2(c.x, 1 - c.z), new THREE.Vector2(d.x, 1 - d.z), new THREE.Vector2(e.x, 1 - e.z)]
            : [new THREE.Vector2(b.y, 1 - b.z), new THREE.Vector2(c.y, 1 - c.z), new THREE.Vector2(d.y, 1 - d.z), new THREE.Vector2(e.y, 1 - e.z)];
    },
};
THREE.ShapeGeometry = function (a, b) {
    THREE.Geometry.call(this);
    this.type = "ShapeGeometry";
    !1 === a instanceof Array && (a = [a]);
    this.addShapeList(a, b);
    this.computeFaceNormals();
};
THREE.ShapeGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;
THREE.ShapeGeometry.prototype.addShapeList = function (a, b) {
    for (var c = 0, d = a.length; c < d; c++) this.addShape(a[c], b);
    return this;
};
THREE.ShapeGeometry.prototype.addShape = function (a, b) {
    void 0 === b && (b = {});
    var c = b.material,
        d = void 0 === b.UVGenerator ? THREE.ExtrudeGeometry.WorldUVGenerator : b.UVGenerator,
        e,
        f,
        g,
        h = this.vertices.length;
    e = a.extractPoints(void 0 !== b.curveSegments ? b.curveSegments : 12);
    var k = e.shape,
        l = e.holes;
    if (!THREE.Shape.Utils.isClockWise(k)) for (k = k.reverse(), e = 0, f = l.length; e < f; e++) (g = l[e]), THREE.Shape.Utils.isClockWise(g) && (l[e] = g.reverse());
    var p = THREE.Shape.Utils.triangulateShape(k, l);
    e = 0;
    for (f = l.length; e < f; e++) (g = l[e]), (k = k.concat(g));
    l = k.length;
    f = p.length;
    for (e = 0; e < l; e++) (g = k[e]), this.vertices.push(new THREE.Vector3(g.x, g.y, 0));
    for (e = 0; e < f; e++) (l = p[e]), (k = l[0] + h), (g = l[1] + h), (l = l[2] + h), this.faces.push(new THREE.Face3(k, g, l, null, null, c)), this.faceVertexUvs[0].push(d.generateTopUV(this, k, g, l));
};
THREE.LatheGeometry = function (a, b, c, d) {
    THREE.Geometry.call(this);
    this.type = "LatheGeometry";
    this.parameters = { points: a, segments: b, phiStart: c, phiLength: d };
    b = b || 12;
    c = c || 0;
    d = d || 2 * Math.PI;
    for (var e = 1 / (a.length - 1), f = 1 / b, g = 0, h = b; g <= h; g++)
        for (var k = c + g * f * d, l = Math.cos(k), p = Math.sin(k), k = 0, q = a.length; k < q; k++) {
            var n = a[k],
                t = new THREE.Vector3();
            t.x = l * n.x - p * n.y;
            t.y = p * n.x + l * n.y;
            t.z = n.z;
            this.vertices.push(t);
        }
    c = a.length;
    g = 0;
    for (h = b; g < h; g++)
        for (k = 0, q = a.length - 1; k < q; k++) {
            b = p = k + c * g;
            d = p + c;
            var l = p + 1 + c,
                p = p + 1,
                n = g * f,
                t = k * e,
                r = n + f,
                s = t + e;
            this.faces.push(new THREE.Face3(b, d, p));
            this.faceVertexUvs[0].push([new THREE.Vector2(n, t), new THREE.Vector2(r, t), new THREE.Vector2(n, s)]);
            this.faces.push(new THREE.Face3(d, l, p));
            this.faceVertexUvs[0].push([new THREE.Vector2(r, t), new THREE.Vector2(r, s), new THREE.Vector2(n, s)]);
        }
    this.mergeVertices();
    this.computeFaceNormals();
    this.computeVertexNormals();
};
THREE.LatheGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;
THREE.PlaneGeometry = function (a, b, c, d) {
    console.info("THREE.PlaneGeometry: Consider using THREE.PlaneBufferGeometry for lower memory footprint.");
    THREE.Geometry.call(this);
    this.type = "PlaneGeometry";
    this.parameters = { width: a, height: b, widthSegments: c, heightSegments: d };
    this.fromBufferGeometry(new THREE.PlaneBufferGeometry(a, b, c, d));
};
THREE.PlaneGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;
THREE.PlaneBufferGeometry = function (a, b, c, d) {
    THREE.BufferGeometry.call(this);
    this.type = "PlaneBufferGeometry";
    this.parameters = { width: a, height: b, widthSegments: c, heightSegments: d };
    var e = a / 2,
        f = b / 2;
    c = c || 1;
    d = d || 1;
    var g = c + 1,
        h = d + 1,
        k = a / c,
        l = b / d;
    b = new Float32Array(g * h * 3);
    a = new Float32Array(g * h * 3);
    for (var p = new Float32Array(g * h * 2), q = 0, n = 0, t = 0; t < h; t++) for (var r = t * l - f, s = 0; s < g; s++) (b[q] = s * k - e), (b[q + 1] = -r), (a[q + 2] = 1), (p[n] = s / c), (p[n + 1] = 1 - t / d), (q += 3), (n += 2);
    q = 0;
    e = new (65535 < b.length / 3 ? Uint32Array : Uint16Array)(c * d * 6);
    for (t = 0; t < d; t++) for (s = 0; s < c; s++) (f = s + g * (t + 1)), (h = s + 1 + g * (t + 1)), (k = s + 1 + g * t), (e[q] = s + g * t), (e[q + 1] = f), (e[q + 2] = k), (e[q + 3] = f), (e[q + 4] = h), (e[q + 5] = k), (q += 6);
    this.addAttribute("index", new THREE.BufferAttribute(e, 1));
    this.addAttribute("position", new THREE.BufferAttribute(b, 3));
    this.addAttribute("normal", new THREE.BufferAttribute(a, 3));
    this.addAttribute("uv", new THREE.BufferAttribute(p, 2));
};
THREE.PlaneBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);
THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;
THREE.RingGeometry = function (a, b, c, d, e, f) {
    THREE.Geometry.call(this);
    this.type = "RingGeometry";
    this.parameters = { innerRadius: a, outerRadius: b, thetaSegments: c, phiSegments: d, thetaStart: e, thetaLength: f };
    a = a || 0;
    b = b || 50;
    e = void 0 !== e ? e : 0;
    f = void 0 !== f ? f : 2 * Math.PI;
    c = void 0 !== c ? Math.max(3, c) : 8;
    d = void 0 !== d ? Math.max(1, d) : 8;
    var g,
        h = [],
        k = a,
        l = (b - a) / d;
    for (a = 0; a < d + 1; a++) {
        for (g = 0; g < c + 1; g++) {
            var p = new THREE.Vector3(),
                q = e + (g / c) * f;
            p.x = k * Math.cos(q);
            p.y = k * Math.sin(q);
            this.vertices.push(p);
            h.push(new THREE.Vector2((p.x / b + 1) / 2, (p.y / b + 1) / 2));
        }
        k += l;
    }
    b = new THREE.Vector3(0, 0, 1);
    for (a = 0; a < d; a++)
        for (e = a * (c + 1), g = 0; g < c; g++)
            (f = q = g + e),
                (l = q + c + 1),
                (p = q + c + 2),
                this.faces.push(new THREE.Face3(f, l, p, [b.clone(), b.clone(), b.clone()])),
                this.faceVertexUvs[0].push([h[f].clone(), h[l].clone(), h[p].clone()]),
                (f = q),
                (l = q + c + 2),
                (p = q + 1),
                this.faces.push(new THREE.Face3(f, l, p, [b.clone(), b.clone(), b.clone()])),
                this.faceVertexUvs[0].push([h[f].clone(), h[l].clone(), h[p].clone()]);
    this.computeFaceNormals();
    this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), k);
};
THREE.RingGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.RingGeometry.prototype.constructor = THREE.RingGeometry;
THREE.SphereGeometry = function (a, b, c, d, e, f, g) {
    THREE.Geometry.call(this);
    this.type = "SphereGeometry";
    this.parameters = { radius: a, widthSegments: b, heightSegments: c, phiStart: d, phiLength: e, thetaStart: f, thetaLength: g };
    a = a || 50;
    b = Math.max(3, Math.floor(b) || 8);
    c = Math.max(2, Math.floor(c) || 6);
    d = void 0 !== d ? d : 0;
    e = void 0 !== e ? e : 2 * Math.PI;
    f = void 0 !== f ? f : 0;
    g = void 0 !== g ? g : Math.PI;
    var h,
        k,
        l = [],
        p = [];
    for (k = 0; k <= c; k++) {
        var q = [],
            n = [];
        for (h = 0; h <= b; h++) {
            var t = h / b,
                r = k / c,
                s = new THREE.Vector3();
            s.x = -a * Math.cos(d + t * e) * Math.sin(f + r * g);
            s.y = a * Math.cos(f + r * g);
            s.z = a * Math.sin(d + t * e) * Math.sin(f + r * g);
            this.vertices.push(s);
            q.push(this.vertices.length - 1);
            n.push(new THREE.Vector2(t, 1 - r));
        }
        l.push(q);
        p.push(n);
    }
    for (k = 0; k < c; k++)
        for (h = 0; h < b; h++) {
            d = l[k][h + 1];
            e = l[k][h];
            f = l[k + 1][h];
            g = l[k + 1][h + 1];
            var q = this.vertices[d].clone().normalize(),
                n = this.vertices[e].clone().normalize(),
                t = this.vertices[f].clone().normalize(),
                r = this.vertices[g].clone().normalize(),
                s = p[k][h + 1].clone(),
                u = p[k][h].clone(),
                v = p[k + 1][h].clone(),
                x = p[k + 1][h + 1].clone();
            Math.abs(this.vertices[d].y) === a
                ? ((s.x = (s.x + u.x) / 2), this.faces.push(new THREE.Face3(d, f, g, [q, t, r])), this.faceVertexUvs[0].push([s, v, x]))
                : Math.abs(this.vertices[f].y) === a
                ? ((v.x = (v.x + x.x) / 2), this.faces.push(new THREE.Face3(d, e, f, [q, n, t])), this.faceVertexUvs[0].push([s, u, v]))
                : (this.faces.push(new THREE.Face3(d, e, g, [q, n, r])), this.faceVertexUvs[0].push([s, u, x]), this.faces.push(new THREE.Face3(e, f, g, [n.clone(), t, r.clone()])), this.faceVertexUvs[0].push([u.clone(), v, x.clone()]));
        }
    this.computeFaceNormals();
    this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), a);
};
THREE.SphereGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;
THREE.TextGeometry = function (a, b) {
    b = b || {};
    var c = THREE.FontUtils.generateShapes(a, b);
    b.amount = void 0 !== b.height ? b.height : 50;
    void 0 === b.bevelThickness && (b.bevelThickness = 10);
    void 0 === b.bevelSize && (b.bevelSize = 8);
    void 0 === b.bevelEnabled && (b.bevelEnabled = !1);
    THREE.ExtrudeGeometry.call(this, c, b);
    this.type = "TextGeometry";
};
THREE.TextGeometry.prototype = Object.create(THREE.ExtrudeGeometry.prototype);
THREE.TextGeometry.prototype.constructor = THREE.TextGeometry;
THREE.TorusGeometry = function (a, b, c, d, e) {
    THREE.Geometry.call(this);
    this.type = "TorusGeometry";
    this.parameters = { radius: a, tube: b, radialSegments: c, tubularSegments: d, arc: e };
    a = a || 100;
    b = b || 40;
    c = c || 8;
    d = d || 6;
    e = e || 2 * Math.PI;
    for (var f = new THREE.Vector3(), g = [], h = [], k = 0; k <= c; k++)
        for (var l = 0; l <= d; l++) {
            var p = (l / d) * e,
                q = (k / c) * Math.PI * 2;
            f.x = a * Math.cos(p);
            f.y = a * Math.sin(p);
            var n = new THREE.Vector3();
            n.x = (a + b * Math.cos(q)) * Math.cos(p);
            n.y = (a + b * Math.cos(q)) * Math.sin(p);
            n.z = b * Math.sin(q);
            this.vertices.push(n);
            g.push(new THREE.Vector2(l / d, k / c));
            h.push(n.clone().sub(f).normalize());
        }
    for (k = 1; k <= c; k++)
        for (l = 1; l <= d; l++)
            (a = (d + 1) * k + l - 1),
                (b = (d + 1) * (k - 1) + l - 1),
                (e = (d + 1) * (k - 1) + l),
                (f = (d + 1) * k + l),
                (p = new THREE.Face3(a, b, f, [h[a].clone(), h[b].clone(), h[f].clone()])),
                this.faces.push(p),
                this.faceVertexUvs[0].push([g[a].clone(), g[b].clone(), g[f].clone()]),
                (p = new THREE.Face3(b, e, f, [h[b].clone(), h[e].clone(), h[f].clone()])),
                this.faces.push(p),
                this.faceVertexUvs[0].push([g[b].clone(), g[e].clone(), g[f].clone()]);
    this.computeFaceNormals();
};
THREE.TorusGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;
THREE.TorusKnotGeometry = function (a, b, c, d, e, f, g) {
    function h(a, b, c, d, e) {
        var f = Math.cos(a),
            g = Math.sin(a);
        a *= b / c;
        b = Math.cos(a);
        f *= d * (2 + b) * 0.5;
        g = d * (2 + b) * g * 0.5;
        d = e * d * Math.sin(a) * 0.5;
        return new THREE.Vector3(f, g, d);
    }
    THREE.Geometry.call(this);
    this.type = "TorusKnotGeometry";
    this.parameters = { radius: a, tube: b, radialSegments: c, tubularSegments: d, p: e, q: f, heightScale: g };
    a = a || 100;
    b = b || 40;
    c = c || 64;
    d = d || 8;
    e = e || 2;
    f = f || 3;
    g = g || 1;
    for (var k = Array(c), l = new THREE.Vector3(), p = new THREE.Vector3(), q = new THREE.Vector3(), n = 0; n < c; ++n) {
        k[n] = Array(d);
        var t = (n / c) * 2 * e * Math.PI,
            r = h(t, f, e, a, g),
            t = h(t + 0.01, f, e, a, g);
        l.subVectors(t, r);
        p.addVectors(t, r);
        q.crossVectors(l, p);
        p.crossVectors(q, l);
        q.normalize();
        p.normalize();
        for (t = 0; t < d; ++t) {
            var s = (t / d) * 2 * Math.PI,
                u = -b * Math.cos(s),
                s = b * Math.sin(s),
                v = new THREE.Vector3();
            v.x = r.x + u * p.x + s * q.x;
            v.y = r.y + u * p.y + s * q.y;
            v.z = r.z + u * p.z + s * q.z;
            k[n][t] = this.vertices.push(v) - 1;
        }
    }
    for (n = 0; n < c; ++n)
        for (t = 0; t < d; ++t)
            (e = (n + 1) % c),
                (f = (t + 1) % d),
                (a = k[n][t]),
                (b = k[e][t]),
                (e = k[e][f]),
                (f = k[n][f]),
                (g = new THREE.Vector2(n / c, t / d)),
                (l = new THREE.Vector2((n + 1) / c, t / d)),
                (p = new THREE.Vector2((n + 1) / c, (t + 1) / d)),
                (q = new THREE.Vector2(n / c, (t + 1) / d)),
                this.faces.push(new THREE.Face3(a, b, f)),
                this.faceVertexUvs[0].push([g, l, q]),
                this.faces.push(new THREE.Face3(b, e, f)),
                this.faceVertexUvs[0].push([l.clone(), p, q.clone()]);
    this.computeFaceNormals();
    this.computeVertexNormals();
};
THREE.TorusKnotGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;
THREE.TubeGeometry = function (a, b, c, d, e, f) {
    THREE.Geometry.call(this);
    this.type = "TubeGeometry";
    this.parameters = { path: a, segments: b, radius: c, radialSegments: d, closed: e };
    b = b || 64;
    c = c || 1;
    d = d || 8;
    e = e || !1;
    f = f || THREE.TubeGeometry.NoTaper;
    var g = [],
        h,
        k,
        l = b + 1,
        p,
        q,
        n,
        t,
        r,
        s = new THREE.Vector3(),
        u,
        v,
        x;
    u = new THREE.TubeGeometry.FrenetFrames(a, b, e);
    v = u.normals;
    x = u.binormals;
    this.tangents = u.tangents;
    this.normals = v;
    this.binormals = x;
    for (u = 0; u < l; u++)
        for (g[u] = [], p = u / (l - 1), r = a.getPointAt(p), h = v[u], k = x[u], n = c * f(p), p = 0; p < d; p++)
            (q = (p / d) * 2 * Math.PI),
                (t = -n * Math.cos(q)),
                (q = n * Math.sin(q)),
                s.copy(r),
                (s.x += t * h.x + q * k.x),
                (s.y += t * h.y + q * k.y),
                (s.z += t * h.z + q * k.z),
                (g[u][p] = this.vertices.push(new THREE.Vector3(s.x, s.y, s.z)) - 1);
    for (u = 0; u < b; u++)
        for (p = 0; p < d; p++)
            (f = e ? (u + 1) % b : u + 1),
                (l = (p + 1) % d),
                (a = g[u][p]),
                (c = g[f][p]),
                (f = g[f][l]),
                (l = g[u][l]),
                (s = new THREE.Vector2(u / b, p / d)),
                (v = new THREE.Vector2((u + 1) / b, p / d)),
                (x = new THREE.Vector2((u + 1) / b, (p + 1) / d)),
                (h = new THREE.Vector2(u / b, (p + 1) / d)),
                this.faces.push(new THREE.Face3(a, c, l)),
                this.faceVertexUvs[0].push([s, v, h]),
                this.faces.push(new THREE.Face3(c, f, l)),
                this.faceVertexUvs[0].push([v.clone(), x, h.clone()]);
    this.computeFaceNormals();
    this.computeVertexNormals();
};
THREE.TubeGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;
THREE.TubeGeometry.NoTaper = function (a) {
    return 1;
};
THREE.TubeGeometry.SinusoidalTaper = function (a) {
    return Math.sin(Math.PI * a);
};
THREE.TubeGeometry.FrenetFrames = function (a, b, c) {
    var d = new THREE.Vector3(),
        e = [],
        f = [],
        g = [],
        h = new THREE.Vector3(),
        k = new THREE.Matrix4();
    b += 1;
    var l, p, q;
    this.tangents = e;
    this.normals = f;
    this.binormals = g;
    for (l = 0; l < b; l++) (p = l / (b - 1)), (e[l] = a.getTangentAt(p)), e[l].normalize();
    f[0] = new THREE.Vector3();
    g[0] = new THREE.Vector3();
    a = Number.MAX_VALUE;
    l = Math.abs(e[0].x);
    p = Math.abs(e[0].y);
    q = Math.abs(e[0].z);
    l <= a && ((a = l), d.set(1, 0, 0));
    p <= a && ((a = p), d.set(0, 1, 0));
    q <= a && d.set(0, 0, 1);
    h.crossVectors(e[0], d).normalize();
    f[0].crossVectors(e[0], h);
    g[0].crossVectors(e[0], f[0]);
    for (l = 1; l < b; l++)
        (f[l] = f[l - 1].clone()),
            (g[l] = g[l - 1].clone()),
            h.crossVectors(e[l - 1], e[l]),
            1e-4 < h.length() && (h.normalize(), (d = Math.acos(THREE.Math.clamp(e[l - 1].dot(e[l]), -1, 1))), f[l].applyMatrix4(k.makeRotationAxis(h, d))),
            g[l].crossVectors(e[l], f[l]);
    if (c)
        for (d = Math.acos(THREE.Math.clamp(f[0].dot(f[b - 1]), -1, 1)), d /= b - 1, 0 < e[0].dot(h.crossVectors(f[0], f[b - 1])) && (d = -d), l = 1; l < b; l++)
            f[l].applyMatrix4(k.makeRotationAxis(e[l], d * l)), g[l].crossVectors(e[l], f[l]);
};
THREE.PolyhedronGeometry = function (a, b, c, d) {
    function e(a) {
        var b = a.normalize().clone();
        b.index = k.vertices.push(b) - 1;
        var c = Math.atan2(a.z, -a.x) / 2 / Math.PI + 0.5;
        a = Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI + 0.5;
        b.uv = new THREE.Vector2(c, 1 - a);
        return b;
    }
    function f(a, b, c) {
        var d = new THREE.Face3(a.index, b.index, c.index, [a.clone(), b.clone(), c.clone()]);
        k.faces.push(d);
        u.copy(a).add(b).add(c).divideScalar(3);
        d = Math.atan2(u.z, -u.x);
        k.faceVertexUvs[0].push([h(a.uv, a, d), h(b.uv, b, d), h(c.uv, c, d)]);
    }
    function g(a, b) {
        for (var c = Math.pow(2, b), d = e(k.vertices[a.a]), g = e(k.vertices[a.b]), h = e(k.vertices[a.c]), l = [], n = 0; n <= c; n++) {
            l[n] = [];
            for (var p = e(d.clone().lerp(h, n / c)), q = e(g.clone().lerp(h, n / c)), s = c - n, r = 0; r <= s; r++) l[n][r] = 0 == r && n == c ? p : e(p.clone().lerp(q, r / s));
        }
        for (n = 0; n < c; n++) for (r = 0; r < 2 * (c - n) - 1; r++) (d = Math.floor(r / 2)), 0 == r % 2 ? f(l[n][d + 1], l[n + 1][d], l[n][d]) : f(l[n][d + 1], l[n + 1][d + 1], l[n + 1][d]);
    }
    function h(a, b, c) {
        0 > c && 1 === a.x && (a = new THREE.Vector2(a.x - 1, a.y));
        0 === b.x && 0 === b.z && (a = new THREE.Vector2(c / 2 / Math.PI + 0.5, a.y));
        return a.clone();
    }
    THREE.Geometry.call(this);
    this.type = "PolyhedronGeometry";
    this.parameters = { vertices: a, indices: b, radius: c, detail: d };
    c = c || 1;
    d = d || 0;
    for (var k = this, l = 0, p = a.length; l < p; l += 3) e(new THREE.Vector3(a[l], a[l + 1], a[l + 2]));
    a = this.vertices;
    for (var q = [], n = (l = 0), p = b.length; l < p; l += 3, n++) {
        var t = a[b[l]],
            r = a[b[l + 1]],
            s = a[b[l + 2]];
        q[n] = new THREE.Face3(t.index, r.index, s.index, [t.clone(), r.clone(), s.clone()]);
    }
    for (var u = new THREE.Vector3(), l = 0, p = q.length; l < p; l++) g(q[l], d);
    l = 0;
    for (p = this.faceVertexUvs[0].length; l < p; l++)
        (b = this.faceVertexUvs[0][l]),
            (d = b[0].x),
            (a = b[1].x),
            (q = b[2].x),
            (n = Math.max(d, Math.max(a, q))),
            (t = Math.min(d, Math.min(a, q))),
            0.9 < n && 0.1 > t && (0.2 > d && (b[0].x += 1), 0.2 > a && (b[1].x += 1), 0.2 > q && (b[2].x += 1));
    l = 0;
    for (p = this.vertices.length; l < p; l++) this.vertices[l].multiplyScalar(c);
    this.mergeVertices();
    this.computeFaceNormals();
    this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), c);
};
THREE.PolyhedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;
THREE.DodecahedronGeometry = function (a, b) {
    this.parameters = { radius: a, detail: b };
    var c = (1 + Math.sqrt(5)) / 2,
        d = 1 / c;
    THREE.PolyhedronGeometry.call(
        this,
        [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, -d, -c, 0, -d, c, 0, d, -c, 0, d, c, 0, -c, 0, -d, c, 0, -d, -c, 0, d, c, 0, d],
        [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9,
        ],
        a,
        b
    );
};
THREE.DodecahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;
THREE.IcosahedronGeometry = function (a, b) {
    var c = (1 + Math.sqrt(5)) / 2;
    THREE.PolyhedronGeometry.call(
        this,
        [-1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, 0, 0, -1, c, 0, 1, c, 0, -1, -c, 0, 1, -c, c, 0, -1, c, 0, 1, -c, 0, -1, -c, 0, 1],
        [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1],
        a,
        b
    );
    this.type = "IcosahedronGeometry";
    this.parameters = { radius: a, detail: b };
};
THREE.IcosahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;
THREE.OctahedronGeometry = function (a, b) {
    this.parameters = { radius: a, detail: b };
    THREE.PolyhedronGeometry.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], a, b);
    this.type = "OctahedronGeometry";
    this.parameters = { radius: a, detail: b };
};
THREE.OctahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;
THREE.TetrahedronGeometry = function (a, b) {
    THREE.PolyhedronGeometry.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], a, b);
    this.type = "TetrahedronGeometry";
    this.parameters = { radius: a, detail: b };
};
THREE.TetrahedronGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;
THREE.ParametricGeometry = function (a, b, c) {
    THREE.Geometry.call(this);
    this.type = "ParametricGeometry";
    this.parameters = { func: a, slices: b, stacks: c };
    var d = this.vertices,
        e = this.faces,
        f = this.faceVertexUvs[0],
        g,
        h,
        k,
        l,
        p = b + 1;
    for (g = 0; g <= c; g++) for (l = g / c, h = 0; h <= b; h++) (k = h / b), (k = a(k, l)), d.push(k);
    var q, n, t, r;
    for (g = 0; g < c; g++)
        for (h = 0; h < b; h++)
            (a = g * p + h),
                (d = g * p + h + 1),
                (l = (g + 1) * p + h + 1),
                (k = (g + 1) * p + h),
                (q = new THREE.Vector2(h / b, g / c)),
                (n = new THREE.Vector2((h + 1) / b, g / c)),
                (t = new THREE.Vector2((h + 1) / b, (g + 1) / c)),
                (r = new THREE.Vector2(h / b, (g + 1) / c)),
                e.push(new THREE.Face3(a, d, k)),
                f.push([q, n, r]),
                e.push(new THREE.Face3(d, l, k)),
                f.push([n.clone(), t, r.clone()]);
    this.computeFaceNormals();
    this.computeVertexNormals();
};
THREE.ParametricGeometry.prototype = Object.create(THREE.Geometry.prototype);
THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;
THREE.AxisHelper = function (a) {
    a = a || 1;
    var b = new Float32Array([0, 0, 0, a, 0, 0, 0, 0, 0, 0, a, 0, 0, 0, 0, 0, 0, a]),
        c = new Float32Array([1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1]);
    a = new THREE.BufferGeometry();
    a.addAttribute("position", new THREE.BufferAttribute(b, 3));
    a.addAttribute("color", new THREE.BufferAttribute(c, 3));
    b = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors });
    THREE.Line.call(this, a, b, THREE.LinePieces);
};
THREE.AxisHelper.prototype = Object.create(THREE.Line.prototype);
THREE.AxisHelper.prototype.constructor = THREE.AxisHelper;
THREE.ArrowHelper = (function () {
    var a = new THREE.Geometry();
    a.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));
    var b = new THREE.CylinderGeometry(0, 0.5, 1, 5, 1);
    b.applyMatrix(new THREE.Matrix4().makeTranslation(0, -0.5, 0));
    return function (c, d, e, f, g, h) {
        THREE.Object3D.call(this);
        void 0 === f && (f = 16776960);
        void 0 === e && (e = 1);
        void 0 === g && (g = 0.2 * e);
        void 0 === h && (h = 0.2 * g);
        this.position.copy(d);
        this.line = new THREE.Line(a, new THREE.LineBasicMaterial({ color: f }));
        this.line.matrixAutoUpdate = !1;
        this.add(this.line);
        this.cone = new THREE.Mesh(b, new THREE.MeshBasicMaterial({ color: f }));
        this.cone.matrixAutoUpdate = !1;
        this.add(this.cone);
        this.setDirection(c);
        this.setLength(e, g, h);
    };
})();
THREE.ArrowHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;
THREE.ArrowHelper.prototype.setDirection = (function () {
    var a = new THREE.Vector3(),
        b;
    return function (c) {
        0.99999 < c.y ? this.quaternion.set(0, 0, 0, 1) : -0.99999 > c.y ? this.quaternion.set(1, 0, 0, 0) : (a.set(c.z, 0, -c.x).normalize(), (b = Math.acos(c.y)), this.quaternion.setFromAxisAngle(a, b));
    };
})();
THREE.ArrowHelper.prototype.setLength = function (a, b, c) {
    void 0 === b && (b = 0.2 * a);
    void 0 === c && (c = 0.2 * b);
    this.line.scale.set(1, a - b, 1);
    this.line.updateMatrix();
    this.cone.scale.set(c, b, c);
    this.cone.position.y = a;
    this.cone.updateMatrix();
};
THREE.ArrowHelper.prototype.setColor = function (a) {
    this.line.material.color.set(a);
    this.cone.material.color.set(a);
};
THREE.BoxHelper = function (a) {
    var b = new THREE.BufferGeometry();
    b.addAttribute("position", new THREE.BufferAttribute(new Float32Array(72), 3));
    THREE.Line.call(this, b, new THREE.LineBasicMaterial({ color: 16776960 }), THREE.LinePieces);
    void 0 !== a && this.update(a);
};
THREE.BoxHelper.prototype = Object.create(THREE.Line.prototype);
THREE.BoxHelper.prototype.constructor = THREE.BoxHelper;
THREE.BoxHelper.prototype.update = function (a) {
    var b = a.geometry;
    null === b.boundingBox && b.computeBoundingBox();
    var c = b.boundingBox.min,
        b = b.boundingBox.max,
        d = this.geometry.attributes.position.array;
    d[0] = b.x;
    d[1] = b.y;
    d[2] = b.z;
    d[3] = c.x;
    d[4] = b.y;
    d[5] = b.z;
    d[6] = c.x;
    d[7] = b.y;
    d[8] = b.z;
    d[9] = c.x;
    d[10] = c.y;
    d[11] = b.z;
    d[12] = c.x;
    d[13] = c.y;
    d[14] = b.z;
    d[15] = b.x;
    d[16] = c.y;
    d[17] = b.z;
    d[18] = b.x;
    d[19] = c.y;
    d[20] = b.z;
    d[21] = b.x;
    d[22] = b.y;
    d[23] = b.z;
    d[24] = b.x;
    d[25] = b.y;
    d[26] = c.z;
    d[27] = c.x;
    d[28] = b.y;
    d[29] = c.z;
    d[30] = c.x;
    d[31] = b.y;
    d[32] = c.z;
    d[33] = c.x;
    d[34] = c.y;
    d[35] = c.z;
    d[36] = c.x;
    d[37] = c.y;
    d[38] = c.z;
    d[39] = b.x;
    d[40] = c.y;
    d[41] = c.z;
    d[42] = b.x;
    d[43] = c.y;
    d[44] = c.z;
    d[45] = b.x;
    d[46] = b.y;
    d[47] = c.z;
    d[48] = b.x;
    d[49] = b.y;
    d[50] = b.z;
    d[51] = b.x;
    d[52] = b.y;
    d[53] = c.z;
    d[54] = c.x;
    d[55] = b.y;
    d[56] = b.z;
    d[57] = c.x;
    d[58] = b.y;
    d[59] = c.z;
    d[60] = c.x;
    d[61] = c.y;
    d[62] = b.z;
    d[63] = c.x;
    d[64] = c.y;
    d[65] = c.z;
    d[66] = b.x;
    d[67] = c.y;
    d[68] = b.z;
    d[69] = b.x;
    d[70] = c.y;
    d[71] = c.z;
    this.geometry.attributes.position.needsUpdate = !0;
    this.geometry.computeBoundingSphere();
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
};
THREE.BoundingBoxHelper = function (a, b) {
    var c = void 0 !== b ? b : 8947848;
    this.object = a;
    this.box = new THREE.Box3();
    THREE.Mesh.call(this, new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({ color: c, wireframe: !0 }));
};
THREE.BoundingBoxHelper.prototype = Object.create(THREE.Mesh.prototype);
THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;
THREE.BoundingBoxHelper.prototype.update = function () {
    this.box.setFromObject(this.object);
    this.box.size(this.scale);
    this.box.center(this.position);
};
THREE.CameraHelper = function (a) {
    function b(a, b, d) {
        c(a, d);
        c(b, d);
    }
    function c(a, b) {
        d.vertices.push(new THREE.Vector3());
        d.colors.push(new THREE.Color(b));
        void 0 === f[a] && (f[a] = []);
        f[a].push(d.vertices.length - 1);
    }
    var d = new THREE.Geometry(),
        e = new THREE.LineBasicMaterial({ color: 16777215, vertexColors: THREE.FaceColors }),
        f = {};
    b("n1", "n2", 16755200);
    b("n2", "n4", 16755200);
    b("n4", "n3", 16755200);
    b("n3", "n1", 16755200);
    b("f1", "f2", 16755200);
    b("f2", "f4", 16755200);
    b("f4", "f3", 16755200);
    b("f3", "f1", 16755200);
    b("n1", "f1", 16755200);
    b("n2", "f2", 16755200);
    b("n3", "f3", 16755200);
    b("n4", "f4", 16755200);
    b("p", "n1", 16711680);
    b("p", "n2", 16711680);
    b("p", "n3", 16711680);
    b("p", "n4", 16711680);
    b("u1", "u2", 43775);
    b("u2", "u3", 43775);
    b("u3", "u1", 43775);
    b("c", "t", 16777215);
    b("p", "c", 3355443);
    b("cn1", "cn2", 3355443);
    b("cn3", "cn4", 3355443);
    b("cf1", "cf2", 3355443);
    b("cf3", "cf4", 3355443);
    THREE.Line.call(this, d, e, THREE.LinePieces);
    this.camera = a;
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.pointMap = f;
    this.update();
};
THREE.CameraHelper.prototype = Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;
THREE.CameraHelper.prototype.update = (function () {
    var a,
        b,
        c = new THREE.Vector3(),
        d = new THREE.Camera(),
        e = function (e, g, h, k) {
            c.set(g, h, k).unproject(d);
            e = b[e];
            if (void 0 !== e) for (g = 0, h = e.length; g < h; g++) a.vertices[e[g]].copy(c);
        };
    return function () {
        a = this.geometry;
        b = this.pointMap;
        d.projectionMatrix.copy(this.camera.projectionMatrix);
        e("c", 0, 0, -1);
        e("t", 0, 0, 1);
        e("n1", -1, -1, -1);
        e("n2", 1, -1, -1);
        e("n3", -1, 1, -1);
        e("n4", 1, 1, -1);
        e("f1", -1, -1, 1);
        e("f2", 1, -1, 1);
        e("f3", -1, 1, 1);
        e("f4", 1, 1, 1);
        e("u1", 0.7, 1.1, -1);
        e("u2", -0.7, 1.1, -1);
        e("u3", 0, 2, -1);
        e("cf1", -1, 0, 1);
        e("cf2", 1, 0, 1);
        e("cf3", 0, -1, 1);
        e("cf4", 0, 1, 1);
        e("cn1", -1, 0, -1);
        e("cn2", 1, 0, -1);
        e("cn3", 0, -1, -1);
        e("cn4", 0, 1, -1);
        a.verticesNeedUpdate = !0;
    };
})();
THREE.DirectionalLightHelper = function (a, b) {
    THREE.Object3D.call(this);
    this.light = a;
    this.light.updateMatrixWorld();
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
    b = b || 1;
    var c = new THREE.Geometry();
    c.vertices.push(new THREE.Vector3(-b, b, 0), new THREE.Vector3(b, b, 0), new THREE.Vector3(b, -b, 0), new THREE.Vector3(-b, -b, 0), new THREE.Vector3(-b, b, 0));
    var d = new THREE.LineBasicMaterial({ fog: !1 });
    d.color.copy(this.light.color).multiplyScalar(this.light.intensity);
    this.lightPlane = new THREE.Line(c, d);
    this.add(this.lightPlane);
    c = new THREE.Geometry();
    c.vertices.push(new THREE.Vector3(), new THREE.Vector3());
    d = new THREE.LineBasicMaterial({ fog: !1 });
    d.color.copy(this.light.color).multiplyScalar(this.light.intensity);
    this.targetLine = new THREE.Line(c, d);
    this.add(this.targetLine);
    this.update();
};
THREE.DirectionalLightHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;
THREE.DirectionalLightHelper.prototype.dispose = function () {
    this.lightPlane.geometry.dispose();
    this.lightPlane.material.dispose();
    this.targetLine.geometry.dispose();
    this.targetLine.material.dispose();
};
THREE.DirectionalLightHelper.prototype.update = (function () {
    var a = new THREE.Vector3(),
        b = new THREE.Vector3(),
        c = new THREE.Vector3();
    return function () {
        a.setFromMatrixPosition(this.light.matrixWorld);
        b.setFromMatrixPosition(this.light.target.matrixWorld);
        c.subVectors(b, a);
        this.lightPlane.lookAt(c);
        this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
        this.targetLine.geometry.vertices[1].copy(c);
        this.targetLine.geometry.verticesNeedUpdate = !0;
        this.targetLine.material.color.copy(this.lightPlane.material.color);
    };
})();
THREE.EdgesHelper = function (a, b, c) {
    b = void 0 !== b ? b : 16777215;
    c = Math.cos(THREE.Math.degToRad(void 0 !== c ? c : 1));
    var d = [0, 0],
        e = {},
        f = function (a, b) {
            return a - b;
        },
        g = ["a", "b", "c"],
        h = new THREE.BufferGeometry(),
        k;
    a.geometry instanceof THREE.BufferGeometry ? ((k = new THREE.Geometry()), k.fromBufferGeometry(a.geometry)) : (k = a.geometry.clone());
    k.mergeVertices();
    k.computeFaceNormals();
    var l = k.vertices;
    k = k.faces;
    for (var p = 0, q = 0, n = k.length; q < n; q++)
        for (var t = k[q], r = 0; 3 > r; r++) {
            d[0] = t[g[r]];
            d[1] = t[g[(r + 1) % 3]];
            d.sort(f);
            var s = d.toString();
            void 0 === e[s] ? ((e[s] = { vert1: d[0], vert2: d[1], face1: q, face2: void 0 }), p++) : (e[s].face2 = q);
        }
    d = new Float32Array(6 * p);
    f = 0;
    for (s in e) if (((g = e[s]), void 0 === g.face2 || k[g.face1].normal.dot(k[g.face2].normal) <= c)) (p = l[g.vert1]), (d[f++] = p.x), (d[f++] = p.y), (d[f++] = p.z), (p = l[g.vert2]), (d[f++] = p.x), (d[f++] = p.y), (d[f++] = p.z);
    h.addAttribute("position", new THREE.BufferAttribute(d, 3));
    THREE.Line.call(this, h, new THREE.LineBasicMaterial({ color: b }), THREE.LinePieces);
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
};
THREE.EdgesHelper.prototype = Object.create(THREE.Line.prototype);
THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;
THREE.FaceNormalsHelper = function (a, b, c, d) {
    this.object = a;
    this.size = void 0 !== b ? b : 1;
    a = void 0 !== c ? c : 16776960;
    d = void 0 !== d ? d : 1;
    b = new THREE.Geometry();
    c = 0;
    for (var e = this.object.geometry.faces.length; c < e; c++) b.vertices.push(new THREE.Vector3(), new THREE.Vector3());
    THREE.Line.call(this, b, new THREE.LineBasicMaterial({ color: a, linewidth: d }), THREE.LinePieces);
    this.matrixAutoUpdate = !1;
    this.normalMatrix = new THREE.Matrix3();
    this.update();
};
THREE.FaceNormalsHelper.prototype = Object.create(THREE.Line.prototype);
THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;
THREE.FaceNormalsHelper.prototype.update = function () {
    var a = this.geometry.vertices,
        b = this.object,
        c = b.geometry.vertices,
        d = b.geometry.faces,
        e = b.matrixWorld;
    b.updateMatrixWorld(!0);
    this.normalMatrix.getNormalMatrix(e);
    for (var f = (b = 0), g = d.length; b < g; b++, f += 2) {
        var h = d[b];
        a[f].copy(c[h.a]).add(c[h.b]).add(c[h.c]).divideScalar(3).applyMatrix4(e);
        a[f + 1].copy(h.normal).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size).add(a[f]);
    }
    this.geometry.verticesNeedUpdate = !0;
    return this;
};
THREE.GridHelper = function (a, b) {
    var c = new THREE.Geometry(),
        d = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors });
    this.color1 = new THREE.Color(4473924);
    this.color2 = new THREE.Color(8947848);
    for (var e = -a; e <= a; e += b) {
        c.vertices.push(new THREE.Vector3(-a, 0, e), new THREE.Vector3(a, 0, e), new THREE.Vector3(e, 0, -a), new THREE.Vector3(e, 0, a));
        var f = 0 === e ? this.color1 : this.color2;
        c.colors.push(f, f, f, f);
    }
    THREE.Line.call(this, c, d, THREE.LinePieces);
};
THREE.GridHelper.prototype = Object.create(THREE.Line.prototype);
THREE.GridHelper.prototype.constructor = THREE.GridHelper;
THREE.GridHelper.prototype.setColors = function (a, b) {
    this.color1.set(a);
    this.color2.set(b);
    this.geometry.colorsNeedUpdate = !0;
};
THREE.HemisphereLightHelper = function (a, b) {
    THREE.Object3D.call(this);
    this.light = a;
    this.light.updateMatrixWorld();
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.colors = [new THREE.Color(), new THREE.Color()];
    var c = new THREE.SphereGeometry(b, 4, 2);
    c.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI / 2));
    for (var d = 0; 8 > d; d++) c.faces[d].color = this.colors[4 > d ? 0 : 1];
    d = new THREE.MeshBasicMaterial({ vertexColors: THREE.FaceColors, wireframe: !0 });
    this.lightSphere = new THREE.Mesh(c, d);
    this.add(this.lightSphere);
    this.update();
};
THREE.HemisphereLightHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;
THREE.HemisphereLightHelper.prototype.dispose = function () {
    this.lightSphere.geometry.dispose();
    this.lightSphere.material.dispose();
};
THREE.HemisphereLightHelper.prototype.update = (function () {
    var a = new THREE.Vector3();
    return function () {
        this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);
        this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);
        this.lightSphere.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate());
        this.lightSphere.geometry.colorsNeedUpdate = !0;
    };
})();
THREE.PointLightHelper = function (a, b) {
    this.light = a;
    this.light.updateMatrixWorld();
    var c = new THREE.SphereGeometry(b, 4, 2),
        d = new THREE.MeshBasicMaterial({ wireframe: !0, fog: !1 });
    d.color.copy(this.light.color).multiplyScalar(this.light.intensity);
    THREE.Mesh.call(this, c, d);
    this.matrix = this.light.matrixWorld;
    this.matrixAutoUpdate = !1;
};
THREE.PointLightHelper.prototype = Object.create(THREE.Mesh.prototype);
THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;
THREE.PointLightHelper.prototype.dispose = function () {
    this.geometry.dispose();
    this.material.dispose();
};
THREE.PointLightHelper.prototype.update = function () {
    this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
};
THREE.SkeletonHelper = function (a) {
    this.bones = this.getBoneList(a);
    for (var b = new THREE.Geometry(), c = 0; c < this.bones.length; c++)
        this.bones[c].parent instanceof THREE.Bone && (b.vertices.push(new THREE.Vector3()), b.vertices.push(new THREE.Vector3()), b.colors.push(new THREE.Color(0, 0, 1)), b.colors.push(new THREE.Color(0, 1, 0)));
    c = new THREE.LineBasicMaterial({ vertexColors: THREE.VertexColors, depthTest: !1, depthWrite: !1, transparent: !0 });
    THREE.Line.call(this, b, c, THREE.LinePieces);
    this.root = a;
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
    this.update();
};
THREE.SkeletonHelper.prototype = Object.create(THREE.Line.prototype);
THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;
THREE.SkeletonHelper.prototype.getBoneList = function (a) {
    var b = [];
    a instanceof THREE.Bone && b.push(a);
    for (var c = 0; c < a.children.length; c++) b.push.apply(b, this.getBoneList(a.children[c]));
    return b;
};
THREE.SkeletonHelper.prototype.update = function () {
    for (var a = this.geometry, b = new THREE.Matrix4().getInverse(this.root.matrixWorld), c = new THREE.Matrix4(), d = 0, e = 0; e < this.bones.length; e++) {
        var f = this.bones[e];
        f.parent instanceof THREE.Bone && (c.multiplyMatrices(b, f.matrixWorld), a.vertices[d].setFromMatrixPosition(c), c.multiplyMatrices(b, f.parent.matrixWorld), a.vertices[d + 1].setFromMatrixPosition(c), (d += 2));
    }
    a.verticesNeedUpdate = !0;
    a.computeBoundingSphere();
};
THREE.SpotLightHelper = function (a) {
    THREE.Object3D.call(this);
    this.light = a;
    this.light.updateMatrixWorld();
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
    a = new THREE.CylinderGeometry(0, 1, 1, 8, 1, !0);
    a.applyMatrix(new THREE.Matrix4().makeTranslation(0, -0.5, 0));
    a.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI / 2));
    var b = new THREE.MeshBasicMaterial({ wireframe: !0, fog: !1 });
    this.cone = new THREE.Mesh(a, b);
    this.add(this.cone);
    this.update();
};
THREE.SpotLightHelper.prototype = Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;
THREE.SpotLightHelper.prototype.dispose = function () {
    this.cone.geometry.dispose();
    this.cone.material.dispose();
};
THREE.SpotLightHelper.prototype.update = (function () {
    var a = new THREE.Vector3(),
        b = new THREE.Vector3();
    return function () {
        var c = this.light.distance ? this.light.distance : 1e4,
            d = c * Math.tan(this.light.angle);
        this.cone.scale.set(d, d, c);
        a.setFromMatrixPosition(this.light.matrixWorld);
        b.setFromMatrixPosition(this.light.target.matrixWorld);
        this.cone.lookAt(b.sub(a));
        this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
    };
})();
THREE.VertexNormalsHelper = function (a, b, c, d) {
    this.object = a;
    this.size = void 0 !== b ? b : 1;
    b = void 0 !== c ? c : 16711680;
    d = void 0 !== d ? d : 1;
    c = new THREE.Geometry();
    a = a.geometry.faces;
    for (var e = 0, f = a.length; e < f; e++) for (var g = 0, h = a[e].vertexNormals.length; g < h; g++) c.vertices.push(new THREE.Vector3(), new THREE.Vector3());
    THREE.Line.call(this, c, new THREE.LineBasicMaterial({ color: b, linewidth: d }), THREE.LinePieces);
    this.matrixAutoUpdate = !1;
    this.normalMatrix = new THREE.Matrix3();
    this.update();
};
THREE.VertexNormalsHelper.prototype = Object.create(THREE.Line.prototype);
THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;
THREE.VertexNormalsHelper.prototype.update = (function (a) {
    var b = new THREE.Vector3();
    return function (a) {
        a = ["a", "b", "c", "d"];
        this.object.updateMatrixWorld(!0);
        this.normalMatrix.getNormalMatrix(this.object.matrixWorld);
        for (var d = this.geometry.vertices, e = this.object.geometry.vertices, f = this.object.geometry.faces, g = this.object.matrixWorld, h = 0, k = 0, l = f.length; k < l; k++)
            for (var p = f[k], q = 0, n = p.vertexNormals.length; q < n; q++) {
                var t = p.vertexNormals[q];
                d[h].copy(e[p[a[q]]]).applyMatrix4(g);
                b.copy(t).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size);
                b.add(d[h]);
                h += 1;
                d[h].copy(b);
                h += 1;
            }
        this.geometry.verticesNeedUpdate = !0;
        return this;
    };
})();
THREE.VertexTangentsHelper = function (a, b, c, d) {
    this.object = a;
    this.size = void 0 !== b ? b : 1;
    b = void 0 !== c ? c : 255;
    d = void 0 !== d ? d : 1;
    c = new THREE.Geometry();
    a = a.geometry.faces;
    for (var e = 0, f = a.length; e < f; e++) for (var g = 0, h = a[e].vertexTangents.length; g < h; g++) c.vertices.push(new THREE.Vector3()), c.vertices.push(new THREE.Vector3());
    THREE.Line.call(this, c, new THREE.LineBasicMaterial({ color: b, linewidth: d }), THREE.LinePieces);
    this.matrixAutoUpdate = !1;
    this.update();
};
THREE.VertexTangentsHelper.prototype = Object.create(THREE.Line.prototype);
THREE.VertexTangentsHelper.prototype.constructor = THREE.VertexTangentsHelper;
THREE.VertexTangentsHelper.prototype.update = (function (a) {
    var b = new THREE.Vector3();
    return function (a) {
        a = ["a", "b", "c", "d"];
        this.object.updateMatrixWorld(!0);
        for (var d = this.geometry.vertices, e = this.object.geometry.vertices, f = this.object.geometry.faces, g = this.object.matrixWorld, h = 0, k = 0, l = f.length; k < l; k++)
            for (var p = f[k], q = 0, n = p.vertexTangents.length; q < n; q++) {
                var t = p.vertexTangents[q];
                d[h].copy(e[p[a[q]]]).applyMatrix4(g);
                b.copy(t).transformDirection(g).multiplyScalar(this.size);
                b.add(d[h]);
                h += 1;
                d[h].copy(b);
                h += 1;
            }
        this.geometry.verticesNeedUpdate = !0;
        return this;
    };
})();
THREE.WireframeHelper = function (a, b) {
    var c = void 0 !== b ? b : 16777215,
        d = [0, 0],
        e = {},
        f = function (a, b) {
            return a - b;
        },
        g = ["a", "b", "c"],
        h = new THREE.BufferGeometry();
    if (a.geometry instanceof THREE.Geometry) {
        for (var k = a.geometry.vertices, l = a.geometry.faces, p = 0, q = new Uint32Array(6 * l.length), n = 0, t = l.length; n < t; n++)
            for (var r = l[n], s = 0; 3 > s; s++) {
                d[0] = r[g[s]];
                d[1] = r[g[(s + 1) % 3]];
                d.sort(f);
                var u = d.toString();
                void 0 === e[u] && ((q[2 * p] = d[0]), (q[2 * p + 1] = d[1]), (e[u] = !0), p++);
            }
        d = new Float32Array(6 * p);
        n = 0;
        for (t = p; n < t; n++) for (s = 0; 2 > s; s++) (p = k[q[2 * n + s]]), (g = 6 * n + 3 * s), (d[g + 0] = p.x), (d[g + 1] = p.y), (d[g + 2] = p.z);
        h.addAttribute("position", new THREE.BufferAttribute(d, 3));
    } else if (a.geometry instanceof THREE.BufferGeometry) {
        if (void 0 !== a.geometry.attributes.index) {
            k = a.geometry.attributes.position.array;
            t = a.geometry.attributes.index.array;
            l = a.geometry.drawcalls;
            p = 0;
            0 === l.length && (l = [{ count: t.length, index: 0, start: 0 }]);
            for (var q = new Uint32Array(2 * t.length), r = 0, v = l.length; r < v; ++r)
                for (var s = l[r].start, u = l[r].count, g = l[r].index, n = s, x = s + u; n < x; n += 3)
                    for (s = 0; 3 > s; s++) (d[0] = g + t[n + s]), (d[1] = g + t[n + ((s + 1) % 3)]), d.sort(f), (u = d.toString()), void 0 === e[u] && ((q[2 * p] = d[0]), (q[2 * p + 1] = d[1]), (e[u] = !0), p++);
            d = new Float32Array(6 * p);
            n = 0;
            for (t = p; n < t; n++) for (s = 0; 2 > s; s++) (g = 6 * n + 3 * s), (p = 3 * q[2 * n + s]), (d[g + 0] = k[p]), (d[g + 1] = k[p + 1]), (d[g + 2] = k[p + 2]);
        } else
            for (k = a.geometry.attributes.position.array, p = k.length / 3, q = p / 3, d = new Float32Array(6 * p), n = 0, t = q; n < t; n++)
                for (s = 0; 3 > s; s++)
                    (g = 18 * n + 6 * s), (q = 9 * n + 3 * s), (d[g + 0] = k[q]), (d[g + 1] = k[q + 1]), (d[g + 2] = k[q + 2]), (p = 9 * n + ((s + 1) % 3) * 3), (d[g + 3] = k[p]), (d[g + 4] = k[p + 1]), (d[g + 5] = k[p + 2]);
        h.addAttribute("position", new THREE.BufferAttribute(d, 3));
    }
    THREE.Line.call(this, h, new THREE.LineBasicMaterial({ color: c }), THREE.LinePieces);
    this.matrix = a.matrixWorld;
    this.matrixAutoUpdate = !1;
};
THREE.WireframeHelper.prototype = Object.create(THREE.Line.prototype);
THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;
THREE.ImmediateRenderObject = function () {
    THREE.Object3D.call(this);
    this.render = function (a) {};
};
THREE.ImmediateRenderObject.prototype = Object.create(THREE.Object3D.prototype);
THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;
THREE.MorphBlendMesh = function (a, b) {
    THREE.Mesh.call(this, a, b);
    this.animationsMap = {};
    this.animationsList = [];
    var c = this.geometry.morphTargets.length;
    this.createAnimation("__default", 0, c - 1, c / 1);
    this.setAnimationWeight("__default", 1);
};
THREE.MorphBlendMesh.prototype = Object.create(THREE.Mesh.prototype);
THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;
THREE.MorphBlendMesh.prototype.createAnimation = function (a, b, c, d) {
    b = { startFrame: b, endFrame: c, length: c - b + 1, fps: d, duration: (c - b) / d, lastFrame: 0, currentFrame: 0, active: !1, time: 0, direction: 1, weight: 1, directionBackwards: !1, mirroredLoop: !1 };
    this.animationsMap[a] = b;
    this.animationsList.push(b);
};
THREE.MorphBlendMesh.prototype.autoCreateAnimations = function (a) {
    for (var b = /([a-z]+)_?(\d+)/, c, d = {}, e = this.geometry, f = 0, g = e.morphTargets.length; f < g; f++) {
        var h = e.morphTargets[f].name.match(b);
        if (h && 1 < h.length) {
            var k = h[1];
            d[k] || (d[k] = { start: Infinity, end: -Infinity });
            h = d[k];
            f < h.start && (h.start = f);
            f > h.end && (h.end = f);
            c || (c = k);
        }
    }
    for (k in d) (h = d[k]), this.createAnimation(k, h.start, h.end, a);
    this.firstAnimation = c;
};
THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function (a) {
    if ((a = this.animationsMap[a])) (a.direction = 1), (a.directionBackwards = !1);
};
THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function (a) {
    if ((a = this.animationsMap[a])) (a.direction = -1), (a.directionBackwards = !0);
};
THREE.MorphBlendMesh.prototype.setAnimationFPS = function (a, b) {
    var c = this.animationsMap[a];
    c && ((c.fps = b), (c.duration = (c.end - c.start) / c.fps));
};
THREE.MorphBlendMesh.prototype.setAnimationDuration = function (a, b) {
    var c = this.animationsMap[a];
    c && ((c.duration = b), (c.fps = (c.end - c.start) / c.duration));
};
THREE.MorphBlendMesh.prototype.setAnimationWeight = function (a, b) {
    var c = this.animationsMap[a];
    c && (c.weight = b);
};
THREE.MorphBlendMesh.prototype.setAnimationTime = function (a, b) {
    var c = this.animationsMap[a];
    c && (c.time = b);
};
THREE.MorphBlendMesh.prototype.getAnimationTime = function (a) {
    var b = 0;
    if ((a = this.animationsMap[a])) b = a.time;
    return b;
};
THREE.MorphBlendMesh.prototype.getAnimationDuration = function (a) {
    var b = -1;
    if ((a = this.animationsMap[a])) b = a.duration;
    return b;
};
THREE.MorphBlendMesh.prototype.playAnimation = function (a) {
    var b = this.animationsMap[a];
    b ? ((b.time = 0), (b.active = !0)) : THREE.warn("THREE.MorphBlendMesh: animation[" + a + "] undefined in .playAnimation()");
};
THREE.MorphBlendMesh.prototype.stopAnimation = function (a) {
    if ((a = this.animationsMap[a])) a.active = !1;
};
THREE.MorphBlendMesh.prototype.update = function (a) {
    for (var b = 0, c = this.animationsList.length; b < c; b++) {
        var d = this.animationsList[b];
        if (d.active) {
            var e = d.duration / d.length;
            d.time += d.direction * a;
            if (d.mirroredLoop) {
                if (d.time > d.duration || 0 > d.time) (d.direction *= -1), d.time > d.duration && ((d.time = d.duration), (d.directionBackwards = !0)), 0 > d.time && ((d.time = 0), (d.directionBackwards = !1));
            } else (d.time %= d.duration), 0 > d.time && (d.time += d.duration);
            var f = d.startFrame + THREE.Math.clamp(Math.floor(d.time / e), 0, d.length - 1),
                g = d.weight;
            f !== d.currentFrame && ((this.morphTargetInfluences[d.lastFrame] = 0), (this.morphTargetInfluences[d.currentFrame] = 1 * g), (this.morphTargetInfluences[f] = 0), (d.lastFrame = d.currentFrame), (d.currentFrame = f));
            e = (d.time % e) / e;
            d.directionBackwards && (e = 1 - e);
            this.morphTargetInfluences[d.currentFrame] = e * g;
            this.morphTargetInfluences[d.lastFrame] = (1 - e) * g;
        }
    }
};

/*!
 * VERSION: 1.7.5
 * DATE: 2015-02-26
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2015, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 **/
var _gsScope = "undefined" != typeof module && module.exports && "undefined" != typeof global ? global : this || window;
(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function () {
    "use strict";
    var t = document.documentElement,
        e = window,
        i = function (i, r) {
            var s = "x" === r ? "Width" : "Height",
                n = "scroll" + s,
                o = "client" + s,
                a = document.body;
            return i === e || i === t || i === a ? Math.max(t[n], a[n]) - (e["inner" + s] || t[o] || a[o]) : i[n] - i["offset" + s];
        },
        r = _gsScope._gsDefine.plugin({
            propName: "scrollTo",
            API: 2,
            version: "1.7.5",
            init: function (t, r, s) {
                return (
                    (this._wdw = t === e),
                    (this._target = t),
                    (this._tween = s),
                    "object" != typeof r && (r = { y: r }),
                    (this.vars = r),
                    (this._autoKill = r.autoKill !== !1),
                    (this.x = this.xPrev = this.getX()),
                    (this.y = this.yPrev = this.getY()),
                    null != r.x ? (this._addTween(this, "x", this.x, "max" === r.x ? i(t, "x") : r.x, "scrollTo_x", !0), this._overwriteProps.push("scrollTo_x")) : (this.skipX = !0),
                    null != r.y ? (this._addTween(this, "y", this.y, "max" === r.y ? i(t, "y") : r.y, "scrollTo_y", !0), this._overwriteProps.push("scrollTo_y")) : (this.skipY = !0),
                    !0
                );
            },
            set: function (t) {
                this._super.setRatio.call(this, t);
                var r = this._wdw || !this.skipX ? this.getX() : this.xPrev,
                    s = this._wdw || !this.skipY ? this.getY() : this.yPrev,
                    n = s - this.yPrev,
                    o = r - this.xPrev;
                this._autoKill &&
                    (!this.skipX && (o > 7 || -7 > o) && i(this._target, "x") > r && (this.skipX = !0),
                    !this.skipY && (n > 7 || -7 > n) && i(this._target, "y") > s && (this.skipY = !0),
                    this.skipX && this.skipY && (this._tween.kill(), this.vars.onAutoKill && this.vars.onAutoKill.apply(this.vars.onAutoKillScope || this._tween, this.vars.onAutoKillParams || []))),
                    this._wdw ? e.scrollTo(this.skipX ? r : this.x, this.skipY ? s : this.y) : (this.skipY || (this._target.scrollTop = this.y), this.skipX || (this._target.scrollLeft = this.x)),
                    (this.xPrev = this.x),
                    (this.yPrev = this.y);
            },
        }),
        s = r.prototype;
    (r.max = i),
        (s.getX = function () {
            return this._wdw ? (null != e.pageXOffset ? e.pageXOffset : null != t.scrollLeft ? t.scrollLeft : document.body.scrollLeft) : this._target.scrollLeft;
        }),
        (s.getY = function () {
            return this._wdw ? (null != e.pageYOffset ? e.pageYOffset : null != t.scrollTop ? t.scrollTop : document.body.scrollTop) : this._target.scrollTop;
        }),
        (s._kill = function (t) {
            return t.scrollTo_x && (this.skipX = !0), t.scrollTo_y && (this.skipY = !0), this._super._kill.call(this, t);
        });
}),
    _gsScope._gsDefine && _gsScope._gsQueue.pop()();

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.OBJLoader = function (manager) {
    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;
};

THREE.OBJLoader.prototype = {
    constructor: THREE.OBJLoader,

    load: function (url, onLoad, onProgress, onError) {
        var scope = this;

        var loader = new THREE.XHRLoader(scope.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.load(url, function (text) {
            onLoad(scope.parse(text));
        });
    },

    parse: function (text) {
        function vector(x, y, z) {
            return new THREE.Vector3(parseFloat(x), parseFloat(y), parseFloat(z));
        }

        function uv(u, v) {
            return new THREE.Vector2(parseFloat(u), parseFloat(v));
        }

        function face3(a, b, c, normals) {
            return new THREE.Face3(a, b, c, normals);
        }

        var object = new THREE.Object3D();
        var geometry, material, mesh;

        function parseVertexIndex(index) {
            index = parseInt(index);

            return index >= 0 ? index - 1 : index + vertices.length;
        }

        function parseNormalIndex(index) {
            index = parseInt(index);

            return index >= 0 ? index - 1 : index + normals.length;
        }

        function parseUVIndex(index) {
            index = parseInt(index);

            return index >= 0 ? index - 1 : index + uvs.length;
        }

        function add_face(a, b, c, normals_inds) {
            if (normals_inds === undefined) {
                geometry.faces.push(face3(vertices[parseVertexIndex(a)] - 1, vertices[parseVertexIndex(b)] - 1, vertices[parseVertexIndex(c)] - 1));
            } else {
                geometry.faces.push(
                    face3(vertices[parseVertexIndex(a)] - 1, vertices[parseVertexIndex(b)] - 1, vertices[parseVertexIndex(c)] - 1, [
                        normals[parseNormalIndex(normals_inds[0])].clone(),
                        normals[parseNormalIndex(normals_inds[1])].clone(),
                        normals[parseNormalIndex(normals_inds[2])].clone(),
                    ])
                );
            }
        }

        function add_uvs(a, b, c) {
            geometry.faceVertexUvs[0].push([uvs[parseUVIndex(a)].clone(), uvs[parseUVIndex(b)].clone(), uvs[parseUVIndex(c)].clone()]);
        }

        function handle_face_line(faces, uvs, normals_inds) {
            if (faces[3] === undefined) {
                add_face(faces[0], faces[1], faces[2], normals_inds);

                if (uvs !== undefined && uvs.length > 0) {
                    add_uvs(uvs[0], uvs[1], uvs[2]);
                }
            } else {
                if (normals_inds !== undefined && normals_inds.length > 0) {
                    add_face(faces[0], faces[1], faces[3], [normals_inds[0], normals_inds[1], normals_inds[3]]);
                    add_face(faces[1], faces[2], faces[3], [normals_inds[1], normals_inds[2], normals_inds[3]]);
                } else {
                    add_face(faces[0], faces[1], faces[3]);
                    add_face(faces[1], faces[2], faces[3]);
                }

                if (uvs !== undefined && uvs.length > 0) {
                    add_uvs(uvs[0], uvs[1], uvs[3]);
                    add_uvs(uvs[1], uvs[2], uvs[3]);
                }
            }
        }

        // create mesh if no objects in text

        if (/^o /gm.test(text) === false) {
            geometry = new THREE.Geometry();
            material = new THREE.MeshLambertMaterial();
            mesh = new THREE.Mesh(geometry, material);
            object.add(mesh);
        }

        var vertices = [];
        var normals = [];
        var uvs = [];

        // v float float float

        var vertex_pattern = /v( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/;

        // vn float float float

        var normal_pattern = /vn( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/;

        // vt float float

        var uv_pattern = /vt( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/;

        // f vertex vertex vertex ...

        var face_pattern1 = /f( +-?\d+)( +-?\d+)( +-?\d+)( +-?\d+)?/;

        // f vertex/uv vertex/uv vertex/uv ...

        var face_pattern2 = /f( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))?/;

        // f vertex/uv/normal vertex/uv/normal vertex/uv/normal ...

        var face_pattern3 = /f( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))?/;

        // f vertex//normal vertex//normal vertex//normal ...

        var face_pattern4 = /f( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))?/;

        // fixes

        text = text.replace(/\\\r\n/g, ""); // handles line continuations \

        var lines = text.split("\n");

        for (var i = 0; i < lines.length; i++) {
            var line = lines[i];
            line = line.trim();

            var result;

            if (line.length === 0 || line.charAt(0) === "#") {
                continue;
            } else if ((result = vertex_pattern.exec(line)) !== null) {
                // ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

                vertices.push(geometry.vertices.push(vector(result[1], result[2], result[3])));
            } else if ((result = normal_pattern.exec(line)) !== null) {
                // ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

                normals.push(vector(result[1], result[2], result[3]));
            } else if ((result = uv_pattern.exec(line)) !== null) {
                // ["vt 0.1 0.2", "0.1", "0.2"]

                uvs.push(uv(result[1], result[2]));
            } else if ((result = face_pattern1.exec(line)) !== null) {
                // ["f 1 2 3", "1", "2", "3", undefined]

                handle_face_line([result[1], result[2], result[3], result[4]]);
            } else if ((result = face_pattern2.exec(line)) !== null) {
                // ["f 1/1 2/2 3/3", " 1/1", "1", "1", " 2/2", "2", "2", " 3/3", "3", "3", undefined, undefined, undefined]

                handle_face_line(
                    [result[2], result[5], result[8], result[11]], //faces
                    [result[3], result[6], result[9], result[12]] //uv
                );
            } else if ((result = face_pattern3.exec(line)) !== null) {
                // ["f 1/1/1 2/2/2 3/3/3", " 1/1/1", "1", "1", "1", " 2/2/2", "2", "2", "2", " 3/3/3", "3", "3", "3", undefined, undefined, undefined, undefined]

                handle_face_line(
                    [result[2], result[6], result[10], result[14]], //faces
                    [result[3], result[7], result[11], result[15]], //uv
                    [result[4], result[8], result[12], result[16]] //normal
                );
            } else if ((result = face_pattern4.exec(line)) !== null) {
                // ["f 1//1 2//2 3//3", " 1//1", "1", "1", " 2//2", "2", "2", " 3//3", "3", "3", undefined, undefined, undefined]

                handle_face_line(
                    [result[2], result[5], result[8], result[11]], //faces
                    [], //uv
                    [result[3], result[6], result[9], result[12]] //normal
                );
            } else if (/^o /.test(line)) {
                geometry = new THREE.Geometry();
                material = new THREE.MeshLambertMaterial();

                mesh = new THREE.Mesh(geometry, material);
                mesh.name = line.substring(2).trim();
                object.add(mesh);
            } else if (/^g /.test(line)) {
                // group
            } else if (/^usemtl /.test(line)) {
                // material

                material.name = line.substring(7).trim();
            } else if (/^mtllib /.test(line)) {
                // mtl file
            } else if (/^s /.test(line)) {
                // smooth shading
            } else {
                // console.log( "THREE.OBJLoader: Unhandled line " + line );
            }
        }

        var children = object.children;

        for (var i = 0, l = children.length; i < l; i++) {
            var geometry = children[i].geometry;

            geometry.computeFaceNormals();
            geometry.computeBoundingSphere();
        }

        return object;
    },
};

//     Underscore.js 1.5.2
//     http://underscorejs.org
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function () {
    var n = this,
        t = n._,
        r = {},
        e = Array.prototype,
        u = Object.prototype,
        i = Function.prototype,
        a = e.push,
        o = e.slice,
        c = e.concat,
        l = u.toString,
        f = u.hasOwnProperty,
        s = e.forEach,
        p = e.map,
        h = e.reduce,
        v = e.reduceRight,
        g = e.filter,
        d = e.every,
        m = e.some,
        y = e.indexOf,
        b = e.lastIndexOf,
        x = Array.isArray,
        w = Object.keys,
        _ = i.bind,
        j = function (n) {
            return n instanceof j ? n : this instanceof j ? ((this._wrapped = n), void 0) : new j(n);
        };
    "undefined" != typeof exports ? ("undefined" != typeof module && module.exports && (exports = module.exports = j), (exports._ = j)) : (n._ = j), (j.VERSION = "1.5.2");
    var A = (j.each = j.forEach = function (n, t, e) {
        if (null != n)
            if (s && n.forEach === s) n.forEach(t, e);
            else if (n.length === +n.length) {
                for (var u = 0, i = n.length; i > u; u++) if (t.call(e, n[u], u, n) === r) return;
            } else for (var a = j.keys(n), u = 0, i = a.length; i > u; u++) if (t.call(e, n[a[u]], a[u], n) === r) return;
    });
    j.map = j.collect = function (n, t, r) {
        var e = [];
        return null == n
            ? e
            : p && n.map === p
            ? n.map(t, r)
            : (A(n, function (n, u, i) {
                  e.push(t.call(r, n, u, i));
              }),
              e);
    };
    var E = "Reduce of empty array with no initial value";
    (j.reduce = j.foldl = j.inject = function (n, t, r, e) {
        var u = arguments.length > 2;
        if ((null == n && (n = []), h && n.reduce === h)) return e && (t = j.bind(t, e)), u ? n.reduce(t, r) : n.reduce(t);
        if (
            (A(n, function (n, i, a) {
                u ? (r = t.call(e, r, n, i, a)) : ((r = n), (u = !0));
            }),
            !u)
        )
            throw new TypeError(E);
        return r;
    }),
        (j.reduceRight = j.foldr = function (n, t, r, e) {
            var u = arguments.length > 2;
            if ((null == n && (n = []), v && n.reduceRight === v)) return e && (t = j.bind(t, e)), u ? n.reduceRight(t, r) : n.reduceRight(t);
            var i = n.length;
            if (i !== +i) {
                var a = j.keys(n);
                i = a.length;
            }
            if (
                (A(n, function (o, c, l) {
                    (c = a ? a[--i] : --i), u ? (r = t.call(e, r, n[c], c, l)) : ((r = n[c]), (u = !0));
                }),
                !u)
            )
                throw new TypeError(E);
            return r;
        }),
        (j.find = j.detect = function (n, t, r) {
            var e;
            return (
                O(n, function (n, u, i) {
                    return t.call(r, n, u, i) ? ((e = n), !0) : void 0;
                }),
                e
            );
        }),
        (j.filter = j.select = function (n, t, r) {
            var e = [];
            return null == n
                ? e
                : g && n.filter === g
                ? n.filter(t, r)
                : (A(n, function (n, u, i) {
                      t.call(r, n, u, i) && e.push(n);
                  }),
                  e);
        }),
        (j.reject = function (n, t, r) {
            return j.filter(
                n,
                function (n, e, u) {
                    return !t.call(r, n, e, u);
                },
                r
            );
        }),
        (j.every = j.all = function (n, t, e) {
            t || (t = j.identity);
            var u = !0;
            return null == n
                ? u
                : d && n.every === d
                ? n.every(t, e)
                : (A(n, function (n, i, a) {
                      return (u = u && t.call(e, n, i, a)) ? void 0 : r;
                  }),
                  !!u);
        });
    var O = (j.some = j.any = function (n, t, e) {
        t || (t = j.identity);
        var u = !1;
        return null == n
            ? u
            : m && n.some === m
            ? n.some(t, e)
            : (A(n, function (n, i, a) {
                  return u || (u = t.call(e, n, i, a)) ? r : void 0;
              }),
              !!u);
    });
    (j.contains = j.include = function (n, t) {
        return null == n
            ? !1
            : y && n.indexOf === y
            ? n.indexOf(t) != -1
            : O(n, function (n) {
                  return n === t;
              });
    }),
        (j.invoke = function (n, t) {
            var r = o.call(arguments, 2),
                e = j.isFunction(t);
            return j.map(n, function (n) {
                return (e ? t : n[t]).apply(n, r);
            });
        }),
        (j.pluck = function (n, t) {
            return j.map(n, function (n) {
                return n[t];
            });
        }),
        (j.where = function (n, t, r) {
            return j.isEmpty(t)
                ? r
                    ? void 0
                    : []
                : j[r ? "find" : "filter"](n, function (n) {
                      for (var r in t) if (t[r] !== n[r]) return !1;
                      return !0;
                  });
        }),
        (j.findWhere = function (n, t) {
            return j.where(n, t, !0);
        }),
        (j.max = function (n, t, r) {
            if (!t && j.isArray(n) && n[0] === +n[0] && n.length < 65535) return Math.max.apply(Math, n);
            if (!t && j.isEmpty(n)) return -1 / 0;
            var e = { computed: -1 / 0, value: -1 / 0 };
            return (
                A(n, function (n, u, i) {
                    var a = t ? t.call(r, n, u, i) : n;
                    a > e.computed && (e = { value: n, computed: a });
                }),
                e.value
            );
        }),
        (j.min = function (n, t, r) {
            if (!t && j.isArray(n) && n[0] === +n[0] && n.length < 65535) return Math.min.apply(Math, n);
            if (!t && j.isEmpty(n)) return 1 / 0;
            var e = { computed: 1 / 0, value: 1 / 0 };
            return (
                A(n, function (n, u, i) {
                    var a = t ? t.call(r, n, u, i) : n;
                    a < e.computed && (e = { value: n, computed: a });
                }),
                e.value
            );
        }),
        (j.shuffle = function (n) {
            var t,
                r = 0,
                e = [];
            return (
                A(n, function (n) {
                    (t = j.random(r++)), (e[r - 1] = e[t]), (e[t] = n);
                }),
                e
            );
        }),
        (j.sample = function (n, t, r) {
            return arguments.length < 2 || r ? n[j.random(n.length - 1)] : j.shuffle(n).slice(0, Math.max(0, t));
        });
    var k = function (n) {
        return j.isFunction(n)
            ? n
            : function (t) {
                  return t[n];
              };
    };
    j.sortBy = function (n, t, r) {
        var e = k(t);
        return j.pluck(
            j
                .map(n, function (n, t, u) {
                    return { value: n, index: t, criteria: e.call(r, n, t, u) };
                })
                .sort(function (n, t) {
                    var r = n.criteria,
                        e = t.criteria;
                    if (r !== e) {
                        if (r > e || r === void 0) return 1;
                        if (e > r || e === void 0) return -1;
                    }
                    return n.index - t.index;
                }),
            "value"
        );
    };
    var F = function (n) {
        return function (t, r, e) {
            var u = {},
                i = null == r ? j.identity : k(r);
            return (
                A(t, function (r, a) {
                    var o = i.call(e, r, a, t);
                    n(u, o, r);
                }),
                u
            );
        };
    };
    (j.groupBy = F(function (n, t, r) {
        (j.has(n, t) ? n[t] : (n[t] = [])).push(r);
    })),
        (j.indexBy = F(function (n, t, r) {
            n[t] = r;
        })),
        (j.countBy = F(function (n, t) {
            j.has(n, t) ? n[t]++ : (n[t] = 1);
        })),
        (j.sortedIndex = function (n, t, r, e) {
            r = null == r ? j.identity : k(r);
            for (var u = r.call(e, t), i = 0, a = n.length; a > i; ) {
                var o = (i + a) >>> 1;
                r.call(e, n[o]) < u ? (i = o + 1) : (a = o);
            }
            return i;
        }),
        (j.toArray = function (n) {
            return n ? (j.isArray(n) ? o.call(n) : n.length === +n.length ? j.map(n, j.identity) : j.values(n)) : [];
        }),
        (j.size = function (n) {
            return null == n ? 0 : n.length === +n.length ? n.length : j.keys(n).length;
        }),
        (j.first = j.head = j.take = function (n, t, r) {
            return null == n ? void 0 : null == t || r ? n[0] : o.call(n, 0, t);
        }),
        (j.initial = function (n, t, r) {
            return o.call(n, 0, n.length - (null == t || r ? 1 : t));
        }),
        (j.last = function (n, t, r) {
            return null == n ? void 0 : null == t || r ? n[n.length - 1] : o.call(n, Math.max(n.length - t, 0));
        }),
        (j.rest = j.tail = j.drop = function (n, t, r) {
            return o.call(n, null == t || r ? 1 : t);
        }),
        (j.compact = function (n) {
            return j.filter(n, j.identity);
        });
    var M = function (n, t, r) {
        return t && j.every(n, j.isArray)
            ? c.apply(r, n)
            : (A(n, function (n) {
                  j.isArray(n) || j.isArguments(n) ? (t ? a.apply(r, n) : M(n, t, r)) : r.push(n);
              }),
              r);
    };
    (j.flatten = function (n, t) {
        return M(n, t, []);
    }),
        (j.without = function (n) {
            return j.difference(n, o.call(arguments, 1));
        }),
        (j.uniq = j.unique = function (n, t, r, e) {
            j.isFunction(t) && ((e = r), (r = t), (t = !1));
            var u = r ? j.map(n, r, e) : n,
                i = [],
                a = [];
            return (
                A(u, function (r, e) {
                    (t ? e && a[a.length - 1] === r : j.contains(a, r)) || (a.push(r), i.push(n[e]));
                }),
                i
            );
        }),
        (j.union = function () {
            return j.uniq(j.flatten(arguments, !0));
        }),
        (j.intersection = function (n) {
            var t = o.call(arguments, 1);
            return j.filter(j.uniq(n), function (n) {
                return j.every(t, function (t) {
                    return j.indexOf(t, n) >= 0;
                });
            });
        }),
        (j.difference = function (n) {
            var t = c.apply(e, o.call(arguments, 1));
            return j.filter(n, function (n) {
                return !j.contains(t, n);
            });
        }),
        (j.zip = function () {
            for (var n = j.max(j.pluck(arguments, "length").concat(0)), t = new Array(n), r = 0; n > r; r++) t[r] = j.pluck(arguments, "" + r);
            return t;
        }),
        (j.object = function (n, t) {
            if (null == n) return {};
            for (var r = {}, e = 0, u = n.length; u > e; e++) t ? (r[n[e]] = t[e]) : (r[n[e][0]] = n[e][1]);
            return r;
        }),
        (j.indexOf = function (n, t, r) {
            if (null == n) return -1;
            var e = 0,
                u = n.length;
            if (r) {
                if ("number" != typeof r) return (e = j.sortedIndex(n, t)), n[e] === t ? e : -1;
                e = 0 > r ? Math.max(0, u + r) : r;
            }
            if (y && n.indexOf === y) return n.indexOf(t, r);
            for (; u > e; e++) if (n[e] === t) return e;
            return -1;
        }),
        (j.lastIndexOf = function (n, t, r) {
            if (null == n) return -1;
            var e = null != r;
            if (b && n.lastIndexOf === b) return e ? n.lastIndexOf(t, r) : n.lastIndexOf(t);
            for (var u = e ? r : n.length; u--; ) if (n[u] === t) return u;
            return -1;
        }),
        (j.range = function (n, t, r) {
            arguments.length <= 1 && ((t = n || 0), (n = 0)), (r = arguments[2] || 1);
            for (var e = Math.max(Math.ceil((t - n) / r), 0), u = 0, i = new Array(e); e > u; ) (i[u++] = n), (n += r);
            return i;
        });
    var R = function () {};
    (j.bind = function (n, t) {
        var r, e;
        if (_ && n.bind === _) return _.apply(n, o.call(arguments, 1));
        if (!j.isFunction(n)) throw new TypeError();
        return (
            (r = o.call(arguments, 2)),
            (e = function () {
                if (!(this instanceof e)) return n.apply(t, r.concat(o.call(arguments)));
                R.prototype = n.prototype;
                var u = new R();
                R.prototype = null;
                var i = n.apply(u, r.concat(o.call(arguments)));
                return Object(i) === i ? i : u;
            })
        );
    }),
        (j.partial = function (n) {
            var t = o.call(arguments, 1);
            return function () {
                return n.apply(this, t.concat(o.call(arguments)));
            };
        }),
        (j.bindAll = function (n) {
            var t = o.call(arguments, 1);
            if (0 === t.length) throw new Error("bindAll must be passed function names");
            return (
                A(t, function (t) {
                    n[t] = j.bind(n[t], n);
                }),
                n
            );
        }),
        (j.memoize = function (n, t) {
            var r = {};
            return (
                t || (t = j.identity),
                function () {
                    var e = t.apply(this, arguments);
                    return j.has(r, e) ? r[e] : (r[e] = n.apply(this, arguments));
                }
            );
        }),
        (j.delay = function (n, t) {
            var r = o.call(arguments, 2);
            return setTimeout(function () {
                return n.apply(null, r);
            }, t);
        }),
        (j.defer = function (n) {
            return j.delay.apply(j, [n, 1].concat(o.call(arguments, 1)));
        }),
        (j.throttle = function (n, t, r) {
            var e,
                u,
                i,
                a = null,
                o = 0;
            r || (r = {});
            var c = function () {
                (o = r.leading === !1 ? 0 : new Date()), (a = null), (i = n.apply(e, u));
            };
            return function () {
                var l = new Date();
                o || r.leading !== !1 || (o = l);
                var f = t - (l - o);
                return (e = this), (u = arguments), 0 >= f ? (clearTimeout(a), (a = null), (o = l), (i = n.apply(e, u))) : a || r.trailing === !1 || (a = setTimeout(c, f)), i;
            };
        }),
        (j.debounce = function (n, t, r) {
            var e, u, i, a, o;
            return function () {
                (i = this), (u = arguments), (a = new Date());
                var c = function () {
                        var l = new Date() - a;
                        t > l ? (e = setTimeout(c, t - l)) : ((e = null), r || (o = n.apply(i, u)));
                    },
                    l = r && !e;
                return e || (e = setTimeout(c, t)), l && (o = n.apply(i, u)), o;
            };
        }),
        (j.once = function (n) {
            var t,
                r = !1;
            return function () {
                return r ? t : ((r = !0), (t = n.apply(this, arguments)), (n = null), t);
            };
        }),
        (j.wrap = function (n, t) {
            return function () {
                var r = [n];
                return a.apply(r, arguments), t.apply(this, r);
            };
        }),
        (j.compose = function () {
            var n = arguments;
            return function () {
                for (var t = arguments, r = n.length - 1; r >= 0; r--) t = [n[r].apply(this, t)];
                return t[0];
            };
        }),
        (j.after = function (n, t) {
            return function () {
                return --n < 1 ? t.apply(this, arguments) : void 0;
            };
        }),
        (j.keys =
            w ||
            function (n) {
                if (n !== Object(n)) throw new TypeError("Invalid object");
                var t = [];
                for (var r in n) j.has(n, r) && t.push(r);
                return t;
            }),
        (j.values = function (n) {
            for (var t = j.keys(n), r = t.length, e = new Array(r), u = 0; r > u; u++) e[u] = n[t[u]];
            return e;
        }),
        (j.pairs = function (n) {
            for (var t = j.keys(n), r = t.length, e = new Array(r), u = 0; r > u; u++) e[u] = [t[u], n[t[u]]];
            return e;
        }),
        (j.invert = function (n) {
            for (var t = {}, r = j.keys(n), e = 0, u = r.length; u > e; e++) t[n[r[e]]] = r[e];
            return t;
        }),
        (j.functions = j.methods = function (n) {
            var t = [];
            for (var r in n) j.isFunction(n[r]) && t.push(r);
            return t.sort();
        }),
        (j.extend = function (n) {
            return (
                A(o.call(arguments, 1), function (t) {
                    if (t) for (var r in t) n[r] = t[r];
                }),
                n
            );
        }),
        (j.pick = function (n) {
            var t = {},
                r = c.apply(e, o.call(arguments, 1));
            return (
                A(r, function (r) {
                    r in n && (t[r] = n[r]);
                }),
                t
            );
        }),
        (j.omit = function (n) {
            var t = {},
                r = c.apply(e, o.call(arguments, 1));
            for (var u in n) j.contains(r, u) || (t[u] = n[u]);
            return t;
        }),
        (j.defaults = function (n) {
            return (
                A(o.call(arguments, 1), function (t) {
                    if (t) for (var r in t) n[r] === void 0 && (n[r] = t[r]);
                }),
                n
            );
        }),
        (j.clone = function (n) {
            return j.isObject(n) ? (j.isArray(n) ? n.slice() : j.extend({}, n)) : n;
        }),
        (j.tap = function (n, t) {
            return t(n), n;
        });
    var S = function (n, t, r, e) {
        if (n === t) return 0 !== n || 1 / n == 1 / t;
        if (null == n || null == t) return n === t;
        n instanceof j && (n = n._wrapped), t instanceof j && (t = t._wrapped);
        var u = l.call(n);
        if (u != l.call(t)) return !1;
        switch (u) {
            case "[object String]":
                return n == String(t);
            case "[object Number]":
                return n != +n ? t != +t : 0 == n ? 1 / n == 1 / t : n == +t;
            case "[object Date]":
            case "[object Boolean]":
                return +n == +t;
            case "[object RegExp]":
                return n.source == t.source && n.global == t.global && n.multiline == t.multiline && n.ignoreCase == t.ignoreCase;
        }
        if ("object" != typeof n || "object" != typeof t) return !1;
        for (var i = r.length; i--; ) if (r[i] == n) return e[i] == t;
        var a = n.constructor,
            o = t.constructor;
        if (a !== o && !(j.isFunction(a) && a instanceof a && j.isFunction(o) && o instanceof o)) return !1;
        r.push(n), e.push(t);
        var c = 0,
            f = !0;
        if ("[object Array]" == u) {
            if (((c = n.length), (f = c == t.length))) for (; c-- && (f = S(n[c], t[c], r, e)); );
        } else {
            for (var s in n) if (j.has(n, s) && (c++, !(f = j.has(t, s) && S(n[s], t[s], r, e)))) break;
            if (f) {
                for (s in t) if (j.has(t, s) && !c--) break;
                f = !c;
            }
        }
        return r.pop(), e.pop(), f;
    };
    (j.isEqual = function (n, t) {
        return S(n, t, [], []);
    }),
        (j.isEmpty = function (n) {
            if (null == n) return !0;
            if (j.isArray(n) || j.isString(n)) return 0 === n.length;
            for (var t in n) if (j.has(n, t)) return !1;
            return !0;
        }),
        (j.isElement = function (n) {
            return !(!n || 1 !== n.nodeType);
        }),
        (j.isArray =
            x ||
            function (n) {
                return "[object Array]" == l.call(n);
            }),
        (j.isObject = function (n) {
            return n === Object(n);
        }),
        A(["Arguments", "Function", "String", "Number", "Date", "RegExp"], function (n) {
            j["is" + n] = function (t) {
                return l.call(t) == "[object " + n + "]";
            };
        }),
        j.isArguments(arguments) ||
            (j.isArguments = function (n) {
                return !(!n || !j.has(n, "callee"));
            }),
        "function" != typeof /./ &&
            (j.isFunction = function (n) {
                return "function" == typeof n;
            }),
        (j.isFinite = function (n) {
            return isFinite(n) && !isNaN(parseFloat(n));
        }),
        (j.isNaN = function (n) {
            return j.isNumber(n) && n != +n;
        }),
        (j.isBoolean = function (n) {
            return n === !0 || n === !1 || "[object Boolean]" == l.call(n);
        }),
        (j.isNull = function (n) {
            return null === n;
        }),
        (j.isUndefined = function (n) {
            return n === void 0;
        }),
        (j.has = function (n, t) {
            return f.call(n, t);
        }),
        (j.noConflict = function () {
            return (n._ = t), this;
        }),
        (j.identity = function (n) {
            return n;
        }),
        (j.times = function (n, t, r) {
            for (var e = Array(Math.max(0, n)), u = 0; n > u; u++) e[u] = t.call(r, u);
            return e;
        }),
        (j.random = function (n, t) {
            return null == t && ((t = n), (n = 0)), n + Math.floor(Math.random() * (t - n + 1));
        });
    var I = { escape: { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;" } };
    I.unescape = j.invert(I.escape);
    var T = { escape: new RegExp("[" + j.keys(I.escape).join("") + "]", "g"), unescape: new RegExp("(" + j.keys(I.unescape).join("|") + ")", "g") };
    j.each(["escape", "unescape"], function (n) {
        j[n] = function (t) {
            return null == t
                ? ""
                : ("" + t).replace(T[n], function (t) {
                      return I[n][t];
                  });
        };
    }),
        (j.result = function (n, t) {
            if (null == n) return void 0;
            var r = n[t];
            return j.isFunction(r) ? r.call(n) : r;
        }),
        (j.mixin = function (n) {
            A(j.functions(n), function (t) {
                var r = (j[t] = n[t]);
                j.prototype[t] = function () {
                    var n = [this._wrapped];
                    return a.apply(n, arguments), z.call(this, r.apply(j, n));
                };
            });
        });
    var N = 0;
    (j.uniqueId = function (n) {
        var t = ++N + "";
        return n ? n + t : t;
    }),
        (j.templateSettings = { evaluate: /<%([\s\S]+?)%>/g, interpolate: /<%=([\s\S]+?)%>/g, escape: /<%-([\s\S]+?)%>/g });
    var q = /(.)^/,
        B = { "'": "'", "\\": "\\", "\r": "r", "\n": "n", "	": "t", "\u2028": "u2028", "\u2029": "u2029" },
        D = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    (j.template = function (n, t, r) {
        var e;
        r = j.defaults({}, r, j.templateSettings);
        var u = new RegExp([(r.escape || q).source, (r.interpolate || q).source, (r.evaluate || q).source].join("|") + "|$", "g"),
            i = 0,
            a = "__p+='";
        n.replace(u, function (t, r, e, u, o) {
            return (
                (a += n.slice(i, o).replace(D, function (n) {
                    return "\\" + B[n];
                })),
                r && (a += "'+\n((__t=(" + r + "))==null?'':_.escape(__t))+\n'"),
                e && (a += "'+\n((__t=(" + e + "))==null?'':__t)+\n'"),
                u && (a += "';\n" + u + "\n__p+='"),
                (i = o + t.length),
                t
            );
        }),
            (a += "';\n"),
            r.variable || (a = "with(obj||{}){\n" + a + "}\n"),
            (a = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + a + "return __p;\n");
        try {
            e = new Function(r.variable || "obj", "_", a);
        } catch (o) {
            throw ((o.source = a), o);
        }
        if (t) return e(t, j);
        var c = function (n) {
            return e.call(this, n, j);
        };
        return (c.source = "function(" + (r.variable || "obj") + "){\n" + a + "}"), c;
    }),
        (j.chain = function (n) {
            return j(n).chain();
        });
    var z = function (n) {
        return this._chain ? j(n).chain() : n;
    };
    j.mixin(j),
        A(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (n) {
            var t = e[n];
            j.prototype[n] = function () {
                var r = this._wrapped;
                return t.apply(r, arguments), ("shift" != n && "splice" != n) || 0 !== r.length || delete r[0], z.call(this, r);
            };
        }),
        A(["concat", "join", "slice"], function (n) {
            var t = e[n];
            j.prototype[n] = function () {
                return z.call(this, t.apply(this._wrapped, arguments));
            };
        }),
        j.extend(j.prototype, {
            chain: function () {
                return (this._chain = !0), this;
            },
            value: function () {
                return this._wrapped;
            },
        });
}.call(this));

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {
    this.scene = scene;
    this.camera = camera;

    this.overrideMaterial = overrideMaterial;

    this.clearColor = clearColor;
    this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 1;

    this.oldClearColor = new THREE.Color();
    this.oldClearAlpha = 1;

    this.enabled = true;
    this.clear = true;
    this.needsSwap = false;
};

THREE.RenderPass.prototype = {
    render: function (renderer, writeBuffer, readBuffer, delta) {
        this.scene.overrideMaterial = this.overrideMaterial;

        if (this.clearColor) {
            this.oldClearColor.copy(renderer.getClearColor());
            this.oldClearAlpha = renderer.getClearAlpha();

            renderer.setClearColor(this.clearColor, this.clearAlpha);
        }

        renderer.render(this.scene, this.camera, readBuffer, this.clear);

        if (this.clearColor) {
            renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);
        }

        this.scene.overrideMaterial = null;
    },
};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ShaderPass = function (shader, textureID) {
    this.textureID = textureID !== undefined ? textureID : "tDiffuse";

    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);

    this.material = new THREE.ShaderMaterial({
        uniforms: this.uniforms,
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader,
    });

    this.renderToScreen = false;

    this.enabled = true;
    this.needsSwap = true;
    this.clear = false;

    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
    this.scene = new THREE.Scene();

    this.quad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), null);
    this.scene.add(this.quad);
};

THREE.ShaderPass.prototype = {
    render: function (renderer, writeBuffer, readBuffer, delta) {
        if (this.uniforms[this.textureID]) {
            this.uniforms[this.textureID].value = readBuffer;
        }

        this.quad.material = this.material;

        if (this.renderToScreen) {
            renderer.render(this.scene, this.camera);
        } else {
            renderer.render(this.scene, this.camera, writeBuffer, this.clear);
        }
    },
};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.EffectComposer = function (renderer, renderTarget) {
    this.renderer = renderer;

    if (renderTarget === undefined) {
        var width = window.innerWidth || 1;
        var height = window.innerHeight || 1;
        var parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };

        renderTarget = new THREE.WebGLRenderTarget(width, height, parameters);
    }

    this.renderTarget1 = renderTarget;
    this.renderTarget2 = renderTarget.clone();

    this.writeBuffer = this.renderTarget1;
    this.readBuffer = this.renderTarget2;

    this.passes = [];

    if (THREE.CopyShader === undefined) console.error("THREE.EffectComposer relies on THREE.CopyShader");

    this.copyPass = new THREE.ShaderPass(THREE.CopyShader);
};

THREE.EffectComposer.prototype = {
    swapBuffers: function () {
        var tmp = this.readBuffer;
        this.readBuffer = this.writeBuffer;
        this.writeBuffer = tmp;
    },

    addPass: function (pass) {
        this.passes.push(pass);
    },

    insertPass: function (pass, index) {
        this.passes.splice(index, 0, pass);
    },

    render: function (delta) {
        this.writeBuffer = this.renderTarget1;
        this.readBuffer = this.renderTarget2;

        var maskActive = false;

        var pass,
            i,
            il = this.passes.length;

        for (i = 0; i < il; i++) {
            pass = this.passes[i];

            if (!pass.enabled) continue;

            pass.render(this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive);

            if (pass.needsSwap) {
                if (maskActive) {
                    var context = this.renderer.context;

                    context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);

                    this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, delta);

                    context.stencilFunc(context.EQUAL, 1, 0xffffffff);
                }

                this.swapBuffers();
            }

            if (pass instanceof THREE.MaskPass) {
                maskActive = true;
            } else if (pass instanceof THREE.ClearMaskPass) {
                maskActive = false;
            }
        }
    },

    reset: function (renderTarget) {
        if (renderTarget === undefined) {
            renderTarget = this.renderTarget1.clone();

            renderTarget.width = window.innerWidth;
            renderTarget.height = window.innerHeight;
        }

        this.renderTarget1 = renderTarget;
        this.renderTarget2 = renderTarget.clone();

        this.writeBuffer = this.renderTarget1;
        this.readBuffer = this.renderTarget2;
    },

    setSize: function (width, height) {
        var renderTarget = this.renderTarget1.clone();

        renderTarget.width = width;
        renderTarget.height = height;

        this.reset(renderTarget);
    },
};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author davidedc / http://www.sketchpatch.net/
 *
 * ShaderExtras currently contains:
 *
 *	screen
 *	convolution
 *	film
 * 	bokeh
 *  sepia
 *	dotscreen
 *	vignette
 *  bleachbypass
 *	basic
 *  dofmipmap
 *  focus
 *  triangleBlur
 *  horizontalBlur + verticalBlur
 *  horizontalTiltShift + verticalTiltShift
 *  blend
 *  fxaa
 *  luminosity
 *  colorCorrection
 *  normalmap
 *  ssao
 *  colorify
 *  unpackDepthRGBA
 */

THREE.ShaderExtras = {
    /* -------------------------------------------------------------------------
	//	Full-screen textured quad shader
	 ------------------------------------------------------------------------- */

    screen: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            opacity: { type: "f", value: 1.0 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: ["uniform float opacity;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "gl_FragColor = opacity * texel;", "}"].join("\n"),
    },

    /* ------------------------------------------------------------------------
	//	Convolution shader
	//	  - ported from o3d sample to WebGL / GLSL
	//			http://o3d.googlecode.com/svn/trunk/samples/convolution.html
	------------------------------------------------------------------------ */

    convolution: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            uImageIncrement: { type: "v2", value: new THREE.Vector2(0.001953125, 0.0) },
            cKernel: { type: "fv1", value: [] },
        },

        vertexShader: [
            //"#define KERNEL_SIZE 25.0",

            "uniform vec2 uImageIncrement;",

            "varying vec2 vUv;",

            "void main() {",

            "vUv = uv - ( ( KERNEL_SIZE - 1.0 ) / 2.0 ) * uImageIncrement;",
            "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

            "}",
        ].join("\n"),

        fragmentShader: [
            //"#define KERNEL_SIZE 25",
            "uniform float cKernel[ KERNEL_SIZE ];",

            "uniform sampler2D tDiffuse;",
            "uniform vec2 uImageIncrement;",

            "varying vec2 vUv;",

            "void main() {",

            "vec2 imageCoord = vUv;",
            "vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );",

            "for( int i = 0; i < KERNEL_SIZE; i ++ ) {",

            "sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];",
            "imageCoord += uImageIncrement;",

            "}",

            "gl_FragColor = sum;",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------

	// Film grain & scanlines shader

	//	- ported from HLSL to WebGL / GLSL
	//	  http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html

	// Screen Space Static Postprocessor
	//
	// Produces an analogue noise overlay similar to a film grain / TV static
	//
	// Original implementation and noise algorithm
	// Pat 'Hawthorne' Shearon
	//
	// Optimized scanlines + noise version with intensity scaling
	// Georg 'Leviathan' Steinrohder

	// This version is provided under a Creative Commons Attribution 3.0 License
	// http://creativecommons.org/licenses/by/3.0/
	 ------------------------------------------------------------------------- */

    film: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            time: { type: "f", value: 0.0 },
            nIntensity: { type: "f", value: 0.5 },
            sIntensity: { type: "f", value: 0.05 },
            sCount: { type: "f", value: 4096 },
            grayscale: { type: "i", value: 1 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            // control parameter
            "uniform float time;",

            "uniform bool grayscale;",

            // noise effect intensity value (0 = no effect, 1 = full effect)
            "uniform float nIntensity;",

            // scanlines effect intensity value (0 = no effect, 1 = full effect)
            "uniform float sIntensity;",

            // scanlines effect count value (0 = no effect, 4096 = full effect)
            "uniform float sCount;",

            "uniform sampler2D tDiffuse;",

            "varying vec2 vUv;",

            "void main() {",

            // sample the source
            "vec4 cTextureScreen = texture2D( tDiffuse, vUv );",

            // make some noise
            "float x = vUv.x * vUv.y * time *  1000.0;",
            "x = mod( x, 13.0 ) * mod( x, 123.0 );",
            "float dx = mod( x, 0.01 );",

            // add noise
            "vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );",

            // get us a sine and cosine
            "vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );",

            // add scanlines
            "cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;",

            // interpolate between source and result by intensity
            "cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );",

            // convert to grayscale if desired
            "if( grayscale ) {",

            "cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );",

            "}",

            "gl_FragColor =  vec4( cResult, cTextureScreen.a );",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Depth-of-field shader with bokeh
	//	ported from GLSL shader by Martins Upitis
	//	http://artmartinsh.blogspot.com/2010/02/glsl-lens-blur-filter-with-bokeh.html
	 ------------------------------------------------------------------------- */

    bokeh: {
        uniforms: { tColor: { type: "t", value: null }, tDepth: { type: "t", value: null }, focus: { type: "f", value: 1.0 }, aspect: { type: "f", value: 1.0 }, aperture: { type: "f", value: 0.025 }, maxblur: { type: "f", value: 1.0 } },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "varying vec2 vUv;",

            "uniform sampler2D tColor;",
            "uniform sampler2D tDepth;",

            "uniform float maxblur;", // max blur amount
            "uniform float aperture;", // aperture - bigger values for shallower depth of field

            "uniform float focus;",
            "uniform float aspect;",

            "void main() {",

            "vec2 aspectcorrect = vec2( 1.0, aspect );",

            "vec4 depth1 = texture2D( tDepth, vUv );",

            "float factor = depth1.x - focus;",

            "vec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );",

            "vec2 dofblur9 = dofblur * 0.9;",
            "vec2 dofblur7 = dofblur * 0.7;",
            "vec2 dofblur4 = dofblur * 0.4;",

            "vec4 col = vec4( 0.0 );",

            "col += texture2D( tColor, vUv.xy );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );",

            "col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );",

            "col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );",

            "col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );",
            "col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );",
            "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );",

            "gl_FragColor = col / 41.0;",
            "gl_FragColor.a = 1.0;",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Depth-of-field shader using mipmaps
	//	- from Matt Handley @applmak
	//	- requires power-of-2 sized render target with enabled mipmaps
	 ------------------------------------------------------------------------- */

    dofmipmap: {
        uniforms: {
            tColor: { type: "t", value: null },
            tDepth: { type: "t", value: null },
            focus: { type: "f", value: 1.0 },
            maxblur: { type: "f", value: 1.0 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform float focus;",
            "uniform float maxblur;",

            "uniform sampler2D tColor;",
            "uniform sampler2D tDepth;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 depth = texture2D( tDepth, vUv );",

            "float factor = depth.x - focus;",

            "vec4 col = texture2D( tColor, vUv, 2.0 * maxblur * abs( focus - depth.x ) );",

            "gl_FragColor = col;",
            "gl_FragColor.a = 1.0;",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Sepia tone shader
	//  - based on glfx.js sepia shader
	//		https://github.com/evanw/glfx.js
	 ------------------------------------------------------------------------- */

    sepia: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            amount: { type: "f", value: 1.0 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform float amount;",

            "uniform sampler2D tDiffuse;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 color = texture2D( tDiffuse, vUv );",
            "vec3 c = color.rgb;",

            "color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );",
            "color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );",
            "color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );",

            "gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Dot screen shader
	//  - based on glfx.js sepia shader
	//		https://github.com/evanw/glfx.js
	 ------------------------------------------------------------------------- */

    dotscreen: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            tSize: { type: "v2", value: new THREE.Vector2(256, 256) },
            center: { type: "v2", value: new THREE.Vector2(0.5, 0.5) },
            angle: { type: "f", value: 1.57 },
            scale: { type: "f", value: 1.0 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform vec2 center;",
            "uniform float angle;",
            "uniform float scale;",
            "uniform vec2 tSize;",

            "uniform sampler2D tDiffuse;",

            "varying vec2 vUv;",

            "float pattern() {",

            "float s = sin( angle ), c = cos( angle );",

            "vec2 tex = vUv * tSize - center;",
            "vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;",

            "return ( sin( point.x ) * sin( point.y ) ) * 4.0;",

            "}",

            "void main() {",

            "vec4 color = texture2D( tDiffuse, vUv );",

            "float average = ( color.r + color.g + color.b ) / 3.0;",

            "gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );",

            "}",
        ].join("\n"),
    },

    /* ------------------------------------------------------------------------------------------------
	//	Vignette shader
	//	- based on PaintEffect postprocess from ro.me
	//		http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js
	 ------------------------------------------------------------------------------------------------ */

    vignette: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            offset: { type: "f", value: 1.0 },
            darkness: { type: "f", value: 1.0 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform float offset;",
            "uniform float darkness;",

            "uniform sampler2D tDiffuse;",

            "varying vec2 vUv;",

            "void main() {",

            // Eskil's vignette

            "vec4 texel = texture2D( tDiffuse, vUv );",
            "vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );",
            "gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );",

            /*
				// alternative version from glfx.js
				// this one makes more "dusty" look (as opposed to "burned")

				"vec4 color = texture2D( tDiffuse, vUv );",
				"float dist = distance( vUv, vec2( 0.5 ) );",
				"color.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );",
				"gl_FragColor = color;",
				*/

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]
	//	- based on Nvidia example
	//		http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass
	 ------------------------------------------------------------------------- */

    bleachbypass: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            opacity: { type: "f", value: 1.0 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform float opacity;",

            "uniform sampler2D tDiffuse;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 base = texture2D( tDiffuse, vUv );",

            "vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );",
            "float lum = dot( lumCoeff, base.rgb );",
            "vec3 blend = vec3( lum );",

            "float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );",

            "vec3 result1 = 2.0 * base.rgb * blend;",
            "vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );",

            "vec3 newColor = mix( result1, result2, L );",

            "float A2 = opacity * base.a;",
            "vec3 mixRGB = A2 * newColor.rgb;",
            "mixRGB += ( ( 1.0 - A2 ) * base.rgb );",

            "gl_FragColor = vec4( mixRGB, base.a );",

            "}",
        ].join("\n"),
    },

    /* --------------------------------------------------------------------------------------------------
	//	Focus shader
	//	- based on PaintEffect postprocess from ro.me
	//		http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js
	 -------------------------------------------------------------------------------------------------- */

    focus: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            screenWidth: { type: "f", value: 1024 },
            screenHeight: { type: "f", value: 1024 },
            sampleDistance: { type: "f", value: 0.94 },
            waveFactor: { type: "f", value: 0.00125 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform float screenWidth;",
            "uniform float screenHeight;",
            "uniform float sampleDistance;",
            "uniform float waveFactor;",

            "uniform sampler2D tDiffuse;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 color, org, tmp, add;",
            "float sample_dist, f;",
            "vec2 vin;",
            "vec2 uv = vUv;",

            "add = color = org = texture2D( tDiffuse, uv );",

            "vin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );",
            "sample_dist = dot( vin, vin ) * 2.0;",

            "f = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;",

            "vec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );",

            "add += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );",
            "if( tmp.b < color.b ) color = tmp;",

            "add += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );",
            "if( tmp.b < color.b ) color = tmp;",

            "add += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );",
            "if( tmp.b < color.b ) color = tmp;",

            "add += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );",
            "if( tmp.b < color.b ) color = tmp;",

            "add += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );",
            "if( tmp.b < color.b ) color = tmp;",

            "add += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );",
            "if( tmp.b < color.b ) color = tmp;",

            "add += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );",
            "if( tmp.b < color.b ) color = tmp;",

            "color = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );",
            "color = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );",

            "gl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Triangle blur shader
	//  - based on glfx.js triangle blur shader
	//		https://github.com/evanw/glfx.js

	// 	A basic blur filter, which convolves the image with a
	// 	pyramid filter. The pyramid filter is separable and is applied as two
	//  perpendicular triangle filters.
	 ------------------------------------------------------------------------- */

    triangleBlur: {
        uniforms: {
            texture: { type: "t", value: null },
            delta: { type: "v2", value: new THREE.Vector2(1, 1) },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "#define ITERATIONS 10.0",

            "uniform sampler2D texture;",
            "uniform vec2 delta;",

            "varying vec2 vUv;",

            "float random( vec3 scale, float seed ) {",

            // use the fragment position for a different seed per-pixel

            "return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );",

            "}",

            "void main() {",

            "vec4 color = vec4( 0.0 );",

            "float total = 0.0;",

            // randomize the lookup values to hide the fixed number of samples

            "float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );",

            "for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {",

            "float percent = ( t + offset - 0.5 ) / ITERATIONS;",
            "float weight = 1.0 - abs( percent );",

            "color += texture2D( texture, vUv + delta * percent ) * weight;",
            "total += weight;",

            "}",

            "gl_FragColor = color / total;",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Simple test shader
	 ------------------------------------------------------------------------- */

    basic: {
        uniforms: {},

        vertexShader: ["void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: ["void main() {", "gl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5 );", "}"].join("\n"),
    },

    /* --------------------------------------------------------------------------------------------------
	//	Two pass Gaussian blur filter (horizontal and vertical blur shaders)
	//	- described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/
	//	  and used in http://www.cake23.de/traveling-wavefronts-lit-up.html
	//
	//	- 9 samples per pass
	//	- standard deviation 2.7
	//	- "h" and "v" parameters should be set to "1 / width" and "1 / height"
	 -------------------------------------------------------------------------------------------------- */

    horizontalBlur: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            h: { type: "f", value: 1.0 / 512.0 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform sampler2D tDiffuse;",
            "uniform float h;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 sum = vec4( 0.0 );",

            "sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;",
            "sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;",
            "sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;",
            "sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, 		  	vUv.y ) ) * 0.1633;",
            "sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;",
            "sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;",
            "sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;",
            "sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;",

            "gl_FragColor = sum;",

            "}",
        ].join("\n"),
    },

    verticalBlur: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            v: { type: "f", value: 1.0 / 512.0 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform sampler2D tDiffuse;",
            "uniform float v;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 sum = vec4( 0.0 );",

            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y			  ) ) * 0.1633;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;",

            "gl_FragColor = sum;",

            "}",
        ].join("\n"),
    },

    /* --------------------------------------------------------------------------------------------------
	//	Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position
	//
	//	- 9 samples per pass
	//	- standard deviation 2.7
	//	- "h" and "v" parameters should be set to "1 / width" and "1 / height"
	//	- "r" parameter control where "focused" horizontal line lies
	 -------------------------------------------------------------------------------------------------- */

    horizontalTiltShift: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            h: { type: "f", value: 1.0 / 512.0 },
            r: { type: "f", value: 0.35 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform sampler2D tDiffuse;",
            "uniform float h;",
            "uniform float r;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 sum = vec4( 0.0 );",

            "float hh = h * abs( r - vUv.y );",

            "sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;",
            "sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;",
            "sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;",
            "sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, 		  	 vUv.y ) ) * 0.1633;",
            "sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;",
            "sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;",
            "sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;",
            "sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;",

            "gl_FragColor = sum;",

            "}",
        ].join("\n"),
    },

    verticalTiltShift: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            v: { type: "f", value: 1.0 / 512.0 },
            r: { type: "f", value: 0.35 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform sampler2D tDiffuse;",
            "uniform float v;",
            "uniform float r;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 sum = vec4( 0.0 );",

            "float vv = v * abs( r - vUv.y );",

            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y			   ) ) * 0.1633;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;",
            "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;",

            "gl_FragColor = sum;",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Blend two textures
	 ------------------------------------------------------------------------- */

    blend: {
        uniforms: {
            tDiffuse1: { type: "t", value: null },
            tDiffuse2: { type: "t", value: null },
            mixRatio: { type: "f", value: 0.5 },
            opacity: { type: "f", value: 1.0 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform float opacity;",
            "uniform float mixRatio;",

            "uniform sampler2D tDiffuse1;",
            "uniform sampler2D tDiffuse2;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 texel1 = texture2D( tDiffuse1, vUv );",
            "vec4 texel2 = texture2D( tDiffuse2, vUv );",
            "gl_FragColor = opacity * mix( texel1, texel2, mixRatio );",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	NVIDIA FXAA by Timothy Lottes
	//		http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html
	//	- WebGL port by @supereggbert
	//		http://www.glge.org/demos/fxaa/
	 ------------------------------------------------------------------------- */

    fxaa: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            resolution: { type: "v2", value: new THREE.Vector2(1 / 1024, 1 / 512) },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform sampler2D tDiffuse;",
            "uniform vec2 resolution;",

            "varying vec2 vUv;",

            "#define FXAA_REDUCE_MIN   (1.0/128.0)",
            "#define FXAA_REDUCE_MUL   (1.0/8.0)",
            "#define FXAA_SPAN_MAX     8.0",

            "void main() {",

            "vec3 rgbNW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, -1.0 ) ) * resolution ).xyz;",
            "vec3 rgbNE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, -1.0 ) ) * resolution ).xyz;",
            "vec3 rgbSW = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( -1.0, 1.0 ) ) * resolution ).xyz;",
            "vec3 rgbSE = texture2D( tDiffuse, ( gl_FragCoord.xy + vec2( 1.0, 1.0 ) ) * resolution ).xyz;",
            "vec4 rgbaM  = texture2D( tDiffuse,  gl_FragCoord.xy  * resolution );",
            "vec3 rgbM  = rgbaM.xyz;",
            "float opacity  = rgbaM.w;",

            "vec3 luma = vec3( 0.299, 0.587, 0.114 );",

            "float lumaNW = dot( rgbNW, luma );",
            "float lumaNE = dot( rgbNE, luma );",
            "float lumaSW = dot( rgbSW, luma );",
            "float lumaSE = dot( rgbSE, luma );",
            "float lumaM  = dot( rgbM,  luma );",
            "float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );",
            "float lumaMax = max( lumaM, max( max( lumaNW, lumaNE) , max( lumaSW, lumaSE ) ) );",

            "vec2 dir;",
            "dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));",
            "dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));",

            "float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * ( 0.25 * FXAA_REDUCE_MUL ), FXAA_REDUCE_MIN );",

            "float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );",
            "dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),",
            "max( vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),",
            "dir * rcpDirMin)) * resolution;",

            "vec3 rgbA = 0.5 * (",
            "texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * ( 1.0 / 3.0 - 0.5 ) ).xyz +",
            "texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * ( 2.0 / 3.0 - 0.5 ) ).xyz );",

            "vec3 rgbB = rgbA * 0.5 + 0.25 * (",
            "texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * -0.5 ).xyz +",
            "texture2D( tDiffuse, gl_FragCoord.xy  * resolution + dir * 0.5 ).xyz );",

            "float lumaB = dot( rgbB, luma );",

            "if ( ( lumaB < lumaMin ) || ( lumaB > lumaMax ) ) {",

            "gl_FragColor = vec4( rgbA, opacity );",

            "} else {",

            "gl_FragColor = vec4( rgbB, opacity );",

            "}",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Luminosity
	//	http://en.wikipedia.org/wiki/Luminosity
	 ------------------------------------------------------------------------- */

    luminosity: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform sampler2D tDiffuse;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 texel = texture2D( tDiffuse, vUv );",

            "vec3 luma = vec3( 0.299, 0.587, 0.114 );",

            "float v = dot( texel.xyz, luma );",

            "gl_FragColor = vec4( v, v, v, texel.w );",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Color correction
	 ------------------------------------------------------------------------- */

    colorCorrection: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            powRGB: { type: "v3", value: new THREE.Vector3(2, 2, 2) },
            mulRGB: { type: "v3", value: new THREE.Vector3(1, 1, 1) },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform sampler2D tDiffuse;",
            "uniform vec3 powRGB;",
            "uniform vec3 mulRGB;",

            "varying vec2 vUv;",

            "void main() {",

            "gl_FragColor = texture2D( tDiffuse, vUv );",
            "gl_FragColor.rgb = mulRGB * pow( gl_FragColor.rgb, powRGB );",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Normal map shader
	//	- compute normals from heightmap
	 ------------------------------------------------------------------------- */

    normalmap: {
        uniforms: {
            heightMap: { type: "t", value: null },
            resolution: { type: "v2", value: new THREE.Vector2(512, 512) },
            scale: { type: "v2", value: new THREE.Vector2(1, 1) },
            height: { type: "f", value: 0.05 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform float height;",
            "uniform vec2 resolution;",
            "uniform sampler2D heightMap;",

            "varying vec2 vUv;",

            "void main() {",

            "float val = texture2D( heightMap, vUv ).x;",

            "float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;",
            "float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;",

            "gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Screen-space ambient occlusion shader
	//	- ported from
	//		SSAO GLSL shader v1.2
	//		assembled by Martins Upitis (martinsh) (http://devlog-martinsh.blogspot.com)
	//		original technique is made by ArKano22 (http://www.gamedev.net/topic/550699-ssao-no-halo-artifacts/)
	//	- modifications
	//		- modified to use RGBA packed depth texture (use clear color 1,1,1,1 for depth pass)
	//		- made fog more compatible with three.js linear fog
	//		- refactoring and optimizations
	 ------------------------------------------------------------------------- */

    ssao: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            tDepth: { type: "t", value: null },
            size: { type: "v2", value: new THREE.Vector2(512, 512) },
            cameraNear: { type: "f", value: 1 },
            cameraFar: { type: "f", value: 100 },
            fogNear: { type: "f", value: 5 },
            fogFar: { type: "f", value: 100 },
            fogEnabled: { type: "i", value: 0 },
            onlyAO: { type: "i", value: 0 },
            aoClamp: { type: "f", value: 0.3 },
            lumInfluence: { type: "f", value: 0.9 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform float cameraNear;",
            "uniform float cameraFar;",

            "uniform float fogNear;",
            "uniform float fogFar;",

            "uniform bool fogEnabled;", // attenuate AO with linear fog
            "uniform bool onlyAO;", // use only ambient occlusion pass?

            "uniform vec2 size;", // texture width, height
            "uniform float aoClamp;", // depth clamp - reduces haloing at screen edges

            "uniform float lumInfluence;", // how much luminance affects occlusion

            "uniform sampler2D tDiffuse;",
            "uniform sampler2D tDepth;",

            "varying vec2 vUv;",

            //"#define PI 3.14159265",
            "#define DL 2.399963229728653", // PI * ( 3.0 - sqrt( 5.0 ) )
            "#define EULER 2.718281828459045",

            // helpers

            "float width = size.x;", // texture width
            "float height = size.y;", // texture height

            "float cameraFarPlusNear = cameraFar + cameraNear;",
            "float cameraFarMinusNear = cameraFar - cameraNear;",
            "float cameraCoef = 2.0 * cameraNear;",

            // user variables

            "const int samples = 8;", // ao sample count
            "const float radius = 5.0;", // ao radius

            "const bool useNoise = false;", // use noise instead of pattern for sample dithering
            "const float noiseAmount = 0.0003;", // dithering amount

            "const float diffArea = 0.4;", // self-shadowing reduction
            "const float gDisplace = 0.4;", // gauss bell center

            "const vec3 onlyAOColor = vec3( 1.0, 0.7, 0.5 );",
            //"const vec3 onlyAOColor = vec3( 1.0, 1.0, 1.0 );",

            // RGBA depth

            "float unpackDepth( const in vec4 rgba_depth ) {",

            "const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
            "float depth = dot( rgba_depth, bit_shift );",
            "return depth;",

            "}",

            // generating noise / pattern texture for dithering

            "vec2 rand( const vec2 coord ) {",

            "vec2 noise;",

            "if ( useNoise ) {",

            "float nx = dot ( coord, vec2( 12.9898, 78.233 ) );",
            "float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );",

            "noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );",

            "} else {",

            "float ff = fract( 1.0 - coord.s * ( width / 2.0 ) );",
            "float gg = fract( coord.t * ( height / 2.0 ) );",

            "noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;",

            "}",

            "return ( noise * 2.0  - 1.0 ) * noiseAmount;",

            "}",

            "float doFog() {",

            "float zdepth = unpackDepth( texture2D( tDepth, vUv ) );",
            "float depth = -cameraFar * cameraNear / ( zdepth * cameraFarMinusNear - cameraFar );",

            "return smoothstep( fogNear, fogFar, depth );",

            "}",

            "float readDepth( const in vec2 coord ) {",

            //"return ( 2.0 * cameraNear ) / ( cameraFar + cameraNear - unpackDepth( texture2D( tDepth, coord ) ) * ( cameraFar - cameraNear ) );",
            "return cameraCoef / ( cameraFarPlusNear - unpackDepth( texture2D( tDepth, coord ) ) * cameraFarMinusNear );",

            "}",

            "float compareDepths( const in float depth1, const in float depth2, inout int far ) {",

            "float garea = 2.0;", // gauss bell width
            "float diff = ( depth1 - depth2 ) * 100.0;", // depth difference (0-100)

            // reduce left bell width to avoid self-shadowing

            "if ( diff < gDisplace ) {",

            "garea = diffArea;",

            "} else {",

            "far = 1;",

            "}",

            "float dd = diff - gDisplace;",
            "float gauss = pow( EULER, -2.0 * dd * dd / ( garea * garea ) );",
            "return gauss;",

            "}",

            "float calcAO( float depth, float dw, float dh ) {",

            "float dd = radius - depth * radius;",
            "vec2 vv = vec2( dw, dh );",

            "vec2 coord1 = vUv + dd * vv;",
            "vec2 coord2 = vUv - dd * vv;",

            "float temp1 = 0.0;",
            "float temp2 = 0.0;",

            "int far = 0;",
            "temp1 = compareDepths( depth, readDepth( coord1 ), far );",

            // DEPTH EXTRAPOLATION

            "if ( far > 0 ) {",

            "temp2 = compareDepths( readDepth( coord2 ), depth, far );",
            "temp1 += ( 1.0 - temp1 ) * temp2;",

            "}",

            "return temp1;",

            "}",

            "void main() {",

            "vec2 noise = rand( vUv );",
            "float depth = readDepth( vUv );",

            "float tt = clamp( depth, aoClamp, 1.0 );",

            "float w = ( 1.0 / width )  / tt + ( noise.x * ( 1.0 - noise.x ) );",
            "float h = ( 1.0 / height ) / tt + ( noise.y * ( 1.0 - noise.y ) );",

            "float pw;",
            "float ph;",

            "float ao;",

            "float dz = 1.0 / float( samples );",
            "float z = 1.0 - dz / 2.0;",
            "float l = 0.0;",

            "for ( int i = 0; i <= samples; i ++ ) {",

            "float r = sqrt( 1.0 - z );",

            "pw = cos( l ) * r;",
            "ph = sin( l ) * r;",
            "ao += calcAO( depth, pw * w, ph * h );",
            "z = z - dz;",
            "l = l + DL;",

            "}",

            "ao /= float( samples );",
            "ao = 1.0 - ao;",

            "if ( fogEnabled ) {",

            "ao = mix( ao, 1.0, doFog() );",

            "}",

            "vec3 color = texture2D( tDiffuse, vUv ).rgb;",

            "vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );",
            "float lum = dot( color.rgb, lumcoeff );",
            "vec3 luminance = vec3( lum );",

            "vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );", // mix( color * ao, white, luminance )

            "if ( onlyAO ) {",

            "final = onlyAOColor * vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );", // ambient occlusion only

            "}",

            "gl_FragColor = vec4( final, 1.0 );",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Colorify shader
	 ------------------------------------------------------------------------- */

    colorify: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            color: { type: "c", value: new THREE.Color(0xffffff) },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform vec3 color;",
            "uniform sampler2D tDiffuse;",

            "varying vec2 vUv;",

            "void main() {",

            "vec4 texel = texture2D( tDiffuse, vUv );",

            "vec3 luma = vec3( 0.299, 0.587, 0.114 );",
            "float v = dot( texel.xyz, luma );",

            "gl_FragColor = vec4( v * color, texel.w );",

            "}",
        ].join("\n"),
    },

    /* -------------------------------------------------------------------------
	//	Unpack RGBA depth shader
	//	- show RGBA encoded depth as monochrome color
	 ------------------------------------------------------------------------- */

    unpackDepthRGBA: {
        uniforms: {
            tDiffuse: { type: "t", value: null },
            opacity: { type: "f", value: 1.0 },
        },

        vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

        fragmentShader: [
            "uniform float opacity;",

            "uniform sampler2D tDiffuse;",

            "varying vec2 vUv;",

            // RGBA depth

            "float unpackDepth( const in vec4 rgba_depth ) {",

            "const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
            "float depth = dot( rgba_depth, bit_shift );",
            "return depth;",

            "}",

            "void main() {",

            "float depth = 1.0 - unpackDepth( texture2D( tDiffuse, vUv ) );",
            "gl_FragColor = opacity * vec4( vec3( depth ), 1.0 );",

            "}",
        ].join("\n"),
    },

    // METHODS

    buildKernel: function (sigma) {
        // We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.

        function gauss(x, sigma) {
            return Math.exp(-(x * x) / (2.0 * sigma * sigma));
        }

        var i,
            values,
            sum,
            halfWidth,
            kMaxKernelSize = 25,
            kernelSize = 2 * Math.ceil(sigma * 3.0) + 1;

        if (kernelSize > kMaxKernelSize) kernelSize = kMaxKernelSize;
        halfWidth = (kernelSize - 1) * 0.5;

        values = new Array(kernelSize);
        sum = 0.0;
        for (i = 0; i < kernelSize; ++i) {
            values[i] = gauss(i - halfWidth, sigma);
            sum += values[i];
        }

        // normalize the kernel

        for (i = 0; i < kernelSize; ++i) values[i] /= sum;

        return values;
    },
};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.MaskPass = function (scene, camera) {
    this.scene = scene;
    this.camera = camera;

    this.enabled = true;
    this.clear = true;
    this.needsSwap = false;

    this.inverse = false;
};

THREE.MaskPass.prototype = {
    render: function (renderer, writeBuffer, readBuffer, delta) {
        var context = renderer.context;

        // don't update color or depth

        context.colorMask(false, false, false, false);
        context.depthMask(false);

        // set up stencil

        var writeValue, clearValue;

        if (this.inverse) {
            writeValue = 0;
            clearValue = 1;
        } else {
            writeValue = 1;
            clearValue = 0;
        }

        context.enable(context.STENCIL_TEST);
        context.stencilOp(context.REPLACE, context.REPLACE, context.REPLACE);
        context.stencilFunc(context.ALWAYS, writeValue, 0xffffffff);
        context.clearStencil(clearValue);

        // draw into the stencil buffer

        renderer.render(this.scene, this.camera, readBuffer, this.clear);
        renderer.render(this.scene, this.camera, writeBuffer, this.clear);

        // re-enable update of color and depth

        context.colorMask(true, true, true, true);
        context.depthMask(true);

        // only render where stencil is set to 1

        context.stencilFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1
        context.stencilOp(context.KEEP, context.KEEP, context.KEEP);
    },
};

THREE.ClearMaskPass = function () {
    this.enabled = true;
};

THREE.ClearMaskPass.prototype = {
    render: function (renderer, writeBuffer, readBuffer, delta) {
        var context = renderer.context;

        context.disable(context.STENCIL_TEST);
    },
};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Two pass Gaussian blur filter (horizontal and vertical blur shaders)
 * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/
 *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html
 *
 * - 9 samples per pass
 * - standard deviation 2.7
 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
 */

THREE.HorizontalBlurShader = {
    uniforms: {
        tDiffuse: { type: "t", value: null },
        h: { type: "f", value: 1.0 / 512.0 },
    },

    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

    fragmentShader: [
        "uniform sampler2D tDiffuse;",
        "uniform float h;",

        "varying vec2 vUv;",

        "void main() {",

        "vec4 sum = vec4( 0.0 );",

        "sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;",
        "sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;",
        "sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;",
        "sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;",
        "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;",
        "sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;",
        "sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;",
        "sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;",
        "sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;",

        "gl_FragColor = sum;",

        "}",
    ].join("\n"),
};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Two pass Gaussian blur filter (horizontal and vertical blur shaders)
 * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/
 *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html
 *
 * - 9 samples per pass
 * - standard deviation 2.7
 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
 */

THREE.VerticalBlurShader = {
    uniforms: {
        tDiffuse: { type: "t", value: null },
        v: { type: "f", value: 1.0 / 512.0 },
    },

    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

    fragmentShader: [
        "uniform sampler2D tDiffuse;",
        "uniform float v;",

        "varying vec2 vUv;",

        "void main() {",

        "vec4 sum = vec4( 0.0 );",

        "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;",
        "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;",
        "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;",
        "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;",
        "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;",
        "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;",
        "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;",
        "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;",
        "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;",

        "gl_FragColor = sum;",

        "}",
    ].join("\n"),
};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * Full-screen textured quad shader
 */

THREE.CopyShader = {
    uniforms: {
        tDiffuse: { type: "t", value: null },
        opacity: { type: "f", value: 1.0 },
    },

    vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"),

    fragmentShader: ["uniform float opacity;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "gl_FragColor = opacity * texel;", "}"].join("\n"),
};

var JH = JH || {};

JH.ImagePost = function (data, loader, ctx) {
    this.loader = loader;
    this.data = data;
    this.ctx = ctx;
    this.init();
};

JH.ImagePost.prototype = {
    init: function () {
        var that = this;

        this.images = [];
        this.containers = [];

        for (var j = 0; j < this.data.photos.length; j++) {
            for (var i = 0; i < this.data.photos[j].alt_sizes.length; i++) {
                if (that.data.photos[j].alt_sizes[i].height >= 600) {
                    var container = H.createEl(
                        "div",
                        {
                            height: "300px",
                            width: "300px",
                            display: "block",
                            position: "relative",
                            overflow: "hidden",
                            boxSizing: "border-box",
                        },
                        that.ctx.content,
                        "image"
                    );

                    var image = H.createImg(
                        that.data.photos[j].alt_sizes[i].url,
                        {
                            height: "92%",
                            width: "auto",
                            marginTop: "4%",
                            marginLeft: "4%",
                            display: "block",
                            position: "relative",
                            border: "1px solid rgba(255,255,255,0.4)",
                        },
                        container,
                        this.loader
                    );

                    var overlay = H.createEl(
                        "div",
                        {
                            position: "absolute",
                            top: "0px",
                            left: "0px",
                            width: "100%",
                            height: "100%",
                            backgroundColor: "#000000",
                            opacity: "0",
                        },
                        container,
                        "overlay"
                    );

                    if (that.data.photos[j].caption == "big") {
                        container.style.height = "600px";
                        container.style.width = "600px";
                        image.style.marginTop = "2%";
                        image.style.marginLeft = "2%";
                        image.style.width = "96%";
                        image.style.height = "96%";
                    }

                    that.containers.push(container);
                    that.images.push(image);
                }
            }
        }

        /*this.el = H.createEl('div',{
			width:'16.666667%',
			height:'auto',
			display:'block',
			position:'relative',
			overflow:'hidden',
			//border:'4px solid #000',
			boxSizing:'border-box'
		},null,'post');

		this.img = H.createImg(url,{
			width:'100%',
			height:'auto',
			display:'block',
			position:'relative'
		},this.el,this.loader);

		TweenMax.set(this.el,{opacity:0,y:100})

		for(var i=0;i<this.data.tags.length;i++){
			if(that.data.tags[i] == 'big'){
				that.el.style.width = '33.3333334%';
			}
		}*/
    },

    /*resize:function(){
		var scale = 0.3333333334;
		if(this.data.photos[j].caption == 'big'){
			scale = 0.66666666667;
		}
		this.el.style.width = this.el.style.height = (site.screenHeight*0.8*scale)+'px'
	}*/
};

var JH = JH || {};

JH.TextPost = function (data) {
    this.data = data;
    this.init();
};

JH.TextPost.prototype = {
    init: function () {
        var that = this;

        //Init wrapper
        this.el = H.createEl(
            "div",
            {
                position: "relative",
                display: "block",
                height: "33.33333%",
                width: "16.6666667%",
                backgroundColor: "#c1c1c1",
            },
            null,
            "post textpost"
        );
    },
};

var JH = JH || {};

JH.ArtistProject = function (data, loader, ctx, ident) {
    this.ident = ident;
    this.loader = loader;
    this.data = data;
    this.ctx = ctx;
    this.init();
};

JH.ArtistProject.prototype = {
    init: function () {
        var that = this;

        this.el = H.createEl(
            "div",
            {
                height: "300px",
                width: "533px",
                display: "block",
                position: "relative",
                overflow: "hidden",
                boxSizing: "border-box",
                cursor: "pointer",
            },
            that.ctx.content,
            "image"
        );

        this.imageContainer = H.createEl(
            "div",
            {
                position: "relative",
                height: "270px",
                width: "503px",
                marginTop: "15px",
                marginLeft: "15px",
                overflow: "hidden",
            },
            this.el
        );

        /*for(var i=0;i<this.data.tags.length;i++){
			if(that.data.tags[i] == 'big'){
				that.isBig = true;
				continue;
			}
		}*/

        if (this.ident - Math.floor(this.ident / 6) * 6 == 1 || this.ident - Math.floor(this.ident / 6) * 6 == 3) {
            that.isBig = true;
        }

        var url = "";
        var sizeToCheck = 500;
        if (that.isBig) {
            sizeToCheck = 1000;
        }
        for (var i = 0; i < this.data.photos[0].alt_sizes.length; i++) {
            if (that.data.photos[0].alt_sizes[i].width >= sizeToCheck) {
                url = that.data.photos[0].alt_sizes[i].url;
            }
        }

        this.image = H.createImg(
            url,
            {
                height: "100%",
                width: "100%",
                display: "block",
                position: "relative",
            },
            this.imageContainer,
            this.loader
        );

        TweenMax.set(this.image, { skewX: 5, scale: 1.1 });

        this.overlay = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
                width: "100%",
                height: "100%",
                backgroundColor: "rgba(0,0,0,0.7)",
                opacity: "0",
            },
            this.imageContainer
        );

        this.textContainer = H.createEl(
            "div",
            {
                position: "absolute",
                left: "0px",
                top: "150px",
                width: "100%",
                height: "70px",
                overflow: "hidden",
            },
            this.overlay
        );

        TweenMax.set(this.textContainer, { skewX: 5 });

        this.text = H.createEl(
            "div",
            {
                position: "absolute",
                left: "35px",
                top: "0px",
                fontFamily: "Open Sans,Arial,sans-serif",
                letterSpacing: "-3px",
                fontWeight: "bold",
                fontSize: "46px",
                lineHeight: "80px",
                color: "#ffffff",
            },
            this.textContainer
        );

        this.text.innerHTML = that.data.caption.match(/<h2>(.*?)<\/h2>/)[1];

        if (that.isBig) {
            that.el.style.height = "600px";
            that.el.style.width = "1066px";
            that.imageContainer.style.height = "570px";
            that.imageContainer.style.width = "1036px";
            this.textContainer.style.top = "360px";
            this.textContainer.style.height = "105px";
            this.text.style.left = "70px";
            this.text.style.fontSize = "90px";
        }

        $(this.el).hover(
            function () {
                TweenMax.to(that.overlay, 0.5, { opacity: 1 });
                TweenMax.fromTo(that.text, 0.5, { y: 140 }, { y: 0, ease: Expo.easeOut, delay: 0.1 });
            },
            function () {
                TweenMax.to(that.overlay, 0.5, { opacity: 0 });
            }
        );

        $(this.el).click(function () {
            if (!that.ctx.isScrolling) {
                site.getProject(that.data);
            }
        });
    },

    animateIn: function (delay) {
        TweenMax.fromTo(this.el, 1.5, { autoAlpha: 0, x: 500, rotationY: 20, z: -50, transformPerspective: 300 }, { autoAlpha: 1, x: 0, z: 0, rotationY: 0, ease: Expo.easeOut, delay: delay });
    },

    animateOut: function (delay) {
        var that = this;
        TweenMax.to(this.el, 1, {
            x: 500,
            z: -50,
            rotationY: 5,
            autoAlpha: 0,
            ease: Expo.easeIn,
            delay: delay,
            onComplete: function () {
                //that.ctx.content.removeChild(that.el);
                //that = null;
            },
        });
    },
};

var JH = JH || {};

JH.DeveloperProject = function (data, loader, ctx, ident) {
    this.ident = ident;
    this.loader = loader;
    this.data = data;
    this.ctx = ctx;
    this.init();
};

JH.DeveloperProject.prototype = {
    init: function () {
        var that = this;

        this.el = H.createEl(
            "div",
            {
                height: "300px",
                width: "533px",
                display: "block",
                position: "relative",
                overflow: "hidden",
                boxSizing: "border-box",
                cursor: "pointer",
            },
            that.ctx.content,
            "image"
        );

        this.imageContainer = H.createEl(
            "div",
            {
                position: "relative",
                height: "270px",
                width: "503px",
                marginTop: "15px",
                marginLeft: "15px",
                overflow: "hidden",
            },
            this.el
        );

        /*for(var i=0;i<this.data.tags.length;i++){
			if(that.data.tags[i] == 'big'){
				that.isBig = true;
				continue;
			}
		}*/

        if (this.ident - Math.floor(this.ident / 6) * 6 == 1 || this.ident - Math.floor(this.ident / 6) * 6 == 3) {
            that.isBig = true;
        }

        var url = "";
        var sizeToCheck = 500;
        if (that.isBig) {
            sizeToCheck = 1000;
        }
        for (var i = 0; i < this.data.photos[0].alt_sizes.length; i++) {
            if (that.data.photos[0].alt_sizes[i].width >= sizeToCheck) {
                url = that.data.photos[0].alt_sizes[i].url;
            }
        }

        this.image = H.createImg(
            url,
            {
                height: "100%",
                width: "100%",
                display: "block",
                position: "relative",
            },
            this.imageContainer,
            this.loader
        );

        TweenMax.set(this.image, { skewX: 5, scale: 1.1 });

        this.overlay = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
                width: "100%",
                height: "100%",
                backgroundColor: "rgba(0,0,0,0.7)",
                opacity: "0",
            },
            this.imageContainer
        );

        this.textContainer = H.createEl(
            "div",
            {
                position: "absolute",
                left: "0px",
                top: "150px",
                width: "100%",
                height: "70px",
                overflow: "hidden",
            },
            this.overlay
        );

        TweenMax.set(this.textContainer, { skewX: 5 });

        this.text = H.createEl(
            "div",
            {
                position: "absolute",
                left: "35px",
                top: "0px",
                fontFamily: "Open Sans,Arial,sans-serif",
                letterSpacing: "-3px",
                fontWeight: "bold",
                fontSize: "46px",
                lineHeight: "80px",
                color: "#ffffff",
            },
            this.textContainer
        );

        this.text.innerHTML = that.data.caption.match(/<h2>(.*?)<\/h2>/)[1];

        if (that.isBig) {
            that.el.style.height = "600px";
            that.el.style.width = "1066px";
            that.imageContainer.style.height = "570px";
            that.imageContainer.style.width = "1036px";
            this.textContainer.style.top = "360px";
            this.textContainer.style.height = "105px";
            this.text.style.left = "70px";
            this.text.style.fontSize = "90px";
        }

        $(this.el).hover(
            function () {
                TweenMax.to(that.overlay, 0.5, { opacity: 1 });
                TweenMax.fromTo(that.text, 0.5, { y: 140 }, { y: 0, ease: Expo.easeOut, delay: 0.1 });
            },
            function () {
                TweenMax.to(that.overlay, 0.5, { opacity: 0 });
            }
        );

        $(this.el).click(function () {
            if (!that.ctx.isScrolling) {
                site.getProject(that.data);
            }
        });
    },

    animateIn: function (delay) {
        TweenMax.fromTo(this.el, 1.5, { autoAlpha: 0, x: 500, rotationY: 20, z: -50, transformPerspective: 300 }, { autoAlpha: 1, x: 0, z: 0, rotationY: 0, ease: Expo.easeOut, delay: delay });
    },

    animateOut: function (delay) {
        var that = this;
        TweenMax.to(this.el, 1, {
            x: 500,
            z: -50,
            rotationY: 5,
            autoAlpha: 0,
            ease: Expo.easeIn,
            delay: delay,
            onComplete: function () {
                //that.ctx.content.removeChild(that.el);
                //that = null;
            },
        });
    },
};

var JH = JH || {};

JH.LoaderView = function () {
    this.init();
};

JH.LoaderView.prototype = {
    init: function () {
        var that = this;

        //Init wrapper
        this.el = H.createEl("div", {
            position: "absolute",
            top: "0px",
            left: "0px",
            width: "100%",
            height: "100%",
            overflow: "hidden",
            zIndex: "100",
        });

        this.gif = H.createImg(
            "assets/img/loader/loader.gif",
            {
                position: "absolute",
                top: "50%",
                left: "50%",
                marginLeft: "-16px",
                marginTop: "-16px",
            },
            this.el
        );
    },

    updatePerc: function (perc) {},

    animateOut: function () {
        var that = this;
        TweenMax.to(this.gif, 0.7, {
            opacity: 0,
            onComplete: function () {
                that.el.style.display = "none";
            },
        });
    },
};

var JH = JH || {};

JH.HomeView = function () {
    this.mouseX = 0;
    this.mouseY = 0;

    this.cubes = [];
    this.init();
};

JH.HomeView.prototype = {
    init: function () {
        var that = this;

        //Init wrapper
        this.el = H.createEl("div", {
            position: "relative",
        });

        this.wrapperRight = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                right: "0px",
                width: "50%",
                height: "100%",
                overflow: "hidden",
                cursor: "pointer",
                backgroundColor: "#111111",
            },
            this.el
        );

        this.wrapperLeft = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
                width: "50%",
                height: "100%",
                overflow: "hidden",
                backgroundColor: "#dddddd",
                cursor: "pointer",
            },
            this.el
        );

        TweenMax.set(this.wrapperLeft, { skewX: -5 });

        $(this.wrapperLeft).hover(
            function () {
                TweenMax.to(that.wrapperLeft, 1, { width: site.screenWidth * 0.7, ease: Expo.easeOut });
                TweenMax.to(that.titleLeftBg, 0.5, { width: "100%", ease: Expo.easeOut });
                TweenMax.to(that.titleRightBg, 0.5, { width: "0%", ease: Expo.easeOut });
            },
            function () {}
        );

        $(this.wrapperRight).hover(
            function () {
                TweenMax.to(that.wrapperLeft, 1, { width: site.screenWidth * 0.5, ease: Expo.easeOut });
                TweenMax.to(that.titleLeftBg, 0.5, { width: "0%", ease: Expo.easeOut });
                TweenMax.to(that.titleRightBg, 0.5, { width: "100%", ease: Expo.easeOut });
            },
            function () {}
        );

        $(this.wrapperLeft).click(function () {
            that.getDeveloper();
        });

        $(this.wrapperRight).click(function () {
            that.getArtist();
        });

        this.renderer = new THREE.WebGLRenderer({ alpha: false, antialias: true });
        this.renderer2 = new THREE.WebGLRenderer({ alpha: false, antialias: true });
        this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
        this.camera2 = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
        this.scene = new THREE.Scene();
        this.scene2 = new THREE.Scene();

        this.renderer2.setClearColor(0x111111, 1);
        this.renderer2.autoClear = false;
        this.renderer2.setPixelRatio(window.devicePixelRatio);
        this.scene2.fog = new THREE.FogExp2(0x111111, 0.0006);

        this.renderer.setClearColor(0xdddddd, 1);
        this.renderer.autoClear = false;
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.scene.fog = new THREE.FogExp2(0xdddddd, 0.0006);

        this.composer = new THREE.EffectComposer(this.renderer);
        this.renderPass = new THREE.RenderPass(this.scene, this.camera);

        this.composer2 = new THREE.EffectComposer(this.renderer2);
        this.renderPass2 = new THREE.RenderPass(this.scene2, this.camera2);

        this.horizontalBlurPass = new THREE.ShaderPass(THREE.HorizontalBlurShader);
        this.verticalBlurPass = new THREE.ShaderPass(THREE.VerticalBlurShader);

        this.horizontalBlurPass2 = new THREE.ShaderPass(THREE.HorizontalBlurShader);
        this.verticalBlurPass2 = new THREE.ShaderPass(THREE.VerticalBlurShader);

        this.horizontalBlurPass.uniforms.h.value = 0;
        this.verticalBlurPass.uniforms.v.value = 0;

        this.horizontalBlurPass2.uniforms.h.value = 0;
        this.verticalBlurPass2.uniforms.v.value = 0;

        this.verticalBlurPass.renderToScreen = true;
        this.verticalBlurPass2.renderToScreen = true;

        this.composer.addPass(this.renderPass);
        this.composer.addPass(this.horizontalBlurPass);
        this.composer.addPass(this.verticalBlurPass);

        this.composer2.addPass(this.renderPass2);
        this.composer2.addPass(this.horizontalBlurPass2);
        this.composer2.addPass(this.verticalBlurPass2);

        this.camera.position.z = 2000;
        this.camera.position.y = 0;

        this.camera2.position.z = 2000;
        this.camera2.position.y = 0;

        this.camera2.lookAt(new THREE.Vector3());

        // start the renderer
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer2.setSize(window.innerWidth, window.innerHeight);

        this.wrapperLeft.appendChild(this.renderer.domElement);
        this.renderer.domElement.style.position = "absolute";
        this.renderer.domElement.style.top = "0px";
        this.renderer.domElement.style.left = "0px";
        TweenMax.set(this.renderer.domElement, { skewX: 5 });

        this.wrapperRight.appendChild(this.renderer2.domElement);
        this.renderer2.domElement.style.position = "absolute";
        this.renderer2.domElement.style.top = "0px";
        this.renderer2.domElement.style.right = "0px";

        //texture
        var path = "assets/img/skybox/";
        var format = ".jpg";
        var urls = [path + "px" + format, path + "nx" + format, path + "py" + format, path + "ny" + format, path + "pz" + format, path + "nz" + format];

        var reflectionCube = THREE.ImageUtils.loadTextureCube(urls);
        reflectionCube.format = THREE.RGBFormat;

        var reflectionCube2 = THREE.ImageUtils.loadTextureCube(urls);
        reflectionCube2.format = THREE.RGBFormat;

        //var material = new THREE.MeshLambertMaterial({color: 0x0090ff, wireframe:false});

        for (var i = 0; i < 500; i++) {
            var rand = Math.random() * 70 + 5;
            var cube = new THREE.Mesh(new THREE.BoxGeometry(rand, rand, rand), new THREE.MeshLambertMaterial({ color: 0x555555, wireframe: false, envMap: reflectionCube, combine: THREE.MixOperation, reflectivity: 0.15 }));
            var cube2 = new THREE.Mesh(new THREE.BoxGeometry(rand, rand, rand), new THREE.MeshLambertMaterial({ color: 0x555555, wireframe: false, envMap: reflectionCube2, combine: THREE.MixOperation, reflectivity: 0.15 }));
            cube.position.x = cube2.position.x = (Math.random() - 0.5) * 3000;
            cube.position.y = cube2.position.y = (Math.random() - 0.5) * 3000;
            cube.position.z = cube2.position.z = (Math.random() - 0.5) * 4000;
            cube.rotation.x = cube2.rotation.x = Math.random() * 360;
            cube.rotation.y = cube2.rotation.y = Math.random() * 360;
            this.scene.add(cube);
            this.scene2.add(cube2);

            this.cubes.push({ elem: cube, elem2: cube2, speedY: Math.random() * 5 + 3, rotX: Math.random() * 0.02, rotY: Math.random() * 0.02 });
        }

        var light2 = new THREE.PointLight(0xffffff, 1);
        light2.position.y = 0;
        light2.position.x = 0;
        light2.position.z = 1000;

        var light22 = new THREE.PointLight(0x0090ff, 3);
        light22.position.y = 0;
        light22.position.x = 0;
        light22.position.z = 1000;
        this.scene.add(light2);
        this.scene2.add(light22);

        document.addEventListener("mousemove", $.proxy(this.onDocumentMouseMove, this), false);

        this.shouldLoop = true;
        this.render();

        this.logo = H.createEl(
            "div",
            {
                position: "absolute",
                top: "50%",
                left: "50%",
                marginLeft: "-70px",
                marginTop: "-70px",
                width: "140px",
                height: "140px",
                backgroundColor: "#ffffff",
                opacity: "1",
            },
            this.wrapperRight
        );

        this.logoLeft = H.createEl(
            "div",
            {
                position: "absolute",
                top: 140 / 7 + "px",
                left: 140 / 7 + "px",
                width: (140 / 7) * 2 + "px",
                height: (140 / 7) * 4 + "px",
                backgroundColor: "#111",
            },
            this.logo
        );

        this.logoTopRight = H.createEl(
            "div",
            {
                position: "absolute",
                top: 140 / 7 + "px",
                right: 140 / 7 + "px",
                width: (140 / 7) * 2 + "px",
                height: (140 / 7) * 2 + "px",
                backgroundColor: "#111",
            },
            this.logo
        );

        this.logBottomRight = H.createEl(
            "div",
            {
                position: "absolute",
                bottom: 140 / 7 + "px",
                right: 140 / 7 + "px",
                width: (140 / 7) * 2 + "px",
                height: (140 / 7) * 2 + "px",
                backgroundColor: "#111",
            },
            this.logo
        );

        this.logo2 = H.createEl(
            "div",
            {
                position: "absolute",
                top: "50%",
                left: "50%",
                marginLeft: "-70px",
                marginTop: "-70px",
                width: "140px",
                height: "140px",
                backgroundColor: "#111",
                opacity: "1",
            },
            this.wrapperLeft
        );

        TweenMax.set(this.logo2, { skewX: 5 });

        this.logo2Left = H.createEl(
            "div",
            {
                position: "absolute",
                top: 140 / 7 + "px",
                left: 140 / 7 + "px",
                width: (140 / 7) * 2 + "px",
                height: (140 / 7) * 4 + "px",
                backgroundColor: "#ddd",
            },
            this.logo2
        );

        this.logo2TopRight = H.createEl(
            "div",
            {
                position: "absolute",
                top: 140 / 7 + "px",
                right: 140 / 7 + "px",
                width: (140 / 7) * 2 + "px",
                height: (140 / 7) * 2 + "px",
                backgroundColor: "#ddd",
            },
            this.logo2
        );

        this.log2BottomRight = H.createEl(
            "div",
            {
                position: "absolute",
                bottom: 140 / 7 + "px",
                right: 140 / 7 + "px",
                width: (140 / 7) * 2 + "px",
                height: (140 / 7) * 2 + "px",
                backgroundColor: "#ddd",
            },
            this.logo2
        );

        this.titleLeftContainer = H.createEl(
            "div",
            {
                position: "absolute",
                top: "50%",
                left: "25%",
                marginTop: "-25px",
                marginLeft: "-157px",
                width: "310px",
                height: "50px",
                //border:'2px solid #000000',
                overflow: "hidden",
                pointerEvents: "none",
            },
            this.el
        );

        TweenMax.set(this.titleLeftContainer, { skewX: -5, scale: 0.75 });

        this.titleLeft = H.createEl(
            "div",
            {
                position: "absolute",
                top: "8px",
                left: "3px",
                fontFamily: "Bebas, serif",
                fontSize: "29px",
                letterSpacing: "20px",
                color: "#111",
                width: "320px",
                textAlign: "center",
                pointerEvents: "none",
            },
            this.titleLeftContainer
        );

        this.titleLeft.innerHTML = "DEVELOPER";

        this.titleLeftBg = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
                width: "0%",
                height: "100%",
                backgroundColor: "#000000",
                overflow: "hidden",
            },
            this.titleLeftContainer
        );

        this.titleLeftBgCopy = H.createEl(
            "div",
            {
                position: "absolute",
                top: "8px",
                left: "3px",
                fontFamily: "Bebas, serif",
                fontSize: "29px",
                letterSpacing: "20px",
                color: "#fff",
                width: "320px",
                textAlign: "center",
            },
            this.titleLeftBg
        );

        this.titleLeftBgCopy.innerHTML = "DEVELOPER";

        this.titleRightContainer = H.createEl(
            "div",
            {
                position: "absolute",
                top: "50%",
                right: "25%",
                marginTop: "-25px",
                marginRight: "-110px",
                width: "210px",
                height: "50px",
                //border:'2px solid #ffffff',
                overflow: "hidden",
                pointerEvents: "none",
            },
            this.el
        );

        TweenMax.set(this.titleRightContainer, { skewX: -5, scale: 0.75 });

        this.titleRight = H.createEl(
            "div",
            {
                position: "absolute",
                top: "8px",
                left: "20px",
                fontFamily: "Bebas, serif",
                fontSize: "29px",
                letterSpacing: "20px",
                color: "#fff",
                width: "188px",
                textAlign: "center",
                pointerEvents: "none",
            },
            this.titleRightContainer
        );

        this.titleRight.innerHTML = "ARTIST";

        this.titleRightBg = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
                width: "0%",
                height: "100%",
                backgroundColor: "#ffffff",
                overflow: "hidden",
            },
            this.titleRightContainer
        );

        this.titleRightBgCopy = H.createEl(
            "div",
            {
                position: "absolute",
                top: "8px",
                left: "20px",
                fontFamily: "Bebas, serif",
                fontSize: "29px",
                letterSpacing: "20px",
                color: "#111",
                width: "188px",
                textAlign: "center",
            },
            this.titleRightBg
        );

        this.titleRightBgCopy.innerHTML = "ARTIST";
    },

    getDeveloper: function () {
        var that = this;

        $(that.wrapperLeft).unbind("hover");
        $(that.wrapperLeft).unbind("click");
        $(that.wrapperRight).unbind("hover");
        $(that.wrapperRight).unbind("click");

        $(this.wrapperRight).hover(
            function () {
                TweenMax.to(that.titleRightBg, 0.5, { width: "100%", ease: Expo.easeOut });
            },
            function () {
                TweenMax.to(that.titleRightBg, 0.5, { width: "0%", ease: Expo.easeOut });
            }
        );

        that.wrapperLeft.style.cursor = "inherit";

        TweenMax.to([that.logo, that.logo2], 0.7, { autoAlpha: 0 });

        TweenMax.to(this.renderer.domElement, 1, { autoAlpha: 0 });
        TweenMax.to(this.renderer2.domElement, 1, {
            autoAlpha: 0,
            onComplete: function () {
                that.shouldLoop = false;
            },
        });

        TweenMax.to(that.wrapperLeft, 0.7, {
            width: "100%",
            ease: Expo.easeInOut,
            onComplete: function () {
                $(that.wrapperRight).click(function (e) {
                    site.developerView.animateOut();
                    TweenMax.delayedCall(1, function () {
                        that.getHome();
                    });
                });
            },
        });

        site.getDeveloper();
        that.isDeveloper = true;

        TweenMax.to(this.titleRightContainer, 0.7, { width: 55, right: "5%", marginRight: -55 / 2, ease: Expo.easeInOut });
        TweenMax.to(this.titleLeftContainer, 0.7, {
            autoAlpha: 0,
            onComplete: function () {
                TweenMax.set(that.titleLeftBg, { width: "0%" });
            },
        });
    },

    getArtist: function () {
        var that = this;

        $(that.wrapperLeft).unbind("hover");
        $(that.wrapperLeft).unbind("click");
        $(that.wrapperRight).unbind("hover");
        $(that.wrapperRight).unbind("click");

        $(this.wrapperLeft).hover(
            function () {
                TweenMax.to(that.titleLeftBg, 0.5, { width: "100%", ease: Expo.easeOut });
            },
            function () {
                TweenMax.to(that.titleLeftBg, 0.5, { width: "0%", ease: Expo.easeOut });
            }
        );

        that.wrapperRight.style.cursor = "inherit";

        TweenMax.to([that.logo, that.logo2], 0.7, { autoAlpha: 0 });

        TweenMax.to(this.renderer.domElement, 1, { autoAlpha: 0 });
        TweenMax.to(this.renderer2.domElement, 1, {
            autoAlpha: 0,
            onComplete: function () {
                that.shouldLoop = false;
            },
        });

        TweenMax.to(that.wrapperLeft, 0.7, {
            width: "20%",
            ease: Expo.easeInOut,
            onComplete: function () {
                $(that.wrapperLeft).click(function (e) {
                    site.artistView.animateOut();
                    TweenMax.delayedCall(1, function () {
                        that.getHome();
                    });
                });
            },
        });

        TweenMax.to(this.titleLeftContainer, 0.7, { width: 55, left: "5%", marginLeft: -55 / 2, ease: Expo.easeInOut });
        TweenMax.to(this.titleRightContainer, 0.7, {
            autoAlpha: 0,
            onComplete: function () {
                TweenMax.set(that.titleRightBg, { width: "0%" });
            },
        });

        site.getArtist();
        that.isArtist = true;
    },

    getHome: function () {
        var that = this;

        that.wrapperLeft.style.cursor = "pointer";
        that.wrapperRight.style.cursor = "pointer";

        TweenMax.to([that.titleRightContainer, that.titleLeftContainer, that.logo, that.logo2], 0.7, { autoAlpha: 1 });

        TweenMax.to(this.titleLeftContainer, 0.7, { width: 315, left: "25%", marginLeft: -315 / 2, ease: Expo.easeInOut });
        TweenMax.to(this.titleRightContainer, 0.7, { width: 220, right: "25%", marginRight: -220 / 2, ease: Expo.easeInOut });

        TweenMax.to(this.renderer.domElement, 1, { autoAlpha: 1 });
        TweenMax.to(this.renderer2.domElement, 1, { autoAlpha: 1 });

        TweenMax.to(that.wrapperLeft, 0.7, { width: (site.screenWidth * 1.2) / 2 + "px", ease: Expo.easeInOut });

        //TweenMax.to([that.titleRightBg,that.titleLeftBg],0.5,{width:'0%'});

        that.isDeveloper = false;
        that.isArtist = false;

        $(that.wrapperLeft).unbind("hover");
        $(that.wrapperRight).unbind("hover");
        $(that.wrapperLeft).unbind("click");
        $(that.wrapperRight).unbind("click");

        $(this.wrapperLeft).hover(
            function () {
                TweenMax.to(that.wrapperLeft, 1, { width: site.screenWidth * 0.7, ease: Expo.easeOut });
                TweenMax.to(that.titleLeftBg, 0.5, { width: "100%", ease: Expo.easeOut });
                TweenMax.to(that.titleRightBg, 0.5, { width: "0%", ease: Expo.easeOut });
            },
            function () {}
        );

        $(this.wrapperRight).hover(
            function () {
                TweenMax.to(that.wrapperLeft, 1, { width: site.screenWidth * 0.5, ease: Expo.easeOut });
                TweenMax.to(that.titleLeftBg, 0.5, { width: "0%", ease: Expo.easeOut });
                TweenMax.to(that.titleRightBg, 0.5, { width: "100%", ease: Expo.easeOut });
            },
            function () {}
        );

        $(this.wrapperLeft).click(function () {
            that.getDeveloper();
        });

        $(this.wrapperRight).click(function () {
            that.getArtist();
        });

        this.shouldLoop = true;
        this.render();

        $(this.el).unbind("click");
    },

    pause: function () {
        this.shouldLoop = false;
    },

    resume: function () {
        if (!this.shouldLoop) {
            this.shouldLoop = true;
            this.render();
        }
    },

    onDocumentMouseMove: function (event) {
        this.mouseX = (event.clientX - window.innerWidth / 2) / 2;
        this.mouseY = (event.clientY - window.innerHeight / 2) / 2;
    },

    render: function () {
        //Render
        if (this.renderer) {
            //this.renderer.render(this.scene, this.camera);
            this.renderer.clear();
            this.composer.render();

            this.renderer2.clear();
            this.composer2.render();

            //this.renderer2.render(this.scene2, this.camera2);
        }

        //Update
        this.camera.position.x += (this.mouseX - this.camera.position.x) * 0.05;
        this.camera.position.y += (-this.mouseY + 100 - this.camera.position.y) * 0.05;
        this.camera2.position.x = this.camera.position.x;
        this.camera2.position.y = this.camera.position.y;

        this.camera.lookAt(this.scene.position);
        this.camera2.lookAt(this.scene2.position);

        for (var i = 0; i < this.cubes.length; i++) {
            var elem = this.cubes[i].elem;
            var elem2 = this.cubes[i].elem2;
            elem.position.y -= this.cubes[i].speedY;
            elem2.position.y -= this.cubes[i].speedY;
            elem.position.z += 5;
            elem2.position.z += 5;
            elem.rotation.x += this.cubes[i].rotX;
            elem2.rotation.x += this.cubes[i].rotX;
            elem.rotation.y += this.cubes[i].rotY;
            elem2.rotation.y += this.cubes[i].rotY;

            if (elem.position.y < -1500) {
                elem.position.y = 1500;
                elem2.position.y = 1500;
            }

            if (elem.position.z > 2000) {
                elem.position.z = -2000;
                elem2.position.z = -2000;
            }
        }

        // set up a request for a render
        if (this.shouldLoop) {
            requestAnimationFrame($.proxy(this.render, this));
        }
    },

    resize: function () {
        this.el.style.width = site.screenWidth + "px";
        this.el.style.height = site.screenHeight + "px";

        if (!this.isArtist && !this.isDeveloper) {
            this.wrapperLeft.style.width = (site.screenWidth * 1.2) / 2 + "px";
        } else if (this.isDeveloper) {
            this.wrapperLeft.style.width = "100%";
        } else {
            this.wrapperLeft.style.width = "20%";
        }
        this.wrapperRight.style.width = site.screenWidth + "px";
        this.wrapperLeft.style.height = site.screenHeight + "px";
        this.wrapperRight.style.height = site.screenHeight + "px";
        this.wrapperLeft.style.left = -(site.screenWidth * 0.1) + "px";

        this.logo2.style.left = (site.screenWidth * 1.2) / 2 + "px";

        this.renderer.domElement.style.top = -(site.screenHeight * 0.11) + "px";
        this.renderer2.domElement.style.top = -(site.screenHeight * 0.11) + "px";
        this.renderer.setSize($(this.el).width() * 1.11, $(this.el).height() * 1.11);
        this.renderer2.setSize($(this.el).width() * 1.11, $(this.el).height() * 1.11);
        this.camera.aspect = $(this.el).width() / $(this.el).height();
        this.camera.updateProjectionMatrix();
        this.camera2.aspect = $(this.el).width() / $(this.el).height();
        this.camera2.updateProjectionMatrix();
        this.composer.reset();
        this.composer2.reset();
    },
};

var JH = JH || {};

JH.ArtistView = function () {
    this.posts = [];
    this.init();
};

JH.ArtistView.prototype = {
    init: function () {
        var that = this;

        //Init wrapper
        this.el = H.createEl("div", {
            position: "absolute",
            top: "0px",
            left: "0px",
        });

        TweenMax.set(this.el, { skewX: -5 });

        this.container = H.createEl(
            "div",
            {
                position: "absolute",
                top: "50%",
                left: "0px",
                height: "1000px",
                marginTop: "-450px",
                width: "100%",
                overflow: "hidden",
            },
            this.el
        );

        this.content = H.createEl(
            "div",
            {
                position: "relative",
                paddingLeft: "13%",
                paddingRight: "5%",
                height: "900px",
                width: "auto",
            },
            this.container
        );
    },

    loadPosts: function (callback) {
        var that = this;

        this.loader = new PxLoader();
        this.callback = callback;

        if (this.posts.length == 0) {
            $.ajax({
                type: "GET",
                url: "http://api.tumblr.com/v2/blog/jhelfens-blog.tumblr.com/posts",
                dataType: "jsonp",
                data: {
                    api_key: site.data.tumblrApiKey,
                    limit: 50,
                    tag: "_artist",
                },
                success: function (data) {
                    that.tumblrData = data.response.posts;
                    that.tumblrData = _.sortBy(that.tumblrData, function (data) {
                        return data.date;
                    }).reverse();
                    that.parseTumblr();
                },
            });
        } else {
            that.onLoaded();
        }
    },

    parseTumblr: function () {
        var that = this;

        for (var i = 0; i < this.tumblrData.length; i++) {
            var post = null;
            if (that.tumblrData[i].type == "photo") {
                post = new JH.ArtistProject(that.tumblrData[i], that.loader, that, i);
            }

            if (post) {
                that.posts.push(post);
            }
        }

        this.loader.addCompletionListener($.proxy(this.onLoaded, this));
        this.loader.addProgressListener(function (e) {
            var perc = e.completedCount / e.totalCount;
        });

        this.loader.start();
    },

    onLoaded: function () {
        var that = this;

        if (this.callback) {
            this.callback.call();
        }

        if (!this.pckry) {
            this.pckry = new Packery(this.content, {
                // options
                itemSelector: ".image",
                gutter: 0,
                isHorizontal: true,
                transitionDuration: 0,
            });

            this.pckry.bindResize();
        }

        TweenMax.to(this.el, 1, { autoAlpha: 1 });

        if (this.scroll) {
            this.scroll.scrollTo(0, 0);
        }

        for (var i = 0; i < this.posts.length; i++) {
            that.posts[i].animateIn(i * 0.15 + 1);
        }

        TweenMax.set(this.content, { x: 0 });

        setTimeout(function () {
            if (!that.scroll) {
                that.scroll = new IScroll(that.container, {
                    scrollbars: "custom",
                    mouseWheel: true,
                    scrollX: true,
                    scrollY: false,
                    interactiveScrollbars: true,
                    resizeScrollbars: false,
                });
                $(that.container).mousedown(function () {
                    that.isMouseDown = true;
                });
                $(that.container).mouseup(function () {
                    that.isMouseDown = false;
                });
                that.scroll.on("scrollStart", function () {
                    if (that.isMouseDown) {
                        that.isMouseDown = false;
                        that.isScrolling = true;

                        $(window).mouseup(function () {
                            setTimeout(function () {
                                that.isScrolling = false;
                            }, 100);
                        });
                    }
                });
            }
        }, 1000);

        this.resize();
        this.isOpen = true;
    },

    pause: function () {},

    resume: function () {},

    animateOut: function () {
        var that = this;

        for (var i = 0; i < this.posts.length; i++) {
            that.posts[i].animateOut(0);
        }

        TweenMax.to(this.el, 0.5, { autoAlpha: 0, delay: 0.5 });

        $(window).unbind("mousemove");

        this.isOpen = false;
    },

    resize: function () {
        var that = this;

        this.el.style.width = site.screenWidth + "px";
        this.el.style.height = site.screenHeight + "px";

        this.container.style.width = (site.screenWidth * 1) / ((site.screenHeight * 0.8) / 900) + "px";

        if (this.scroll) {
            this.scroll.refresh();
        }

        TweenMax.set(this.container, { scale: (site.screenHeight * 0.8) / 900, transformOrigin: "0% 50%" });
    },
};

var JH = JH || {};

JH.DeveloperView = function () {
    this.posts = [];
    this.init();
};

JH.DeveloperView.prototype = {
    init: function () {
        var that = this;

        //Init wrapper
        this.el = H.createEl("div", {
            position: "absolute",
            top: "0px",
            left: "0px",
        });

        this.container = H.createEl(
            "div",
            {
                position: "absolute",
                top: "50%",
                left: "0px",
                height: "1000px",
                marginTop: "-450px",
                width: "100%",
                overflow: "hidden",
            },
            this.el
        );

        this.content = H.createEl(
            "div",
            {
                position: "relative",
                paddingLeft: "13%",
                paddingRight: "5%",
                height: "900px",
                width: "auto",
            },
            this.container
        );
    },

    loadPosts: function (callback) {
        var that = this;

        this.loader = new PxLoader();
        this.callback = callback;

        if (this.posts.length == 0) {
            $.ajax({
                type: "GET",
                url: "http://api.tumblr.com/v2/blog/jhelfens-blog.tumblr.com/posts",
                dataType: "jsonp",
                data: {
                    api_key: site.data.tumblrApiKey,
                    limit: 50,
                    tag: "_developer",
                },
                success: function (data) {
                    that.tumblrData = data.response.posts;
                    that.tumblrData = _.sortBy(that.tumblrData, function (data) {
                        return data.date;
                    }).reverse();
                    that.parseTumblr();
                },
            });
        } else {
            that.onLoaded();
        }
    },

    parseTumblr: function () {
        var that = this;

        for (var i = 0; i < this.tumblrData.length; i++) {
            var post = null;
            if (that.tumblrData[i].type == "photo") {
                post = new JH.DeveloperProject(that.tumblrData[i], that.loader, that, i);
            }

            if (post) {
                that.posts.push(post);
            }
        }

        this.loader.addCompletionListener($.proxy(this.onLoaded, this));
        this.loader.addProgressListener(function (e) {
            var perc = e.completedCount / e.totalCount;
        });

        this.loader.start();
    },

    onLoaded: function () {
        var that = this;

        if (this.callback) {
            this.callback.call();
        }

        if (!this.pckry) {
            this.pckry = new Packery(this.content, {
                // options
                itemSelector: ".image",
                gutter: 0,
                isHorizontal: true,
                transitionDuration: 0,
            });

            this.pckry.bindResize();
        }

        TweenMax.to(this.el, 1, { autoAlpha: 1 });

        if (this.scroll) {
            this.scroll.scrollTo(0, 0);
        }

        for (var i = 0; i < this.posts.length; i++) {
            that.posts[i].animateIn(i * 0.15 + 1);
        }

        TweenMax.set(this.content, { x: 0 });

        setTimeout(function () {
            if (!that.scroll) {
                that.scroll = new IScroll(that.container, {
                    scrollbars: "custom",
                    mouseWheel: true,
                    scrollX: true,
                    scrollY: false,
                    interactiveScrollbars: true,
                    resizeScrollbars: false,
                });
                $(that.container).mousedown(function () {
                    that.isMouseDown = true;
                });
                $(that.container).mouseup(function () {
                    that.isMouseDown = false;
                });
                that.scroll.on("scrollStart", function () {
                    if (that.isMouseDown) {
                        that.isMouseDown = false;
                        that.isScrolling = true;

                        $(window).mouseup(function () {
                            setTimeout(function () {
                                that.isScrolling = false;
                            }, 100);
                        });
                    }
                });
            }
        }, 1000);

        this.resize();
        this.isOpen = true;
    },

    pause: function () {},

    resume: function () {},

    animateOut: function () {
        var that = this;

        for (var i = 0; i < this.posts.length; i++) {
            that.posts[i].animateOut(0);
        }

        TweenMax.to(this.el, 0.5, { autoAlpha: 0, delay: 0.5 });

        $(window).unbind("mousemove");

        this.isOpen = false;
    },

    resize: function () {
        var that = this;

        this.el.style.width = site.screenWidth + "px";
        this.el.style.height = site.screenHeight + "px";

        this.container.style.width = (site.screenWidth * 1) / ((site.screenHeight * 0.8) / 900) + "px";

        if (this.scroll) {
            this.scroll.refresh();
        }

        TweenMax.set(this.container, { scale: (site.screenHeight * 0.8) / 900, transformOrigin: "0% 50%" });
    },
};

var JH = JH || {};

JH.ProjectView = function (data) {
    this.data = data;
    this.init();
};

JH.ProjectView.prototype = {
    init: function () {
        var that = this;

        for (var i = 0; i < this.data.tags.length; i++) {
            if (that.data.tags[i].match("launch")) {
                that.launchUrl = "http://" + that.data.tags[i].split("_")[2];
            }
            if (that.data.tags[i].match("agency")) {
                that.agencyNameTxt = that.data.tags[i].split("_")[2];
            }
            if (that.data.tags[i].match("awards")) {
                that.awards = that.data.tags[i].split("_");
            }
            if (that.data.tags[i].match("buttonsurl")) {
                that.buttonsurl = that.data.tags[i].split("_");
            }
            if (that.data.tags[i].match("buttonsname")) {
                that.buttons = that.data.tags[i].split("_");
            }
            if (that.data.tags[i].match("videos")) {
                that.videosId = that.data.tags[i].split("_");
            }
        }

        //Init wrapper
        this.el = H.createEl("div", {
            position: "absolute",
            top: "0px",
            left: "0px",
            visibility: "hidden",
            overflow: "hidden",
            backgroundColor: "#1e1e1e",
            zIndex: "150",
        });

        this.container = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
            },
            this.el
        );

        this.scroller = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
                overflow: "hidden",
            },
            this.container
        );

        this.content = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
            },
            this.scroller
        );

        this.closeBtn = H.createImg(
            "assets/img/project/close.png",
            {
                position: "absolute",
                top: "12.5%",
                right: "12.5%",
                marginRight: "-38px",
                cursor: "pointer",
            },
            this.container
        );

        $(this.closeBtn).hover(function () {
            TweenMax.fromTo(that.closeBtn, 0.7, { rotation: 0 }, { rotation: 90, ease: Expo.easeOut });
        }, null);

        this.infos = H.createEl(
            "div",
            {
                position: "absolute",
                left: "87.5%",
                width: "12.5%",
                height: "auto",
                bottom: "12.5%",
                marginLeft: "10px",
                paddingBottom: "50px",
            },
            this.container
        );

        this.like = H.createImg(
            "assets/img/project/like.png",
            {
                position: "absolute",
                bottom: "0px",
                left: "0px",
                cursor: "pointer",
            },
            this.infos
        );

        $(this.like).hover(
            function () {
                TweenMax.to(that.like, 0.5, { opacity: 0.5 });
            },
            function () {
                TweenMax.to(that.like, 0.5, { opacity: 1 });
            }
        );

        $(this.like).click(function () {
            that.likePost();
            TweenMax.fromTo(that.like, 0.7, { scale: 1.3 }, { scale: 1, ease: Expo.easeOut });
        });

        this.reblog = H.createImg(
            "assets/img/project/reblog.png",
            {
                position: "absolute",
                bottom: "0px",
                left: "32px",
                cursor: "pointer",
            },
            this.infos
        );

        $(this.reblog).hover(
            function () {
                TweenMax.to(that.reblog, 0.5, { opacity: 0.5 });
            },
            function () {
                TweenMax.to(that.reblog, 0.5, { opacity: 1 });
            }
        );

        $(this.reblog).click(function () {
            that.reblogPost();
        });

        if (this.agencyNameTxt) {
            this.agencyContainer = H.createEl(
                "div",
                {
                    position: "relative",
                    width: "70%",
                    height: "auto",
                    paddingTop: "26px",
                    paddingBottom: "26px",
                    borderBottom: "1px solid rgba(255,255,255,0.5)",
                },
                this.infos
            );

            this.agencyTitle = H.createEl(
                "div",
                {
                    position: "relative",
                    fontFamily: "Open Sans Condensed,Arial,sans-serif",
                    fontSize: "12px",
                    fontWeight: "bold",
                    color: "#ffffff",
                    letterSpacing: "1px",
                },
                this.agencyContainer
            );

            this.agencyTitle.innerHTML = "AGENCY";

            this.agencyName = H.createEl(
                "div",
                {
                    position: "relative",
                    fontFamily: "Open Sans Condensed,Arial,sans-serif",
                    fontSize: "12px",
                    fontWeight: "lighter",
                    color: "#ffffff",
                    letterSpacing: "1px",
                    textTransform: "uppercase",
                },
                this.agencyContainer
            );

            this.agencyName.innerHTML = this.agencyNameTxt;
        }

        if (this.awards) {
            this.awardsContainer = H.createEl(
                "div",
                {
                    position: "relative",
                    width: "70%",
                    height: "auto",
                    paddingTop: "26px",
                    paddingBottom: "26px",
                    borderBottom: "1px solid rgba(255,255,255,0.5)",
                },
                this.infos
            );

            this.awardsTitle = H.createEl(
                "div",
                {
                    position: "relative",
                    fontFamily: "Open Sans Condensed,Arial,sans-serif",
                    fontSize: "12px",
                    fontWeight: "bold",
                    color: "#ffffff",
                    letterSpacing: "1px",
                },
                this.awardsContainer
            );

            this.awardsTitle.innerHTML = "AWARDS";

            for (var i = 2; i < this.awards.length; i++) {
                var awardsName = H.createEl(
                    "div",
                    {
                        position: "relative",
                        fontFamily: "Open Sans Condensed,Arial,sans-serif",
                        fontSize: "12px",
                        fontWeight: "lighter",
                        color: "#ffffff",
                        letterSpacing: "1px",
                        textTransform: "uppercase",
                    },
                    that.awardsContainer
                );

                awardsName.innerHTML = that.awards[i];
            }
        }

        if (this.launchUrl || this.buttons) {
            this.launchContainer = H.createEl(
                "div",
                {
                    position: "relative",
                    width: "70%",
                    height: "auto",
                    paddingTop: "26px",
                    paddingBottom: "26px",
                    borderBottom: "1px solid rgba(255,255,255,0.5)",
                },
                this.infos
            );

            if (this.launchUrl) {
                this.launchBtn = H.createEl(
                    "div",
                    {
                        position: "relative",
                        fontFamily: "Open Sans Condensed,Arial,sans-serif",
                        fontSize: "12px",
                        fontWeight: "bold",
                        color: "#ffffff",
                        letterSpacing: "1px",
                        cursor: "pointer",
                    },
                    this.launchContainer
                );

                this.launchBtn.innerHTML = "LAUNCH PROJECT";

                $(this.launchBtn).hover(
                    function () {
                        TweenMax.to(this, 0.3, { color: "#777777" });
                    },
                    function () {
                        TweenMax.to(this, 0.3, { color: "#ffffff" });
                    }
                );

                $(this.launchBtn).click(function () {
                    window.open(that.launchUrl, "_blank");
                });
            } else {
                for (var b = 2; b < this.buttons.length; b++) {
                    var button = H.createEl(
                        "div",
                        {
                            position: "relative",
                            fontFamily: "Open Sans Condensed,Arial,sans-serif",
                            fontSize: "12px",
                            fontWeight: "bold",
                            color: "#ffffff",
                            letterSpacing: "1px",
                            cursor: "pointer",
                            textTransform: "uppercase",
                        },
                        that.launchContainer
                    );

                    button.innerHTML = that.buttons[b];

                    jQuery.data(button, "url", that.buttonsurl[b]);

                    $(button).hover(
                        function () {
                            TweenMax.to(this, 0.3, { color: "#777777" });
                        },
                        function () {
                            TweenMax.to(this, 0.3, { color: "#ffffff" });
                        }
                    );

                    $(button).click(function () {
                        window.open(jQuery.data(this, "url"), "_blank");
                    });
                }
            }
        }

        this.sliderEl = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
                overflow: "hidden",
                zIndex: "5",
                backgroundColor: "#1e1e1e",
            },
            this.content
        );

        this.image = H.createImg(this.data.photos[0].original_size.url, { position: "absolute" }, this.sliderEl);

        this.gradient = H.createEl(
            "div",
            {
                position: "absolute",
                bottom: "0px",
                left: "0px",
                width: "100%",
                height: "380px",
                backgroundImage: "url(assets/img/project/gradient.png)",
                backgroundRepeat: "repeat-x",
            },
            this.sliderEl
        );

        this.otherImages = H.createEl(
            "div",
            {
                position: "absolute",
                width: "75%",
                height: "auto",
                left: "12.5%",
                top: "87.5%",
                marginTop: "20px",
                paddingBottom: site.screenHeight * 0.125 - 20 + "px",
            },
            this.content
        );

        if (this.videosId) {
            this.iframes = [];
            for (var v = 2; v < this.videosId.length; v++) {
                var iframe = new H.createEl(
                    "iframe",
                    {
                        position: "relative",
                        width: "100%",
                        height: site.screenWidth * 0.75 * (9 / 16) + "px",
                        display: "block",
                        marginBottom: "20px",
                    },
                    that.otherImages
                );

                iframe.setAttribute("frameborder", "0");
                iframe.setAttribute("allowsfullscreen", "true");

                iframe.src = "https://player.vimeo.com/video/" + that.videosId[v];

                that.iframes.push(iframe);
            }
        }

        for (var i = 1; i < this.data.photos.length; i++) {
            var image = H.createImg(
                that.data.photos[i].original_size.url,
                {
                    display: "block",
                    position: "relative",
                    width: "100%",
                    marginBottom: "20px",
                },
                that.otherImages
            );
        }

        this.upBtn = H.createImg(
            "assets/img/project/up.png",
            {
                position: "absolute",
                left: "50%",
                bottom: "6.25%",
                marginLeft: "-23px",
                marginBottom: "-14px",
                cursor: "pointer",
            },
            this.otherImages
        );

        $(this.upBtn).click(function () {
            TweenMax.to(that.scroller, 1, { scrollTo: 0, ease: Expo.easeInOut });
        });

        this.copy = H.createEl(
            "div",
            {
                position: "absolute",
                bottom: "0px",
                left: "0px",
                width: "100%",
                zIndex: "10",
            },
            this.content
        );

        this.textContainer = H.createEl(
            "div",
            {
                position: "absolute",
                left: "70px",
                bottom: "230px",
                width: "100%",
                height: "155px",
                overflow: "hidden",
            },
            this.copy
        );

        this.text = H.createEl(
            "div",
            {
                position: "absolute",
                left: "0px",
                top: "0px",
                fontFamily: "Open Sans,Arial,sans-serif",
                letterSpacing: "-6px",
                fontWeight: "bold",
                fontSize: "100px",
                color: "#ffffff",
                paddingLeft: "30px",
            },
            this.textContainer
        );

        this.text.innerHTML = that.data.caption.match(/<h2>(.*?)<\/h2>/)[1];

        this.descContainer = H.createEl(
            "div",
            {
                position: "absolute",
                left: "70px",
                bottom: "210px",
                width: "100%",
                height: "50px",
                overflow: "hidden",
            },
            this.copy
        );

        this.desc = H.createEl(
            "div",
            {
                position: "absolute",
                left: "0px",
                top: "0px",
                fontFamily: "Open Sans,Arial,sans-serif",
                letterSpacing: "-1px",
                fontSize: "30px",
                fontWeight: "lighter",
                paddingLeft: "30px",
                color: "rgba(255,255,255,0.7)",
            },
            this.descContainer
        );

        this.desc.innerHTML = that.data.caption.match(/<p>(.*?)<\/p>/)[1];

        $(this.scroller).scroll(function () {
            TweenMax.to(that.copy, 1, { y: -$(that.scroller).scrollTop() * 0.5, ease: Expo.easeOut });
        });

        $(this.closeBtn).click(function () {
            site.closeProject();
        });

        this.resize();

        //iframe for the like button
        this.likeFrame = H.createEl(
            "iframe",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
                width: "0px",
                height: "0px",
                opacity: "0",
            },
            this.el
        );
    },

    reblogPost: function () {
        window.open("http://www.tumblr.com/reblog/" + this.data.id + "/" + this.data.reblog_key, "_blank");
    },

    likePost: function () {
        var that = this;
        var url;
        /*if(this.isLiked){
            url = 'http://americanultrathemovie.tumblr.com/unlike/#' + this.data.reblog_key + '-' + this.data.id;
            this.isLiked = false;
            
        }
        else{*/
        url = "http://americanultrathemovie.tumblr.com/like/#" + this.data.reblog_key + "-" + this.data.id;
        //this.isLiked = true;
        //}
        this.likeFrame.src = url;
    },

    animateIn: function () {
        var that = this;

        TweenMax.fromTo(this.el, 1, { width: 0, autoAlpha: 1 }, { width: site.screenWidth, ease: Expo.easeInOut });
        TweenMax.fromTo(this.text, 1, { y: 155 }, { y: 0, ease: Expo.easeOut, delay: 1 });
        TweenMax.fromTo(this.desc, 1, { y: 50 }, { y: 0, ease: Expo.easeOut, delay: 1.5 });

        TweenMax.to(this.sliderEl, 2, {
            scale: 0.75,
            ease: Expo.easeInOut,
            delay: 2,
            onComplete: function () {
                that.scroller.style.overflowY = "scroll";
                that.infos.style.zIndex = "12";
            },
        });

        TweenMax.fromTo(this.otherImages, 1, { autoAlpha: 0, y: 100 }, { autoAlpha: 1, y: 0, ease: Expo.easeOut, delay: 4 });
    },

    animateOut: function (callback) {
        TweenMax.to(this.el, 1, {
            width: 0,
            ease: Expo.easeInOut,
            onComplete: function () {
                callback.call();
            },
        });
    },

    resize: function () {
        var that = this;

        this.el.style.width = this.scroller.style.width = this.container.style.width = site.screenWidth + "px";
        this.el.style.height = this.scroller.style.height = this.container.style.height = site.screenHeight + "px";

        this.content.style.width = site.screenWidth + "px";
        this.content.style.height = site.screenHeight + "px";

        this.sliderEl.style.width = site.screenWidth + "px";
        this.sliderEl.style.height = site.screenHeight + "px";

        if (this.otherImages) {
            this.otherImages.style.paddingBottom = site.screenHeight * 0.125 - 20 + "px";
            this.upBtn.style.bottom = (site.screenHeight * 0.125) / 2 + "px";
        }

        if (this.iframes) {
            for (var i = 0; i < this.iframes.length; i++) {
                this.iframes[i].style.height = site.screenWidth * 0.75 * (9 / 16) + "px";
            }
        }

        H.resizeToContainer(this.image, this.sliderEl, 1600 / 900);
    },
};

var JH = JH || {};

JH.AboutView = function (data) {
    this.data = data;
    this.init();
};

JH.AboutView.prototype = {
    init: function () {
        var that = this;

        //Init wrapper
        this.el = H.createEl("div", {
            position: "absolute",
            top: "0px",
            right: "-100px",
            width: "600px",
            height: "100%",
            overflow: "hidden",
            backgroundColor: "#dddddd",
            zIndex: "100",
        });

        TweenMax.set(this.el, { skewX: -5, x: 700 });

        this.container = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
                width: "100%",
                overflow: "hidden",
            },
            this.el
        );

        this.content = H.createEl(
            "div",
            {
                position: "relative",
                height: "auto",
                width: "100%",
                paddingBottom: "90px",
                paddingTop: "90px",
            },
            this.container
        );

        this.hello = H.createEl(
            "div",
            {
                position: "relative",
                fontSize: "120px",
                fontFamily: "Bebas, sans-serif",
                color: "#111",
                fontWeight: "bold",
                paddingLeft: "40px",
                paddingRight: "40px",
            },
            this.content
        );

        this.hello.innerHTML = "HELLO!";

        this.description = H.createEl(
            "div",
            {
                position: "relative",
                fontSize: "20px",
                fontFamily: "Open Sans Condensed,Arial,sans-serif",
                color: "#111",
                opacity: "0.7",
                fontWeight: "lighter",
                lineHeight: "23px",
                paddingLeft: "40px",
                paddingRight: "150px",
                marginTop: "30px",
            },
            this.content
        );

        this.description.innerHTML =
            "I'm Jean Helfenstein, a French Creative Technologist based in Sunny Los Angeles. I'm the co-founder of Black Rainbow, a boutique design studio focused on desining and developing interactive experiences.";

        this.contactHeader = H.createEl(
            "div",
            {
                position: "relative",
                marginTop: "30px",
                fontFamily: "Open Sans Condensed,Arial,sans-serif",
                fontSize: "24px",
                fontWeight: "bold",
                color: "#000",
                marginLeft: "40px",
                marginRight: "150px",
                borderBottom: "1px solid rgba(0,0,0,0.5)",
            },
            this.content
        );

        this.contactHeader.innerHTML = "GET IN TOUCH";

        this.contactContainer = H.createEl(
            "div",
            {
                position: "relative",
                paddingLeft: "40px",
                paddingRight: "150px",
                marginTop: "10px",
            },
            this.content
        );

        var contactContainer = H.createEl(
            "div",
            {
                position: "relative",
                height: "22px",
                width: "100%",
            },
            that.contactContainer
        );

        var contactName = H.createEl(
            "div",
            {
                position: "absolute",
                top: "0px",
                left: "0px",
                fontFamily: "Open Sans Condensed,Arial,sans-serif",
                fontSize: "14px",
                fontWeight: "lighter",
                color: "#000",
                textTransform: "uppercase",
            },
            contactContainer
        );

        contactName.innerHTML = "jean.helfenstein@gmail.com";

        $(contactName).hover(
            function () {
                TweenMax.to(this, 0.5, { opacity: 0.5 });
            },
            function () {
                TweenMax.to(this, 0.5, { opacity: 1 });
            }
        );

        H.createLink(contactName, "mailto:jean.helfenstein@gmail.com", "_blank");

        this.followHeader = H.createEl(
            "div",
            {
                position: "relative",
                marginTop: "30px",
                fontFamily: "Open Sans Condensed,Arial,sans-serif",
                fontSize: "24px",
                fontWeight: "bold",
                color: "#000",
                marginLeft: "40px",
                marginRight: "150px",
                borderBottom: "1px solid rgba(0,0,0,0.5)",
            },
            this.content
        );

        this.followHeader.innerHTML = "FOLLOW";

        this.followContainer = H.createEl(
            "div",
            {
                position: "relative",
                paddingLeft: "40px",
                paddingRight: "150px",
                marginTop: "10px",
            },
            this.content
        );

        for (var i = 0; i < site.data.follow.length; i++) {
            var followContainer = H.createEl(
                "div",
                {
                    position: "relative",
                    height: "22px",
                    width: "100%",
                },
                that.followContainer
            );

            var followName = H.createEl(
                "div",
                {
                    position: "absolute",
                    top: "0px",
                    left: "0px",
                    fontFamily: "Open Sans Condensed,Arial,sans-serif",
                    fontSize: "14px",
                    fontWeight: "lighter",
                    color: "#000",
                    textTransform: "uppercase",
                },
                followContainer
            );

            followName.innerHTML = site.data.follow[i].name;

            $(followName).hover(
                function () {
                    TweenMax.to(this, 0.5, { opacity: 0.5 });
                },
                function () {
                    TweenMax.to(this, 0.5, { opacity: 1 });
                }
            );

            H.createLink(followName, site.data.follow[i].link, "_blank");
        }

        this.awardsHeader = H.createEl(
            "div",
            {
                position: "relative",
                marginTop: "30px",
                fontFamily: "Open Sans Condensed,Arial,sans-serif",
                fontSize: "24px",
                fontWeight: "bold",
                color: "#000",
                marginLeft: "40px",
                marginRight: "150px",
                borderBottom: "1px solid rgba(0,0,0,0.5)",
            },
            this.content
        );

        this.awardsHeader.innerHTML = "AWARDS";

        this.awardsContainer = H.createEl(
            "div",
            {
                position: "relative",
                paddingLeft: "40px",
                paddingRight: "150px",
                marginTop: "10px",
            },
            this.content
        );

        for (var i = 0; i < site.data.awards.length; i++) {
            var awardContainer = H.createEl(
                "div",
                {
                    position: "relative",
                    height: "22px",
                    width: "100%",
                },
                that.awardsContainer
            );

            var awardName = H.createEl(
                "div",
                {
                    position: "absolute",
                    top: "0px",
                    left: "0px",
                    fontFamily: "Open Sans Condensed,Arial,sans-serif",
                    fontSize: "14px",
                    fontWeight: "lighter",
                    color: "#000",
                    cursor: "pointer",
                },
                awardContainer
            );

            awardName.innerHTML = site.data.awards[i].name;

            $(awardName).hover(
                function () {
                    TweenMax.to(this, 0.5, { opacity: 0.5 });
                },
                function () {
                    TweenMax.to(this, 0.5, { opacity: 1 });
                }
            );

            H.createLink(awardName, site.data.awards[i].link, "_blank");

            var awardProject = H.createEl(
                "div",
                {
                    position: "absolute",
                    top: "0px",
                    left: "50%",
                    fontFamily: "Open Sans Condensed,Arial,sans-serif",
                    fontSize: "14px",
                    fontWeight: "lighter",
                    color: "#000",
                    opacity: "0.5",
                },
                awardContainer
            );

            awardProject.innerHTML = site.data.awards[i].project;
        }

        this.pressHeader = H.createEl(
            "div",
            {
                position: "relative",
                marginTop: "30px",
                fontFamily: "Open Sans Condensed,Arial,sans-serif",
                fontSize: "24px",
                fontWeight: "bold",
                color: "#000",
                marginLeft: "40px",
                marginRight: "150px",
                borderBottom: "1px solid rgba(0,0,0,0.5)",
            },
            this.content
        );

        this.pressHeader.innerHTML = "PRESS";

        this.pressContainer = H.createEl(
            "div",
            {
                position: "relative",
                paddingLeft: "40px",
                paddingRight: "150px",
                marginTop: "10px",
            },
            this.content
        );

        for (var i = 0; i < site.data.press.length; i++) {
            var pressContainer = H.createEl(
                "div",
                {
                    position: "relative",
                    height: "22px",
                    width: "100%",
                },
                that.pressContainer
            );

            var pressName = H.createEl(
                "div",
                {
                    position: "absolute",
                    top: "0px",
                    left: "0px",
                    fontFamily: "Open Sans Condensed,Arial,sans-serif",
                    fontSize: "14px",
                    fontWeight: "lighter",
                    color: "#000",
                },
                pressContainer
            );

            pressName.innerHTML = site.data.press[i].name;

            $(pressName).hover(
                function () {
                    TweenMax.to(this, 0.5, { opacity: 0.5 });
                },
                function () {
                    TweenMax.to(this, 0.5, { opacity: 1 });
                }
            );

            H.createLink(pressName, site.data.press[i].link, "_blank");
        }
    },

    animateIn: function () {
        var that = this;

        TweenMax.to(this.el, 1.5, { x: 0, ease: Expo.easeInOut, delay: 0.5 });

        if (!this.scroll) {
            that.scroll = new IScroll(that.container, {
                scrollbars: "custom",
                mouseWheel: true,
                scrollX: false,
                scrollY: true,
                interactiveScrollbars: true,
                resizeScrollbars: false,
            });
        }
    },

    animateOut: function () {
        TweenMax.to(this.el, 1, { x: 700, ease: Expo.easeInOut });
    },

    resize: function () {
        var that = this;

        this.container.style.height = site.screenHeight + "px";

        if (this.scroll) {
            this.scroll.refresh();
        }
    },
};

var JH = JH || {};

JH.AboutFaceView = function () {
    this.mouseX = 0;
    this.mouseY = 0;

    this.init();
};

JH.AboutFaceView.prototype = {
    init: function () {
        var that = this;

        //Init wrapper
        this.el = H.createEl("div", {
            position: "absolute",
            top: "0px",
            left: "0px",
            width: "100%",
            height: "100%",
            background: "#111",
            overflow: "hidden",
            visibility: "hidden",
            opacity: "0",
        });

        this.renderer = new THREE.WebGLRenderer({ alpha: false });
        this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);
        this.scene = new THREE.Scene();
        this.renderer.setClearColor(0x111111, 1);
        this.scene.fog = new THREE.FogExp2(0x111111, 0.005);
        this.camera.position.z = 375;
        this.camera.lookAt(new THREE.Vector3());
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.el.appendChild(this.renderer.domElement);

        this.renderer.domElement.style.marginLeft = "-10%";

        var light = new THREE.PointLight(0xffffff, 1);
        light.position.y = 200;
        light.position.x = 200;
        light.position.z = 400;
        this.scene.add(light);

        this.material = new THREE.MeshLambertMaterial({ color: 0xffffff, map: THREE.ImageUtils.loadTexture("assets/3d/NeutralBW.png") });

        this.loader = new THREE.OBJLoader();
        this.loader.load("assets/3d/Neutral.obj", function (object) {
            that.model = object.children[0];
            that.model.geometry.computeVertexNormals(true);
            that.scene.add(that.model);
            that.model.material = that.material;

            that.eyeRight = new THREE.Mesh(new THREE.SphereGeometry(15, 16), new THREE.MeshBasicMaterial({ color: 0xffffff, map: THREE.ImageUtils.loadTexture("assets/3d/eyeBW.png") }));
            that.eyeRight.position.set(31, 30, 26);
            that.eyeRight.rotation.y = -Math.PI / 2;
            that.scene.add(that.eyeRight);

            that.eyeLeft = new THREE.Mesh(new THREE.SphereGeometry(15, 16), new THREE.MeshBasicMaterial({ color: 0xffffff, map: THREE.ImageUtils.loadTexture("assets/3d/eyeBW.png") }));
            that.eyeLeft.position.set(-30, 33, 26);
            that.eyeLeft.rotation.y = -Math.PI / 2;
            that.scene.add(that.eyeLeft);
        });
    },

    animateIn: function () {
        this.shouldLoop = true;
        this.loop();

        TweenMax.fromTo(this.el, 1, { width: 0, autoAlpha: 1 }, { width: "100%", ease: Expo.easeInOut });

        TweenMax.fromTo([this.model.position], 2, { z: -200 }, { z: 0, delay: 1 });
        TweenMax.fromTo([this.eyeRight.position, this.eyeLeft.position], 2, { z: -174 }, { z: 26, delay: 1 });

        //document.addEventListener( 'mousemove', $.proxy(this.onDocumentMouseMove,this), false );
        $(window).mousemove($.proxy(this.onDocumentMouseMove, this));
    },

    animateOut: function () {
        var that = this;

        $(window).unbind("mousemove");

        this.shouldLoop = false;

        TweenMax.to(this.el, 1, {
            width: 0,
            ease: Expo.easeInOut,
            delay: 0.5,
            onComplete: function () {
                that.el.style.visibility = "hidden";
            },
        });
    },

    onDocumentMouseMove: function (event) {
        this.mouseX = (event.clientX - window.innerWidth / 2) / 4;
        this.mouseY = (event.clientY - window.innerHeight / 2) / 4;
    },

    loop: function () {
        if (this.shouldLoop) {
            requestAnimationFrame($.proxy(this.loop, this));
        } else {
            return;
        }

        this.camera.position.x += (-this.mouseX - this.camera.position.x) * 0.05;
        this.camera.position.y += (this.mouseY - this.camera.position.y) * 0.05;

        this.eyeRight.rotation.x += (this.mouseY * 0.0015 - this.eyeRight.rotation.x) * 0.05;
        this.eyeRight.rotation.y += (this.mouseX * 0.0025 - Math.PI / 2 - this.eyeRight.rotation.y) * 0.05;

        this.eyeLeft.rotation.x += (this.mouseY * 0.0015 - this.eyeLeft.rotation.x) * 0.05;
        this.eyeLeft.rotation.y += (this.mouseX * 0.0025 - Math.PI / 2 - this.eyeLeft.rotation.y) * 0.05;

        this.camera.lookAt(new THREE.Vector3());

        this.renderer.render(this.scene, this.camera);
    },

    resize: function () {
        var that = this;

        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
    },
};

//@codekit-prepend "libs/jquery.min.js";
//@codekit-prepend "libs/jquery.migrate.min.js";
//@codekit-prepend "libs/jquery.royalslider.min.js";
//@codekit-prepend "libs/iscroll.js";
//@codekit-prepend "libs/jquery.scrollpanel.js";
//@codekit-prepend "libs/jquery.mousewheel.js";
//@codekit-prepend "libs/h.js";
//@codekit-prepend "libs/PxLoader.js";
//@codekit-prepend "libs/PxLoaderImage.js";
//@codekit-prepend "libs/PxLoaderVideo.js";
//@codekit-prepend "libs/jquery.easing.1.3.js";
//@codekit-prepend "libs/packery.min.js";
//@codekit-prepend "libs/three.min.js";
//@codekit-prepend "libs/scrollToPlugin.min.js";
//@codekit-prepend "libs/OBJLoader.js";
//@codekit-prepend "libs/underscore-min.js";

//@codekit-prepend "libs/postprocessing/RenderPass.js";
//@codekit-prepend "libs/postprocessing/ShaderPass.js";
//@codekit-prepend "libs/postprocessing/EffectComposer.js";
//@codekit-prepend "libs/postprocessing/ShaderExtras.js";
//@codekit-prepend "libs/postprocessing/MaskPass.js";
//@codekit-prepend "libs/shaders/HorizontalBlurShader.js";
//@codekit-prepend "libs/shaders/VerticalBlurShader.js";
//@codekit-prepend "libs/shaders/CopyShader.js";

//@codekit-prepend "ui/ImagePost.js";
//@codekit-prepend "ui/TextPost.js";
//@codekit-prepend "ui/ArtistProject.js";
//@codekit-prepend "ui/DeveloperProject.js";

//@codekit-prepend "views/LoaderView.js";
//@codekit-prepend "views/HomeView.js";
//@codekit-prepend "views/ArtistView.js";
//@codekit-prepend "views/DeveloperView.js";
//@codekit-prepend "views/ProjectView.js";
//@codekit-prepend "views/AboutView.js";
//@codekit-prepend "views/AboutFaceView.js";

var JH = JH || {};

// Class 'Site' : Main class
JH.Site = function () {
    this.init();
};

//Site class prototype
JH.Site.prototype = {
    //Function : init the site
    init: function () {
        var that = this;

        this.loader = new PxLoader();

        //Init wrapper
        this.wrapper = H.createEl(
            "div",
            {
                position: "relative",
                backgroundColor: "#000000",
            },
            document.body
        );

        this.scroller = H.createEl(
            "div",
            {
                position: "relative",
                width: "100%",
                height: "auto",
            },
            this.wrapper
        );

        //Load xml
        $.ajax({
            type: "GET",
            url: "json/site.json",
            dataType: "jsonp",
            crossDomain: "true",
            success: $.proxy(that.parseData, that),
            jsonpCallback: "callback",
        });
    },

    parseData: function (data) {
        var that = this;

        //Init data
        this.data = data;

        this.home = new JH.HomeView();
        this.scroller.appendChild(this.home.el);

        this.artistView = new JH.ArtistView();
        this.developerView = new JH.DeveloperView();

        this.aboutFaceView = new JH.AboutFaceView();
        this.wrapper.appendChild(this.aboutFaceView.el);

        this.aboutView = new JH.AboutView();
        this.wrapper.appendChild(this.aboutView.el);

        this.aboutButton = H.createEl(
            "div",
            {
                position: "absolute",
                top: "20px",
                right: "20px",
                color: "#fff",
                fontSize: "19px",
                cursor: "pointer",
                fontFamily: "Bebas, serif",
                zIndex: "110",
            },
            this.wrapper
        );

        this.aboutButton.innerHTML = "ABOUT";

        this.aboutButtonLine = H.createEl(
            "div",
            {
                position: "absolute",
                top: "47px",
                right: "0px",
                width: "0px",
                height: "1px",
                backgroundColor: "#fff",
                zIndex: "110",
            },
            this.wrapper
        );

        TweenMax.set(this.aboutButton, { skewX: -5 });

        $(this.aboutButton).click(function () {
            if (!that.isAbout) {
                that.getAbout();
            } else {
                that.closeAbout();
            }
        });

        $(this.aboutButton).hover(
            function () {
                TweenMax.to(that.aboutButtonLine, 0.5, { width: $(that.aboutButton).width() + 20, ease: Expo.easeOut });
                that.isAboutOver = true;
            },
            function () {
                TweenMax.to(that.aboutButtonLine, 0.5, { width: 0, ease: Expo.easeOut });
                that.isAboutOver = false;
            }
        );

        $(this.overlay).click(function () {
            that.closeAbout();
        });

        this.loader = H.createImg(
            "assets/img/loader/loader.gif",
            {
                position: "absolute",
                top: "50%",
                left: "50%",
                marginLeft: "-17px",
                marginTop: "-17px",
                zIndex: "10",
                display: "none",
                opacity: "0",
            },
            this.scroller
        );

        $(window).resize($.proxy(this.resize, this));
        this.resize();
    },

    closeAbout: function () {
        var that = this;

        //TweenMax.to(this.overlay,1,{opacity:0,display:'none',ease:Expo.easeOut});
        this.aboutFaceView.animateOut();
        if (!this.home.isArtist && !this.home.isDeveloper) {
            this.home.resume();
        }

        this.aboutButton.innerHTML = "ABOUT";
        this.aboutButton.style.color = "#fff";
        this.aboutButtonLine.style.backgroundColor = "#fff";
        if (that.isAboutOver) {
            TweenMax.to(that.aboutButtonLine, 0.5, { width: $(that.aboutButton).width() + 20, ease: Expo.easeOut });
        }

        this.aboutView.animateOut();

        this.isAbout = false;
    },

    getAbout: function () {
        var that = this;

        this.blur = 0;
        /*TweenMax.to(this,1,{blur:7,onUpdate:function(){
			that.home.el.style.webkitFilter = 'blur('+that.blur+'px)';
		}});*/
        //this.overlay.style.display = 'block';
        //TweenMax.to(this.overlay,1,{opacity:1,display:'block',ease:Expo.easeOut});

        this.home.pause();
        this.aboutFaceView.animateIn();

        this.aboutButton.innerHTML = "CLOSE";
        this.aboutButton.style.color = "#000";
        this.aboutButtonLine.style.backgroundColor = "#000";
        if (that.isAboutOver) {
            TweenMax.to(that.aboutButtonLine, 0.5, { width: $(that.aboutButton).width() + 20, ease: Expo.easeOut });
        }

        this.aboutView.animateIn();

        this.isAbout = true;
    },

    getArtist: function () {
        var that = this;

        TweenMax.to(this.loader, 0.5, { display: "block", opacity: 1, delay: 1 });

        that.artistView.loadPosts(function () {
            that.home.wrapperRight.appendChild(that.artistView.el);
            TweenMax.killTweensOf(that.loader);
            TweenMax.to(that.loader, 0.5, { display: "none", opacity: 0 });
        });
    },

    getDeveloper: function () {
        var that = this;

        TweenMax.to(this.loader, 0.5, { display: "block", opacity: 1, delay: 1 });

        that.developerView.loadPosts(function () {
            that.home.wrapperLeft.appendChild(that.developerView.el);
            TweenMax.killTweensOf(that.loader);
            TweenMax.to(that.loader, 0.5, { display: "none", opacity: 0 });
        });
    },

    getProject: function (data) {
        this.project = new JH.ProjectView(data);
        this.wrapper.appendChild(this.project.el);
        this.project.animateIn();
    },

    closeProject: function () {
        var that = this;

        this.project.animateOut(function () {
            that.wrapper.removeChild(that.project.el);
            that.project = null;
        });
    },

    parseTumblr: function () {
        var that = this;

        this.projects = [];

        var projectContainer = H.createEl(
            "div",
            {
                position: "realtive",
                width: "100%",
            },
            this.content
        );

        this.projects.push(projectContainer);

        this.posts = [];

        for (var i = 0; i < this.tumblrData.length; i++) {
            var post;
            if (that.tumblrData[i].type == "photo") {
                post = new JH.ImagePost(that.tumblrData[i]);
            }
            if (post) {
                projectContainer.appendChild(post.el);
                that.posts.push(post);
            }
        }

        this.loader.start();

        this.loader.addCompletionListener($.proxy(this.onLoaded, this));
        this.loader.addProgressListener(function (e) {
            console.log(e.completedCount + "/" + e.totalCount);
            var perc = e.completedCount / e.totalCount;
        });

        this.resize();
    },

    onLoaded: function () {
        var that = this;

        for (var i = 0; i < this.projects.length; i++) {
            var pckry = new Packery(this.projects[i], {
                // options
                itemSelector: ".post",
                gutter: 0,
                transitionDuration: 0,
            });

            pckry.bindResize();
        }

        this.resize();
    },

    resize: function () {
        var that = this;

        this.screenWidth = $(window).width();
        this.screenHeight = $(window).height();

        this.wrapper.style.width = this.screenWidth + "px";
        this.wrapper.style.height = this.screenHeight + "px";

        this.home.resize();
        this.artistView.resize();
        this.developerView.resize();

        this.aboutView.resize();
        this.aboutFaceView.resize();

        if (this.project) {
            this.project.resize();
        }
    },
};

var site;
$(document).ready(function () {
    site = new JH.Site();
});
